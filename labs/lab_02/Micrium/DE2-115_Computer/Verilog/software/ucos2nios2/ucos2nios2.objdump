
ucos2nios2.elf:     file format elf32-littlenios2
ucos2nios2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000248

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001a360 memsz 0x0001a360 flags r-x
    LOAD off    0x0001b380 vaddr 0x0001a380 paddr 0x0001c200 align 2**12
         filesz 0x00001e80 memsz 0x00001e80 flags rw-
    LOAD off    0x0001e080 vaddr 0x0001e080 paddr 0x0001e080 align 2**12
         filesz 0x00000000 memsz 0x00009414 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001963c  00000248  00000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000afc  00019884  00019884  0001a884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001e80  0001a380  0001c200  0001b380  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00009414  0001e080  0001e080  0001e080  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00027494  00027494  0001d200  2**0
                  CONTENTS
  7 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM 00000000  09000000  09000000  0001d200  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001d200  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001078  00000000  00000000  0001d228  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002f6d2  00000000  00000000  0001e2a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b045  00000000  00000000  0004d972  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e712  00000000  00000000  000589b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000386c  00000000  00000000  000670cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00005506  00000000  00000000  0006a938  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000178aa  00000000  00000000  0006fe3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  000876e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018c0  00000000  00000000  00087708  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  0008e58d  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  0008e593  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0008e598  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0008e599  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0008e59a  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0008e59e  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0008e5a2  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0008e5a6  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0008e5af  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0008e5b8  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000f  00000000  00000000  0008e5c1  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000004e  00000000  00000000  0008e5d0  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     001d2080  00000000  00000000  0008e61e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000248 l    d  .text	00000000 .text
00019884 l    d  .rodata	00000000 .rodata
0001a380 l    d  .rwdata	00000000 .rwdata
0001e080 l    d  .bss	00000000 .bss
00027494 l    d  .SDRAM	00000000 .SDRAM
09000000 l    d  .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM	00000000 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../ucos2nios2_bsp//obj/HAL/src/crt0.o
00000280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 impure.c
0001a380 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00019e62 l     O .rodata	00000010 zeroes.4404
00002ff0 l     F .text	000000bc __sbprintf
00019e72 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00003200 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00004d30 l     F .text	00000008 __fp_unlock
00004d44 l     F .text	0000019c __sinit.part.1
00004ee0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
0001a7c4 l     O .rwdata	00000020 lc_ctype_charset
0001a7a4 l     O .rwdata	00000020 lc_message_charset
0001a7e4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00019ea0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
000082dc l     F .text	000000fc __sprint_r.part.0
00019fd4 l     O .rodata	00000010 blanks.4348
00019fc4 l     O .rodata	00000010 zeroes.4349
00009868 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000d524 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000d630 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000d65c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000d748 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000d828 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000d914 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0000dae0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001c174 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000dd2c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0001c178 l     O .rwdata	00000004 lockid
0001e0d8 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0001c17c l     O .rwdata	00000004 lockid
0001e0e0 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0000f75c l     F .text	00000048 OS_InitMisc
0000f7a4 l     F .text	0000006c OS_InitRdyList
0000f910 l     F .text	000000e4 OS_InitTCBList
0000f67c l     F .text	000000e0 OS_InitEventList
0000f810 l     F .text	00000080 OS_InitTaskIdle
0000f890 l     F .text	00000080 OS_InitTaskStat
0000fb80 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
000118a0 l     F .text	000000f4 OS_FlagTaskRdy
00011660 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00015950 l     F .text	00000034 alt_dev_reg
0001adcc l     O .rwdata	0000106c JTAG_UART
0001be38 l     O .rwdata	00000030 AV_Config
0001be68 l     O .rwdata	00000030 Audio_Subsystem_Audio
0001be98 l     O .rwdata	0000002c Char_LCD_16x2
0001bec4 l     O .rwdata	0000002c IrDA
0001bef0 l     O .rwdata	00000038 PS2_Port
0001bf28 l     O .rwdata	00000038 PS2_Port_Dual
0001bf60 l     O .rwdata	0000002c Serial_Port
0001bf8c l     O .rwdata	00000034 USB
0001bfc0 l     O .rwdata	0000005c VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA
0001c01c l     O .rwdata	0000005c VGA_Subsystem_VGA_Pixel_DMA
0001c078 l     O .rwdata	0000005c Video_In_Subsystem_Video_In_DMA
0001c0d4 l     O .rwdata	00000044 VGA_Subsystem_VGA_Pixel_RGB_Resampler
0001c118 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000165c8 l     F .text	000002a8 altera_avalon_jtag_uart_irq
00016870 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0001704c l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00018548 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000187ac l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00018a6c l     F .text	0000003c alt_get_errno
00018aa8 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0001e144 g     O .bss	00000004 alt_instruction_exception_handler
00007920 g     F .text	00000074 _mprec_log10
0001c1ca g     O .rwdata	00000002 OSTaskNameSize
00007a0c g     F .text	0000008c __any_on
00009e04 g     F .text	00000054 _isatty_r
00019eac g     O .rodata	00000028 __mprec_tinytens
0000da24 g     F .text	000000bc alt_main
00000c70 g     F .text	000000c0 _puts_r
00027394 g     O .bss	00000100 alt_irq
00017c08 g     F .text	00000060 alt_up_ps2_disable_read_interrupt
00009e58 g     F .text	00000060 _lseek_r
000120c0 g     F .text	000000cc OS_MemInit
0001c200 g       *ABS*	00000000 __flash_rwdata_start
000158f0 g     F .text	00000060 OSTimeSet
000171b0 g     F .text	00000040 alt_up_character_lcd_send_cmd
0000c050 g     F .text	00000088 .hidden __eqdf2
0000e3d0 g     F .text	00000610 OSEventPendMulti
00027494 g       *ABS*	00000000 __alt_heap_start
000190b4 g     F .text	00000024 OSTaskCreateHook
0001c1a2 g     O .rwdata	00000002 OSMboxEn
0000ea38 g     F .text	0000004c OSIntEnter
0000a070 g     F .text	0000009c _wcrtomb_r
0000819c g     F .text	0000005c __sseek
00005080 g     F .text	00000010 __sinit
00009f18 g     F .text	00000140 __swbuf_r
00017a20 g     F .text	00000034 read_CE_bit
0001c1b2 g     O .rwdata	00000002 OSQEn
00005b48 g     F .text	0000007c _setlocale_r
00004ee8 g     F .text	00000068 __sfmoreglue
0000e0a4 g     F .text	000000cc __malloc_unlock
0001911c g     F .text	00000020 OSTaskStatHook
00017da8 g     F .text	0000009c alt_up_ps2_read_data_byte_timeout
0001829c g     F .text	00000090 alt_up_rs232_read_fd
0001e0e8 g     O .bss	00000001 OSLockNesting
0001c1f0 g     O .rwdata	00000002 OSDataSize
0001e0e9 g     O .bss	00000001 OSRunning
00006818 g     F .text	0000015c memmove
0001915c g     F .text	00000020 OSInitHookBegin
0001c1e8 g     O .rwdata	00000002 OSTmrSize
00005068 g     F .text	00000018 _cleanup
00006a9c g     F .text	000000a8 _Balloc
0001e0ec g     O .bss	00000004 OSIdleCtr
0000c0d8 g     F .text	000000dc .hidden __gtdf2
00018e64 g     F .text	00000024 altera_nios2_gen2_irq_init
00018f34 g       .text	00000000 OSStartTsk
0001713c g     F .text	00000074 get_DDRAM_addr
0000fec0 g     F .text	000002d4 OS_TCBInit
00000000 g     F .entry	0000001c __reset
0001c1ee g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
0001c18e g     O .rwdata	00000002 OSEventSize
0001e0f0 g     O .bss	00000001 OSPrioHighRdy
00009da8 g     F .text	0000005c _fstat_r
000190d8 g     F .text	00000024 OSTaskDelHook
0001e0c4 g     O .bss	00000004 errno
00008118 g     F .text	00000008 __seofread
00018f14 g       .text	00000000 OSStartHighRdy
0001438c g     F .text	000001e4 OSTaskCreateExt
00000284 g     F .text	000000e0 Get_state_name
000111a8 g     F .text	00000060 OSFlagPendGetFlagsRdy
0001c1ce g     O .rwdata	00000002 OSTaskStatStkSize
00010324 g     F .text	00000308 OSFlagAccept
000126f8 g     F .text	000000b8 OSQFlush
0001218c g     F .text	00000140 OSQAccept
0001e0d0 g     O .bss	00000004 alt_argv
00024144 g       *ABS*	00000000 _gp
000141e0 g     F .text	000001ac OSTaskCreate
00013cf0 g     F .text	000004f0 OSTaskChangePrio
0001e0e4 g     O .bss	00000004 alt_heapsem
0001e080 g     O .bss	00000004 prev_state
00010194 g     F .text	00000190 OSDebugInit
00014570 g     F .text	00000344 OSTaskDel
000009b4 g     F .text	000000c4 Task_state_timer
0001ac4c g     O .rwdata	00000180 alt_fd_list
00024170 g     O .bss	00000370 OSFlagTbl
0000f45c g     F .text	000000b8 OS_EventTaskRemove
000186e8 g     F .text	00000090 alt_find_dev
000066d0 g     F .text	00000148 memcpy
0001c1b8 g     O .rwdata	00000002 OSRdyTblSize
00017358 g     F .text	00000050 alt_up_character_lcd_write_fd
00004d38 g     F .text	0000000c _cleanup_r
0000d33c g     F .text	000000dc .hidden __floatsidf
00018870 g     F .text	0000007c alt_io_redirect
0000c1b4 g     F .text	000000f4 .hidden __ltdf2
00019884 g       *ABS*	00000000 __DTOR_END__
000178f0 g     F .text	00000090 alt_up_irda_write_fd
00018228 g     F .text	00000074 alt_up_rs232_read_data
00000d30 g     F .text	00000014 puts
00019454 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000e170 g     F .text	00000120 OSEventNameGet
0001c19c g     O .rwdata	00000002 OSFlagMax
00007ffc g     F .text	00000074 __fpclassifyd
0000787c g     F .text	000000a4 __ratio
0000ea84 g     F .text	000000f8 OSIntExit
0000984c g     F .text	0000001c __vfiprintf_internal
0001c1d6 g     O .rwdata	00000002 OSTCBSize
0001e0f1 g     O .bss	00000001 OSPrioCur
0001e084 g     O .bss	00000004 KEY2_flag
000176ec g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
00016acc g     F .text	000002bc altera_avalon_jtag_uart_read
0000ae00 g     F .text	00000064 .hidden __udivsi3
0000d784 g     F .text	000000a4 isatty
0001c1bc g     O .rwdata	00000002 OSStkWidth
00019efc g     O .rodata	000000c8 __mprec_tens
0001c1b0 g     O .rwdata	00000002 OSPtrSize
00005bc4 g     F .text	0000000c __locale_charset
0001c190 g     O .rwdata	00000002 OSEventTblSize
0001768c g     F .text	00000060 alt_up_irda_disable_read_interrupt
00018e88 g       .text	00000000 OSCtxSw
000193c4 g     F .text	00000090 alt_icache_flush
0001e0c0 g     O .bss	00000004 __malloc_top_pad
0001e0f4 g     O .bss	00000004 OSTCBList
0001e0c8 g     O .bss	00000004 alt_fd_list_lock
0001c14c g     O .rwdata	00000004 __mb_cur_max
00005bf4 g     F .text	0000000c _localeconv_r
00006ea8 g     F .text	0000003c __i2b
00005504 g     F .text	000004bc __sfvwrite_r
000244e0 g     O .bss	00000c30 OSMemTbl
0001e0f8 g     O .bss	00000001 OSTickStepState
00008070 g     F .text	00000054 _sbrk_r
0001c1b4 g     O .rwdata	00000002 OSQMax
00025110 g     O .bss	00000800 OSTaskStatStk
00011cfc g     F .text	000000f0 OSMemNameGet
0001c194 g     O .rwdata	00000002 OSFlagEn
00009eb8 g     F .text	00000060 _read_r
0001c1da g     O .rwdata	00000002 OSTimeTickHookEn
00012ba8 g     F .text	00000168 OSQPost
00011994 g     F .text	000000a4 OS_FlagUnlink
0001c16c g     O .rwdata	00000004 alt_max_fd
000181a4 g     F .text	00000044 alt_up_rs232_check_parity
0000fa48 g     F .text	00000068 OS_MemCopy
0000fab0 g     F .text	000000d0 OS_Sched
00009a9c g     F .text	000000f0 _fclose_r
00011c0c g     F .text	000000f0 OSMemGet
00014b9c g     F .text	000001b4 OSTaskNameSet
00017a54 g     F .text	00000030 read_num_bytes_available
0001e088 g     O .bss	00000004 state_timer
00004d00 g     F .text	00000030 fflush
0001e0bc g     O .bss	00000004 __malloc_max_sbrked_mem
0001e0fc g     O .bss	00000004 OSCtxSwCtr
0001913c g     F .text	00000020 OSTimeTickHook
000188ec g     F .text	00000180 alt_irq_register
0001c19e g     O .rwdata	00000002 OSFlagNameSize
000179bc g     F .text	00000034 read_RI_bit
0000f514 g     F .text	00000100 OS_EventTaskRemoveMulti
0000aebc g     F .text	000008ac .hidden __adddf3
0000f30c g     F .text	00000150 OS_EventTaskWaitMulti
00007624 g     F .text	0000010c __b2d
0001c1b6 g     O .rwdata	00000002 OSQSize
0000a7d0 g     F .text	00000538 .hidden __umoddi3
0000d950 g     F .text	000000d4 lseek
00013658 g     F .text	0000020c OSSemPend
0001c144 g     O .rwdata	00000004 _global_impure_ptr
00007a98 g     F .text	00000564 _realloc_r
0001c1a0 g     O .rwdata	00000002 OSLowestPrio
00027494 g       *ABS*	00000000 __bss_end
000191bc g     F .text	00000024 OSTCBInitHook
0001c1e6 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00018d5c g     F .text	00000108 alt_tick
0000a258 g     F .text	00000578 .hidden __udivdi3
00009d04 g     F .text	00000024 _fputwc_r
0001c188 g     O .rwdata	00000002 OSEventEn
00019ed4 g     O .rodata	00000028 __mprec_bigtens
00006c8c g     F .text	00000104 __s2b
0001c1e2 g     O .rwdata	00000002 OSTmrCfgNameSize
0000d418 g     F .text	000000a8 .hidden __floatunsidf
00007364 g     F .text	00000060 __mcmp
00017ab8 g     F .text	0000002c read_data_byte
000050a0 g     F .text	00000018 __fp_lock_all
000117c0 g     F .text	000000e0 OS_FlagInit
0001e08c g     O .bss	00000004 state
00018cc0 g     F .text	0000009c alt_alarm_stop
000179f0 g     F .text	00000030 read_RE_bit
0001c1c4 g     O .rwdata	00000002 OSTaskIdleStkSize
00000364 g     F .text	00000178 Check_KEYs
0001e138 g     O .bss	00000004 alt_irq_active
00013290 g     F .text	000000b0 OSSemAccept
00011f00 g     F .text	000000d8 OSMemPut
00011a38 g     F .text	000001d4 OSMemCreate
0001e100 g     O .bss	00000004 OSIdleCtrMax
0001772c g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d8 alt_irq_handler
0001ac24 g     O .rwdata	00000028 alt_dev_null
0001c1d8 g     O .rwdata	00000002 OSTicksPerSec
0001e090 g     O .bss	00000004 KEY_val
000175f8 g     F .text	00000038 alt_up_character_lcd_cursor_blink_on
00018e88 g       .text	00000000 OSIntCtxSw
00017c68 g     F .text	00000074 alt_up_ps2_write_data_byte
00018528 g     F .text	00000020 alt_dcache_flush_all
00006d90 g     F .text	00000068 __hi0bits
0000d2bc g     F .text	00000080 .hidden __fixdfsi
0001e104 g     O .bss	00000004 OSTCBFreeList
0001c200 g       *ABS*	00000000 __ram_rwdata_end
00013864 g     F .text	0000016c OSSemPendAbort
0001e170 g     O .bss	00002000 task_read_ps2_stk
0001c164 g     O .rwdata	00000008 alt_dev_list
0000dd68 g     F .text	000000f8 write
0001c1dc g     O .rwdata	00000002 OSVersionNbr
0001a380 g       *ABS*	00000000 __ram_rodata_end
0000d698 g     F .text	000000b0 fstat
00000c4c g     F .text	00000024 fprintf
0001832c g     F .text	00000094 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000c1b4 g     F .text	000000f4 .hidden __ledf2
0001c184 g     O .rwdata	00000004 OSEndiannessTest
000070dc g     F .text	00000140 __pow5mult
000083f0 g     F .text	0000145c ___vfiprintf_internal_r
0001e0b4 g     O .bss	00000004 __nlocale_changed
0000ae64 g     F .text	00000058 .hidden __umodsi3
0001c196 g     O .rwdata	00000002 OSFlagGrpSize
00027494 g       *ABS*	00000000 end
00017f98 g     F .text	00000098 alt_up_ps2_write_fd
00017768 g     F .text	00000044 alt_up_irda_check_parity
0001648c g     F .text	0000013c altera_avalon_jtag_uart_init
0000fd18 g     F .text	000000dc OS_TaskStat
000001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
00019884 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
000170c8 g     F .text	00000074 alt_avalon_timer_sc_init
0000d4c0 g     F .text	00000064 .hidden __clzsi2
00016d88 g     F .text	000002c4 altera_avalon_jtag_uart_write
000004dc g     F .text	00000454 Task_read_PS2
00005090 g     F .text	00000004 __sfp_lock_acquire
000065ec g     F .text	000000e4 memchr
0000f9f4 g     F .text	00000054 OS_MemClr
00017264 g     F .text	0000007c alt_up_character_lcd_write
00000ddc g     F .text	000021f8 ___vfprintf_internal_r
00018f58 g     F .text	0000015c OSTaskStkInit
000051f4 g     F .text	00000310 _free_r
00005bd0 g     F .text	00000010 __locale_mb_cur_max
0000f064 g     F .text	00000198 OS_EventTaskRdy
000196d0 g     F .text	00000180 __call_exitprocs
0001e108 g     O .bss	00000001 OSCPUUsage
0001e0b0 g     O .bss	00000004 __mlocale_changed
0001c150 g     O .rwdata	00000004 __malloc_sbrk_base
00000248 g     F .text	0000003c _start
0001e13c g     O .bss	00000004 _alt_tick_rate
000127b0 g     F .text	0000028c OSQPend
0001545c g     F .text	00000104 OSTimeDly
0000721c g     F .text	00000148 __lshift
0001e140 g     O .bss	00000004 _alt_nticks
0000db1c g     F .text	000000fc read
000159bc g     F .text	0000096c alt_sys_init
000174a8 g     F .text	0000008c alt_up_character_lcd_shift_display
000195b8 g     F .text	00000118 __register_exitproc
0001e109 g     O .bss	00000001 OSTaskCtr
00017eb4 g     F .text	00000058 alt_up_ps2_clear_fifo
00018168 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
00015560 g     F .text	00000160 OSTimeDlyHMSM
00006ee4 g     F .text	000001f8 __multiply
00017534 g     F .text	0000008c alt_up_character_lcd_erase_pos
00016974 g     F .text	00000068 altera_avalon_jtag_uart_close
0001a380 g       *ABS*	00000000 __ram_rwdata_start
00019884 g       *ABS*	00000000 __ram_rodata_start
0001e148 g     O .bss	00000028 __malloc_current_mallinfo
0001c18a g     O .rwdata	00000002 OSEventMax
00007730 g     F .text	0000014c __d2b
000139d0 g     F .text	00000110 OSSemPost
0000ec08 g     F .text	000000dc OSSchedUnlock
00016328 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000192e8 g     F .text	000000dc alt_get_fd
0001e10c g     O .bss	00000004 OSMemFreeList
0000ed54 g     F .text	000000b0 OSStatInit
0001159c g     F .text	000000c4 OSFlagQuery
0001e094 g     O .bss	00000004 KEY1_flag
0001c1c0 g     O .rwdata	00000002 OSTaskCreateExtEn
00009984 g     F .text	00000054 _close_r
0001953c g     F .text	0000007c memcmp
0000f044 g     F .text	00000020 OS_Dummy
000163e8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00027494 g       *ABS*	00000000 __alt_stack_base
00016438 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00017630 g     F .text	0000005c alt_up_irda_enable_read_interrupt
000030ac g     F .text	00000154 __swsetup_r
00025910 g     O .bss	000001e0 OSQTbl
0000b768 g     F .text	000008e8 .hidden __divdf3
00004f50 g     F .text	00000118 __sfp
00007994 g     F .text	00000078 __copybits
0001a81c g     O .rwdata	00000408 __malloc_av_
0000509c g     F .text	00000004 __sinit_lock_release
0001e110 g     O .bss	00000004 OSTCBHighRdy
0000c2a8 g     F .text	00000718 .hidden __muldf3
000080c4 g     F .text	00000054 __sread
0001e114 g     O .bss	00000004 OSQFreeList
000180c8 g     F .text	00000060 alt_up_rs232_disable_read_interrupt
00020170 g     O .bss	00002000 task_read_keys_stk
000191e0 g     F .text	00000108 alt_find_file
00018584 g     F .text	000000a4 alt_dev_llist_insert
0000df84 g     F .text	00000120 __malloc_lock
00000c24 g     F .text	00000028 _fprintf_r
0000dc7c g     F .text	000000b0 sbrk
0000e290 g     F .text	00000140 OSEventNameSet
00004ca4 g     F .text	0000005c _fflush_r
000099d8 g     F .text	000000c4 _calloc_r
0001e118 g     O .bss	00000001 OSRdyGrp
00000930 g     F .text	00000084 Task_read_KEYs
0001e080 g       *ABS*	00000000 __bss_start
00006974 g     F .text	00000128 memset
0001e098 g     O .bss	00000001 err
00000a78 g     F .text	000001ac main
0001e0d4 g     O .bss	00000004 alt_envp
0001e0b8 g     O .bss	00000004 __malloc_max_total_mem
00016388 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000a058 g     F .text	00000018 __swbuf
0001a100 g     O .rodata	00000100 OSUnMapTbl
0001c1ba g     O .rwdata	00000002 OSSemEn
0001741c g     F .text	0000008c alt_up_character_lcd_shift_cursor
00011208 g     F .text	00000394 OSFlagPost
000081f8 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
00009b8c g     F .text	00000014 fclose
0000f1fc g     F .text	00000110 OS_EventTaskWait
00022170 g     O .bss	00002000 task2_stk
00017e44 g     F .text	00000070 alt_up_ps2_read_data_byte
0000fdf4 g     F .text	000000cc OS_TaskStatStkChk
000148b4 g     F .text	00000150 OSTaskDelReq
00003400 g     F .text	00001688 _dtoa_r
00005de0 g     F .text	0000080c _malloc_r
0000a1cc g     F .text	00000030 __ascii_wctomb
0001c170 g     O .rwdata	00000004 alt_errno
0000ece4 g     F .text	00000070 OSStart
0000df24 g     F .text	00000060 __env_unlock
000059c0 g     F .text	000000c4 _fwalk
00014d50 g     F .text	000001d4 OSTaskResume
00011fd8 g     F .text	000000e8 OSMemQuery
0001c1cc g     O .rwdata	00000002 OSTaskStatEn
000177ac g     F .text	00000040 alt_up_irda_write_data
0001c1a6 g     O .rwdata	00000002 OSMemMax
00012d10 g     F .text	00000170 OSQPostFront
00018030 g     F .text	0000003c alt_up_ps2_open_dev
0000ad08 g     F .text	00000084 .hidden __divsi3
0001e119 g     O .bss	00000003 OSRdyTbl
0001c180 g     O .rwdata	00000002 OSDebugEn
00017228 g     F .text	0000003c alt_up_character_lcd_open_dev
000050d0 g     F .text	00000124 _malloc_trim_r
00017bac g     F .text	0000005c alt_up_ps2_enable_read_interrupt
00019884 g       *ABS*	00000000 __CTOR_END__
0001c198 g     O .rwdata	00000002 OSFlagNodeSize
0001c1e0 g     O .rwdata	00000002 OSTmrCfgMax
000171f0 g     F .text	00000038 alt_up_character_lcd_init
00008200 g     F .text	000000dc strcmp
000122cc g     F .text	000001ac OSQCreate
00014a04 g     F .text	00000198 OSTaskNameGet
00019884 g       *ABS*	00000000 __flash_rodata_start
00012e80 g     F .text	0000020c OSQPostOpt
0000ee04 g     F .text	00000220 OSTimeTick
0001c1c8 g     O .rwdata	00000002 OSTaskMax
00019884 g       *ABS*	00000000 __DTOR_LIST__
00013340 g     F .text	000000d8 OSSemCreate
0001c1ec g     O .rwdata	00000002 OSTmrWheelSize
0001e09c g     O .bss	00000004 KEY3_flag
000183c0 g     F .text	0000003c alt_up_rs232_open_dev
0000c050 g     F .text	00000088 .hidden __nedf2
0001c1c2 g     O .rwdata	00000002 OSTaskDelEn
00013ae0 g     F .text	00000110 OSSemQuery
00012478 g     F .text	00000280 OSQDel
00012a3c g     F .text	0000016c OSQPendAbort
00015984 g     F .text	00000038 alt_irq_init
0000dc18 g     F .text	00000064 alt_release_fd
00017a84 g     F .text	00000034 read_data_valid
000175c0 g     F .text	00000038 alt_up_character_lcd_cursor_off
00019fe4 g     O .rodata	00000100 .hidden __clz_tab
0001e0ac g     O .bss	00000004 _PathLocale
00017d44 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
000194f0 g     F .text	00000014 atexit
00009924 g     F .text	00000060 _write_r
0000eb7c g     F .text	0000008c OSSchedLock
00005c00 g     F .text	00000018 setlocale
0001062c g     F .text	00000108 OSFlagCreate
0001c148 g     O .rwdata	00000004 _impure_ptr
0001e0cc g     O .bss	00000004 alt_argc
00004a88 g     F .text	0000021c __sflush_r
00018688 g     F .text	00000060 _do_dtors
00005bec g     F .text	00000008 __locale_cjk_lang
0001c192 g     O .rwdata	00000002 OSEventMultiEn
09000000 g       *ABS*	00000000 __alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00010734 g     F .text	00000248 OSFlagDel
0001e11c g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
000075c0 g     F .text	00000064 __ulp
00010bf0 g     F .text	000005b8 OSFlagPend
0001c1de g     O .rwdata	00000002 OSTmrEn
000050b8 g     F .text	00000018 __fp_unlock_all
0001c15c g     O .rwdata	00000008 alt_fs_list
0000fbf4 g     F .text	00000074 OS_StrCopy
0001806c g     F .text	0000005c alt_up_rs232_enable_read_interrupt
000181e8 g     F .text	00000040 alt_up_rs232_write_data
0001c1a8 g     O .rwdata	00000002 OSMemNameSize
0001917c g     F .text	00000020 OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
0001c1d4 g     O .rwdata	00000002 OSTCBPrioTblMax
00005c18 g     F .text	0000000c localeconv
0001c1d0 g     O .rwdata	00000002 OSTaskStatStkChkEn
0001c1a4 g     O .rwdata	00000002 OSMemEn
0001c1ae g     O .rwdata	00000002 OSMutexEn
0001c200 g       *ABS*	00000000 _edata
0001e0a0 g     O .bss	00000004 KEY0_flag
00027494 g       *ABS*	00000000 _end
0001e120 g     O .bss	00000001 OSIntNesting
00009ba0 g     F .text	00000164 __fputwc
00000248 g       *ABS*	00000000 __ram_exceptions_end
000169dc g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000156c0 g     F .text	000001d4 OSTimeDlyResume
00010aa4 g     F .text	0000014c OSFlagNameSet
00014f24 g     F .text	000001c0 OSTaskStkChk
0001c1aa g     O .rwdata	00000002 OSMemSize
00008120 g     F .text	0000007c __swrite
0001c154 g     O .rwdata	00000004 __malloc_trim_threshold
00005be0 g     F .text	0000000c __locale_msgcharset
0001e124 g     O .bss	00000004 OSTCBCur
00019504 g     F .text	00000038 exit
000177ec g     F .text	00000074 alt_up_irda_read_data
0001c1ac g     O .rwdata	00000002 OSMemTblSize
00005a84 g     F .text	000000c4 _fwalk_reent
00017ae4 g     F .text	000000c8 alt_up_ps2_init
000073c4 g     F .text	000001fc __mdiff
0000ad8c g     F .text	00000074 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00005094 g     F .text	00000004 __sfp_lock_release
0000e9e0 g     F .text	00000058 OSInit
000152c8 g     F .text	00000124 OSTaskQuery
000172e0 g     F .text	00000078 alt_up_character_lcd_string
0001e0a4 g     O .bss	00000004 SEM_read_PS2
000131e8 g     F .text	000000a8 OS_QInit
0000fc68 g     F .text	00000054 OS_StrLen
00017980 g     F .text	0000003c alt_up_irda_open_dev
00011dec g     F .text	00000114 OSMemNameSet
0001c1c6 g     O .rwdata	00000002 OSTaskProfileEn
0001e128 g     O .bss	00000004 OSTime
00025af0 g     O .bss	00000800 OSTaskIdleStk
00019850 g     F .text	00000034 _exit
000183fc g     F .text	0000012c alt_alarm_start
0001097c g     F .text	00000128 OSFlagNameGet
00015894 g     F .text	0000005c OSTimeGet
00005c24 g     F .text	000001bc __smakebuf_r
00017cdc g     F .text	00000068 alt_up_ps2_wait_for_ack
00000d44 g     F .text	00000098 strlen
000190fc g     F .text	00000020 OSTaskSwHook
00018b6c g     F .text	00000154 open
000262f0 g     O .bss	00000b40 OSEventTbl
0000c0d8 g     F .text	000000dc .hidden __gedf2
00026e30 g     O .bss	00000510 OSTCBTbl
00013bf0 g     F .text	00000100 OSSemSet
0001c158 g     O .rwdata	00000004 __wctomb
000083d8 g     F .text	00000018 __sprint_r
00018778 g     F .text	00000034 alt_icache_flush_all
0001e0a8 g     O .bss	00000004 SEM_read_KEYS
000173a8 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
0001c1f4 g     O .rwdata	00000004 alt_priority_mask
00013418 g     F .text	00000240 OSSemDel
0001e12c g     O .bss	00000004 OSFlagFreeList
0001c18c g     O .rwdata	00000002 OSEventNameSize
00002fd4 g     F .text	0000001c __vfprintf_internal
0001e130 g     O .bss	00000001 OSStatRdy
00027340 g     O .bss	00000054 OSTCBPrioTbl
0000a1fc g     F .text	0000005c _wctomb_r
0000de60 g     F .text	000000c4 __env_lock
00017f0c g     F .text	0000008c alt_up_ps2_read_fd
0001c1d2 g     O .rwdata	00000002 OSTaskSwHookEn
0000c9c0 g     F .text	000008fc .hidden __subdf3
00017860 g     F .text	00000090 alt_up_irda_read_fd
00006df8 g     F .text	000000b0 __lo0bits
0001c1f8 g     O .rwdata	00000008 alt_alarm_list
0001c19a g     O .rwdata	00000002 OSFlagWidth
00018628 g     F .text	00000060 _do_ctors
00018128 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
0000a10c g     F .text	000000c0 wcrtomb
0000d560 g     F .text	000000d0 close
0001e0dc g     O .bss	00000004 alt_envsem
0001e134 g     O .bss	00000004 OSIdleCtrRun
0000f024 g     F .text	00000020 OSVersion
0001c1e4 g     O .rwdata	00000002 OSTmrCfgWheelSize
0000d890 g     F .text	00000084 alt_load
000153ec g     F .text	00000070 OS_TaskStkClr
0001c1be g     O .rwdata	00000002 OSTaskCreateEn
0000f614 g     F .text	00000068 OS_EventWaitListInit
00009d28 g     F .text	00000080 fputwc
0001919c g     F .text	00000020 OSTaskIdleHook
00005098 g     F .text	00000004 __sinit_lock_acquire
00006b6c g     F .text	00000120 __multadd
000150e4 g     F .text	000001e4 OSTaskSuspend
00006b44 g     F .text	00000028 _Bfree
0000fcbc g     F .text	0000005c OS_TaskIdle
0001c1ea g     O .rwdata	00000002 OSTmrTblSize
0001308c g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409214 	ori	at,at,584
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d40 	call	1d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	000ea380 	call	ea38 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	008000b4 	movhi	r2,2
 140:	109ce504 	addi	r2,r2,29588
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000b4 	movhi	r2,2
 158:	109ce504 	addi	r2,r2,29588
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	e17ffd17 	ldw	r5,-12(fp)
 174:	1009883a 	mov	r4,r2
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700012c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	000ea840 	call	ea84 <OSIntExit>
}
 1bc:	0001883a 	nop
 1c0:	e037883a 	mov	sp,fp
 1c4:	dfc00117 	ldw	ra,4(sp)
 1c8:	df000017 	ldw	fp,0(sp)
 1cc:	dec00204 	addi	sp,sp,8
 1d0:	f800283a 	ret

000001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d4:	defffb04 	addi	sp,sp,-20
 1d8:	dfc00415 	stw	ra,16(sp)
 1dc:	df000315 	stw	fp,12(sp)
 1e0:	df000304 	addi	fp,sp,12
 1e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e8:	000531fa 	rdctl	r2,exception
 1ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1f0:	e0bffd17 	ldw	r2,-12(fp)
 1f4:	10801f0c 	andi	r2,r2,124
 1f8:	1004d0ba 	srli	r2,r2,2
 1fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 200:	0005333a 	rdctl	r2,badaddr
 204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 208:	d0a80017 	ldw	r2,-24576(gp)
 20c:	10000726 	beq	r2,zero,22c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 210:	d0a80017 	ldw	r2,-24576(gp)
 214:	e0fffd17 	ldw	r3,-12(fp)
 218:	e1bffe17 	ldw	r6,-8(fp)
 21c:	e17fff17 	ldw	r5,-4(fp)
 220:	1809883a 	mov	r4,r3
 224:	103ee83a 	callr	r2
 228:	00000206 	br	234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 22c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 230:	0005883a 	mov	r2,zero
}
 234:	e037883a 	mov	sp,fp
 238:	dfc00117 	ldw	ra,4(sp)
 23c:	df000017 	ldw	fp,0(sp)
 240:	dec00204 	addi	sp,sp,8
 244:	f800283a 	ret

Disassembly of section .text:

00000248 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     248:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     24c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     250:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     254:	d6905114 	ori	gp,gp,16708
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     258:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     25c:	10b82014 	ori	r2,r2,57472

    movhi r3, %hi(__bss_end)
     260:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
     264:	18dd2514 	ori	r3,r3,29844

    beq r2, r3, 1f
     268:	10c00326 	beq	r2,r3,278 <_start+0x30>

0:
    stw zero, (r2)
     26c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     274:	10fffd36 	bltu	r2,r3,26c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700026c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     278:	000d8900 	call	d890 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     27c:	000da240 	call	da24 <alt_main>

00000280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     280:	003fff06 	br	280 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000280>

00000284 <Get_state_name>:
void Task_read_PS2(void *);

/* Helper functions */

const char *Get_state_name(DoorState door_state)
{
     284:	defffe04 	addi	sp,sp,-8
     288:	df000115 	stw	fp,4(sp)
     28c:	df000104 	addi	fp,sp,4
     290:	e13fff15 	stw	r4,-4(fp)
  switch (door_state)
     294:	e0bfff17 	ldw	r2,-4(fp)
     298:	10800268 	cmpgeui	r2,r2,9
     29c:	10002b1e 	bne	r2,zero,34c <Get_state_name+0xc8>
     2a0:	e0bfff17 	ldw	r2,-4(fp)
     2a4:	100690ba 	slli	r3,r2,2
     2a8:	00800034 	movhi	r2,0
     2ac:	1080af04 	addi	r2,r2,700
     2b0:	1885883a 	add	r2,r3,r2
     2b4:	10800017 	ldw	r2,0(r2)
     2b8:	1000683a 	jmp	r2
     2bc:	000002e0 	cmpeqi	zero,zero,11
     2c0:	000002ec 	andhi	zero,zero,11
     2c4:	000002f8 	rdprs	zero,zero,11
     2c8:	00000304 	movi	zero,12
     2cc:	00000310 	cmplti	zero,zero,12
     2d0:	0000031c 	xori	zero,zero,12
     2d4:	00000328 	cmpgeui	zero,zero,12
     2d8:	00000334 	movhi	zero,12
     2dc:	00000340 	call	34 <OSTCBPrio_OFFSET+0x2>
  {
  case INIT:
    return "INIT";
     2e0:	008000b4 	movhi	r2,2
     2e4:	10a62104 	addi	r2,r2,-26492
     2e8:	00001a06 	br	354 <Get_state_name+0xd0>
  case OPEN:
    return "OPEN";
     2ec:	008000b4 	movhi	r2,2
     2f0:	10a62304 	addi	r2,r2,-26484
     2f4:	00001706 	br	354 <Get_state_name+0xd0>
  case CLOSE:
    return "CLOSE";
     2f8:	008000b4 	movhi	r2,2
     2fc:	10a62504 	addi	r2,r2,-26476
     300:	00001406 	br	354 <Get_state_name+0xd0>
  case LOCK:
    return "LOCK";
     304:	008000b4 	movhi	r2,2
     308:	10a62704 	addi	r2,r2,-26468
     30c:	00001106 	br	354 <Get_state_name+0xd0>
  case CODE:
    return "CODE";
     310:	008000b4 	movhi	r2,2
     314:	10a62904 	addi	r2,r2,-26460
     318:	00000e06 	br	354 <Get_state_name+0xd0>
  case PROG:
    return "PROG";
     31c:	008000b4 	movhi	r2,2
     320:	10a62b04 	addi	r2,r2,-26452
     324:	00000b06 	br	354 <Get_state_name+0xd0>
  case VERIFIED:
    return "VERIFIED";
     328:	008000b4 	movhi	r2,2
     32c:	10a62d04 	addi	r2,r2,-26444
     330:	00000806 	br	354 <Get_state_name+0xd0>
  case ADD_CODE:
    return "ADD_CODE";
     334:	008000b4 	movhi	r2,2
     338:	10a63004 	addi	r2,r2,-26432
     33c:	00000506 	br	354 <Get_state_name+0xd0>
  case DELETE_CODE:
    return "DELETE_CODE";
     340:	008000b4 	movhi	r2,2
     344:	10a63304 	addi	r2,r2,-26420
     348:	00000206 	br	354 <Get_state_name+0xd0>
  default:
    return "INVALID";
     34c:	008000b4 	movhi	r2,2
     350:	10a63604 	addi	r2,r2,-26408
  }
}
     354:	e037883a 	mov	sp,fp
     358:	df000017 	ldw	fp,0(sp)
     35c:	dec00104 	addi	sp,sp,4
     360:	f800283a 	ret

00000364 <Check_KEYs>:

void Check_KEYs(int *KEY0_ptr, int *KEY1_ptr, int *KEY2_ptr, int *KEY3_ptr)
{
     364:	defff904 	addi	sp,sp,-28
     368:	dfc00615 	stw	ra,24(sp)
     36c:	df000515 	stw	fp,20(sp)
     370:	df000504 	addi	fp,sp,20
     374:	e13ffc15 	stw	r4,-16(fp)
     378:	e17ffd15 	stw	r5,-12(fp)
     37c:	e1bffe15 	stw	r6,-8(fp)
     380:	e1ffff15 	stw	r7,-4(fp)

  KEY_val = *(KEY_ptr);
     384:	00bfc834 	movhi	r2,65312
     388:	10801404 	addi	r2,r2,80
     38c:	10800017 	ldw	r2,0(r2)
     390:	d0a7d315 	stw	r2,-24756(gp)

  if (KEY_val == KEY0)
     394:	d0a7d317 	ldw	r2,-24756(gp)
     398:	10800058 	cmpnei	r2,r2,1
     39c:	10000d1e 	bne	r2,zero,3d4 <Check_KEYs+0x70>
  {
    debug("KEY0 Pressed!"); // check KEY0
     3a0:	d0a00117 	ldw	r2,-32764(gp)
     3a4:	10800317 	ldw	r2,12(r2)
     3a8:	01c01784 	movi	r7,94
     3ac:	018000b4 	movhi	r6,2
     3b0:	31a63804 	addi	r6,r6,-26400
     3b4:	014000b4 	movhi	r5,2
     3b8:	29663c04 	addi	r5,r5,-26384
     3bc:	1009883a 	mov	r4,r2
     3c0:	0000c4c0 	call	c4c <fprintf>
    *KEY0_ptr = 1;
     3c4:	e0bffc17 	ldw	r2,-16(fp)
     3c8:	00c00044 	movi	r3,1
     3cc:	10c00015 	stw	r3,0(r2)
     3d0:	00002f06 	br	490 <Check_KEYs+0x12c>
  }
  else if (KEY_val == KEY1) // check KEY1
     3d4:	d0a7d317 	ldw	r2,-24756(gp)
     3d8:	10800098 	cmpnei	r2,r2,2
     3dc:	10000d1e 	bne	r2,zero,414 <Check_KEYs+0xb0>
  {
    debug("KEY1 Pressed!");
     3e0:	d0a00117 	ldw	r2,-32764(gp)
     3e4:	10800317 	ldw	r2,12(r2)
     3e8:	01c018c4 	movi	r7,99
     3ec:	018000b4 	movhi	r6,2
     3f0:	31a63804 	addi	r6,r6,-26400
     3f4:	014000b4 	movhi	r5,2
     3f8:	29664304 	addi	r5,r5,-26356
     3fc:	1009883a 	mov	r4,r2
     400:	0000c4c0 	call	c4c <fprintf>
    *KEY1_ptr = 1;
     404:	e0bffd17 	ldw	r2,-12(fp)
     408:	00c00044 	movi	r3,1
     40c:	10c00015 	stw	r3,0(r2)
     410:	00001f06 	br	490 <Check_KEYs+0x12c>
  }
  else if (KEY_val == KEY2) // check KEY2
     414:	d0a7d317 	ldw	r2,-24756(gp)
     418:	10800118 	cmpnei	r2,r2,4
     41c:	10000d1e 	bne	r2,zero,454 <Check_KEYs+0xf0>
  {
    debug("KEY2 Pressed!");
     420:	d0a00117 	ldw	r2,-32764(gp)
     424:	10800317 	ldw	r2,12(r2)
     428:	01c01a04 	movi	r7,104
     42c:	018000b4 	movhi	r6,2
     430:	31a63804 	addi	r6,r6,-26400
     434:	014000b4 	movhi	r5,2
     438:	29664a04 	addi	r5,r5,-26328
     43c:	1009883a 	mov	r4,r2
     440:	0000c4c0 	call	c4c <fprintf>
    *KEY2_ptr = 1;
     444:	e0bffe17 	ldw	r2,-8(fp)
     448:	00c00044 	movi	r3,1
     44c:	10c00015 	stw	r3,0(r2)
     450:	00000f06 	br	490 <Check_KEYs+0x12c>
  }
  else if (KEY_val == KEY3) // check KEY3
     454:	d0a7d317 	ldw	r2,-24756(gp)
     458:	10800218 	cmpnei	r2,r2,8
     45c:	10000c1e 	bne	r2,zero,490 <Check_KEYs+0x12c>
  {
    debug("KEY3 Pressed!");
     460:	d0a00117 	ldw	r2,-32764(gp)
     464:	10800317 	ldw	r2,12(r2)
     468:	01c01b44 	movi	r7,109
     46c:	018000b4 	movhi	r6,2
     470:	31a63804 	addi	r6,r6,-26400
     474:	014000b4 	movhi	r5,2
     478:	29665104 	addi	r5,r5,-26300
     47c:	1009883a 	mov	r4,r2
     480:	0000c4c0 	call	c4c <fprintf>
    *KEY3_ptr = 1;
     484:	e0bfff17 	ldw	r2,-4(fp)
     488:	00c00044 	movi	r3,1
     48c:	10c00015 	stw	r3,0(r2)
  }

  if (KEY_val)
     490:	d0a7d317 	ldw	r2,-24756(gp)
     494:	10000b26 	beq	r2,zero,4c4 <Check_KEYs+0x160>
    debug("KEY_value: %d", KEY_val);
     498:	d0a00117 	ldw	r2,-32764(gp)
     49c:	10c00317 	ldw	r3,12(r2)
     4a0:	d0a7d317 	ldw	r2,-24756(gp)
     4a4:	d8800015 	stw	r2,0(sp)
     4a8:	01c01c84 	movi	r7,114
     4ac:	018000b4 	movhi	r6,2
     4b0:	31a63804 	addi	r6,r6,-26400
     4b4:	014000b4 	movhi	r5,2
     4b8:	29665804 	addi	r5,r5,-26272
     4bc:	1809883a 	mov	r4,r3
     4c0:	0000c4c0 	call	c4c <fprintf>
}
     4c4:	0001883a 	nop
     4c8:	e037883a 	mov	sp,fp
     4cc:	dfc00117 	ldw	ra,4(sp)
     4d0:	df000017 	ldw	fp,0(sp)
     4d4:	dec00204 	addi	sp,sp,8
     4d8:	f800283a 	ret

000004dc <Task_read_PS2>:

/* Tasks Implementation */
void Task_read_PS2(void *pdata)
{
     4dc:	defff904 	addi	sp,sp,-28
     4e0:	dfc00615 	stw	ra,24(sp)
     4e4:	df000515 	stw	fp,20(sp)
     4e8:	df000504 	addi	fp,sp,20
     4ec:	e13fff15 	stw	r4,-4(fp)

  debug("Started: Task_read_PS2");
     4f0:	d0a00117 	ldw	r2,-32764(gp)
     4f4:	10800317 	ldw	r2,12(r2)
     4f8:	01c01e44 	movi	r7,121
     4fc:	018000b4 	movhi	r6,2
     500:	31a63804 	addi	r6,r6,-26400
     504:	014000b4 	movhi	r5,2
     508:	29665f04 	addi	r5,r5,-26244
     50c:	1009883a 	mov	r4,r2
     510:	0000c4c0 	call	c4c <fprintf>

  char byte5;
  int PS2_data, RAVAIL;

  *(PS2_ptr) = 0xFF; // reset PS/2
     514:	00bfc834 	movhi	r2,65312
     518:	10804004 	addi	r2,r2,256
     51c:	00c03fc4 	movi	r3,255
     520:	10c00015 	stw	r3,0(r2)
  int flag = 0;
     524:	e03ffb15 	stw	zero,-20(fp)

  while (1)
  {

    OSSemPend(SEM_read_PS2, 0, &err);
     528:	d0a7d817 	ldw	r2,-24736(gp)
     52c:	d1a7d504 	addi	r6,gp,-24748
     530:	000b883a 	mov	r5,zero
     534:	1009883a 	mov	r4,r2
     538:	00136580 	call	13658 <OSSemPend>

    PS2_data = *(PS2_ptr);                  /* read the Data register in the PS/2 port */
     53c:	00bfc834 	movhi	r2,65312
     540:	10804004 	addi	r2,r2,256
     544:	10800017 	ldw	r2,0(r2)
     548:	e0bffc15 	stw	r2,-16(fp)
    RAVAIL = (PS2_data & 0xFFFF0000) >> 16; /* extract the RAVAIL field */
     54c:	e0bffc17 	ldw	r2,-16(fp)
     550:	1004d43a 	srli	r2,r2,16
     554:	e0bffd15 	stw	r2,-12(fp)

    if (RAVAIL > 0)
     558:	e0bffd17 	ldw	r2,-12(fp)
     55c:	0080eb0e 	bge	zero,r2,90c <Task_read_PS2+0x430>
    {
      byte5 = PS2_data & 0xFF;
     560:	e0bffc17 	ldw	r2,-16(fp)
     564:	e0bffe05 	stb	r2,-8(fp)

      /* TODO: Refactor this code */
      if (byte5 == -16)
     568:	e0bffe07 	ldb	r2,-8(fp)
     56c:	10bffc18 	cmpnei	r2,r2,-16
     570:	1000031e 	bne	r2,zero,580 <Task_read_PS2+0xa4>
        flag = 1;
     574:	00800044 	movi	r2,1
     578:	e0bffb15 	stw	r2,-20(fp)
     57c:	0000e306 	br	90c <Task_read_PS2+0x430>

      else if (flag == 1)
     580:	e0bffb17 	ldw	r2,-20(fp)
     584:	10800058 	cmpnei	r2,r2,1
     588:	1000e01e 	bne	r2,zero,90c <Task_read_PS2+0x430>
      {
        flag = 0;
     58c:	e03ffb15 	stw	zero,-20(fp)

        switch (byte5)
     590:	e0bffe07 	ldb	r2,-8(fp)
     594:	10bffa84 	addi	r2,r2,-22
     598:	10c01a28 	cmpgeui	r3,r2,104
     59c:	1800d21e 	bne	r3,zero,8e8 <Task_read_PS2+0x40c>
     5a0:	100690ba 	slli	r3,r2,2
     5a4:	00800034 	movhi	r2,0
     5a8:	10816e04 	addi	r2,r2,1464
     5ac:	1885883a 	add	r2,r3,r2
     5b0:	10800017 	ldw	r2,0(r2)
     5b4:	1000683a 	jmp	r2
     5b8:	00000780 	call	78 <OSCtxSw_SWITCH_PC+0x38>
     5bc:	000008e8 	cmpgeui	zero,zero,35
     5c0:	000008e8 	cmpgeui	zero,zero,35
     5c4:	000008e8 	cmpgeui	zero,zero,35
     5c8:	000008e8 	cmpgeui	zero,zero,35
     5cc:	000008e8 	cmpgeui	zero,zero,35
     5d0:	000008e8 	cmpgeui	zero,zero,35
     5d4:	000008e8 	cmpgeui	zero,zero,35
     5d8:	000007a8 	cmpgeui	zero,zero,30
     5dc:	000008e8 	cmpgeui	zero,zero,35
     5e0:	000008e8 	cmpgeui	zero,zero,35
     5e4:	000008e8 	cmpgeui	zero,zero,35
     5e8:	000008e8 	cmpgeui	zero,zero,35
     5ec:	000008e8 	cmpgeui	zero,zero,35
     5f0:	000008e8 	cmpgeui	zero,zero,35
     5f4:	000007f8 	rdprs	zero,zero,31
     5f8:	000007d0 	cmplti	zero,zero,31
     5fc:	000008e8 	cmpgeui	zero,zero,35
     600:	000008e8 	cmpgeui	zero,zero,35
     604:	000008e8 	cmpgeui	zero,zero,35
     608:	000008e8 	cmpgeui	zero,zero,35
     60c:	000008e8 	cmpgeui	zero,zero,35
     610:	000008e8 	cmpgeui	zero,zero,35
     614:	000008e8 	cmpgeui	zero,zero,35
     618:	00000820 	cmpeqi	zero,zero,32
     61c:	000008e8 	cmpgeui	zero,zero,35
     620:	000008e8 	cmpgeui	zero,zero,35
     624:	000008e8 	cmpgeui	zero,zero,35
     628:	000008e8 	cmpgeui	zero,zero,35
     62c:	000008e8 	cmpgeui	zero,zero,35
     630:	000008e8 	cmpgeui	zero,zero,35
     634:	000008e8 	cmpgeui	zero,zero,35
     638:	00000848 	cmpgei	zero,zero,33
     63c:	000008e8 	cmpgeui	zero,zero,35
     640:	000008e8 	cmpgeui	zero,zero,35
     644:	000008e8 	cmpgeui	zero,zero,35
     648:	000008e8 	cmpgeui	zero,zero,35
     64c:	000008e8 	cmpgeui	zero,zero,35
     650:	000008e8 	cmpgeui	zero,zero,35
     654:	00000870 	cmpltui	zero,zero,33
     658:	00000898 	cmpnei	zero,zero,34
     65c:	000008e8 	cmpgeui	zero,zero,35
     660:	000008e8 	cmpgeui	zero,zero,35
     664:	000008e8 	cmpgeui	zero,zero,35
     668:	000008e8 	cmpgeui	zero,zero,35
     66c:	000008e8 	cmpgeui	zero,zero,35
     670:	000008e8 	cmpgeui	zero,zero,35
     674:	00000758 	cmpnei	zero,zero,29
     678:	000008c0 	call	8c <OSCtxSw_SWITCH_PC+0x4c>
     67c:	000008e8 	cmpgeui	zero,zero,35
     680:	000008e8 	cmpgeui	zero,zero,35
     684:	000008e8 	cmpgeui	zero,zero,35
     688:	000008e8 	cmpgeui	zero,zero,35
     68c:	000008e8 	cmpgeui	zero,zero,35
     690:	000008e8 	cmpgeui	zero,zero,35
     694:	000008e8 	cmpgeui	zero,zero,35
     698:	000008e8 	cmpgeui	zero,zero,35
     69c:	000008e8 	cmpgeui	zero,zero,35
     6a0:	000008e8 	cmpgeui	zero,zero,35
     6a4:	000008e8 	cmpgeui	zero,zero,35
     6a8:	000008e8 	cmpgeui	zero,zero,35
     6ac:	000008e8 	cmpgeui	zero,zero,35
     6b0:	000008e8 	cmpgeui	zero,zero,35
     6b4:	000008e8 	cmpgeui	zero,zero,35
     6b8:	000008e8 	cmpgeui	zero,zero,35
     6bc:	000008e8 	cmpgeui	zero,zero,35
     6c0:	000008e8 	cmpgeui	zero,zero,35
     6c4:	000008e8 	cmpgeui	zero,zero,35
     6c8:	000008e8 	cmpgeui	zero,zero,35
     6cc:	000008e8 	cmpgeui	zero,zero,35
     6d0:	000008e8 	cmpgeui	zero,zero,35
     6d4:	000008e8 	cmpgeui	zero,zero,35
     6d8:	000008e8 	cmpgeui	zero,zero,35
     6dc:	000008e8 	cmpgeui	zero,zero,35
     6e0:	000008e8 	cmpgeui	zero,zero,35
     6e4:	000008e8 	cmpgeui	zero,zero,35
     6e8:	000008e8 	cmpgeui	zero,zero,35
     6ec:	000008e8 	cmpgeui	zero,zero,35
     6f0:	000008e8 	cmpgeui	zero,zero,35
     6f4:	000008e8 	cmpgeui	zero,zero,35
     6f8:	000008e8 	cmpgeui	zero,zero,35
     6fc:	000008e8 	cmpgeui	zero,zero,35
     700:	000008e8 	cmpgeui	zero,zero,35
     704:	00000780 	call	78 <OSCtxSw_SWITCH_PC+0x38>
     708:	000008e8 	cmpgeui	zero,zero,35
     70c:	000007f8 	rdprs	zero,zero,31
     710:	00000870 	cmpltui	zero,zero,33
     714:	000008e8 	cmpgeui	zero,zero,35
     718:	000008e8 	cmpgeui	zero,zero,35
     71c:	000008e8 	cmpgeui	zero,zero,35
     720:	00000758 	cmpnei	zero,zero,29
     724:	000008e8 	cmpgeui	zero,zero,35
     728:	000007a8 	cmpgeui	zero,zero,30
     72c:	00000820 	cmpeqi	zero,zero,32
     730:	00000848 	cmpgei	zero,zero,33
     734:	00000898 	cmpnei	zero,zero,34
     738:	000008e8 	cmpgeui	zero,zero,35
     73c:	000008e8 	cmpgeui	zero,zero,35
     740:	000008e8 	cmpgeui	zero,zero,35
     744:	000008e8 	cmpgeui	zero,zero,35
     748:	000007d0 	cmplti	zero,zero,31
     74c:	000008e8 	cmpgeui	zero,zero,35
     750:	000008e8 	cmpgeui	zero,zero,35
     754:	000008c0 	call	8c <OSCtxSw_SWITCH_PC+0x4c>
        {
        case 69:
        case 112:
          debug("0 pressed");
     758:	d0a00117 	ldw	r2,-32764(gp)
     75c:	10800317 	ldw	r2,12(r2)
     760:	01c02644 	movi	r7,153
     764:	018000b4 	movhi	r6,2
     768:	31a63804 	addi	r6,r6,-26400
     76c:	014000b4 	movhi	r5,2
     770:	29666904 	addi	r5,r5,-26204
     774:	1009883a 	mov	r4,r2
     778:	0000c4c0 	call	c4c <fprintf>
          break;
     77c:	00006306 	br	90c <Task_read_PS2+0x430>
        case 22:
        case 105:
          debug("1 pressed");
     780:	d0a00117 	ldw	r2,-32764(gp)
     784:	10800317 	ldw	r2,12(r2)
     788:	01c02744 	movi	r7,157
     78c:	018000b4 	movhi	r6,2
     790:	31a63804 	addi	r6,r6,-26400
     794:	014000b4 	movhi	r5,2
     798:	29666f04 	addi	r5,r5,-26180
     79c:	1009883a 	mov	r4,r2
     7a0:	0000c4c0 	call	c4c <fprintf>
          break;
     7a4:	00005906 	br	90c <Task_read_PS2+0x430>
        case 30:
        case 114:
          debug("2 pressed");
     7a8:	d0a00117 	ldw	r2,-32764(gp)
     7ac:	10800317 	ldw	r2,12(r2)
     7b0:	01c02844 	movi	r7,161
     7b4:	018000b4 	movhi	r6,2
     7b8:	31a63804 	addi	r6,r6,-26400
     7bc:	014000b4 	movhi	r5,2
     7c0:	29667504 	addi	r5,r5,-26156
     7c4:	1009883a 	mov	r4,r2
     7c8:	0000c4c0 	call	c4c <fprintf>
          break;
     7cc:	00004f06 	br	90c <Task_read_PS2+0x430>
        case 38:
        case 122:
          debug("3 pressed");
     7d0:	d0a00117 	ldw	r2,-32764(gp)
     7d4:	10800317 	ldw	r2,12(r2)
     7d8:	01c02944 	movi	r7,165
     7dc:	018000b4 	movhi	r6,2
     7e0:	31a63804 	addi	r6,r6,-26400
     7e4:	014000b4 	movhi	r5,2
     7e8:	29667b04 	addi	r5,r5,-26132
     7ec:	1009883a 	mov	r4,r2
     7f0:	0000c4c0 	call	c4c <fprintf>
          break;
     7f4:	00004506 	br	90c <Task_read_PS2+0x430>
        case 37:
        case 107:
          debug("4 pressed");
     7f8:	d0a00117 	ldw	r2,-32764(gp)
     7fc:	10800317 	ldw	r2,12(r2)
     800:	01c02a44 	movi	r7,169
     804:	018000b4 	movhi	r6,2
     808:	31a63804 	addi	r6,r6,-26400
     80c:	014000b4 	movhi	r5,2
     810:	29668104 	addi	r5,r5,-26108
     814:	1009883a 	mov	r4,r2
     818:	0000c4c0 	call	c4c <fprintf>
          break;
     81c:	00003b06 	br	90c <Task_read_PS2+0x430>
        case 46:
        case 115:
          debug("5 pressed");
     820:	d0a00117 	ldw	r2,-32764(gp)
     824:	10800317 	ldw	r2,12(r2)
     828:	01c02b44 	movi	r7,173
     82c:	018000b4 	movhi	r6,2
     830:	31a63804 	addi	r6,r6,-26400
     834:	014000b4 	movhi	r5,2
     838:	29668704 	addi	r5,r5,-26084
     83c:	1009883a 	mov	r4,r2
     840:	0000c4c0 	call	c4c <fprintf>
          break;
     844:	00003106 	br	90c <Task_read_PS2+0x430>
        case 54:
        case 116:
          debug("6 pressed");
     848:	d0a00117 	ldw	r2,-32764(gp)
     84c:	10800317 	ldw	r2,12(r2)
     850:	01c02c44 	movi	r7,177
     854:	018000b4 	movhi	r6,2
     858:	31a63804 	addi	r6,r6,-26400
     85c:	014000b4 	movhi	r5,2
     860:	29668d04 	addi	r5,r5,-26060
     864:	1009883a 	mov	r4,r2
     868:	0000c4c0 	call	c4c <fprintf>
          break;
     86c:	00002706 	br	90c <Task_read_PS2+0x430>
        case 61:
        case 108:
          debug("7 pressed");
     870:	d0a00117 	ldw	r2,-32764(gp)
     874:	10800317 	ldw	r2,12(r2)
     878:	01c02d44 	movi	r7,181
     87c:	018000b4 	movhi	r6,2
     880:	31a63804 	addi	r6,r6,-26400
     884:	014000b4 	movhi	r5,2
     888:	29669304 	addi	r5,r5,-26036
     88c:	1009883a 	mov	r4,r2
     890:	0000c4c0 	call	c4c <fprintf>
          break;
     894:	00001d06 	br	90c <Task_read_PS2+0x430>
        case 62:
        case 117:
          debug("8 pressed");
     898:	d0a00117 	ldw	r2,-32764(gp)
     89c:	10800317 	ldw	r2,12(r2)
     8a0:	01c02e44 	movi	r7,185
     8a4:	018000b4 	movhi	r6,2
     8a8:	31a63804 	addi	r6,r6,-26400
     8ac:	014000b4 	movhi	r5,2
     8b0:	29669904 	addi	r5,r5,-26012
     8b4:	1009883a 	mov	r4,r2
     8b8:	0000c4c0 	call	c4c <fprintf>
          break;
     8bc:	00001306 	br	90c <Task_read_PS2+0x430>
        case 70:
        case 125:
          debug("9 pressed");
     8c0:	d0a00117 	ldw	r2,-32764(gp)
     8c4:	10800317 	ldw	r2,12(r2)
     8c8:	01c02f44 	movi	r7,189
     8cc:	018000b4 	movhi	r6,2
     8d0:	31a63804 	addi	r6,r6,-26400
     8d4:	014000b4 	movhi	r5,2
     8d8:	29669f04 	addi	r5,r5,-25988
     8dc:	1009883a 	mov	r4,r2
     8e0:	0000c4c0 	call	c4c <fprintf>
          break;
     8e4:	00000906 	br	90c <Task_read_PS2+0x430>
        default:
          debug("Nothing Pressed");
     8e8:	d0a00117 	ldw	r2,-32764(gp)
     8ec:	10800317 	ldw	r2,12(r2)
     8f0:	01c03004 	movi	r7,192
     8f4:	018000b4 	movhi	r6,2
     8f8:	31a63804 	addi	r6,r6,-26400
     8fc:	014000b4 	movhi	r5,2
     900:	2966a504 	addi	r5,r5,-25964
     904:	1009883a 	mov	r4,r2
     908:	0000c4c0 	call	c4c <fprintf>
        }
      }
    }

    OSSemPost(SEM_read_PS2);
     90c:	d0a7d817 	ldw	r2,-24736(gp)
     910:	1009883a 	mov	r4,r2
     914:	00139d00 	call	139d0 <OSSemPost>
    OSTimeDlyHMSM(0, 0, 100, 0);
     918:	000f883a 	mov	r7,zero
     91c:	01801904 	movi	r6,100
     920:	000b883a 	mov	r5,zero
     924:	0009883a 	mov	r4,zero
     928:	00155600 	call	15560 <OSTimeDlyHMSM>
  }
     92c:	003efe06 	br	528 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000528>

00000930 <Task_read_KEYs>:
}

/* Prints "Hello World" and sleeps for three seconds */
void Task_read_KEYs(void *pdata)
{
     930:	defffd04 	addi	sp,sp,-12
     934:	dfc00215 	stw	ra,8(sp)
     938:	df000115 	stw	fp,4(sp)
     93c:	df000104 	addi	fp,sp,4
     940:	e13fff15 	stw	r4,-4(fp)
  debug("Started: Task_read_KEYs");
     944:	d0a00117 	ldw	r2,-32764(gp)
     948:	10800317 	ldw	r2,12(r2)
     94c:	01c03344 	movi	r7,205
     950:	018000b4 	movhi	r6,2
     954:	31a63804 	addi	r6,r6,-26400
     958:	014000b4 	movhi	r5,2
     95c:	2966ad04 	addi	r5,r5,-25932
     960:	1009883a 	mov	r4,r2
     964:	0000c4c0 	call	c4c <fprintf>

  while (1)
  {
    OSSemPend(SEM_read_KEYS, 0, &err);
     968:	d0a7d917 	ldw	r2,-24732(gp)
     96c:	d1a7d504 	addi	r6,gp,-24748
     970:	000b883a 	mov	r5,zero
     974:	1009883a 	mov	r4,r2
     978:	00136580 	call	13658 <OSSemPend>
    // log_info("%u: Hello from Task_read_KEYs", OSTime);
    Check_KEYs(0, &KEY1_flag, 0, 0);
     97c:	000f883a 	mov	r7,zero
     980:	000d883a 	mov	r6,zero
     984:	d167d404 	addi	r5,gp,-24752
     988:	0009883a 	mov	r4,zero
     98c:	00003640 	call	364 <Check_KEYs>
    // if (KEY1_flag)
    // {
    // debug();
    // }

    OSSemPost(SEM_read_KEYS);
     990:	d0a7d917 	ldw	r2,-24732(gp)
     994:	1009883a 	mov	r4,r2
     998:	00139d00 	call	139d0 <OSSemPost>

    OSTimeDlyHMSM(0, 0, 0, 100);
     99c:	01c01904 	movi	r7,100
     9a0:	000d883a 	mov	r6,zero
     9a4:	000b883a 	mov	r5,zero
     9a8:	0009883a 	mov	r4,zero
     9ac:	00155600 	call	15560 <OSTimeDlyHMSM>
  }
     9b0:	003fed06 	br	968 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000968>

000009b4 <Task_state_timer>:
}
/* Prints "Hello World" and sleeps for three seconds */
void Task_state_timer(void *pdata)
{
     9b4:	defff804 	addi	sp,sp,-32
     9b8:	dfc00715 	stw	ra,28(sp)
     9bc:	df000615 	stw	fp,24(sp)
     9c0:	dc400515 	stw	r17,20(sp)
     9c4:	dc000415 	stw	r16,16(sp)
     9c8:	df000604 	addi	fp,sp,24
     9cc:	e13ffd15 	stw	r4,-12(fp)
  debug("Started: Task_state_timer");
     9d0:	d0a00117 	ldw	r2,-32764(gp)
     9d4:	10800317 	ldw	r2,12(r2)
     9d8:	01c03a04 	movi	r7,232
     9dc:	018000b4 	movhi	r6,2
     9e0:	31a63804 	addi	r6,r6,-26400
     9e4:	014000b4 	movhi	r5,2
     9e8:	2966b704 	addi	r5,r5,-25892
     9ec:	1009883a 	mov	r4,r2
     9f0:	0000c4c0 	call	c4c <fprintf>

  while (1)
  {
    log_info("%u: State: %s\t State Time: %d s", OSTime, Get_state_name(state), state_timer);
     9f4:	d0a00117 	ldw	r2,-32764(gp)
     9f8:	14400317 	ldw	r17,12(r2)
     9fc:	d427f917 	ldw	r16,-24604(gp)
     a00:	d0a7d217 	ldw	r2,-24760(gp)
     a04:	1009883a 	mov	r4,r2
     a08:	00002840 	call	284 <Get_state_name>
     a0c:	1007883a 	mov	r3,r2
     a10:	d0a7d117 	ldw	r2,-24764(gp)
     a14:	d8800215 	stw	r2,8(sp)
     a18:	d8c00115 	stw	r3,4(sp)
     a1c:	dc000015 	stw	r16,0(sp)
     a20:	01c03b04 	movi	r7,236
     a24:	018000b4 	movhi	r6,2
     a28:	31a63804 	addi	r6,r6,-26400
     a2c:	014000b4 	movhi	r5,2
     a30:	2966c104 	addi	r5,r5,-25852
     a34:	8809883a 	mov	r4,r17
     a38:	0000c4c0 	call	c4c <fprintf>

    if (prev_state != state)
     a3c:	d0e7cf17 	ldw	r3,-24772(gp)
     a40:	d0a7d217 	ldw	r2,-24760(gp)
     a44:	18800326 	beq	r3,r2,a54 <Task_state_timer+0xa0>
    {
      prev_state = state;
     a48:	d0a7d217 	ldw	r2,-24760(gp)
     a4c:	d0a7cf15 	stw	r2,-24772(gp)
      state_timer = 0;
     a50:	d027d115 	stw	zero,-24764(gp)
    }

    state_timer++;
     a54:	d0a7d117 	ldw	r2,-24764(gp)
     a58:	10800044 	addi	r2,r2,1
     a5c:	d0a7d115 	stw	r2,-24764(gp)

    OSTimeDlyHMSM(0, 0, 1, 0);
     a60:	000f883a 	mov	r7,zero
     a64:	01800044 	movi	r6,1
     a68:	000b883a 	mov	r5,zero
     a6c:	0009883a 	mov	r4,zero
     a70:	00155600 	call	15560 <OSTimeDlyHMSM>
  }
     a74:	003fdf06 	br	9f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70009f4>

00000a78 <main>:
}

/* The main function creates two task and starts multi-tasking */
int main(void)
{
     a78:	defff904 	addi	sp,sp,-28
     a7c:	dfc00615 	stw	ra,24(sp)
     a80:	df000515 	stw	fp,20(sp)
     a84:	df000504 	addi	fp,sp,20
  printf("MicroC/OS-II Licensing Terms\n");
     a88:	010000b4 	movhi	r4,2
     a8c:	2126cd04 	addi	r4,r4,-25804
     a90:	0000d300 	call	d30 <puts>
  printf("============================\n");
     a94:	010000b4 	movhi	r4,2
     a98:	2126d504 	addi	r4,r4,-25772
     a9c:	0000d300 	call	d30 <puts>
  printf("Micrium\'s uC/OS-II is a real-time operating system (RTOS) available in source code.\n");
     aa0:	010000b4 	movhi	r4,2
     aa4:	2126dd04 	addi	r4,r4,-25740
     aa8:	0000d300 	call	d30 <puts>
  printf("This is not open-source software.\n");
     aac:	010000b4 	movhi	r4,2
     ab0:	2126f204 	addi	r4,r4,-25656
     ab4:	0000d300 	call	d30 <puts>
  printf("This RTOS can be used free of charge only for non-commercial purposes and academic projects,\n");
     ab8:	010000b4 	movhi	r4,2
     abc:	2126fb04 	addi	r4,r4,-25620
     ac0:	0000d300 	call	d30 <puts>
  printf("any other use of the code is subject to the terms of an end-user license agreement\n");
     ac4:	010000b4 	movhi	r4,2
     ac8:	21271304 	addi	r4,r4,-25524
     acc:	0000d300 	call	d30 <puts>
  printf("for more information please see the license files included in the BSP project or contact Micrium.\n");
     ad0:	010000b4 	movhi	r4,2
     ad4:	21272804 	addi	r4,r4,-25440
     ad8:	0000d300 	call	d30 <puts>
  printf("Anyone planning to use a Micrium RTOS in a commercial product must purchase a commercial license\n");
     adc:	010000b4 	movhi	r4,2
     ae0:	21274104 	addi	r4,r4,-25340
     ae4:	0000d300 	call	d30 <puts>
  printf("from the owner of the software, Silicon Laboratories Inc.\n");
     ae8:	010000b4 	movhi	r4,2
     aec:	21275a04 	addi	r4,r4,-25240
     af0:	0000d300 	call	d30 <puts>
  printf("Licensing information is available at:\n");
     af4:	010000b4 	movhi	r4,2
     af8:	21276904 	addi	r4,r4,-25180
     afc:	0000d300 	call	d30 <puts>
  printf("Phone: +1 954-217-2036\n");
     b00:	010000b4 	movhi	r4,2
     b04:	21277304 	addi	r4,r4,-25140
     b08:	0000d300 	call	d30 <puts>
  printf("Email: sales@micrium.com\n");
     b0c:	010000b4 	movhi	r4,2
     b10:	21277904 	addi	r4,r4,-25116
     b14:	0000d300 	call	d30 <puts>
  printf("URL: www.micrium.com\n\n\n");
     b18:	010000b4 	movhi	r4,2
     b1c:	21278004 	addi	r4,r4,-25088
     b20:	0000d300 	call	d30 <puts>

  KEY0_flag, KEY1_flag, KEY2_flag, KEY3_flag = 0, 0, 0, 0;
     b24:	d027d615 	stw	zero,-24744(gp)

  /* Initialization Code */
  state = INIT;
     b28:	d027d215 	stw	zero,-24760(gp)
  state_timer = 0;
     b2c:	d027d115 	stw	zero,-24764(gp)

  SEM_read_PS2 = OSSemCreate(0);
     b30:	0009883a 	mov	r4,zero
     b34:	00133400 	call	13340 <OSSemCreate>
     b38:	d0a7d815 	stw	r2,-24736(gp)
  SEM_read_KEYS = OSSemCreate(1);
     b3c:	01000044 	movi	r4,1
     b40:	00133400 	call	13340 <OSSemCreate>
     b44:	d0a7d915 	stw	r2,-24732(gp)

  /* Task creation */
  OSTaskCreateExt(Task_read_KEYs,
     b48:	d8000415 	stw	zero,16(sp)
     b4c:	d8000315 	stw	zero,12(sp)
     b50:	00820004 	movi	r2,2048
     b54:	d8800215 	stw	r2,8(sp)
     b58:	008000b4 	movhi	r2,2
     b5c:	10805c04 	addi	r2,r2,368
     b60:	d8800115 	stw	r2,4(sp)
     b64:	00800044 	movi	r2,1
     b68:	d8800015 	stw	r2,0(sp)
     b6c:	01c00044 	movi	r7,1
     b70:	018000b4 	movhi	r6,2
     b74:	31885b04 	addi	r6,r6,8556
     b78:	000b883a 	mov	r5,zero
     b7c:	01000034 	movhi	r4,0
     b80:	21024c04 	addi	r4,r4,2352
     b84:	001438c0 	call	1438c <OSTaskCreateExt>
                  task_read_keys_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);

  OSTaskCreateExt(Task_state_timer,
     b88:	d8000415 	stw	zero,16(sp)
     b8c:	d8000315 	stw	zero,12(sp)
     b90:	00820004 	movi	r2,2048
     b94:	d8800215 	stw	r2,8(sp)
     b98:	008000b4 	movhi	r2,2
     b9c:	10885c04 	addi	r2,r2,8560
     ba0:	d8800115 	stw	r2,4(sp)
     ba4:	00800084 	movi	r2,2
     ba8:	d8800015 	stw	r2,0(sp)
     bac:	01c00084 	movi	r7,2
     bb0:	018000b4 	movhi	r6,2
     bb4:	31905b04 	addi	r6,r6,16748
     bb8:	000b883a 	mov	r5,zero
     bbc:	01000034 	movhi	r4,0
     bc0:	21026d04 	addi	r4,r4,2484
     bc4:	001438c0 	call	1438c <OSTaskCreateExt>
                  task2_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);

  OSTaskCreateExt(Task_read_PS2,
     bc8:	d8000415 	stw	zero,16(sp)
     bcc:	d8000315 	stw	zero,12(sp)
     bd0:	00820004 	movi	r2,2048
     bd4:	d8800215 	stw	r2,8(sp)
     bd8:	008000b4 	movhi	r2,2
     bdc:	10b85c04 	addi	r2,r2,-7824
     be0:	d8800115 	stw	r2,4(sp)
     be4:	00800104 	movi	r2,4
     be8:	d8800015 	stw	r2,0(sp)
     bec:	01c00104 	movi	r7,4
     bf0:	018000b4 	movhi	r6,2
     bf4:	31805b04 	addi	r6,r6,364
     bf8:	000b883a 	mov	r5,zero
     bfc:	01000034 	movhi	r4,0
     c00:	21013704 	addi	r4,r4,1244
     c04:	001438c0 	call	1438c <OSTaskCreateExt>
                  task_read_ps2_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);

  OSStart();
     c08:	000ece40 	call	ece4 <OSStart>

  return 0;
     c0c:	0005883a 	mov	r2,zero
}
     c10:	e037883a 	mov	sp,fp
     c14:	dfc00117 	ldw	ra,4(sp)
     c18:	df000017 	ldw	fp,0(sp)
     c1c:	dec00204 	addi	sp,sp,8
     c20:	f800283a 	ret

00000c24 <_fprintf_r>:
     c24:	defffe04 	addi	sp,sp,-8
     c28:	2809883a 	mov	r4,r5
     c2c:	300b883a 	mov	r5,r6
     c30:	dfc00015 	stw	ra,0(sp)
     c34:	d9c00115 	stw	r7,4(sp)
     c38:	d9800104 	addi	r6,sp,4
     c3c:	0002fd40 	call	2fd4 <__vfprintf_internal>
     c40:	dfc00017 	ldw	ra,0(sp)
     c44:	dec00204 	addi	sp,sp,8
     c48:	f800283a 	ret

00000c4c <fprintf>:
     c4c:	defffd04 	addi	sp,sp,-12
     c50:	dfc00015 	stw	ra,0(sp)
     c54:	d9800115 	stw	r6,4(sp)
     c58:	d9c00215 	stw	r7,8(sp)
     c5c:	d9800104 	addi	r6,sp,4
     c60:	0002fd40 	call	2fd4 <__vfprintf_internal>
     c64:	dfc00017 	ldw	ra,0(sp)
     c68:	dec00304 	addi	sp,sp,12
     c6c:	f800283a 	ret

00000c70 <_puts_r>:
     c70:	defff604 	addi	sp,sp,-40
     c74:	dc000715 	stw	r16,28(sp)
     c78:	2021883a 	mov	r16,r4
     c7c:	2809883a 	mov	r4,r5
     c80:	dc400815 	stw	r17,32(sp)
     c84:	dfc00915 	stw	ra,36(sp)
     c88:	2823883a 	mov	r17,r5
     c8c:	0000d440 	call	d44 <strlen>
     c90:	10c00044 	addi	r3,r2,1
     c94:	d8800115 	stw	r2,4(sp)
     c98:	008000b4 	movhi	r2,2
     c9c:	10a78704 	addi	r2,r2,-25060
     ca0:	d8800215 	stw	r2,8(sp)
     ca4:	00800044 	movi	r2,1
     ca8:	d8800315 	stw	r2,12(sp)
     cac:	00800084 	movi	r2,2
     cb0:	dc400015 	stw	r17,0(sp)
     cb4:	d8c00615 	stw	r3,24(sp)
     cb8:	dec00415 	stw	sp,16(sp)
     cbc:	d8800515 	stw	r2,20(sp)
     cc0:	80000226 	beq	r16,zero,ccc <_puts_r+0x5c>
     cc4:	80800e17 	ldw	r2,56(r16)
     cc8:	10001426 	beq	r2,zero,d1c <_puts_r+0xac>
     ccc:	81400217 	ldw	r5,8(r16)
     cd0:	2880030b 	ldhu	r2,12(r5)
     cd4:	10c8000c 	andi	r3,r2,8192
     cd8:	1800061e 	bne	r3,zero,cf4 <_puts_r+0x84>
     cdc:	29001917 	ldw	r4,100(r5)
     ce0:	00f7ffc4 	movi	r3,-8193
     ce4:	10880014 	ori	r2,r2,8192
     ce8:	20c6703a 	and	r3,r4,r3
     cec:	2880030d 	sth	r2,12(r5)
     cf0:	28c01915 	stw	r3,100(r5)
     cf4:	d9800404 	addi	r6,sp,16
     cf8:	8009883a 	mov	r4,r16
     cfc:	00055040 	call	5504 <__sfvwrite_r>
     d00:	1000091e 	bne	r2,zero,d28 <_puts_r+0xb8>
     d04:	00800284 	movi	r2,10
     d08:	dfc00917 	ldw	ra,36(sp)
     d0c:	dc400817 	ldw	r17,32(sp)
     d10:	dc000717 	ldw	r16,28(sp)
     d14:	dec00a04 	addi	sp,sp,40
     d18:	f800283a 	ret
     d1c:	8009883a 	mov	r4,r16
     d20:	00050800 	call	5080 <__sinit>
     d24:	003fe906 	br	ccc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000ccc>
     d28:	00bfffc4 	movi	r2,-1
     d2c:	003ff606 	br	d08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000d08>

00000d30 <puts>:
     d30:	008000b4 	movhi	r2,2
     d34:	10b05204 	addi	r2,r2,-16056
     d38:	200b883a 	mov	r5,r4
     d3c:	11000017 	ldw	r4,0(r2)
     d40:	0000c701 	jmpi	c70 <_puts_r>

00000d44 <strlen>:
     d44:	208000cc 	andi	r2,r4,3
     d48:	10002026 	beq	r2,zero,dcc <strlen+0x88>
     d4c:	20800007 	ldb	r2,0(r4)
     d50:	10002026 	beq	r2,zero,dd4 <strlen+0x90>
     d54:	2005883a 	mov	r2,r4
     d58:	00000206 	br	d64 <strlen+0x20>
     d5c:	10c00007 	ldb	r3,0(r2)
     d60:	18001826 	beq	r3,zero,dc4 <strlen+0x80>
     d64:	10800044 	addi	r2,r2,1
     d68:	10c000cc 	andi	r3,r2,3
     d6c:	183ffb1e 	bne	r3,zero,d5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000d5c>
     d70:	10c00017 	ldw	r3,0(r2)
     d74:	01ffbff4 	movhi	r7,65279
     d78:	39ffbfc4 	addi	r7,r7,-257
     d7c:	00ca303a 	nor	r5,zero,r3
     d80:	01a02074 	movhi	r6,32897
     d84:	19c7883a 	add	r3,r3,r7
     d88:	31a02004 	addi	r6,r6,-32640
     d8c:	1946703a 	and	r3,r3,r5
     d90:	1986703a 	and	r3,r3,r6
     d94:	1800091e 	bne	r3,zero,dbc <strlen+0x78>
     d98:	10800104 	addi	r2,r2,4
     d9c:	10c00017 	ldw	r3,0(r2)
     da0:	19cb883a 	add	r5,r3,r7
     da4:	00c6303a 	nor	r3,zero,r3
     da8:	28c6703a 	and	r3,r5,r3
     dac:	1986703a 	and	r3,r3,r6
     db0:	183ff926 	beq	r3,zero,d98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000d98>
     db4:	00000106 	br	dbc <strlen+0x78>
     db8:	10800044 	addi	r2,r2,1
     dbc:	10c00007 	ldb	r3,0(r2)
     dc0:	183ffd1e 	bne	r3,zero,db8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000db8>
     dc4:	1105c83a 	sub	r2,r2,r4
     dc8:	f800283a 	ret
     dcc:	2005883a 	mov	r2,r4
     dd0:	003fe706 	br	d70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000d70>
     dd4:	0005883a 	mov	r2,zero
     dd8:	f800283a 	ret

00000ddc <___vfprintf_internal_r>:
     ddc:	deffb804 	addi	sp,sp,-288
     de0:	dfc04715 	stw	ra,284(sp)
     de4:	ddc04515 	stw	r23,276(sp)
     de8:	dd404315 	stw	r21,268(sp)
     dec:	d9002c15 	stw	r4,176(sp)
     df0:	282f883a 	mov	r23,r5
     df4:	302b883a 	mov	r21,r6
     df8:	d9c02d15 	stw	r7,180(sp)
     dfc:	df004615 	stw	fp,280(sp)
     e00:	dd804415 	stw	r22,272(sp)
     e04:	dd004215 	stw	r20,264(sp)
     e08:	dcc04115 	stw	r19,260(sp)
     e0c:	dc804015 	stw	r18,256(sp)
     e10:	dc403f15 	stw	r17,252(sp)
     e14:	dc003e15 	stw	r16,248(sp)
     e18:	0005bf40 	call	5bf4 <_localeconv_r>
     e1c:	10800017 	ldw	r2,0(r2)
     e20:	1009883a 	mov	r4,r2
     e24:	d8803415 	stw	r2,208(sp)
     e28:	0000d440 	call	d44 <strlen>
     e2c:	d8803715 	stw	r2,220(sp)
     e30:	d8802c17 	ldw	r2,176(sp)
     e34:	10000226 	beq	r2,zero,e40 <___vfprintf_internal_r+0x64>
     e38:	10800e17 	ldw	r2,56(r2)
     e3c:	1000f926 	beq	r2,zero,1224 <___vfprintf_internal_r+0x448>
     e40:	b880030b 	ldhu	r2,12(r23)
     e44:	10c8000c 	andi	r3,r2,8192
     e48:	1800061e 	bne	r3,zero,e64 <___vfprintf_internal_r+0x88>
     e4c:	b9001917 	ldw	r4,100(r23)
     e50:	00f7ffc4 	movi	r3,-8193
     e54:	10880014 	ori	r2,r2,8192
     e58:	20c6703a 	and	r3,r4,r3
     e5c:	b880030d 	sth	r2,12(r23)
     e60:	b8c01915 	stw	r3,100(r23)
     e64:	10c0020c 	andi	r3,r2,8
     e68:	1800c126 	beq	r3,zero,1170 <___vfprintf_internal_r+0x394>
     e6c:	b8c00417 	ldw	r3,16(r23)
     e70:	1800bf26 	beq	r3,zero,1170 <___vfprintf_internal_r+0x394>
     e74:	1080068c 	andi	r2,r2,26
     e78:	00c00284 	movi	r3,10
     e7c:	10c0c426 	beq	r2,r3,1190 <___vfprintf_internal_r+0x3b4>
     e80:	d8c00404 	addi	r3,sp,16
     e84:	050000b4 	movhi	r20,2
     e88:	d9001e04 	addi	r4,sp,120
     e8c:	a5279884 	addi	r20,r20,-24990
     e90:	d8c01e15 	stw	r3,120(sp)
     e94:	d8002015 	stw	zero,128(sp)
     e98:	d8001f15 	stw	zero,124(sp)
     e9c:	d8003315 	stw	zero,204(sp)
     ea0:	d8003615 	stw	zero,216(sp)
     ea4:	d8003815 	stw	zero,224(sp)
     ea8:	1811883a 	mov	r8,r3
     eac:	d8003915 	stw	zero,228(sp)
     eb0:	d8003a15 	stw	zero,232(sp)
     eb4:	d8002f15 	stw	zero,188(sp)
     eb8:	d9002815 	stw	r4,160(sp)
     ebc:	a8800007 	ldb	r2,0(r21)
     ec0:	10027b26 	beq	r2,zero,18b0 <___vfprintf_internal_r+0xad4>
     ec4:	00c00944 	movi	r3,37
     ec8:	a821883a 	mov	r16,r21
     ecc:	10c0021e 	bne	r2,r3,ed8 <___vfprintf_internal_r+0xfc>
     ed0:	00001406 	br	f24 <___vfprintf_internal_r+0x148>
     ed4:	10c00326 	beq	r2,r3,ee4 <___vfprintf_internal_r+0x108>
     ed8:	84000044 	addi	r16,r16,1
     edc:	80800007 	ldb	r2,0(r16)
     ee0:	103ffc1e 	bne	r2,zero,ed4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000ed4>
     ee4:	8563c83a 	sub	r17,r16,r21
     ee8:	88000e26 	beq	r17,zero,f24 <___vfprintf_internal_r+0x148>
     eec:	d8c02017 	ldw	r3,128(sp)
     ef0:	d8801f17 	ldw	r2,124(sp)
     ef4:	45400015 	stw	r21,0(r8)
     ef8:	1c47883a 	add	r3,r3,r17
     efc:	10800044 	addi	r2,r2,1
     f00:	d8c02015 	stw	r3,128(sp)
     f04:	44400115 	stw	r17,4(r8)
     f08:	d8801f15 	stw	r2,124(sp)
     f0c:	00c001c4 	movi	r3,7
     f10:	1880a716 	blt	r3,r2,11b0 <___vfprintf_internal_r+0x3d4>
     f14:	42000204 	addi	r8,r8,8
     f18:	d9402f17 	ldw	r5,188(sp)
     f1c:	2c4b883a 	add	r5,r5,r17
     f20:	d9402f15 	stw	r5,188(sp)
     f24:	80800007 	ldb	r2,0(r16)
     f28:	1000a826 	beq	r2,zero,11cc <___vfprintf_internal_r+0x3f0>
     f2c:	84400047 	ldb	r17,1(r16)
     f30:	00bfffc4 	movi	r2,-1
     f34:	85400044 	addi	r21,r16,1
     f38:	d8002785 	stb	zero,158(sp)
     f3c:	0007883a 	mov	r3,zero
     f40:	000f883a 	mov	r7,zero
     f44:	d8802915 	stw	r2,164(sp)
     f48:	d8003115 	stw	zero,196(sp)
     f4c:	0025883a 	mov	r18,zero
     f50:	01401604 	movi	r5,88
     f54:	01800244 	movi	r6,9
     f58:	02800a84 	movi	r10,42
     f5c:	02401b04 	movi	r9,108
     f60:	ad400044 	addi	r21,r21,1
     f64:	88bff804 	addi	r2,r17,-32
     f68:	28830436 	bltu	r5,r2,1b7c <___vfprintf_internal_r+0xda0>
     f6c:	100490ba 	slli	r2,r2,2
     f70:	01000034 	movhi	r4,0
     f74:	2103e104 	addi	r4,r4,3972
     f78:	1105883a 	add	r2,r2,r4
     f7c:	10800017 	ldw	r2,0(r2)
     f80:	1000683a 	jmp	r2
     f84:	00001a9c 	xori	zero,zero,106
     f88:	00001b7c 	xorhi	zero,zero,109
     f8c:	00001b7c 	xorhi	zero,zero,109
     f90:	00001abc 	xorhi	zero,zero,106
     f94:	00001b7c 	xorhi	zero,zero,109
     f98:	00001b7c 	xorhi	zero,zero,109
     f9c:	00001b7c 	xorhi	zero,zero,109
     fa0:	00001b7c 	xorhi	zero,zero,109
     fa4:	00001b7c 	xorhi	zero,zero,109
     fa8:	00001b7c 	xorhi	zero,zero,109
     fac:	00001230 	cmpltui	zero,zero,72
     fb0:	000019d8 	cmpnei	zero,zero,103
     fb4:	00001b7c 	xorhi	zero,zero,109
     fb8:	000010f8 	rdprs	zero,zero,67
     fbc:	00001258 	cmpnei	zero,zero,73
     fc0:	00001b7c 	xorhi	zero,zero,109
     fc4:	00001298 	cmpnei	zero,zero,74
     fc8:	000012a4 	muli	zero,zero,74
     fcc:	000012a4 	muli	zero,zero,74
     fd0:	000012a4 	muli	zero,zero,74
     fd4:	000012a4 	muli	zero,zero,74
     fd8:	000012a4 	muli	zero,zero,74
     fdc:	000012a4 	muli	zero,zero,74
     fe0:	000012a4 	muli	zero,zero,74
     fe4:	000012a4 	muli	zero,zero,74
     fe8:	000012a4 	muli	zero,zero,74
     fec:	00001b7c 	xorhi	zero,zero,109
     ff0:	00001b7c 	xorhi	zero,zero,109
     ff4:	00001b7c 	xorhi	zero,zero,109
     ff8:	00001b7c 	xorhi	zero,zero,109
     ffc:	00001b7c 	xorhi	zero,zero,109
    1000:	00001b7c 	xorhi	zero,zero,109
    1004:	00001b7c 	xorhi	zero,zero,109
    1008:	00001b7c 	xorhi	zero,zero,109
    100c:	00001b7c 	xorhi	zero,zero,109
    1010:	00001b7c 	xorhi	zero,zero,109
    1014:	000012d8 	cmpnei	zero,zero,75
    1018:	00001394 	movui	zero,78
    101c:	00001b7c 	xorhi	zero,zero,109
    1020:	00001394 	movui	zero,78
    1024:	00001b7c 	xorhi	zero,zero,109
    1028:	00001b7c 	xorhi	zero,zero,109
    102c:	00001b7c 	xorhi	zero,zero,109
    1030:	00001b7c 	xorhi	zero,zero,109
    1034:	00001434 	movhi	zero,80
    1038:	00001b7c 	xorhi	zero,zero,109
    103c:	00001b7c 	xorhi	zero,zero,109
    1040:	00001440 	call	144 <alt_irq_handler+0x48>
    1044:	00001b7c 	xorhi	zero,zero,109
    1048:	00001b7c 	xorhi	zero,zero,109
    104c:	00001b7c 	xorhi	zero,zero,109
    1050:	00001b7c 	xorhi	zero,zero,109
    1054:	00001b7c 	xorhi	zero,zero,109
    1058:	000018b8 	rdprs	zero,zero,98
    105c:	00001b7c 	xorhi	zero,zero,109
    1060:	00001b7c 	xorhi	zero,zero,109
    1064:	00001918 	cmpnei	zero,zero,100
    1068:	00001b7c 	xorhi	zero,zero,109
    106c:	00001b7c 	xorhi	zero,zero,109
    1070:	00001b7c 	xorhi	zero,zero,109
    1074:	00001b7c 	xorhi	zero,zero,109
    1078:	00001b7c 	xorhi	zero,zero,109
    107c:	00001b7c 	xorhi	zero,zero,109
    1080:	00001b7c 	xorhi	zero,zero,109
    1084:	00001b7c 	xorhi	zero,zero,109
    1088:	00001b7c 	xorhi	zero,zero,109
    108c:	00001b7c 	xorhi	zero,zero,109
    1090:	00001b28 	cmpgeui	zero,zero,108
    1094:	00001ac8 	cmpgei	zero,zero,107
    1098:	00001394 	movui	zero,78
    109c:	00001394 	movui	zero,78
    10a0:	00001394 	movui	zero,78
    10a4:	00001ad8 	cmpnei	zero,zero,107
    10a8:	00001ac8 	cmpgei	zero,zero,107
    10ac:	00001b7c 	xorhi	zero,zero,109
    10b0:	00001b7c 	xorhi	zero,zero,109
    10b4:	00001ae4 	muli	zero,zero,107
    10b8:	00001b7c 	xorhi	zero,zero,109
    10bc:	00001af4 	movhi	zero,107
    10c0:	000019c8 	cmpgei	zero,zero,103
    10c4:	00001104 	movi	zero,68
    10c8:	000019e8 	cmpgeui	zero,zero,103
    10cc:	00001b7c 	xorhi	zero,zero,109
    10d0:	000019f4 	movhi	zero,103
    10d4:	00001b7c 	xorhi	zero,zero,109
    10d8:	00001a50 	cmplti	zero,zero,105
    10dc:	00001b7c 	xorhi	zero,zero,109
    10e0:	00001b7c 	xorhi	zero,zero,109
    10e4:	00001a60 	cmpeqi	zero,zero,105
    10e8:	d9003117 	ldw	r4,196(sp)
    10ec:	d8802d15 	stw	r2,180(sp)
    10f0:	0109c83a 	sub	r4,zero,r4
    10f4:	d9003115 	stw	r4,196(sp)
    10f8:	94800114 	ori	r18,r18,4
    10fc:	ac400007 	ldb	r17,0(r21)
    1100:	003f9706 	br	f60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000f60>
    1104:	00800c04 	movi	r2,48
    1108:	d9002d17 	ldw	r4,180(sp)
    110c:	d9402917 	ldw	r5,164(sp)
    1110:	d8802705 	stb	r2,156(sp)
    1114:	00801e04 	movi	r2,120
    1118:	d8802745 	stb	r2,157(sp)
    111c:	d8002785 	stb	zero,158(sp)
    1120:	20c00104 	addi	r3,r4,4
    1124:	24c00017 	ldw	r19,0(r4)
    1128:	002d883a 	mov	r22,zero
    112c:	90800094 	ori	r2,r18,2
    1130:	28029a16 	blt	r5,zero,1b9c <___vfprintf_internal_r+0xdc0>
    1134:	00bfdfc4 	movi	r2,-129
    1138:	90a4703a 	and	r18,r18,r2
    113c:	d8c02d15 	stw	r3,180(sp)
    1140:	94800094 	ori	r18,r18,2
    1144:	9802871e 	bne	r19,zero,1b64 <___vfprintf_internal_r+0xd88>
    1148:	008000b4 	movhi	r2,2
    114c:	10a79104 	addi	r2,r2,-25020
    1150:	d8803915 	stw	r2,228(sp)
    1154:	04401e04 	movi	r17,120
    1158:	d8802917 	ldw	r2,164(sp)
    115c:	0039883a 	mov	fp,zero
    1160:	1001e926 	beq	r2,zero,1908 <___vfprintf_internal_r+0xb2c>
    1164:	0027883a 	mov	r19,zero
    1168:	002d883a 	mov	r22,zero
    116c:	00020506 	br	1984 <___vfprintf_internal_r+0xba8>
    1170:	d9002c17 	ldw	r4,176(sp)
    1174:	b80b883a 	mov	r5,r23
    1178:	00030ac0 	call	30ac <__swsetup_r>
    117c:	1005ac1e 	bne	r2,zero,2830 <___vfprintf_internal_r+0x1a54>
    1180:	b880030b 	ldhu	r2,12(r23)
    1184:	00c00284 	movi	r3,10
    1188:	1080068c 	andi	r2,r2,26
    118c:	10ff3c1e 	bne	r2,r3,e80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000e80>
    1190:	b880038f 	ldh	r2,14(r23)
    1194:	103f3a16 	blt	r2,zero,e80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000e80>
    1198:	d9c02d17 	ldw	r7,180(sp)
    119c:	d9002c17 	ldw	r4,176(sp)
    11a0:	a80d883a 	mov	r6,r21
    11a4:	b80b883a 	mov	r5,r23
    11a8:	0002ff00 	call	2ff0 <__sbprintf>
    11ac:	00001106 	br	11f4 <___vfprintf_internal_r+0x418>
    11b0:	d9002c17 	ldw	r4,176(sp)
    11b4:	d9801e04 	addi	r6,sp,120
    11b8:	b80b883a 	mov	r5,r23
    11bc:	00083d80 	call	83d8 <__sprint_r>
    11c0:	1000081e 	bne	r2,zero,11e4 <___vfprintf_internal_r+0x408>
    11c4:	da000404 	addi	r8,sp,16
    11c8:	003f5306 	br	f18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000f18>
    11cc:	d8802017 	ldw	r2,128(sp)
    11d0:	10000426 	beq	r2,zero,11e4 <___vfprintf_internal_r+0x408>
    11d4:	d9002c17 	ldw	r4,176(sp)
    11d8:	d9801e04 	addi	r6,sp,120
    11dc:	b80b883a 	mov	r5,r23
    11e0:	00083d80 	call	83d8 <__sprint_r>
    11e4:	b880030b 	ldhu	r2,12(r23)
    11e8:	1080100c 	andi	r2,r2,64
    11ec:	1005901e 	bne	r2,zero,2830 <___vfprintf_internal_r+0x1a54>
    11f0:	d8802f17 	ldw	r2,188(sp)
    11f4:	dfc04717 	ldw	ra,284(sp)
    11f8:	df004617 	ldw	fp,280(sp)
    11fc:	ddc04517 	ldw	r23,276(sp)
    1200:	dd804417 	ldw	r22,272(sp)
    1204:	dd404317 	ldw	r21,268(sp)
    1208:	dd004217 	ldw	r20,264(sp)
    120c:	dcc04117 	ldw	r19,260(sp)
    1210:	dc804017 	ldw	r18,256(sp)
    1214:	dc403f17 	ldw	r17,252(sp)
    1218:	dc003e17 	ldw	r16,248(sp)
    121c:	dec04804 	addi	sp,sp,288
    1220:	f800283a 	ret
    1224:	d9002c17 	ldw	r4,176(sp)
    1228:	00050800 	call	5080 <__sinit>
    122c:	003f0406 	br	e40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000e40>
    1230:	d8802d17 	ldw	r2,180(sp)
    1234:	d9002d17 	ldw	r4,180(sp)
    1238:	10800017 	ldw	r2,0(r2)
    123c:	d8803115 	stw	r2,196(sp)
    1240:	20800104 	addi	r2,r4,4
    1244:	d9003117 	ldw	r4,196(sp)
    1248:	203fa716 	blt	r4,zero,10e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70010e8>
    124c:	d8802d15 	stw	r2,180(sp)
    1250:	ac400007 	ldb	r17,0(r21)
    1254:	003f4206 	br	f60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000f60>
    1258:	ac400007 	ldb	r17,0(r21)
    125c:	aac00044 	addi	r11,r21,1
    1260:	8a872826 	beq	r17,r10,2f04 <___vfprintf_internal_r+0x2128>
    1264:	88bff404 	addi	r2,r17,-48
    1268:	0009883a 	mov	r4,zero
    126c:	30867d36 	bltu	r6,r2,2c64 <___vfprintf_internal_r+0x1e88>
    1270:	5c400007 	ldb	r17,0(r11)
    1274:	210002a4 	muli	r4,r4,10
    1278:	5d400044 	addi	r21,r11,1
    127c:	a817883a 	mov	r11,r21
    1280:	2089883a 	add	r4,r4,r2
    1284:	88bff404 	addi	r2,r17,-48
    1288:	30bff92e 	bgeu	r6,r2,1270 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001270>
    128c:	2005c916 	blt	r4,zero,29b4 <___vfprintf_internal_r+0x1bd8>
    1290:	d9002915 	stw	r4,164(sp)
    1294:	003f3306 	br	f64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000f64>
    1298:	94802014 	ori	r18,r18,128
    129c:	ac400007 	ldb	r17,0(r21)
    12a0:	003f2f06 	br	f60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000f60>
    12a4:	a809883a 	mov	r4,r21
    12a8:	d8003115 	stw	zero,196(sp)
    12ac:	88bff404 	addi	r2,r17,-48
    12b0:	0017883a 	mov	r11,zero
    12b4:	24400007 	ldb	r17,0(r4)
    12b8:	5ac002a4 	muli	r11,r11,10
    12bc:	ad400044 	addi	r21,r21,1
    12c0:	a809883a 	mov	r4,r21
    12c4:	12d7883a 	add	r11,r2,r11
    12c8:	88bff404 	addi	r2,r17,-48
    12cc:	30bff92e 	bgeu	r6,r2,12b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70012b4>
    12d0:	dac03115 	stw	r11,196(sp)
    12d4:	003f2306 	br	f64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000f64>
    12d8:	18c03fcc 	andi	r3,r3,255
    12dc:	18072b1e 	bne	r3,zero,2f8c <___vfprintf_internal_r+0x21b0>
    12e0:	94800414 	ori	r18,r18,16
    12e4:	9080080c 	andi	r2,r18,32
    12e8:	10037b26 	beq	r2,zero,20d8 <___vfprintf_internal_r+0x12fc>
    12ec:	d9402d17 	ldw	r5,180(sp)
    12f0:	28800117 	ldw	r2,4(r5)
    12f4:	2cc00017 	ldw	r19,0(r5)
    12f8:	29400204 	addi	r5,r5,8
    12fc:	d9402d15 	stw	r5,180(sp)
    1300:	102d883a 	mov	r22,r2
    1304:	10044b16 	blt	r2,zero,2434 <___vfprintf_internal_r+0x1658>
    1308:	d9402917 	ldw	r5,164(sp)
    130c:	df002783 	ldbu	fp,158(sp)
    1310:	2803bc16 	blt	r5,zero,2204 <___vfprintf_internal_r+0x1428>
    1314:	00ffdfc4 	movi	r3,-129
    1318:	9d84b03a 	or	r2,r19,r22
    131c:	90e4703a 	and	r18,r18,r3
    1320:	10017726 	beq	r2,zero,1900 <___vfprintf_internal_r+0xb24>
    1324:	b0038326 	beq	r22,zero,2134 <___vfprintf_internal_r+0x1358>
    1328:	dc402a15 	stw	r17,168(sp)
    132c:	dc001e04 	addi	r16,sp,120
    1330:	b023883a 	mov	r17,r22
    1334:	402d883a 	mov	r22,r8
    1338:	9809883a 	mov	r4,r19
    133c:	880b883a 	mov	r5,r17
    1340:	01800284 	movi	r6,10
    1344:	000f883a 	mov	r7,zero
    1348:	000a7d00 	call	a7d0 <__umoddi3>
    134c:	10800c04 	addi	r2,r2,48
    1350:	843fffc4 	addi	r16,r16,-1
    1354:	9809883a 	mov	r4,r19
    1358:	880b883a 	mov	r5,r17
    135c:	80800005 	stb	r2,0(r16)
    1360:	01800284 	movi	r6,10
    1364:	000f883a 	mov	r7,zero
    1368:	000a2580 	call	a258 <__udivdi3>
    136c:	1027883a 	mov	r19,r2
    1370:	10c4b03a 	or	r2,r2,r3
    1374:	1823883a 	mov	r17,r3
    1378:	103fef1e 	bne	r2,zero,1338 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001338>
    137c:	d8c02817 	ldw	r3,160(sp)
    1380:	dc402a17 	ldw	r17,168(sp)
    1384:	b011883a 	mov	r8,r22
    1388:	1c07c83a 	sub	r3,r3,r16
    138c:	d8c02e15 	stw	r3,184(sp)
    1390:	00005906 	br	14f8 <___vfprintf_internal_r+0x71c>
    1394:	18c03fcc 	andi	r3,r3,255
    1398:	1806fa1e 	bne	r3,zero,2f84 <___vfprintf_internal_r+0x21a8>
    139c:	9080020c 	andi	r2,r18,8
    13a0:	10048a26 	beq	r2,zero,25cc <___vfprintf_internal_r+0x17f0>
    13a4:	d8c02d17 	ldw	r3,180(sp)
    13a8:	d9002d17 	ldw	r4,180(sp)
    13ac:	d9402d17 	ldw	r5,180(sp)
    13b0:	18c00017 	ldw	r3,0(r3)
    13b4:	21000117 	ldw	r4,4(r4)
    13b8:	29400204 	addi	r5,r5,8
    13bc:	d8c03615 	stw	r3,216(sp)
    13c0:	d9003815 	stw	r4,224(sp)
    13c4:	d9402d15 	stw	r5,180(sp)
    13c8:	d9003617 	ldw	r4,216(sp)
    13cc:	d9403817 	ldw	r5,224(sp)
    13d0:	da003d15 	stw	r8,244(sp)
    13d4:	04000044 	movi	r16,1
    13d8:	0007ffc0 	call	7ffc <__fpclassifyd>
    13dc:	da003d17 	ldw	r8,244(sp)
    13e0:	14041f1e 	bne	r2,r16,2460 <___vfprintf_internal_r+0x1684>
    13e4:	d9003617 	ldw	r4,216(sp)
    13e8:	d9403817 	ldw	r5,224(sp)
    13ec:	000d883a 	mov	r6,zero
    13f0:	000f883a 	mov	r7,zero
    13f4:	000c1b40 	call	c1b4 <__ledf2>
    13f8:	da003d17 	ldw	r8,244(sp)
    13fc:	1005be16 	blt	r2,zero,2af8 <___vfprintf_internal_r+0x1d1c>
    1400:	df002783 	ldbu	fp,158(sp)
    1404:	008011c4 	movi	r2,71
    1408:	1445330e 	bge	r2,r17,28d8 <___vfprintf_internal_r+0x1afc>
    140c:	040000b4 	movhi	r16,2
    1410:	84278904 	addi	r16,r16,-25052
    1414:	00c000c4 	movi	r3,3
    1418:	00bfdfc4 	movi	r2,-129
    141c:	d8c02a15 	stw	r3,168(sp)
    1420:	90a4703a 	and	r18,r18,r2
    1424:	d8c02e15 	stw	r3,184(sp)
    1428:	d8002915 	stw	zero,164(sp)
    142c:	d8003215 	stw	zero,200(sp)
    1430:	00003706 	br	1510 <___vfprintf_internal_r+0x734>
    1434:	94800214 	ori	r18,r18,8
    1438:	ac400007 	ldb	r17,0(r21)
    143c:	003ec806 	br	f60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000f60>
    1440:	18c03fcc 	andi	r3,r3,255
    1444:	1806db1e 	bne	r3,zero,2fb4 <___vfprintf_internal_r+0x21d8>
    1448:	94800414 	ori	r18,r18,16
    144c:	9080080c 	andi	r2,r18,32
    1450:	1002d826 	beq	r2,zero,1fb4 <___vfprintf_internal_r+0x11d8>
    1454:	d9402d17 	ldw	r5,180(sp)
    1458:	d8c02917 	ldw	r3,164(sp)
    145c:	d8002785 	stb	zero,158(sp)
    1460:	28800204 	addi	r2,r5,8
    1464:	2cc00017 	ldw	r19,0(r5)
    1468:	2d800117 	ldw	r22,4(r5)
    146c:	18048f16 	blt	r3,zero,26ac <___vfprintf_internal_r+0x18d0>
    1470:	013fdfc4 	movi	r4,-129
    1474:	9d86b03a 	or	r3,r19,r22
    1478:	d8802d15 	stw	r2,180(sp)
    147c:	9124703a 	and	r18,r18,r4
    1480:	1802d91e 	bne	r3,zero,1fe8 <___vfprintf_internal_r+0x120c>
    1484:	d8c02917 	ldw	r3,164(sp)
    1488:	0039883a 	mov	fp,zero
    148c:	1805c326 	beq	r3,zero,2b9c <___vfprintf_internal_r+0x1dc0>
    1490:	0027883a 	mov	r19,zero
    1494:	002d883a 	mov	r22,zero
    1498:	dc001e04 	addi	r16,sp,120
    149c:	9806d0fa 	srli	r3,r19,3
    14a0:	b008977a 	slli	r4,r22,29
    14a4:	b02cd0fa 	srli	r22,r22,3
    14a8:	9cc001cc 	andi	r19,r19,7
    14ac:	98800c04 	addi	r2,r19,48
    14b0:	843fffc4 	addi	r16,r16,-1
    14b4:	20e6b03a 	or	r19,r4,r3
    14b8:	80800005 	stb	r2,0(r16)
    14bc:	9d86b03a 	or	r3,r19,r22
    14c0:	183ff61e 	bne	r3,zero,149c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700149c>
    14c4:	90c0004c 	andi	r3,r18,1
    14c8:	18013b26 	beq	r3,zero,19b8 <___vfprintf_internal_r+0xbdc>
    14cc:	10803fcc 	andi	r2,r2,255
    14d0:	1080201c 	xori	r2,r2,128
    14d4:	10bfe004 	addi	r2,r2,-128
    14d8:	00c00c04 	movi	r3,48
    14dc:	10c13626 	beq	r2,r3,19b8 <___vfprintf_internal_r+0xbdc>
    14e0:	80ffffc5 	stb	r3,-1(r16)
    14e4:	d8c02817 	ldw	r3,160(sp)
    14e8:	80bfffc4 	addi	r2,r16,-1
    14ec:	1021883a 	mov	r16,r2
    14f0:	1887c83a 	sub	r3,r3,r2
    14f4:	d8c02e15 	stw	r3,184(sp)
    14f8:	d8802e17 	ldw	r2,184(sp)
    14fc:	d9002917 	ldw	r4,164(sp)
    1500:	1100010e 	bge	r2,r4,1508 <___vfprintf_internal_r+0x72c>
    1504:	2005883a 	mov	r2,r4
    1508:	d8802a15 	stw	r2,168(sp)
    150c:	d8003215 	stw	zero,200(sp)
    1510:	e7003fcc 	andi	fp,fp,255
    1514:	e700201c 	xori	fp,fp,128
    1518:	e73fe004 	addi	fp,fp,-128
    151c:	e0000326 	beq	fp,zero,152c <___vfprintf_internal_r+0x750>
    1520:	d8c02a17 	ldw	r3,168(sp)
    1524:	18c00044 	addi	r3,r3,1
    1528:	d8c02a15 	stw	r3,168(sp)
    152c:	90c0008c 	andi	r3,r18,2
    1530:	d8c02b15 	stw	r3,172(sp)
    1534:	18000326 	beq	r3,zero,1544 <___vfprintf_internal_r+0x768>
    1538:	d8c02a17 	ldw	r3,168(sp)
    153c:	18c00084 	addi	r3,r3,2
    1540:	d8c02a15 	stw	r3,168(sp)
    1544:	90c0210c 	andi	r3,r18,132
    1548:	d8c03015 	stw	r3,192(sp)
    154c:	1801a31e 	bne	r3,zero,1bdc <___vfprintf_internal_r+0xe00>
    1550:	d9003117 	ldw	r4,196(sp)
    1554:	d8c02a17 	ldw	r3,168(sp)
    1558:	20e7c83a 	sub	r19,r4,r3
    155c:	04c19f0e 	bge	zero,r19,1bdc <___vfprintf_internal_r+0xe00>
    1560:	02400404 	movi	r9,16
    1564:	d8c02017 	ldw	r3,128(sp)
    1568:	d8801f17 	ldw	r2,124(sp)
    156c:	4cc50d0e 	bge	r9,r19,29a4 <___vfprintf_internal_r+0x1bc8>
    1570:	014000b4 	movhi	r5,2
    1574:	29679c84 	addi	r5,r5,-24974
    1578:	dc403b15 	stw	r17,236(sp)
    157c:	d9403515 	stw	r5,212(sp)
    1580:	9823883a 	mov	r17,r19
    1584:	482d883a 	mov	r22,r9
    1588:	9027883a 	mov	r19,r18
    158c:	070001c4 	movi	fp,7
    1590:	8025883a 	mov	r18,r16
    1594:	dc002c17 	ldw	r16,176(sp)
    1598:	00000306 	br	15a8 <___vfprintf_internal_r+0x7cc>
    159c:	8c7ffc04 	addi	r17,r17,-16
    15a0:	42000204 	addi	r8,r8,8
    15a4:	b440130e 	bge	r22,r17,15f4 <___vfprintf_internal_r+0x818>
    15a8:	010000b4 	movhi	r4,2
    15ac:	18c00404 	addi	r3,r3,16
    15b0:	10800044 	addi	r2,r2,1
    15b4:	21279c84 	addi	r4,r4,-24974
    15b8:	41000015 	stw	r4,0(r8)
    15bc:	45800115 	stw	r22,4(r8)
    15c0:	d8c02015 	stw	r3,128(sp)
    15c4:	d8801f15 	stw	r2,124(sp)
    15c8:	e0bff40e 	bge	fp,r2,159c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700159c>
    15cc:	d9801e04 	addi	r6,sp,120
    15d0:	b80b883a 	mov	r5,r23
    15d4:	8009883a 	mov	r4,r16
    15d8:	00083d80 	call	83d8 <__sprint_r>
    15dc:	103f011e 	bne	r2,zero,11e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70011e4>
    15e0:	8c7ffc04 	addi	r17,r17,-16
    15e4:	d8c02017 	ldw	r3,128(sp)
    15e8:	d8801f17 	ldw	r2,124(sp)
    15ec:	da000404 	addi	r8,sp,16
    15f0:	b47fed16 	blt	r22,r17,15a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70015a8>
    15f4:	9021883a 	mov	r16,r18
    15f8:	9825883a 	mov	r18,r19
    15fc:	8827883a 	mov	r19,r17
    1600:	dc403b17 	ldw	r17,236(sp)
    1604:	d9403517 	ldw	r5,212(sp)
    1608:	98c7883a 	add	r3,r19,r3
    160c:	10800044 	addi	r2,r2,1
    1610:	41400015 	stw	r5,0(r8)
    1614:	44c00115 	stw	r19,4(r8)
    1618:	d8c02015 	stw	r3,128(sp)
    161c:	d8801f15 	stw	r2,124(sp)
    1620:	010001c4 	movi	r4,7
    1624:	2082a316 	blt	r4,r2,20b4 <___vfprintf_internal_r+0x12d8>
    1628:	df002787 	ldb	fp,158(sp)
    162c:	42000204 	addi	r8,r8,8
    1630:	e0000c26 	beq	fp,zero,1664 <___vfprintf_internal_r+0x888>
    1634:	d8801f17 	ldw	r2,124(sp)
    1638:	d9002784 	addi	r4,sp,158
    163c:	18c00044 	addi	r3,r3,1
    1640:	10800044 	addi	r2,r2,1
    1644:	41000015 	stw	r4,0(r8)
    1648:	01000044 	movi	r4,1
    164c:	41000115 	stw	r4,4(r8)
    1650:	d8c02015 	stw	r3,128(sp)
    1654:	d8801f15 	stw	r2,124(sp)
    1658:	010001c4 	movi	r4,7
    165c:	20823c16 	blt	r4,r2,1f50 <___vfprintf_internal_r+0x1174>
    1660:	42000204 	addi	r8,r8,8
    1664:	d8802b17 	ldw	r2,172(sp)
    1668:	10000c26 	beq	r2,zero,169c <___vfprintf_internal_r+0x8c0>
    166c:	d8801f17 	ldw	r2,124(sp)
    1670:	d9002704 	addi	r4,sp,156
    1674:	18c00084 	addi	r3,r3,2
    1678:	10800044 	addi	r2,r2,1
    167c:	41000015 	stw	r4,0(r8)
    1680:	01000084 	movi	r4,2
    1684:	41000115 	stw	r4,4(r8)
    1688:	d8c02015 	stw	r3,128(sp)
    168c:	d8801f15 	stw	r2,124(sp)
    1690:	010001c4 	movi	r4,7
    1694:	20823616 	blt	r4,r2,1f70 <___vfprintf_internal_r+0x1194>
    1698:	42000204 	addi	r8,r8,8
    169c:	d9003017 	ldw	r4,192(sp)
    16a0:	00802004 	movi	r2,128
    16a4:	20819926 	beq	r4,r2,1d0c <___vfprintf_internal_r+0xf30>
    16a8:	d9402917 	ldw	r5,164(sp)
    16ac:	d8802e17 	ldw	r2,184(sp)
    16b0:	28adc83a 	sub	r22,r5,r2
    16b4:	0580310e 	bge	zero,r22,177c <___vfprintf_internal_r+0x9a0>
    16b8:	07000404 	movi	fp,16
    16bc:	d8801f17 	ldw	r2,124(sp)
    16c0:	e584140e 	bge	fp,r22,2714 <___vfprintf_internal_r+0x1938>
    16c4:	014000b4 	movhi	r5,2
    16c8:	29679884 	addi	r5,r5,-24990
    16cc:	dc402915 	stw	r17,164(sp)
    16d0:	d9402b15 	stw	r5,172(sp)
    16d4:	b023883a 	mov	r17,r22
    16d8:	04c001c4 	movi	r19,7
    16dc:	a82d883a 	mov	r22,r21
    16e0:	902b883a 	mov	r21,r18
    16e4:	8025883a 	mov	r18,r16
    16e8:	dc002c17 	ldw	r16,176(sp)
    16ec:	00000306 	br	16fc <___vfprintf_internal_r+0x920>
    16f0:	8c7ffc04 	addi	r17,r17,-16
    16f4:	42000204 	addi	r8,r8,8
    16f8:	e440110e 	bge	fp,r17,1740 <___vfprintf_internal_r+0x964>
    16fc:	18c00404 	addi	r3,r3,16
    1700:	10800044 	addi	r2,r2,1
    1704:	45000015 	stw	r20,0(r8)
    1708:	47000115 	stw	fp,4(r8)
    170c:	d8c02015 	stw	r3,128(sp)
    1710:	d8801f15 	stw	r2,124(sp)
    1714:	98bff60e 	bge	r19,r2,16f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70016f0>
    1718:	d9801e04 	addi	r6,sp,120
    171c:	b80b883a 	mov	r5,r23
    1720:	8009883a 	mov	r4,r16
    1724:	00083d80 	call	83d8 <__sprint_r>
    1728:	103eae1e 	bne	r2,zero,11e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70011e4>
    172c:	8c7ffc04 	addi	r17,r17,-16
    1730:	d8c02017 	ldw	r3,128(sp)
    1734:	d8801f17 	ldw	r2,124(sp)
    1738:	da000404 	addi	r8,sp,16
    173c:	e47fef16 	blt	fp,r17,16fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70016fc>
    1740:	9021883a 	mov	r16,r18
    1744:	a825883a 	mov	r18,r21
    1748:	b02b883a 	mov	r21,r22
    174c:	882d883a 	mov	r22,r17
    1750:	dc402917 	ldw	r17,164(sp)
    1754:	d9002b17 	ldw	r4,172(sp)
    1758:	1d87883a 	add	r3,r3,r22
    175c:	10800044 	addi	r2,r2,1
    1760:	41000015 	stw	r4,0(r8)
    1764:	45800115 	stw	r22,4(r8)
    1768:	d8c02015 	stw	r3,128(sp)
    176c:	d8801f15 	stw	r2,124(sp)
    1770:	010001c4 	movi	r4,7
    1774:	2081ee16 	blt	r4,r2,1f30 <___vfprintf_internal_r+0x1154>
    1778:	42000204 	addi	r8,r8,8
    177c:	9080400c 	andi	r2,r18,256
    1780:	1001181e 	bne	r2,zero,1be4 <___vfprintf_internal_r+0xe08>
    1784:	d9402e17 	ldw	r5,184(sp)
    1788:	d8801f17 	ldw	r2,124(sp)
    178c:	44000015 	stw	r16,0(r8)
    1790:	1947883a 	add	r3,r3,r5
    1794:	10800044 	addi	r2,r2,1
    1798:	41400115 	stw	r5,4(r8)
    179c:	d8c02015 	stw	r3,128(sp)
    17a0:	d8801f15 	stw	r2,124(sp)
    17a4:	010001c4 	movi	r4,7
    17a8:	2081d316 	blt	r4,r2,1ef8 <___vfprintf_internal_r+0x111c>
    17ac:	42000204 	addi	r8,r8,8
    17b0:	9480010c 	andi	r18,r18,4
    17b4:	90003226 	beq	r18,zero,1880 <___vfprintf_internal_r+0xaa4>
    17b8:	d9403117 	ldw	r5,196(sp)
    17bc:	d8802a17 	ldw	r2,168(sp)
    17c0:	28a1c83a 	sub	r16,r5,r2
    17c4:	04002e0e 	bge	zero,r16,1880 <___vfprintf_internal_r+0xaa4>
    17c8:	04400404 	movi	r17,16
    17cc:	d8801f17 	ldw	r2,124(sp)
    17d0:	8c04a20e 	bge	r17,r16,2a5c <___vfprintf_internal_r+0x1c80>
    17d4:	014000b4 	movhi	r5,2
    17d8:	29679c84 	addi	r5,r5,-24974
    17dc:	d9403515 	stw	r5,212(sp)
    17e0:	048001c4 	movi	r18,7
    17e4:	dcc02c17 	ldw	r19,176(sp)
    17e8:	00000306 	br	17f8 <___vfprintf_internal_r+0xa1c>
    17ec:	843ffc04 	addi	r16,r16,-16
    17f0:	42000204 	addi	r8,r8,8
    17f4:	8c00130e 	bge	r17,r16,1844 <___vfprintf_internal_r+0xa68>
    17f8:	010000b4 	movhi	r4,2
    17fc:	18c00404 	addi	r3,r3,16
    1800:	10800044 	addi	r2,r2,1
    1804:	21279c84 	addi	r4,r4,-24974
    1808:	41000015 	stw	r4,0(r8)
    180c:	44400115 	stw	r17,4(r8)
    1810:	d8c02015 	stw	r3,128(sp)
    1814:	d8801f15 	stw	r2,124(sp)
    1818:	90bff40e 	bge	r18,r2,17ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70017ec>
    181c:	d9801e04 	addi	r6,sp,120
    1820:	b80b883a 	mov	r5,r23
    1824:	9809883a 	mov	r4,r19
    1828:	00083d80 	call	83d8 <__sprint_r>
    182c:	103e6d1e 	bne	r2,zero,11e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70011e4>
    1830:	843ffc04 	addi	r16,r16,-16
    1834:	d8c02017 	ldw	r3,128(sp)
    1838:	d8801f17 	ldw	r2,124(sp)
    183c:	da000404 	addi	r8,sp,16
    1840:	8c3fed16 	blt	r17,r16,17f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70017f8>
    1844:	d9403517 	ldw	r5,212(sp)
    1848:	1c07883a 	add	r3,r3,r16
    184c:	10800044 	addi	r2,r2,1
    1850:	41400015 	stw	r5,0(r8)
    1854:	44000115 	stw	r16,4(r8)
    1858:	d8c02015 	stw	r3,128(sp)
    185c:	d8801f15 	stw	r2,124(sp)
    1860:	010001c4 	movi	r4,7
    1864:	2080060e 	bge	r4,r2,1880 <___vfprintf_internal_r+0xaa4>
    1868:	d9002c17 	ldw	r4,176(sp)
    186c:	d9801e04 	addi	r6,sp,120
    1870:	b80b883a 	mov	r5,r23
    1874:	00083d80 	call	83d8 <__sprint_r>
    1878:	103e5a1e 	bne	r2,zero,11e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70011e4>
    187c:	d8c02017 	ldw	r3,128(sp)
    1880:	d8803117 	ldw	r2,196(sp)
    1884:	d9002a17 	ldw	r4,168(sp)
    1888:	1100010e 	bge	r2,r4,1890 <___vfprintf_internal_r+0xab4>
    188c:	2005883a 	mov	r2,r4
    1890:	d9402f17 	ldw	r5,188(sp)
    1894:	288b883a 	add	r5,r5,r2
    1898:	d9402f15 	stw	r5,188(sp)
    189c:	18019e1e 	bne	r3,zero,1f18 <___vfprintf_internal_r+0x113c>
    18a0:	a8800007 	ldb	r2,0(r21)
    18a4:	d8001f15 	stw	zero,124(sp)
    18a8:	da000404 	addi	r8,sp,16
    18ac:	103d851e 	bne	r2,zero,ec4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000ec4>
    18b0:	a821883a 	mov	r16,r21
    18b4:	003d9b06 	br	f24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000f24>
    18b8:	18c03fcc 	andi	r3,r3,255
    18bc:	1805c11e 	bne	r3,zero,2fc4 <___vfprintf_internal_r+0x21e8>
    18c0:	94800414 	ori	r18,r18,16
    18c4:	9080080c 	andi	r2,r18,32
    18c8:	10020c26 	beq	r2,zero,20fc <___vfprintf_internal_r+0x1320>
    18cc:	d8802d17 	ldw	r2,180(sp)
    18d0:	d9002917 	ldw	r4,164(sp)
    18d4:	d8002785 	stb	zero,158(sp)
    18d8:	10c00204 	addi	r3,r2,8
    18dc:	14c00017 	ldw	r19,0(r2)
    18e0:	15800117 	ldw	r22,4(r2)
    18e4:	20040f16 	blt	r4,zero,2924 <___vfprintf_internal_r+0x1b48>
    18e8:	013fdfc4 	movi	r4,-129
    18ec:	9d84b03a 	or	r2,r19,r22
    18f0:	d8c02d15 	stw	r3,180(sp)
    18f4:	9124703a 	and	r18,r18,r4
    18f8:	0039883a 	mov	fp,zero
    18fc:	103e891e 	bne	r2,zero,1324 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001324>
    1900:	d9002917 	ldw	r4,164(sp)
    1904:	2002c11e 	bne	r4,zero,240c <___vfprintf_internal_r+0x1630>
    1908:	d8002915 	stw	zero,164(sp)
    190c:	d8002e15 	stw	zero,184(sp)
    1910:	dc001e04 	addi	r16,sp,120
    1914:	003ef806 	br	14f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70014f8>
    1918:	18c03fcc 	andi	r3,r3,255
    191c:	18059d1e 	bne	r3,zero,2f94 <___vfprintf_internal_r+0x21b8>
    1920:	014000b4 	movhi	r5,2
    1924:	29678c04 	addi	r5,r5,-25040
    1928:	d9403915 	stw	r5,228(sp)
    192c:	9080080c 	andi	r2,r18,32
    1930:	10005226 	beq	r2,zero,1a7c <___vfprintf_internal_r+0xca0>
    1934:	d8802d17 	ldw	r2,180(sp)
    1938:	14c00017 	ldw	r19,0(r2)
    193c:	15800117 	ldw	r22,4(r2)
    1940:	10800204 	addi	r2,r2,8
    1944:	d8802d15 	stw	r2,180(sp)
    1948:	9080004c 	andi	r2,r18,1
    194c:	10019026 	beq	r2,zero,1f90 <___vfprintf_internal_r+0x11b4>
    1950:	9d84b03a 	or	r2,r19,r22
    1954:	10036926 	beq	r2,zero,26fc <___vfprintf_internal_r+0x1920>
    1958:	d8c02917 	ldw	r3,164(sp)
    195c:	00800c04 	movi	r2,48
    1960:	d8802705 	stb	r2,156(sp)
    1964:	dc402745 	stb	r17,157(sp)
    1968:	d8002785 	stb	zero,158(sp)
    196c:	90800094 	ori	r2,r18,2
    1970:	18045d16 	blt	r3,zero,2ae8 <___vfprintf_internal_r+0x1d0c>
    1974:	00bfdfc4 	movi	r2,-129
    1978:	90a4703a 	and	r18,r18,r2
    197c:	94800094 	ori	r18,r18,2
    1980:	0039883a 	mov	fp,zero
    1984:	d9003917 	ldw	r4,228(sp)
    1988:	dc001e04 	addi	r16,sp,120
    198c:	988003cc 	andi	r2,r19,15
    1990:	b006973a 	slli	r3,r22,28
    1994:	2085883a 	add	r2,r4,r2
    1998:	9826d13a 	srli	r19,r19,4
    199c:	10800003 	ldbu	r2,0(r2)
    19a0:	b02cd13a 	srli	r22,r22,4
    19a4:	843fffc4 	addi	r16,r16,-1
    19a8:	1ce6b03a 	or	r19,r3,r19
    19ac:	80800005 	stb	r2,0(r16)
    19b0:	9d84b03a 	or	r2,r19,r22
    19b4:	103ff51e 	bne	r2,zero,198c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700198c>
    19b8:	d8c02817 	ldw	r3,160(sp)
    19bc:	1c07c83a 	sub	r3,r3,r16
    19c0:	d8c02e15 	stw	r3,184(sp)
    19c4:	003ecc06 	br	14f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70014f8>
    19c8:	18c03fcc 	andi	r3,r3,255
    19cc:	183e9f26 	beq	r3,zero,144c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700144c>
    19d0:	d9c02785 	stb	r7,158(sp)
    19d4:	003e9d06 	br	144c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700144c>
    19d8:	00c00044 	movi	r3,1
    19dc:	01c00ac4 	movi	r7,43
    19e0:	ac400007 	ldb	r17,0(r21)
    19e4:	003d5e06 	br	f60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000f60>
    19e8:	94800814 	ori	r18,r18,32
    19ec:	ac400007 	ldb	r17,0(r21)
    19f0:	003d5b06 	br	f60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000f60>
    19f4:	d8c02d17 	ldw	r3,180(sp)
    19f8:	d8002785 	stb	zero,158(sp)
    19fc:	1c000017 	ldw	r16,0(r3)
    1a00:	1cc00104 	addi	r19,r3,4
    1a04:	80041926 	beq	r16,zero,2a6c <___vfprintf_internal_r+0x1c90>
    1a08:	d9002917 	ldw	r4,164(sp)
    1a0c:	2003d016 	blt	r4,zero,2950 <___vfprintf_internal_r+0x1b74>
    1a10:	200d883a 	mov	r6,r4
    1a14:	000b883a 	mov	r5,zero
    1a18:	8009883a 	mov	r4,r16
    1a1c:	da003d15 	stw	r8,244(sp)
    1a20:	00065ec0 	call	65ec <memchr>
    1a24:	da003d17 	ldw	r8,244(sp)
    1a28:	10045426 	beq	r2,zero,2b7c <___vfprintf_internal_r+0x1da0>
    1a2c:	1405c83a 	sub	r2,r2,r16
    1a30:	d8802e15 	stw	r2,184(sp)
    1a34:	1003cc16 	blt	r2,zero,2968 <___vfprintf_internal_r+0x1b8c>
    1a38:	df002783 	ldbu	fp,158(sp)
    1a3c:	d8802a15 	stw	r2,168(sp)
    1a40:	dcc02d15 	stw	r19,180(sp)
    1a44:	d8002915 	stw	zero,164(sp)
    1a48:	d8003215 	stw	zero,200(sp)
    1a4c:	003eb006 	br	1510 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001510>
    1a50:	18c03fcc 	andi	r3,r3,255
    1a54:	183f9b26 	beq	r3,zero,18c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70018c4>
    1a58:	d9c02785 	stb	r7,158(sp)
    1a5c:	003f9906 	br	18c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70018c4>
    1a60:	18c03fcc 	andi	r3,r3,255
    1a64:	1805551e 	bne	r3,zero,2fbc <___vfprintf_internal_r+0x21e0>
    1a68:	014000b4 	movhi	r5,2
    1a6c:	29679104 	addi	r5,r5,-25020
    1a70:	d9403915 	stw	r5,228(sp)
    1a74:	9080080c 	andi	r2,r18,32
    1a78:	103fae1e 	bne	r2,zero,1934 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001934>
    1a7c:	9080040c 	andi	r2,r18,16
    1a80:	1002de26 	beq	r2,zero,25fc <___vfprintf_internal_r+0x1820>
    1a84:	d8c02d17 	ldw	r3,180(sp)
    1a88:	002d883a 	mov	r22,zero
    1a8c:	1cc00017 	ldw	r19,0(r3)
    1a90:	18c00104 	addi	r3,r3,4
    1a94:	d8c02d15 	stw	r3,180(sp)
    1a98:	003fab06 	br	1948 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001948>
    1a9c:	38803fcc 	andi	r2,r7,255
    1aa0:	1080201c 	xori	r2,r2,128
    1aa4:	10bfe004 	addi	r2,r2,-128
    1aa8:	1002d21e 	bne	r2,zero,25f4 <___vfprintf_internal_r+0x1818>
    1aac:	00c00044 	movi	r3,1
    1ab0:	01c00804 	movi	r7,32
    1ab4:	ac400007 	ldb	r17,0(r21)
    1ab8:	003d2906 	br	f60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000f60>
    1abc:	94800054 	ori	r18,r18,1
    1ac0:	ac400007 	ldb	r17,0(r21)
    1ac4:	003d2606 	br	f60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000f60>
    1ac8:	18c03fcc 	andi	r3,r3,255
    1acc:	183e0526 	beq	r3,zero,12e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70012e4>
    1ad0:	d9c02785 	stb	r7,158(sp)
    1ad4:	003e0306 	br	12e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70012e4>
    1ad8:	94801014 	ori	r18,r18,64
    1adc:	ac400007 	ldb	r17,0(r21)
    1ae0:	003d1f06 	br	f60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000f60>
    1ae4:	ac400007 	ldb	r17,0(r21)
    1ae8:	8a438726 	beq	r17,r9,2908 <___vfprintf_internal_r+0x1b2c>
    1aec:	94800414 	ori	r18,r18,16
    1af0:	003d1b06 	br	f60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000f60>
    1af4:	18c03fcc 	andi	r3,r3,255
    1af8:	1805341e 	bne	r3,zero,2fcc <___vfprintf_internal_r+0x21f0>
    1afc:	9080080c 	andi	r2,r18,32
    1b00:	1002cd26 	beq	r2,zero,2638 <___vfprintf_internal_r+0x185c>
    1b04:	d9402d17 	ldw	r5,180(sp)
    1b08:	d9002f17 	ldw	r4,188(sp)
    1b0c:	28800017 	ldw	r2,0(r5)
    1b10:	2007d7fa 	srai	r3,r4,31
    1b14:	29400104 	addi	r5,r5,4
    1b18:	d9402d15 	stw	r5,180(sp)
    1b1c:	11000015 	stw	r4,0(r2)
    1b20:	10c00115 	stw	r3,4(r2)
    1b24:	003ce506 	br	ebc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000ebc>
    1b28:	d8c02d17 	ldw	r3,180(sp)
    1b2c:	d9002d17 	ldw	r4,180(sp)
    1b30:	d8002785 	stb	zero,158(sp)
    1b34:	18800017 	ldw	r2,0(r3)
    1b38:	21000104 	addi	r4,r4,4
    1b3c:	00c00044 	movi	r3,1
    1b40:	d8c02a15 	stw	r3,168(sp)
    1b44:	d8801405 	stb	r2,80(sp)
    1b48:	d9002d15 	stw	r4,180(sp)
    1b4c:	d8c02e15 	stw	r3,184(sp)
    1b50:	d8002915 	stw	zero,164(sp)
    1b54:	d8003215 	stw	zero,200(sp)
    1b58:	dc001404 	addi	r16,sp,80
    1b5c:	0039883a 	mov	fp,zero
    1b60:	003e7206 	br	152c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700152c>
    1b64:	010000b4 	movhi	r4,2
    1b68:	21279104 	addi	r4,r4,-25020
    1b6c:	0039883a 	mov	fp,zero
    1b70:	d9003915 	stw	r4,228(sp)
    1b74:	04401e04 	movi	r17,120
    1b78:	003f8206 	br	1984 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001984>
    1b7c:	18c03fcc 	andi	r3,r3,255
    1b80:	1805061e 	bne	r3,zero,2f9c <___vfprintf_internal_r+0x21c0>
    1b84:	883d9126 	beq	r17,zero,11cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70011cc>
    1b88:	00c00044 	movi	r3,1
    1b8c:	d8c02a15 	stw	r3,168(sp)
    1b90:	dc401405 	stb	r17,80(sp)
    1b94:	d8002785 	stb	zero,158(sp)
    1b98:	003fec06 	br	1b4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001b4c>
    1b9c:	014000b4 	movhi	r5,2
    1ba0:	29679104 	addi	r5,r5,-25020
    1ba4:	d9403915 	stw	r5,228(sp)
    1ba8:	d8c02d15 	stw	r3,180(sp)
    1bac:	1025883a 	mov	r18,r2
    1bb0:	04401e04 	movi	r17,120
    1bb4:	9d84b03a 	or	r2,r19,r22
    1bb8:	1000fc1e 	bne	r2,zero,1fac <___vfprintf_internal_r+0x11d0>
    1bbc:	0039883a 	mov	fp,zero
    1bc0:	00800084 	movi	r2,2
    1bc4:	10803fcc 	andi	r2,r2,255
    1bc8:	00c00044 	movi	r3,1
    1bcc:	10c20f26 	beq	r2,r3,240c <___vfprintf_internal_r+0x1630>
    1bd0:	00c00084 	movi	r3,2
    1bd4:	10fd6326 	beq	r2,r3,1164 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001164>
    1bd8:	003e2d06 	br	1490 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001490>
    1bdc:	d8c02017 	ldw	r3,128(sp)
    1be0:	003e9306 	br	1630 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001630>
    1be4:	00801944 	movi	r2,101
    1be8:	14407e0e 	bge	r2,r17,1de4 <___vfprintf_internal_r+0x1008>
    1bec:	d9003617 	ldw	r4,216(sp)
    1bf0:	d9403817 	ldw	r5,224(sp)
    1bf4:	000d883a 	mov	r6,zero
    1bf8:	000f883a 	mov	r7,zero
    1bfc:	d8c03c15 	stw	r3,240(sp)
    1c00:	da003d15 	stw	r8,244(sp)
    1c04:	000c0500 	call	c050 <__eqdf2>
    1c08:	d8c03c17 	ldw	r3,240(sp)
    1c0c:	da003d17 	ldw	r8,244(sp)
    1c10:	1000f71e 	bne	r2,zero,1ff0 <___vfprintf_internal_r+0x1214>
    1c14:	d8801f17 	ldw	r2,124(sp)
    1c18:	010000b4 	movhi	r4,2
    1c1c:	21279804 	addi	r4,r4,-24992
    1c20:	18c00044 	addi	r3,r3,1
    1c24:	10800044 	addi	r2,r2,1
    1c28:	41000015 	stw	r4,0(r8)
    1c2c:	01000044 	movi	r4,1
    1c30:	41000115 	stw	r4,4(r8)
    1c34:	d8c02015 	stw	r3,128(sp)
    1c38:	d8801f15 	stw	r2,124(sp)
    1c3c:	010001c4 	movi	r4,7
    1c40:	2082b816 	blt	r4,r2,2724 <___vfprintf_internal_r+0x1948>
    1c44:	42000204 	addi	r8,r8,8
    1c48:	d8802617 	ldw	r2,152(sp)
    1c4c:	d9403317 	ldw	r5,204(sp)
    1c50:	11400216 	blt	r2,r5,1c5c <___vfprintf_internal_r+0xe80>
    1c54:	9080004c 	andi	r2,r18,1
    1c58:	103ed526 	beq	r2,zero,17b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70017b0>
    1c5c:	d8803717 	ldw	r2,220(sp)
    1c60:	d9003417 	ldw	r4,208(sp)
    1c64:	d9403717 	ldw	r5,220(sp)
    1c68:	1887883a 	add	r3,r3,r2
    1c6c:	d8801f17 	ldw	r2,124(sp)
    1c70:	41000015 	stw	r4,0(r8)
    1c74:	41400115 	stw	r5,4(r8)
    1c78:	10800044 	addi	r2,r2,1
    1c7c:	d8c02015 	stw	r3,128(sp)
    1c80:	d8801f15 	stw	r2,124(sp)
    1c84:	010001c4 	movi	r4,7
    1c88:	20832916 	blt	r4,r2,2930 <___vfprintf_internal_r+0x1b54>
    1c8c:	42000204 	addi	r8,r8,8
    1c90:	d8803317 	ldw	r2,204(sp)
    1c94:	143fffc4 	addi	r16,r2,-1
    1c98:	043ec50e 	bge	zero,r16,17b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70017b0>
    1c9c:	04400404 	movi	r17,16
    1ca0:	d8801f17 	ldw	r2,124(sp)
    1ca4:	8c00880e 	bge	r17,r16,1ec8 <___vfprintf_internal_r+0x10ec>
    1ca8:	014000b4 	movhi	r5,2
    1cac:	29679884 	addi	r5,r5,-24990
    1cb0:	d9402b15 	stw	r5,172(sp)
    1cb4:	058001c4 	movi	r22,7
    1cb8:	dcc02c17 	ldw	r19,176(sp)
    1cbc:	00000306 	br	1ccc <___vfprintf_internal_r+0xef0>
    1cc0:	42000204 	addi	r8,r8,8
    1cc4:	843ffc04 	addi	r16,r16,-16
    1cc8:	8c00820e 	bge	r17,r16,1ed4 <___vfprintf_internal_r+0x10f8>
    1ccc:	18c00404 	addi	r3,r3,16
    1cd0:	10800044 	addi	r2,r2,1
    1cd4:	45000015 	stw	r20,0(r8)
    1cd8:	44400115 	stw	r17,4(r8)
    1cdc:	d8c02015 	stw	r3,128(sp)
    1ce0:	d8801f15 	stw	r2,124(sp)
    1ce4:	b0bff60e 	bge	r22,r2,1cc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001cc0>
    1ce8:	d9801e04 	addi	r6,sp,120
    1cec:	b80b883a 	mov	r5,r23
    1cf0:	9809883a 	mov	r4,r19
    1cf4:	00083d80 	call	83d8 <__sprint_r>
    1cf8:	103d3a1e 	bne	r2,zero,11e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70011e4>
    1cfc:	d8c02017 	ldw	r3,128(sp)
    1d00:	d8801f17 	ldw	r2,124(sp)
    1d04:	da000404 	addi	r8,sp,16
    1d08:	003fee06 	br	1cc4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001cc4>
    1d0c:	d9403117 	ldw	r5,196(sp)
    1d10:	d8802a17 	ldw	r2,168(sp)
    1d14:	28adc83a 	sub	r22,r5,r2
    1d18:	05be630e 	bge	zero,r22,16a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70016a8>
    1d1c:	07000404 	movi	fp,16
    1d20:	d8801f17 	ldw	r2,124(sp)
    1d24:	e5838f0e 	bge	fp,r22,2b64 <___vfprintf_internal_r+0x1d88>
    1d28:	014000b4 	movhi	r5,2
    1d2c:	29679884 	addi	r5,r5,-24990
    1d30:	dc403015 	stw	r17,192(sp)
    1d34:	d9402b15 	stw	r5,172(sp)
    1d38:	b023883a 	mov	r17,r22
    1d3c:	04c001c4 	movi	r19,7
    1d40:	a82d883a 	mov	r22,r21
    1d44:	902b883a 	mov	r21,r18
    1d48:	8025883a 	mov	r18,r16
    1d4c:	dc002c17 	ldw	r16,176(sp)
    1d50:	00000306 	br	1d60 <___vfprintf_internal_r+0xf84>
    1d54:	8c7ffc04 	addi	r17,r17,-16
    1d58:	42000204 	addi	r8,r8,8
    1d5c:	e440110e 	bge	fp,r17,1da4 <___vfprintf_internal_r+0xfc8>
    1d60:	18c00404 	addi	r3,r3,16
    1d64:	10800044 	addi	r2,r2,1
    1d68:	45000015 	stw	r20,0(r8)
    1d6c:	47000115 	stw	fp,4(r8)
    1d70:	d8c02015 	stw	r3,128(sp)
    1d74:	d8801f15 	stw	r2,124(sp)
    1d78:	98bff60e 	bge	r19,r2,1d54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001d54>
    1d7c:	d9801e04 	addi	r6,sp,120
    1d80:	b80b883a 	mov	r5,r23
    1d84:	8009883a 	mov	r4,r16
    1d88:	00083d80 	call	83d8 <__sprint_r>
    1d8c:	103d151e 	bne	r2,zero,11e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70011e4>
    1d90:	8c7ffc04 	addi	r17,r17,-16
    1d94:	d8c02017 	ldw	r3,128(sp)
    1d98:	d8801f17 	ldw	r2,124(sp)
    1d9c:	da000404 	addi	r8,sp,16
    1da0:	e47fef16 	blt	fp,r17,1d60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001d60>
    1da4:	9021883a 	mov	r16,r18
    1da8:	a825883a 	mov	r18,r21
    1dac:	b02b883a 	mov	r21,r22
    1db0:	882d883a 	mov	r22,r17
    1db4:	dc403017 	ldw	r17,192(sp)
    1db8:	d9002b17 	ldw	r4,172(sp)
    1dbc:	1d87883a 	add	r3,r3,r22
    1dc0:	10800044 	addi	r2,r2,1
    1dc4:	41000015 	stw	r4,0(r8)
    1dc8:	45800115 	stw	r22,4(r8)
    1dcc:	d8c02015 	stw	r3,128(sp)
    1dd0:	d8801f15 	stw	r2,124(sp)
    1dd4:	010001c4 	movi	r4,7
    1dd8:	20818e16 	blt	r4,r2,2414 <___vfprintf_internal_r+0x1638>
    1ddc:	42000204 	addi	r8,r8,8
    1de0:	003e3106 	br	16a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70016a8>
    1de4:	d9403317 	ldw	r5,204(sp)
    1de8:	00800044 	movi	r2,1
    1dec:	18c00044 	addi	r3,r3,1
    1df0:	1141530e 	bge	r2,r5,2340 <___vfprintf_internal_r+0x1564>
    1df4:	dc401f17 	ldw	r17,124(sp)
    1df8:	00800044 	movi	r2,1
    1dfc:	40800115 	stw	r2,4(r8)
    1e00:	8c400044 	addi	r17,r17,1
    1e04:	44000015 	stw	r16,0(r8)
    1e08:	d8c02015 	stw	r3,128(sp)
    1e0c:	dc401f15 	stw	r17,124(sp)
    1e10:	008001c4 	movi	r2,7
    1e14:	14416b16 	blt	r2,r17,23c4 <___vfprintf_internal_r+0x15e8>
    1e18:	42000204 	addi	r8,r8,8
    1e1c:	d8803717 	ldw	r2,220(sp)
    1e20:	d9003417 	ldw	r4,208(sp)
    1e24:	8c400044 	addi	r17,r17,1
    1e28:	10c7883a 	add	r3,r2,r3
    1e2c:	40800115 	stw	r2,4(r8)
    1e30:	41000015 	stw	r4,0(r8)
    1e34:	d8c02015 	stw	r3,128(sp)
    1e38:	dc401f15 	stw	r17,124(sp)
    1e3c:	008001c4 	movi	r2,7
    1e40:	14416916 	blt	r2,r17,23e8 <___vfprintf_internal_r+0x160c>
    1e44:	45800204 	addi	r22,r8,8
    1e48:	d9003617 	ldw	r4,216(sp)
    1e4c:	d9403817 	ldw	r5,224(sp)
    1e50:	000d883a 	mov	r6,zero
    1e54:	000f883a 	mov	r7,zero
    1e58:	d8c03c15 	stw	r3,240(sp)
    1e5c:	000c0500 	call	c050 <__eqdf2>
    1e60:	d8c03c17 	ldw	r3,240(sp)
    1e64:	1000bc26 	beq	r2,zero,2158 <___vfprintf_internal_r+0x137c>
    1e68:	d9403317 	ldw	r5,204(sp)
    1e6c:	84000044 	addi	r16,r16,1
    1e70:	8c400044 	addi	r17,r17,1
    1e74:	28bfffc4 	addi	r2,r5,-1
    1e78:	1887883a 	add	r3,r3,r2
    1e7c:	b0800115 	stw	r2,4(r22)
    1e80:	b4000015 	stw	r16,0(r22)
    1e84:	d8c02015 	stw	r3,128(sp)
    1e88:	dc401f15 	stw	r17,124(sp)
    1e8c:	008001c4 	movi	r2,7
    1e90:	14414316 	blt	r2,r17,23a0 <___vfprintf_internal_r+0x15c4>
    1e94:	b5800204 	addi	r22,r22,8
    1e98:	d9003a17 	ldw	r4,232(sp)
    1e9c:	df0022c4 	addi	fp,sp,139
    1ea0:	8c400044 	addi	r17,r17,1
    1ea4:	20c7883a 	add	r3,r4,r3
    1ea8:	b7000015 	stw	fp,0(r22)
    1eac:	b1000115 	stw	r4,4(r22)
    1eb0:	d8c02015 	stw	r3,128(sp)
    1eb4:	dc401f15 	stw	r17,124(sp)
    1eb8:	008001c4 	movi	r2,7
    1ebc:	14400e16 	blt	r2,r17,1ef8 <___vfprintf_internal_r+0x111c>
    1ec0:	b2000204 	addi	r8,r22,8
    1ec4:	003e3a06 	br	17b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70017b0>
    1ec8:	010000b4 	movhi	r4,2
    1ecc:	21279884 	addi	r4,r4,-24990
    1ed0:	d9002b15 	stw	r4,172(sp)
    1ed4:	d9002b17 	ldw	r4,172(sp)
    1ed8:	1c07883a 	add	r3,r3,r16
    1edc:	44000115 	stw	r16,4(r8)
    1ee0:	41000015 	stw	r4,0(r8)
    1ee4:	10800044 	addi	r2,r2,1
    1ee8:	d8c02015 	stw	r3,128(sp)
    1eec:	d8801f15 	stw	r2,124(sp)
    1ef0:	010001c4 	movi	r4,7
    1ef4:	20be2d0e 	bge	r4,r2,17ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70017ac>
    1ef8:	d9002c17 	ldw	r4,176(sp)
    1efc:	d9801e04 	addi	r6,sp,120
    1f00:	b80b883a 	mov	r5,r23
    1f04:	00083d80 	call	83d8 <__sprint_r>
    1f08:	103cb61e 	bne	r2,zero,11e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70011e4>
    1f0c:	d8c02017 	ldw	r3,128(sp)
    1f10:	da000404 	addi	r8,sp,16
    1f14:	003e2606 	br	17b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70017b0>
    1f18:	d9002c17 	ldw	r4,176(sp)
    1f1c:	d9801e04 	addi	r6,sp,120
    1f20:	b80b883a 	mov	r5,r23
    1f24:	00083d80 	call	83d8 <__sprint_r>
    1f28:	103e5d26 	beq	r2,zero,18a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70018a0>
    1f2c:	003cad06 	br	11e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70011e4>
    1f30:	d9002c17 	ldw	r4,176(sp)
    1f34:	d9801e04 	addi	r6,sp,120
    1f38:	b80b883a 	mov	r5,r23
    1f3c:	00083d80 	call	83d8 <__sprint_r>
    1f40:	103ca81e 	bne	r2,zero,11e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70011e4>
    1f44:	d8c02017 	ldw	r3,128(sp)
    1f48:	da000404 	addi	r8,sp,16
    1f4c:	003e0b06 	br	177c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700177c>
    1f50:	d9002c17 	ldw	r4,176(sp)
    1f54:	d9801e04 	addi	r6,sp,120
    1f58:	b80b883a 	mov	r5,r23
    1f5c:	00083d80 	call	83d8 <__sprint_r>
    1f60:	103ca01e 	bne	r2,zero,11e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70011e4>
    1f64:	d8c02017 	ldw	r3,128(sp)
    1f68:	da000404 	addi	r8,sp,16
    1f6c:	003dbd06 	br	1664 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001664>
    1f70:	d9002c17 	ldw	r4,176(sp)
    1f74:	d9801e04 	addi	r6,sp,120
    1f78:	b80b883a 	mov	r5,r23
    1f7c:	00083d80 	call	83d8 <__sprint_r>
    1f80:	103c981e 	bne	r2,zero,11e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70011e4>
    1f84:	d8c02017 	ldw	r3,128(sp)
    1f88:	da000404 	addi	r8,sp,16
    1f8c:	003dc306 	br	169c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700169c>
    1f90:	d8802917 	ldw	r2,164(sp)
    1f94:	d8002785 	stb	zero,158(sp)
    1f98:	103f0616 	blt	r2,zero,1bb4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001bb4>
    1f9c:	00ffdfc4 	movi	r3,-129
    1fa0:	9d84b03a 	or	r2,r19,r22
    1fa4:	90e4703a 	and	r18,r18,r3
    1fa8:	103c6b26 	beq	r2,zero,1158 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001158>
    1fac:	0039883a 	mov	fp,zero
    1fb0:	003e7406 	br	1984 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001984>
    1fb4:	9080040c 	andi	r2,r18,16
    1fb8:	1001b326 	beq	r2,zero,2688 <___vfprintf_internal_r+0x18ac>
    1fbc:	d9002d17 	ldw	r4,180(sp)
    1fc0:	d9402917 	ldw	r5,164(sp)
    1fc4:	d8002785 	stb	zero,158(sp)
    1fc8:	20800104 	addi	r2,r4,4
    1fcc:	24c00017 	ldw	r19,0(r4)
    1fd0:	002d883a 	mov	r22,zero
    1fd4:	2801b516 	blt	r5,zero,26ac <___vfprintf_internal_r+0x18d0>
    1fd8:	00ffdfc4 	movi	r3,-129
    1fdc:	d8802d15 	stw	r2,180(sp)
    1fe0:	90e4703a 	and	r18,r18,r3
    1fe4:	983d2726 	beq	r19,zero,1484 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001484>
    1fe8:	0039883a 	mov	fp,zero
    1fec:	003d2a06 	br	1498 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001498>
    1ff0:	dc402617 	ldw	r17,152(sp)
    1ff4:	0441d30e 	bge	zero,r17,2744 <___vfprintf_internal_r+0x1968>
    1ff8:	dc403217 	ldw	r17,200(sp)
    1ffc:	d8803317 	ldw	r2,204(sp)
    2000:	1440010e 	bge	r2,r17,2008 <___vfprintf_internal_r+0x122c>
    2004:	1023883a 	mov	r17,r2
    2008:	04400a0e 	bge	zero,r17,2034 <___vfprintf_internal_r+0x1258>
    200c:	d8801f17 	ldw	r2,124(sp)
    2010:	1c47883a 	add	r3,r3,r17
    2014:	44000015 	stw	r16,0(r8)
    2018:	10800044 	addi	r2,r2,1
    201c:	44400115 	stw	r17,4(r8)
    2020:	d8c02015 	stw	r3,128(sp)
    2024:	d8801f15 	stw	r2,124(sp)
    2028:	010001c4 	movi	r4,7
    202c:	20826516 	blt	r4,r2,29c4 <___vfprintf_internal_r+0x1be8>
    2030:	42000204 	addi	r8,r8,8
    2034:	88026116 	blt	r17,zero,29bc <___vfprintf_internal_r+0x1be0>
    2038:	d9003217 	ldw	r4,200(sp)
    203c:	2463c83a 	sub	r17,r4,r17
    2040:	04407b0e 	bge	zero,r17,2230 <___vfprintf_internal_r+0x1454>
    2044:	05800404 	movi	r22,16
    2048:	d8801f17 	ldw	r2,124(sp)
    204c:	b4419d0e 	bge	r22,r17,26c4 <___vfprintf_internal_r+0x18e8>
    2050:	010000b4 	movhi	r4,2
    2054:	21279884 	addi	r4,r4,-24990
    2058:	d9002b15 	stw	r4,172(sp)
    205c:	070001c4 	movi	fp,7
    2060:	dcc02c17 	ldw	r19,176(sp)
    2064:	00000306 	br	2074 <___vfprintf_internal_r+0x1298>
    2068:	42000204 	addi	r8,r8,8
    206c:	8c7ffc04 	addi	r17,r17,-16
    2070:	b441970e 	bge	r22,r17,26d0 <___vfprintf_internal_r+0x18f4>
    2074:	18c00404 	addi	r3,r3,16
    2078:	10800044 	addi	r2,r2,1
    207c:	45000015 	stw	r20,0(r8)
    2080:	45800115 	stw	r22,4(r8)
    2084:	d8c02015 	stw	r3,128(sp)
    2088:	d8801f15 	stw	r2,124(sp)
    208c:	e0bff60e 	bge	fp,r2,2068 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002068>
    2090:	d9801e04 	addi	r6,sp,120
    2094:	b80b883a 	mov	r5,r23
    2098:	9809883a 	mov	r4,r19
    209c:	00083d80 	call	83d8 <__sprint_r>
    20a0:	103c501e 	bne	r2,zero,11e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70011e4>
    20a4:	d8c02017 	ldw	r3,128(sp)
    20a8:	d8801f17 	ldw	r2,124(sp)
    20ac:	da000404 	addi	r8,sp,16
    20b0:	003fee06 	br	206c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700206c>
    20b4:	d9002c17 	ldw	r4,176(sp)
    20b8:	d9801e04 	addi	r6,sp,120
    20bc:	b80b883a 	mov	r5,r23
    20c0:	00083d80 	call	83d8 <__sprint_r>
    20c4:	103c471e 	bne	r2,zero,11e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70011e4>
    20c8:	d8c02017 	ldw	r3,128(sp)
    20cc:	df002787 	ldb	fp,158(sp)
    20d0:	da000404 	addi	r8,sp,16
    20d4:	003d5606 	br	1630 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001630>
    20d8:	9080040c 	andi	r2,r18,16
    20dc:	10016126 	beq	r2,zero,2664 <___vfprintf_internal_r+0x1888>
    20e0:	d8802d17 	ldw	r2,180(sp)
    20e4:	14c00017 	ldw	r19,0(r2)
    20e8:	10800104 	addi	r2,r2,4
    20ec:	d8802d15 	stw	r2,180(sp)
    20f0:	982dd7fa 	srai	r22,r19,31
    20f4:	b005883a 	mov	r2,r22
    20f8:	003c8206 	br	1304 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001304>
    20fc:	9080040c 	andi	r2,r18,16
    2100:	10003526 	beq	r2,zero,21d8 <___vfprintf_internal_r+0x13fc>
    2104:	d9402d17 	ldw	r5,180(sp)
    2108:	d8c02917 	ldw	r3,164(sp)
    210c:	d8002785 	stb	zero,158(sp)
    2110:	28800104 	addi	r2,r5,4
    2114:	2cc00017 	ldw	r19,0(r5)
    2118:	002d883a 	mov	r22,zero
    211c:	18003716 	blt	r3,zero,21fc <___vfprintf_internal_r+0x1420>
    2120:	00ffdfc4 	movi	r3,-129
    2124:	d8802d15 	stw	r2,180(sp)
    2128:	90e4703a 	and	r18,r18,r3
    212c:	0039883a 	mov	fp,zero
    2130:	983df326 	beq	r19,zero,1900 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001900>
    2134:	00800244 	movi	r2,9
    2138:	14fc7b36 	bltu	r2,r19,1328 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001328>
    213c:	d8c02817 	ldw	r3,160(sp)
    2140:	dc001dc4 	addi	r16,sp,119
    2144:	9cc00c04 	addi	r19,r19,48
    2148:	1c07c83a 	sub	r3,r3,r16
    214c:	dcc01dc5 	stb	r19,119(sp)
    2150:	d8c02e15 	stw	r3,184(sp)
    2154:	003ce806 	br	14f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70014f8>
    2158:	d8803317 	ldw	r2,204(sp)
    215c:	143fffc4 	addi	r16,r2,-1
    2160:	043f4d0e 	bge	zero,r16,1e98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001e98>
    2164:	07000404 	movi	fp,16
    2168:	e400810e 	bge	fp,r16,2370 <___vfprintf_internal_r+0x1594>
    216c:	014000b4 	movhi	r5,2
    2170:	29679884 	addi	r5,r5,-24990
    2174:	d9402b15 	stw	r5,172(sp)
    2178:	01c001c4 	movi	r7,7
    217c:	dcc02c17 	ldw	r19,176(sp)
    2180:	00000306 	br	2190 <___vfprintf_internal_r+0x13b4>
    2184:	b5800204 	addi	r22,r22,8
    2188:	843ffc04 	addi	r16,r16,-16
    218c:	e4007b0e 	bge	fp,r16,237c <___vfprintf_internal_r+0x15a0>
    2190:	18c00404 	addi	r3,r3,16
    2194:	8c400044 	addi	r17,r17,1
    2198:	b5000015 	stw	r20,0(r22)
    219c:	b7000115 	stw	fp,4(r22)
    21a0:	d8c02015 	stw	r3,128(sp)
    21a4:	dc401f15 	stw	r17,124(sp)
    21a8:	3c7ff60e 	bge	r7,r17,2184 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002184>
    21ac:	d9801e04 	addi	r6,sp,120
    21b0:	b80b883a 	mov	r5,r23
    21b4:	9809883a 	mov	r4,r19
    21b8:	d9c03c15 	stw	r7,240(sp)
    21bc:	00083d80 	call	83d8 <__sprint_r>
    21c0:	d9c03c17 	ldw	r7,240(sp)
    21c4:	103c071e 	bne	r2,zero,11e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70011e4>
    21c8:	d8c02017 	ldw	r3,128(sp)
    21cc:	dc401f17 	ldw	r17,124(sp)
    21d0:	dd800404 	addi	r22,sp,16
    21d4:	003fec06 	br	2188 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002188>
    21d8:	9080100c 	andi	r2,r18,64
    21dc:	d8002785 	stb	zero,158(sp)
    21e0:	10010e26 	beq	r2,zero,261c <___vfprintf_internal_r+0x1840>
    21e4:	d9002d17 	ldw	r4,180(sp)
    21e8:	d9402917 	ldw	r5,164(sp)
    21ec:	002d883a 	mov	r22,zero
    21f0:	20800104 	addi	r2,r4,4
    21f4:	24c0000b 	ldhu	r19,0(r4)
    21f8:	283fc90e 	bge	r5,zero,2120 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002120>
    21fc:	d8802d15 	stw	r2,180(sp)
    2200:	0039883a 	mov	fp,zero
    2204:	9d84b03a 	or	r2,r19,r22
    2208:	103c461e 	bne	r2,zero,1324 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001324>
    220c:	00800044 	movi	r2,1
    2210:	003e6c06 	br	1bc4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001bc4>
    2214:	d9002c17 	ldw	r4,176(sp)
    2218:	d9801e04 	addi	r6,sp,120
    221c:	b80b883a 	mov	r5,r23
    2220:	00083d80 	call	83d8 <__sprint_r>
    2224:	103bef1e 	bne	r2,zero,11e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70011e4>
    2228:	d8c02017 	ldw	r3,128(sp)
    222c:	da000404 	addi	r8,sp,16
    2230:	d9003217 	ldw	r4,200(sp)
    2234:	d8802617 	ldw	r2,152(sp)
    2238:	d9403317 	ldw	r5,204(sp)
    223c:	8123883a 	add	r17,r16,r4
    2240:	11400216 	blt	r2,r5,224c <___vfprintf_internal_r+0x1470>
    2244:	9100004c 	andi	r4,r18,1
    2248:	20000d26 	beq	r4,zero,2280 <___vfprintf_internal_r+0x14a4>
    224c:	d9003717 	ldw	r4,220(sp)
    2250:	d9403417 	ldw	r5,208(sp)
    2254:	1907883a 	add	r3,r3,r4
    2258:	d9001f17 	ldw	r4,124(sp)
    225c:	41400015 	stw	r5,0(r8)
    2260:	d9403717 	ldw	r5,220(sp)
    2264:	21000044 	addi	r4,r4,1
    2268:	d8c02015 	stw	r3,128(sp)
    226c:	41400115 	stw	r5,4(r8)
    2270:	d9001f15 	stw	r4,124(sp)
    2274:	014001c4 	movi	r5,7
    2278:	2901e816 	blt	r5,r4,2a1c <___vfprintf_internal_r+0x1c40>
    227c:	42000204 	addi	r8,r8,8
    2280:	d9003317 	ldw	r4,204(sp)
    2284:	8121883a 	add	r16,r16,r4
    2288:	2085c83a 	sub	r2,r4,r2
    228c:	8461c83a 	sub	r16,r16,r17
    2290:	1400010e 	bge	r2,r16,2298 <___vfprintf_internal_r+0x14bc>
    2294:	1021883a 	mov	r16,r2
    2298:	04000a0e 	bge	zero,r16,22c4 <___vfprintf_internal_r+0x14e8>
    229c:	d9001f17 	ldw	r4,124(sp)
    22a0:	1c07883a 	add	r3,r3,r16
    22a4:	44400015 	stw	r17,0(r8)
    22a8:	21000044 	addi	r4,r4,1
    22ac:	44000115 	stw	r16,4(r8)
    22b0:	d8c02015 	stw	r3,128(sp)
    22b4:	d9001f15 	stw	r4,124(sp)
    22b8:	014001c4 	movi	r5,7
    22bc:	2901fb16 	blt	r5,r4,2aac <___vfprintf_internal_r+0x1cd0>
    22c0:	42000204 	addi	r8,r8,8
    22c4:	8001f716 	blt	r16,zero,2aa4 <___vfprintf_internal_r+0x1cc8>
    22c8:	1421c83a 	sub	r16,r2,r16
    22cc:	043d380e 	bge	zero,r16,17b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70017b0>
    22d0:	04400404 	movi	r17,16
    22d4:	d8801f17 	ldw	r2,124(sp)
    22d8:	8c3efb0e 	bge	r17,r16,1ec8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001ec8>
    22dc:	014000b4 	movhi	r5,2
    22e0:	29679884 	addi	r5,r5,-24990
    22e4:	d9402b15 	stw	r5,172(sp)
    22e8:	058001c4 	movi	r22,7
    22ec:	dcc02c17 	ldw	r19,176(sp)
    22f0:	00000306 	br	2300 <___vfprintf_internal_r+0x1524>
    22f4:	42000204 	addi	r8,r8,8
    22f8:	843ffc04 	addi	r16,r16,-16
    22fc:	8c3ef50e 	bge	r17,r16,1ed4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001ed4>
    2300:	18c00404 	addi	r3,r3,16
    2304:	10800044 	addi	r2,r2,1
    2308:	45000015 	stw	r20,0(r8)
    230c:	44400115 	stw	r17,4(r8)
    2310:	d8c02015 	stw	r3,128(sp)
    2314:	d8801f15 	stw	r2,124(sp)
    2318:	b0bff60e 	bge	r22,r2,22f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70022f4>
    231c:	d9801e04 	addi	r6,sp,120
    2320:	b80b883a 	mov	r5,r23
    2324:	9809883a 	mov	r4,r19
    2328:	00083d80 	call	83d8 <__sprint_r>
    232c:	103bad1e 	bne	r2,zero,11e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70011e4>
    2330:	d8c02017 	ldw	r3,128(sp)
    2334:	d8801f17 	ldw	r2,124(sp)
    2338:	da000404 	addi	r8,sp,16
    233c:	003fee06 	br	22f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70022f8>
    2340:	9088703a 	and	r4,r18,r2
    2344:	203eab1e 	bne	r4,zero,1df4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001df4>
    2348:	dc401f17 	ldw	r17,124(sp)
    234c:	40800115 	stw	r2,4(r8)
    2350:	44000015 	stw	r16,0(r8)
    2354:	8c400044 	addi	r17,r17,1
    2358:	d8c02015 	stw	r3,128(sp)
    235c:	dc401f15 	stw	r17,124(sp)
    2360:	008001c4 	movi	r2,7
    2364:	14400e16 	blt	r2,r17,23a0 <___vfprintf_internal_r+0x15c4>
    2368:	45800204 	addi	r22,r8,8
    236c:	003eca06 	br	1e98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001e98>
    2370:	010000b4 	movhi	r4,2
    2374:	21279884 	addi	r4,r4,-24990
    2378:	d9002b15 	stw	r4,172(sp)
    237c:	d8802b17 	ldw	r2,172(sp)
    2380:	1c07883a 	add	r3,r3,r16
    2384:	8c400044 	addi	r17,r17,1
    2388:	b0800015 	stw	r2,0(r22)
    238c:	b4000115 	stw	r16,4(r22)
    2390:	d8c02015 	stw	r3,128(sp)
    2394:	dc401f15 	stw	r17,124(sp)
    2398:	008001c4 	movi	r2,7
    239c:	147ebd0e 	bge	r2,r17,1e94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001e94>
    23a0:	d9002c17 	ldw	r4,176(sp)
    23a4:	d9801e04 	addi	r6,sp,120
    23a8:	b80b883a 	mov	r5,r23
    23ac:	00083d80 	call	83d8 <__sprint_r>
    23b0:	103b8c1e 	bne	r2,zero,11e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70011e4>
    23b4:	d8c02017 	ldw	r3,128(sp)
    23b8:	dc401f17 	ldw	r17,124(sp)
    23bc:	dd800404 	addi	r22,sp,16
    23c0:	003eb506 	br	1e98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001e98>
    23c4:	d9002c17 	ldw	r4,176(sp)
    23c8:	d9801e04 	addi	r6,sp,120
    23cc:	b80b883a 	mov	r5,r23
    23d0:	00083d80 	call	83d8 <__sprint_r>
    23d4:	103b831e 	bne	r2,zero,11e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70011e4>
    23d8:	d8c02017 	ldw	r3,128(sp)
    23dc:	dc401f17 	ldw	r17,124(sp)
    23e0:	da000404 	addi	r8,sp,16
    23e4:	003e8d06 	br	1e1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001e1c>
    23e8:	d9002c17 	ldw	r4,176(sp)
    23ec:	d9801e04 	addi	r6,sp,120
    23f0:	b80b883a 	mov	r5,r23
    23f4:	00083d80 	call	83d8 <__sprint_r>
    23f8:	103b7a1e 	bne	r2,zero,11e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70011e4>
    23fc:	d8c02017 	ldw	r3,128(sp)
    2400:	dc401f17 	ldw	r17,124(sp)
    2404:	dd800404 	addi	r22,sp,16
    2408:	003e8f06 	br	1e48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001e48>
    240c:	0027883a 	mov	r19,zero
    2410:	003f4a06 	br	213c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700213c>
    2414:	d9002c17 	ldw	r4,176(sp)
    2418:	d9801e04 	addi	r6,sp,120
    241c:	b80b883a 	mov	r5,r23
    2420:	00083d80 	call	83d8 <__sprint_r>
    2424:	103b6f1e 	bne	r2,zero,11e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70011e4>
    2428:	d8c02017 	ldw	r3,128(sp)
    242c:	da000404 	addi	r8,sp,16
    2430:	003c9d06 	br	16a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70016a8>
    2434:	04e7c83a 	sub	r19,zero,r19
    2438:	9804c03a 	cmpne	r2,r19,zero
    243c:	05adc83a 	sub	r22,zero,r22
    2440:	b0adc83a 	sub	r22,r22,r2
    2444:	d8802917 	ldw	r2,164(sp)
    2448:	07000b44 	movi	fp,45
    244c:	df002785 	stb	fp,158(sp)
    2450:	10017b16 	blt	r2,zero,2a40 <___vfprintf_internal_r+0x1c64>
    2454:	00bfdfc4 	movi	r2,-129
    2458:	90a4703a 	and	r18,r18,r2
    245c:	003bb106 	br	1324 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001324>
    2460:	d9003617 	ldw	r4,216(sp)
    2464:	d9403817 	ldw	r5,224(sp)
    2468:	da003d15 	stw	r8,244(sp)
    246c:	0007ffc0 	call	7ffc <__fpclassifyd>
    2470:	da003d17 	ldw	r8,244(sp)
    2474:	1000f026 	beq	r2,zero,2838 <___vfprintf_internal_r+0x1a5c>
    2478:	d9002917 	ldw	r4,164(sp)
    247c:	05bff7c4 	movi	r22,-33
    2480:	00bfffc4 	movi	r2,-1
    2484:	8dac703a 	and	r22,r17,r22
    2488:	20820026 	beq	r4,r2,2c8c <___vfprintf_internal_r+0x1eb0>
    248c:	008011c4 	movi	r2,71
    2490:	b081f726 	beq	r22,r2,2c70 <___vfprintf_internal_r+0x1e94>
    2494:	d9003817 	ldw	r4,224(sp)
    2498:	90c04014 	ori	r3,r18,256
    249c:	d8c02b15 	stw	r3,172(sp)
    24a0:	20021516 	blt	r4,zero,2cf8 <___vfprintf_internal_r+0x1f1c>
    24a4:	dcc03817 	ldw	r19,224(sp)
    24a8:	d8002a05 	stb	zero,168(sp)
    24ac:	00801984 	movi	r2,102
    24b0:	8881f926 	beq	r17,r2,2c98 <___vfprintf_internal_r+0x1ebc>
    24b4:	00801184 	movi	r2,70
    24b8:	88821c26 	beq	r17,r2,2d2c <___vfprintf_internal_r+0x1f50>
    24bc:	00801144 	movi	r2,69
    24c0:	b081ef26 	beq	r22,r2,2c80 <___vfprintf_internal_r+0x1ea4>
    24c4:	d8c02917 	ldw	r3,164(sp)
    24c8:	d8802104 	addi	r2,sp,132
    24cc:	d8800315 	stw	r2,12(sp)
    24d0:	d9403617 	ldw	r5,216(sp)
    24d4:	d8802504 	addi	r2,sp,148
    24d8:	d9002c17 	ldw	r4,176(sp)
    24dc:	d8800215 	stw	r2,8(sp)
    24e0:	d8802604 	addi	r2,sp,152
    24e4:	d8c00015 	stw	r3,0(sp)
    24e8:	d8800115 	stw	r2,4(sp)
    24ec:	01c00084 	movi	r7,2
    24f0:	980d883a 	mov	r6,r19
    24f4:	d8c03c15 	stw	r3,240(sp)
    24f8:	da003d15 	stw	r8,244(sp)
    24fc:	00034000 	call	3400 <_dtoa_r>
    2500:	1021883a 	mov	r16,r2
    2504:	008019c4 	movi	r2,103
    2508:	d8c03c17 	ldw	r3,240(sp)
    250c:	da003d17 	ldw	r8,244(sp)
    2510:	88817126 	beq	r17,r2,2ad8 <___vfprintf_internal_r+0x1cfc>
    2514:	008011c4 	movi	r2,71
    2518:	88829226 	beq	r17,r2,2f64 <___vfprintf_internal_r+0x2188>
    251c:	80f9883a 	add	fp,r16,r3
    2520:	d9003617 	ldw	r4,216(sp)
    2524:	000d883a 	mov	r6,zero
    2528:	000f883a 	mov	r7,zero
    252c:	980b883a 	mov	r5,r19
    2530:	da003d15 	stw	r8,244(sp)
    2534:	000c0500 	call	c050 <__eqdf2>
    2538:	da003d17 	ldw	r8,244(sp)
    253c:	10018d26 	beq	r2,zero,2b74 <___vfprintf_internal_r+0x1d98>
    2540:	d8802117 	ldw	r2,132(sp)
    2544:	1700062e 	bgeu	r2,fp,2560 <___vfprintf_internal_r+0x1784>
    2548:	01000c04 	movi	r4,48
    254c:	10c00044 	addi	r3,r2,1
    2550:	d8c02115 	stw	r3,132(sp)
    2554:	11000005 	stb	r4,0(r2)
    2558:	d8802117 	ldw	r2,132(sp)
    255c:	173ffb36 	bltu	r2,fp,254c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700254c>
    2560:	1405c83a 	sub	r2,r2,r16
    2564:	d8803315 	stw	r2,204(sp)
    2568:	008011c4 	movi	r2,71
    256c:	b0817626 	beq	r22,r2,2b48 <___vfprintf_internal_r+0x1d6c>
    2570:	00801944 	movi	r2,101
    2574:	1442810e 	bge	r2,r17,2f7c <___vfprintf_internal_r+0x21a0>
    2578:	d8c02617 	ldw	r3,152(sp)
    257c:	00801984 	movi	r2,102
    2580:	d8c03215 	stw	r3,200(sp)
    2584:	8881fe26 	beq	r17,r2,2d80 <___vfprintf_internal_r+0x1fa4>
    2588:	d8c03217 	ldw	r3,200(sp)
    258c:	d9003317 	ldw	r4,204(sp)
    2590:	1901dd16 	blt	r3,r4,2d08 <___vfprintf_internal_r+0x1f2c>
    2594:	9480004c 	andi	r18,r18,1
    2598:	90022b1e 	bne	r18,zero,2e48 <___vfprintf_internal_r+0x206c>
    259c:	1805883a 	mov	r2,r3
    25a0:	18028016 	blt	r3,zero,2fa4 <___vfprintf_internal_r+0x21c8>
    25a4:	d8c03217 	ldw	r3,200(sp)
    25a8:	044019c4 	movi	r17,103
    25ac:	d8c02e15 	stw	r3,184(sp)
    25b0:	df002a07 	ldb	fp,168(sp)
    25b4:	e001531e 	bne	fp,zero,2b04 <___vfprintf_internal_r+0x1d28>
    25b8:	df002783 	ldbu	fp,158(sp)
    25bc:	d8802a15 	stw	r2,168(sp)
    25c0:	dc802b17 	ldw	r18,172(sp)
    25c4:	d8002915 	stw	zero,164(sp)
    25c8:	003bd106 	br	1510 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001510>
    25cc:	d8802d17 	ldw	r2,180(sp)
    25d0:	d8c02d17 	ldw	r3,180(sp)
    25d4:	d9002d17 	ldw	r4,180(sp)
    25d8:	10800017 	ldw	r2,0(r2)
    25dc:	18c00117 	ldw	r3,4(r3)
    25e0:	21000204 	addi	r4,r4,8
    25e4:	d8803615 	stw	r2,216(sp)
    25e8:	d8c03815 	stw	r3,224(sp)
    25ec:	d9002d15 	stw	r4,180(sp)
    25f0:	003b7506 	br	13c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70013c8>
    25f4:	ac400007 	ldb	r17,0(r21)
    25f8:	003a5906 	br	f60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000f60>
    25fc:	9080100c 	andi	r2,r18,64
    2600:	1000a826 	beq	r2,zero,28a4 <___vfprintf_internal_r+0x1ac8>
    2604:	d9002d17 	ldw	r4,180(sp)
    2608:	002d883a 	mov	r22,zero
    260c:	24c0000b 	ldhu	r19,0(r4)
    2610:	21000104 	addi	r4,r4,4
    2614:	d9002d15 	stw	r4,180(sp)
    2618:	003ccb06 	br	1948 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001948>
    261c:	d8c02d17 	ldw	r3,180(sp)
    2620:	d9002917 	ldw	r4,164(sp)
    2624:	002d883a 	mov	r22,zero
    2628:	18800104 	addi	r2,r3,4
    262c:	1cc00017 	ldw	r19,0(r3)
    2630:	203ebb0e 	bge	r4,zero,2120 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002120>
    2634:	003ef106 	br	21fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70021fc>
    2638:	9080040c 	andi	r2,r18,16
    263c:	1000921e 	bne	r2,zero,2888 <___vfprintf_internal_r+0x1aac>
    2640:	9480100c 	andi	r18,r18,64
    2644:	90013926 	beq	r18,zero,2b2c <___vfprintf_internal_r+0x1d50>
    2648:	d9002d17 	ldw	r4,180(sp)
    264c:	d9402f17 	ldw	r5,188(sp)
    2650:	20800017 	ldw	r2,0(r4)
    2654:	21000104 	addi	r4,r4,4
    2658:	d9002d15 	stw	r4,180(sp)
    265c:	1140000d 	sth	r5,0(r2)
    2660:	003a1606 	br	ebc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000ebc>
    2664:	9080100c 	andi	r2,r18,64
    2668:	10008026 	beq	r2,zero,286c <___vfprintf_internal_r+0x1a90>
    266c:	d8c02d17 	ldw	r3,180(sp)
    2670:	1cc0000f 	ldh	r19,0(r3)
    2674:	18c00104 	addi	r3,r3,4
    2678:	d8c02d15 	stw	r3,180(sp)
    267c:	982dd7fa 	srai	r22,r19,31
    2680:	b005883a 	mov	r2,r22
    2684:	003b1f06 	br	1304 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001304>
    2688:	9080100c 	andi	r2,r18,64
    268c:	d8002785 	stb	zero,158(sp)
    2690:	10008a1e 	bne	r2,zero,28bc <___vfprintf_internal_r+0x1ae0>
    2694:	d9402d17 	ldw	r5,180(sp)
    2698:	d8c02917 	ldw	r3,164(sp)
    269c:	002d883a 	mov	r22,zero
    26a0:	28800104 	addi	r2,r5,4
    26a4:	2cc00017 	ldw	r19,0(r5)
    26a8:	183e4b0e 	bge	r3,zero,1fd8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001fd8>
    26ac:	9d86b03a 	or	r3,r19,r22
    26b0:	d8802d15 	stw	r2,180(sp)
    26b4:	183e4c1e 	bne	r3,zero,1fe8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001fe8>
    26b8:	0039883a 	mov	fp,zero
    26bc:	0005883a 	mov	r2,zero
    26c0:	003d4006 	br	1bc4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001bc4>
    26c4:	014000b4 	movhi	r5,2
    26c8:	29679884 	addi	r5,r5,-24990
    26cc:	d9402b15 	stw	r5,172(sp)
    26d0:	d9402b17 	ldw	r5,172(sp)
    26d4:	1c47883a 	add	r3,r3,r17
    26d8:	10800044 	addi	r2,r2,1
    26dc:	41400015 	stw	r5,0(r8)
    26e0:	44400115 	stw	r17,4(r8)
    26e4:	d8c02015 	stw	r3,128(sp)
    26e8:	d8801f15 	stw	r2,124(sp)
    26ec:	010001c4 	movi	r4,7
    26f0:	20bec816 	blt	r4,r2,2214 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002214>
    26f4:	42000204 	addi	r8,r8,8
    26f8:	003ecd06 	br	2230 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002230>
    26fc:	d9002917 	ldw	r4,164(sp)
    2700:	d8002785 	stb	zero,158(sp)
    2704:	203d2d16 	blt	r4,zero,1bbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001bbc>
    2708:	00bfdfc4 	movi	r2,-129
    270c:	90a4703a 	and	r18,r18,r2
    2710:	003a9106 	br	1158 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001158>
    2714:	010000b4 	movhi	r4,2
    2718:	21279884 	addi	r4,r4,-24990
    271c:	d9002b15 	stw	r4,172(sp)
    2720:	003c0c06 	br	1754 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001754>
    2724:	d9002c17 	ldw	r4,176(sp)
    2728:	d9801e04 	addi	r6,sp,120
    272c:	b80b883a 	mov	r5,r23
    2730:	00083d80 	call	83d8 <__sprint_r>
    2734:	103aab1e 	bne	r2,zero,11e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70011e4>
    2738:	d8c02017 	ldw	r3,128(sp)
    273c:	da000404 	addi	r8,sp,16
    2740:	003d4106 	br	1c48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001c48>
    2744:	d8801f17 	ldw	r2,124(sp)
    2748:	014000b4 	movhi	r5,2
    274c:	01000044 	movi	r4,1
    2750:	18c00044 	addi	r3,r3,1
    2754:	10800044 	addi	r2,r2,1
    2758:	29679804 	addi	r5,r5,-24992
    275c:	41000115 	stw	r4,4(r8)
    2760:	41400015 	stw	r5,0(r8)
    2764:	d8c02015 	stw	r3,128(sp)
    2768:	d8801f15 	stw	r2,124(sp)
    276c:	010001c4 	movi	r4,7
    2770:	20805c16 	blt	r4,r2,28e4 <___vfprintf_internal_r+0x1b08>
    2774:	42000204 	addi	r8,r8,8
    2778:	8800041e 	bne	r17,zero,278c <___vfprintf_internal_r+0x19b0>
    277c:	d8803317 	ldw	r2,204(sp)
    2780:	1000021e 	bne	r2,zero,278c <___vfprintf_internal_r+0x19b0>
    2784:	9080004c 	andi	r2,r18,1
    2788:	103c0926 	beq	r2,zero,17b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70017b0>
    278c:	d9003717 	ldw	r4,220(sp)
    2790:	d8801f17 	ldw	r2,124(sp)
    2794:	d9403417 	ldw	r5,208(sp)
    2798:	20c7883a 	add	r3,r4,r3
    279c:	10800044 	addi	r2,r2,1
    27a0:	41000115 	stw	r4,4(r8)
    27a4:	41400015 	stw	r5,0(r8)
    27a8:	d8c02015 	stw	r3,128(sp)
    27ac:	d8801f15 	stw	r2,124(sp)
    27b0:	010001c4 	movi	r4,7
    27b4:	20812116 	blt	r4,r2,2c3c <___vfprintf_internal_r+0x1e60>
    27b8:	42000204 	addi	r8,r8,8
    27bc:	0463c83a 	sub	r17,zero,r17
    27c0:	0440730e 	bge	zero,r17,2990 <___vfprintf_internal_r+0x1bb4>
    27c4:	05800404 	movi	r22,16
    27c8:	b440860e 	bge	r22,r17,29e4 <___vfprintf_internal_r+0x1c08>
    27cc:	014000b4 	movhi	r5,2
    27d0:	29679884 	addi	r5,r5,-24990
    27d4:	d9402b15 	stw	r5,172(sp)
    27d8:	070001c4 	movi	fp,7
    27dc:	dcc02c17 	ldw	r19,176(sp)
    27e0:	00000306 	br	27f0 <___vfprintf_internal_r+0x1a14>
    27e4:	42000204 	addi	r8,r8,8
    27e8:	8c7ffc04 	addi	r17,r17,-16
    27ec:	b440800e 	bge	r22,r17,29f0 <___vfprintf_internal_r+0x1c14>
    27f0:	18c00404 	addi	r3,r3,16
    27f4:	10800044 	addi	r2,r2,1
    27f8:	45000015 	stw	r20,0(r8)
    27fc:	45800115 	stw	r22,4(r8)
    2800:	d8c02015 	stw	r3,128(sp)
    2804:	d8801f15 	stw	r2,124(sp)
    2808:	e0bff60e 	bge	fp,r2,27e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70027e4>
    280c:	d9801e04 	addi	r6,sp,120
    2810:	b80b883a 	mov	r5,r23
    2814:	9809883a 	mov	r4,r19
    2818:	00083d80 	call	83d8 <__sprint_r>
    281c:	103a711e 	bne	r2,zero,11e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70011e4>
    2820:	d8c02017 	ldw	r3,128(sp)
    2824:	d8801f17 	ldw	r2,124(sp)
    2828:	da000404 	addi	r8,sp,16
    282c:	003fee06 	br	27e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70027e8>
    2830:	00bfffc4 	movi	r2,-1
    2834:	003a6f06 	br	11f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70011f4>
    2838:	008011c4 	movi	r2,71
    283c:	1440b816 	blt	r2,r17,2b20 <___vfprintf_internal_r+0x1d44>
    2840:	040000b4 	movhi	r16,2
    2844:	84278a04 	addi	r16,r16,-25048
    2848:	00c000c4 	movi	r3,3
    284c:	00bfdfc4 	movi	r2,-129
    2850:	d8c02a15 	stw	r3,168(sp)
    2854:	90a4703a 	and	r18,r18,r2
    2858:	df002783 	ldbu	fp,158(sp)
    285c:	d8c02e15 	stw	r3,184(sp)
    2860:	d8002915 	stw	zero,164(sp)
    2864:	d8003215 	stw	zero,200(sp)
    2868:	003b2906 	br	1510 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001510>
    286c:	d9002d17 	ldw	r4,180(sp)
    2870:	24c00017 	ldw	r19,0(r4)
    2874:	21000104 	addi	r4,r4,4
    2878:	d9002d15 	stw	r4,180(sp)
    287c:	982dd7fa 	srai	r22,r19,31
    2880:	b005883a 	mov	r2,r22
    2884:	003a9f06 	br	1304 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001304>
    2888:	d9402d17 	ldw	r5,180(sp)
    288c:	d8c02f17 	ldw	r3,188(sp)
    2890:	28800017 	ldw	r2,0(r5)
    2894:	29400104 	addi	r5,r5,4
    2898:	d9402d15 	stw	r5,180(sp)
    289c:	10c00015 	stw	r3,0(r2)
    28a0:	00398606 	br	ebc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000ebc>
    28a4:	d9402d17 	ldw	r5,180(sp)
    28a8:	002d883a 	mov	r22,zero
    28ac:	2cc00017 	ldw	r19,0(r5)
    28b0:	29400104 	addi	r5,r5,4
    28b4:	d9402d15 	stw	r5,180(sp)
    28b8:	003c2306 	br	1948 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001948>
    28bc:	d8c02d17 	ldw	r3,180(sp)
    28c0:	d9002917 	ldw	r4,164(sp)
    28c4:	002d883a 	mov	r22,zero
    28c8:	18800104 	addi	r2,r3,4
    28cc:	1cc0000b 	ldhu	r19,0(r3)
    28d0:	203dc10e 	bge	r4,zero,1fd8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001fd8>
    28d4:	003f7506 	br	26ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70026ac>
    28d8:	040000b4 	movhi	r16,2
    28dc:	84278804 	addi	r16,r16,-25056
    28e0:	003acc06 	br	1414 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001414>
    28e4:	d9002c17 	ldw	r4,176(sp)
    28e8:	d9801e04 	addi	r6,sp,120
    28ec:	b80b883a 	mov	r5,r23
    28f0:	00083d80 	call	83d8 <__sprint_r>
    28f4:	103a3b1e 	bne	r2,zero,11e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70011e4>
    28f8:	dc402617 	ldw	r17,152(sp)
    28fc:	d8c02017 	ldw	r3,128(sp)
    2900:	da000404 	addi	r8,sp,16
    2904:	003f9c06 	br	2778 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002778>
    2908:	ac400043 	ldbu	r17,1(r21)
    290c:	94800814 	ori	r18,r18,32
    2910:	ad400044 	addi	r21,r21,1
    2914:	8c403fcc 	andi	r17,r17,255
    2918:	8c40201c 	xori	r17,r17,128
    291c:	8c7fe004 	addi	r17,r17,-128
    2920:	00398f06 	br	f60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000f60>
    2924:	d8c02d15 	stw	r3,180(sp)
    2928:	0039883a 	mov	fp,zero
    292c:	003e3506 	br	2204 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002204>
    2930:	d9002c17 	ldw	r4,176(sp)
    2934:	d9801e04 	addi	r6,sp,120
    2938:	b80b883a 	mov	r5,r23
    293c:	00083d80 	call	83d8 <__sprint_r>
    2940:	103a281e 	bne	r2,zero,11e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70011e4>
    2944:	d8c02017 	ldw	r3,128(sp)
    2948:	da000404 	addi	r8,sp,16
    294c:	003cd006 	br	1c90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001c90>
    2950:	8009883a 	mov	r4,r16
    2954:	da003d15 	stw	r8,244(sp)
    2958:	0000d440 	call	d44 <strlen>
    295c:	d8802e15 	stw	r2,184(sp)
    2960:	da003d17 	ldw	r8,244(sp)
    2964:	103c340e 	bge	r2,zero,1a38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001a38>
    2968:	0005883a 	mov	r2,zero
    296c:	003c3206 	br	1a38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001a38>
    2970:	d9002c17 	ldw	r4,176(sp)
    2974:	d9801e04 	addi	r6,sp,120
    2978:	b80b883a 	mov	r5,r23
    297c:	00083d80 	call	83d8 <__sprint_r>
    2980:	103a181e 	bne	r2,zero,11e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70011e4>
    2984:	d8c02017 	ldw	r3,128(sp)
    2988:	d8801f17 	ldw	r2,124(sp)
    298c:	da000404 	addi	r8,sp,16
    2990:	d9403317 	ldw	r5,204(sp)
    2994:	10800044 	addi	r2,r2,1
    2998:	44000015 	stw	r16,0(r8)
    299c:	28c7883a 	add	r3,r5,r3
    29a0:	003b7d06 	br	1798 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001798>
    29a4:	010000b4 	movhi	r4,2
    29a8:	21279c84 	addi	r4,r4,-24974
    29ac:	d9003515 	stw	r4,212(sp)
    29b0:	003b1406 	br	1604 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001604>
    29b4:	013fffc4 	movi	r4,-1
    29b8:	003a3506 	br	1290 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001290>
    29bc:	0023883a 	mov	r17,zero
    29c0:	003d9d06 	br	2038 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002038>
    29c4:	d9002c17 	ldw	r4,176(sp)
    29c8:	d9801e04 	addi	r6,sp,120
    29cc:	b80b883a 	mov	r5,r23
    29d0:	00083d80 	call	83d8 <__sprint_r>
    29d4:	103a031e 	bne	r2,zero,11e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70011e4>
    29d8:	d8c02017 	ldw	r3,128(sp)
    29dc:	da000404 	addi	r8,sp,16
    29e0:	003d9406 	br	2034 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002034>
    29e4:	010000b4 	movhi	r4,2
    29e8:	21279884 	addi	r4,r4,-24990
    29ec:	d9002b15 	stw	r4,172(sp)
    29f0:	d9002b17 	ldw	r4,172(sp)
    29f4:	1c47883a 	add	r3,r3,r17
    29f8:	10800044 	addi	r2,r2,1
    29fc:	41000015 	stw	r4,0(r8)
    2a00:	44400115 	stw	r17,4(r8)
    2a04:	d8c02015 	stw	r3,128(sp)
    2a08:	d8801f15 	stw	r2,124(sp)
    2a0c:	010001c4 	movi	r4,7
    2a10:	20bfd716 	blt	r4,r2,2970 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002970>
    2a14:	42000204 	addi	r8,r8,8
    2a18:	003fdd06 	br	2990 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002990>
    2a1c:	d9002c17 	ldw	r4,176(sp)
    2a20:	d9801e04 	addi	r6,sp,120
    2a24:	b80b883a 	mov	r5,r23
    2a28:	00083d80 	call	83d8 <__sprint_r>
    2a2c:	1039ed1e 	bne	r2,zero,11e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70011e4>
    2a30:	d8802617 	ldw	r2,152(sp)
    2a34:	d8c02017 	ldw	r3,128(sp)
    2a38:	da000404 	addi	r8,sp,16
    2a3c:	003e1006 	br	2280 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002280>
    2a40:	00800044 	movi	r2,1
    2a44:	10803fcc 	andi	r2,r2,255
    2a48:	00c00044 	movi	r3,1
    2a4c:	10fa3526 	beq	r2,r3,1324 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001324>
    2a50:	00c00084 	movi	r3,2
    2a54:	10fbcb26 	beq	r2,r3,1984 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001984>
    2a58:	003a8f06 	br	1498 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001498>
    2a5c:	010000b4 	movhi	r4,2
    2a60:	21279c84 	addi	r4,r4,-24974
    2a64:	d9003515 	stw	r4,212(sp)
    2a68:	003b7606 	br	1844 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001844>
    2a6c:	d8802917 	ldw	r2,164(sp)
    2a70:	00c00184 	movi	r3,6
    2a74:	1880012e 	bgeu	r3,r2,2a7c <___vfprintf_internal_r+0x1ca0>
    2a78:	1805883a 	mov	r2,r3
    2a7c:	d8802e15 	stw	r2,184(sp)
    2a80:	1000ef16 	blt	r2,zero,2e40 <___vfprintf_internal_r+0x2064>
    2a84:	040000b4 	movhi	r16,2
    2a88:	d8802a15 	stw	r2,168(sp)
    2a8c:	dcc02d15 	stw	r19,180(sp)
    2a90:	d8002915 	stw	zero,164(sp)
    2a94:	d8003215 	stw	zero,200(sp)
    2a98:	84279604 	addi	r16,r16,-25000
    2a9c:	0039883a 	mov	fp,zero
    2aa0:	003aa206 	br	152c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700152c>
    2aa4:	0021883a 	mov	r16,zero
    2aa8:	003e0706 	br	22c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70022c8>
    2aac:	d9002c17 	ldw	r4,176(sp)
    2ab0:	d9801e04 	addi	r6,sp,120
    2ab4:	b80b883a 	mov	r5,r23
    2ab8:	00083d80 	call	83d8 <__sprint_r>
    2abc:	1039c91e 	bne	r2,zero,11e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70011e4>
    2ac0:	d8802617 	ldw	r2,152(sp)
    2ac4:	d9403317 	ldw	r5,204(sp)
    2ac8:	d8c02017 	ldw	r3,128(sp)
    2acc:	da000404 	addi	r8,sp,16
    2ad0:	2885c83a 	sub	r2,r5,r2
    2ad4:	003dfb06 	br	22c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70022c4>
    2ad8:	9080004c 	andi	r2,r18,1
    2adc:	103e8f1e 	bne	r2,zero,251c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700251c>
    2ae0:	d8802117 	ldw	r2,132(sp)
    2ae4:	003e9e06 	br	2560 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002560>
    2ae8:	1025883a 	mov	r18,r2
    2aec:	0039883a 	mov	fp,zero
    2af0:	00800084 	movi	r2,2
    2af4:	003fd306 	br	2a44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002a44>
    2af8:	07000b44 	movi	fp,45
    2afc:	df002785 	stb	fp,158(sp)
    2b00:	003a4006 	br	1404 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001404>
    2b04:	00c00b44 	movi	r3,45
    2b08:	d8c02785 	stb	r3,158(sp)
    2b0c:	d8802a15 	stw	r2,168(sp)
    2b10:	dc802b17 	ldw	r18,172(sp)
    2b14:	d8002915 	stw	zero,164(sp)
    2b18:	07000b44 	movi	fp,45
    2b1c:	003a8006 	br	1520 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001520>
    2b20:	040000b4 	movhi	r16,2
    2b24:	84278b04 	addi	r16,r16,-25044
    2b28:	003f4706 	br	2848 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002848>
    2b2c:	d8c02d17 	ldw	r3,180(sp)
    2b30:	d9002f17 	ldw	r4,188(sp)
    2b34:	18800017 	ldw	r2,0(r3)
    2b38:	18c00104 	addi	r3,r3,4
    2b3c:	d8c02d15 	stw	r3,180(sp)
    2b40:	11000015 	stw	r4,0(r2)
    2b44:	0038dd06 	br	ebc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000ebc>
    2b48:	dd802617 	ldw	r22,152(sp)
    2b4c:	00bfff44 	movi	r2,-3
    2b50:	b0801c16 	blt	r22,r2,2bc4 <___vfprintf_internal_r+0x1de8>
    2b54:	d9402917 	ldw	r5,164(sp)
    2b58:	2d801a16 	blt	r5,r22,2bc4 <___vfprintf_internal_r+0x1de8>
    2b5c:	dd803215 	stw	r22,200(sp)
    2b60:	003e8906 	br	2588 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002588>
    2b64:	010000b4 	movhi	r4,2
    2b68:	21279884 	addi	r4,r4,-24990
    2b6c:	d9002b15 	stw	r4,172(sp)
    2b70:	003c9106 	br	1db8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001db8>
    2b74:	e005883a 	mov	r2,fp
    2b78:	003e7906 	br	2560 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002560>
    2b7c:	d9402917 	ldw	r5,164(sp)
    2b80:	df002783 	ldbu	fp,158(sp)
    2b84:	dcc02d15 	stw	r19,180(sp)
    2b88:	d9402a15 	stw	r5,168(sp)
    2b8c:	d9402e15 	stw	r5,184(sp)
    2b90:	d8002915 	stw	zero,164(sp)
    2b94:	d8003215 	stw	zero,200(sp)
    2b98:	003a5d06 	br	1510 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001510>
    2b9c:	9080004c 	andi	r2,r18,1
    2ba0:	0039883a 	mov	fp,zero
    2ba4:	10000426 	beq	r2,zero,2bb8 <___vfprintf_internal_r+0x1ddc>
    2ba8:	00800c04 	movi	r2,48
    2bac:	dc001dc4 	addi	r16,sp,119
    2bb0:	d8801dc5 	stb	r2,119(sp)
    2bb4:	003b8006 	br	19b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70019b8>
    2bb8:	d8002e15 	stw	zero,184(sp)
    2bbc:	dc001e04 	addi	r16,sp,120
    2bc0:	003a4d06 	br	14f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70014f8>
    2bc4:	8c7fff84 	addi	r17,r17,-2
    2bc8:	b5bfffc4 	addi	r22,r22,-1
    2bcc:	dd802615 	stw	r22,152(sp)
    2bd0:	dc4022c5 	stb	r17,139(sp)
    2bd4:	b000bf16 	blt	r22,zero,2ed4 <___vfprintf_internal_r+0x20f8>
    2bd8:	00800ac4 	movi	r2,43
    2bdc:	d8802305 	stb	r2,140(sp)
    2be0:	00800244 	movi	r2,9
    2be4:	15807016 	blt	r2,r22,2da8 <___vfprintf_internal_r+0x1fcc>
    2be8:	00800c04 	movi	r2,48
    2bec:	b5800c04 	addi	r22,r22,48
    2bf0:	d8802345 	stb	r2,141(sp)
    2bf4:	dd802385 	stb	r22,142(sp)
    2bf8:	d88023c4 	addi	r2,sp,143
    2bfc:	df0022c4 	addi	fp,sp,139
    2c00:	d8c03317 	ldw	r3,204(sp)
    2c04:	1739c83a 	sub	fp,r2,fp
    2c08:	d9003317 	ldw	r4,204(sp)
    2c0c:	e0c7883a 	add	r3,fp,r3
    2c10:	df003a15 	stw	fp,232(sp)
    2c14:	d8c02e15 	stw	r3,184(sp)
    2c18:	00800044 	movi	r2,1
    2c1c:	1100b30e 	bge	r2,r4,2eec <___vfprintf_internal_r+0x2110>
    2c20:	d8c02e17 	ldw	r3,184(sp)
    2c24:	18c00044 	addi	r3,r3,1
    2c28:	d8c02e15 	stw	r3,184(sp)
    2c2c:	1805883a 	mov	r2,r3
    2c30:	1800ac16 	blt	r3,zero,2ee4 <___vfprintf_internal_r+0x2108>
    2c34:	d8003215 	stw	zero,200(sp)
    2c38:	003e5d06 	br	25b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70025b0>
    2c3c:	d9002c17 	ldw	r4,176(sp)
    2c40:	d9801e04 	addi	r6,sp,120
    2c44:	b80b883a 	mov	r5,r23
    2c48:	00083d80 	call	83d8 <__sprint_r>
    2c4c:	1039651e 	bne	r2,zero,11e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70011e4>
    2c50:	dc402617 	ldw	r17,152(sp)
    2c54:	d8c02017 	ldw	r3,128(sp)
    2c58:	d8801f17 	ldw	r2,124(sp)
    2c5c:	da000404 	addi	r8,sp,16
    2c60:	003ed606 	br	27bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70027bc>
    2c64:	582b883a 	mov	r21,r11
    2c68:	d8002915 	stw	zero,164(sp)
    2c6c:	0038bd06 	br	f64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000f64>
    2c70:	d8802917 	ldw	r2,164(sp)
    2c74:	103e071e 	bne	r2,zero,2494 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002494>
    2c78:	dc002915 	stw	r16,164(sp)
    2c7c:	003e0506 	br	2494 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002494>
    2c80:	d9002917 	ldw	r4,164(sp)
    2c84:	20c00044 	addi	r3,r4,1
    2c88:	003e0f06 	br	24c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70024c8>
    2c8c:	01400184 	movi	r5,6
    2c90:	d9402915 	stw	r5,164(sp)
    2c94:	003dff06 	br	2494 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002494>
    2c98:	d8802104 	addi	r2,sp,132
    2c9c:	d8800315 	stw	r2,12(sp)
    2ca0:	d8802504 	addi	r2,sp,148
    2ca4:	d8800215 	stw	r2,8(sp)
    2ca8:	d8802604 	addi	r2,sp,152
    2cac:	d8800115 	stw	r2,4(sp)
    2cb0:	d8802917 	ldw	r2,164(sp)
    2cb4:	d9403617 	ldw	r5,216(sp)
    2cb8:	d9002c17 	ldw	r4,176(sp)
    2cbc:	d8800015 	stw	r2,0(sp)
    2cc0:	01c000c4 	movi	r7,3
    2cc4:	980d883a 	mov	r6,r19
    2cc8:	da003d15 	stw	r8,244(sp)
    2ccc:	00034000 	call	3400 <_dtoa_r>
    2cd0:	d8c02917 	ldw	r3,164(sp)
    2cd4:	da003d17 	ldw	r8,244(sp)
    2cd8:	1021883a 	mov	r16,r2
    2cdc:	10f9883a 	add	fp,r2,r3
    2ce0:	81000007 	ldb	r4,0(r16)
    2ce4:	00800c04 	movi	r2,48
    2ce8:	20805e26 	beq	r4,r2,2e64 <___vfprintf_internal_r+0x2088>
    2cec:	d8c02617 	ldw	r3,152(sp)
    2cf0:	e0f9883a 	add	fp,fp,r3
    2cf4:	003e0a06 	br	2520 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002520>
    2cf8:	00c00b44 	movi	r3,45
    2cfc:	24e0003c 	xorhi	r19,r4,32768
    2d00:	d8c02a05 	stb	r3,168(sp)
    2d04:	003de906 	br	24ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70024ac>
    2d08:	d8c03217 	ldw	r3,200(sp)
    2d0c:	00c07a0e 	bge	zero,r3,2ef8 <___vfprintf_internal_r+0x211c>
    2d10:	00800044 	movi	r2,1
    2d14:	d9003317 	ldw	r4,204(sp)
    2d18:	1105883a 	add	r2,r2,r4
    2d1c:	d8802e15 	stw	r2,184(sp)
    2d20:	10004e16 	blt	r2,zero,2e5c <___vfprintf_internal_r+0x2080>
    2d24:	044019c4 	movi	r17,103
    2d28:	003e2106 	br	25b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70025b0>
    2d2c:	d9002917 	ldw	r4,164(sp)
    2d30:	d8802104 	addi	r2,sp,132
    2d34:	d8800315 	stw	r2,12(sp)
    2d38:	d9000015 	stw	r4,0(sp)
    2d3c:	d8802504 	addi	r2,sp,148
    2d40:	d9403617 	ldw	r5,216(sp)
    2d44:	d9002c17 	ldw	r4,176(sp)
    2d48:	d8800215 	stw	r2,8(sp)
    2d4c:	d8802604 	addi	r2,sp,152
    2d50:	d8800115 	stw	r2,4(sp)
    2d54:	01c000c4 	movi	r7,3
    2d58:	980d883a 	mov	r6,r19
    2d5c:	da003d15 	stw	r8,244(sp)
    2d60:	00034000 	call	3400 <_dtoa_r>
    2d64:	d8c02917 	ldw	r3,164(sp)
    2d68:	da003d17 	ldw	r8,244(sp)
    2d6c:	1021883a 	mov	r16,r2
    2d70:	00801184 	movi	r2,70
    2d74:	80f9883a 	add	fp,r16,r3
    2d78:	88bfd926 	beq	r17,r2,2ce0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ce0>
    2d7c:	003de806 	br	2520 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002520>
    2d80:	d9002917 	ldw	r4,164(sp)
    2d84:	00c04d0e 	bge	zero,r3,2ebc <___vfprintf_internal_r+0x20e0>
    2d88:	2000441e 	bne	r4,zero,2e9c <___vfprintf_internal_r+0x20c0>
    2d8c:	9480004c 	andi	r18,r18,1
    2d90:	9000421e 	bne	r18,zero,2e9c <___vfprintf_internal_r+0x20c0>
    2d94:	1805883a 	mov	r2,r3
    2d98:	18007016 	blt	r3,zero,2f5c <___vfprintf_internal_r+0x2180>
    2d9c:	d8c03217 	ldw	r3,200(sp)
    2da0:	d8c02e15 	stw	r3,184(sp)
    2da4:	003e0206 	br	25b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70025b0>
    2da8:	df0022c4 	addi	fp,sp,139
    2dac:	dc002915 	stw	r16,164(sp)
    2db0:	4027883a 	mov	r19,r8
    2db4:	e021883a 	mov	r16,fp
    2db8:	b009883a 	mov	r4,r22
    2dbc:	01400284 	movi	r5,10
    2dc0:	000ad8c0 	call	ad8c <__modsi3>
    2dc4:	10800c04 	addi	r2,r2,48
    2dc8:	843fffc4 	addi	r16,r16,-1
    2dcc:	b009883a 	mov	r4,r22
    2dd0:	01400284 	movi	r5,10
    2dd4:	80800005 	stb	r2,0(r16)
    2dd8:	000ad080 	call	ad08 <__divsi3>
    2ddc:	102d883a 	mov	r22,r2
    2de0:	00800244 	movi	r2,9
    2de4:	15bff416 	blt	r2,r22,2db8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002db8>
    2de8:	9811883a 	mov	r8,r19
    2dec:	b0800c04 	addi	r2,r22,48
    2df0:	8027883a 	mov	r19,r16
    2df4:	997fffc4 	addi	r5,r19,-1
    2df8:	98bfffc5 	stb	r2,-1(r19)
    2dfc:	dc002917 	ldw	r16,164(sp)
    2e00:	2f006a2e 	bgeu	r5,fp,2fac <___vfprintf_internal_r+0x21d0>
    2e04:	d9c02384 	addi	r7,sp,142
    2e08:	3ccfc83a 	sub	r7,r7,r19
    2e0c:	d9002344 	addi	r4,sp,141
    2e10:	e1cf883a 	add	r7,fp,r7
    2e14:	00000106 	br	2e1c <___vfprintf_internal_r+0x2040>
    2e18:	28800003 	ldbu	r2,0(r5)
    2e1c:	20800005 	stb	r2,0(r4)
    2e20:	21000044 	addi	r4,r4,1
    2e24:	29400044 	addi	r5,r5,1
    2e28:	393ffb1e 	bne	r7,r4,2e18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002e18>
    2e2c:	d8802304 	addi	r2,sp,140
    2e30:	14c5c83a 	sub	r2,r2,r19
    2e34:	d8c02344 	addi	r3,sp,141
    2e38:	1885883a 	add	r2,r3,r2
    2e3c:	003f7006 	br	2c00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002c00>
    2e40:	0005883a 	mov	r2,zero
    2e44:	003f0f06 	br	2a84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002a84>
    2e48:	d8c03217 	ldw	r3,200(sp)
    2e4c:	18c00044 	addi	r3,r3,1
    2e50:	d8c02e15 	stw	r3,184(sp)
    2e54:	1805883a 	mov	r2,r3
    2e58:	183fb20e 	bge	r3,zero,2d24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002d24>
    2e5c:	0005883a 	mov	r2,zero
    2e60:	003fb006 	br	2d24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002d24>
    2e64:	d9003617 	ldw	r4,216(sp)
    2e68:	000d883a 	mov	r6,zero
    2e6c:	000f883a 	mov	r7,zero
    2e70:	980b883a 	mov	r5,r19
    2e74:	d8c03c15 	stw	r3,240(sp)
    2e78:	da003d15 	stw	r8,244(sp)
    2e7c:	000c0500 	call	c050 <__eqdf2>
    2e80:	d8c03c17 	ldw	r3,240(sp)
    2e84:	da003d17 	ldw	r8,244(sp)
    2e88:	103f9826 	beq	r2,zero,2cec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cec>
    2e8c:	00800044 	movi	r2,1
    2e90:	10c7c83a 	sub	r3,r2,r3
    2e94:	d8c02615 	stw	r3,152(sp)
    2e98:	003f9506 	br	2cf0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cf0>
    2e9c:	d9002917 	ldw	r4,164(sp)
    2ea0:	d8c03217 	ldw	r3,200(sp)
    2ea4:	20800044 	addi	r2,r4,1
    2ea8:	1885883a 	add	r2,r3,r2
    2eac:	d8802e15 	stw	r2,184(sp)
    2eb0:	103dbf0e 	bge	r2,zero,25b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70025b0>
    2eb4:	0005883a 	mov	r2,zero
    2eb8:	003dbd06 	br	25b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70025b0>
    2ebc:	2000211e 	bne	r4,zero,2f44 <___vfprintf_internal_r+0x2168>
    2ec0:	9480004c 	andi	r18,r18,1
    2ec4:	90001f1e 	bne	r18,zero,2f44 <___vfprintf_internal_r+0x2168>
    2ec8:	00800044 	movi	r2,1
    2ecc:	d8802e15 	stw	r2,184(sp)
    2ed0:	003db706 	br	25b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70025b0>
    2ed4:	00800b44 	movi	r2,45
    2ed8:	05adc83a 	sub	r22,zero,r22
    2edc:	d8802305 	stb	r2,140(sp)
    2ee0:	003f3f06 	br	2be0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002be0>
    2ee4:	0005883a 	mov	r2,zero
    2ee8:	003f5206 	br	2c34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002c34>
    2eec:	90a4703a 	and	r18,r18,r2
    2ef0:	903f4e26 	beq	r18,zero,2c2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002c2c>
    2ef4:	003f4a06 	br	2c20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002c20>
    2ef8:	00800084 	movi	r2,2
    2efc:	10c5c83a 	sub	r2,r2,r3
    2f00:	003f8406 	br	2d14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002d14>
    2f04:	d8802d17 	ldw	r2,180(sp)
    2f08:	d9002d17 	ldw	r4,180(sp)
    2f0c:	ac400043 	ldbu	r17,1(r21)
    2f10:	10800017 	ldw	r2,0(r2)
    2f14:	582b883a 	mov	r21,r11
    2f18:	d8802915 	stw	r2,164(sp)
    2f1c:	20800104 	addi	r2,r4,4
    2f20:	d9002917 	ldw	r4,164(sp)
    2f24:	d8802d15 	stw	r2,180(sp)
    2f28:	203e7a0e 	bge	r4,zero,2914 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002914>
    2f2c:	8c403fcc 	andi	r17,r17,255
    2f30:	00bfffc4 	movi	r2,-1
    2f34:	8c40201c 	xori	r17,r17,128
    2f38:	d8802915 	stw	r2,164(sp)
    2f3c:	8c7fe004 	addi	r17,r17,-128
    2f40:	00380706 	br	f60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000f60>
    2f44:	d8c02917 	ldw	r3,164(sp)
    2f48:	18c00084 	addi	r3,r3,2
    2f4c:	d8c02e15 	stw	r3,184(sp)
    2f50:	1805883a 	mov	r2,r3
    2f54:	183d960e 	bge	r3,zero,25b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70025b0>
    2f58:	003fd606 	br	2eb4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002eb4>
    2f5c:	0005883a 	mov	r2,zero
    2f60:	003f8e06 	br	2d9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002d9c>
    2f64:	9080004c 	andi	r2,r18,1
    2f68:	103f811e 	bne	r2,zero,2d70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002d70>
    2f6c:	d8802117 	ldw	r2,132(sp)
    2f70:	1405c83a 	sub	r2,r2,r16
    2f74:	d8803315 	stw	r2,204(sp)
    2f78:	b47ef326 	beq	r22,r17,2b48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002b48>
    2f7c:	dd802617 	ldw	r22,152(sp)
    2f80:	003f1106 	br	2bc8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002bc8>
    2f84:	d9c02785 	stb	r7,158(sp)
    2f88:	00390406 	br	139c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700139c>
    2f8c:	d9c02785 	stb	r7,158(sp)
    2f90:	0038d306 	br	12e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70012e0>
    2f94:	d9c02785 	stb	r7,158(sp)
    2f98:	003a6106 	br	1920 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001920>
    2f9c:	d9c02785 	stb	r7,158(sp)
    2fa0:	003af806 	br	1b84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001b84>
    2fa4:	0005883a 	mov	r2,zero
    2fa8:	003d7e06 	br	25a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70025a4>
    2fac:	d8802344 	addi	r2,sp,141
    2fb0:	003f1306 	br	2c00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002c00>
    2fb4:	d9c02785 	stb	r7,158(sp)
    2fb8:	00392306 	br	1448 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001448>
    2fbc:	d9c02785 	stb	r7,158(sp)
    2fc0:	003aa906 	br	1a68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001a68>
    2fc4:	d9c02785 	stb	r7,158(sp)
    2fc8:	003a3d06 	br	18c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70018c0>
    2fcc:	d9c02785 	stb	r7,158(sp)
    2fd0:	003aca06 	br	1afc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001afc>

00002fd4 <__vfprintf_internal>:
    2fd4:	008000b4 	movhi	r2,2
    2fd8:	10b05204 	addi	r2,r2,-16056
    2fdc:	300f883a 	mov	r7,r6
    2fe0:	280d883a 	mov	r6,r5
    2fe4:	200b883a 	mov	r5,r4
    2fe8:	11000017 	ldw	r4,0(r2)
    2fec:	0000ddc1 	jmpi	ddc <___vfprintf_internal_r>

00002ff0 <__sbprintf>:
    2ff0:	2880030b 	ldhu	r2,12(r5)
    2ff4:	2ac01917 	ldw	r11,100(r5)
    2ff8:	2a80038b 	ldhu	r10,14(r5)
    2ffc:	2a400717 	ldw	r9,28(r5)
    3000:	2a000917 	ldw	r8,36(r5)
    3004:	defee204 	addi	sp,sp,-1144
    3008:	00c10004 	movi	r3,1024
    300c:	dc011a15 	stw	r16,1128(sp)
    3010:	10bfff4c 	andi	r2,r2,65533
    3014:	2821883a 	mov	r16,r5
    3018:	d8cb883a 	add	r5,sp,r3
    301c:	dc811c15 	stw	r18,1136(sp)
    3020:	dc411b15 	stw	r17,1132(sp)
    3024:	dfc11d15 	stw	ra,1140(sp)
    3028:	2025883a 	mov	r18,r4
    302c:	d881030d 	sth	r2,1036(sp)
    3030:	dac11915 	stw	r11,1124(sp)
    3034:	da81038d 	sth	r10,1038(sp)
    3038:	da410715 	stw	r9,1052(sp)
    303c:	da010915 	stw	r8,1060(sp)
    3040:	dec10015 	stw	sp,1024(sp)
    3044:	dec10415 	stw	sp,1040(sp)
    3048:	d8c10215 	stw	r3,1032(sp)
    304c:	d8c10515 	stw	r3,1044(sp)
    3050:	d8010615 	stw	zero,1048(sp)
    3054:	0000ddc0 	call	ddc <___vfprintf_internal_r>
    3058:	1023883a 	mov	r17,r2
    305c:	10000416 	blt	r2,zero,3070 <__sbprintf+0x80>
    3060:	d9410004 	addi	r5,sp,1024
    3064:	9009883a 	mov	r4,r18
    3068:	0004ca40 	call	4ca4 <_fflush_r>
    306c:	10000d1e 	bne	r2,zero,30a4 <__sbprintf+0xb4>
    3070:	d881030b 	ldhu	r2,1036(sp)
    3074:	1080100c 	andi	r2,r2,64
    3078:	10000326 	beq	r2,zero,3088 <__sbprintf+0x98>
    307c:	8080030b 	ldhu	r2,12(r16)
    3080:	10801014 	ori	r2,r2,64
    3084:	8080030d 	sth	r2,12(r16)
    3088:	8805883a 	mov	r2,r17
    308c:	dfc11d17 	ldw	ra,1140(sp)
    3090:	dc811c17 	ldw	r18,1136(sp)
    3094:	dc411b17 	ldw	r17,1132(sp)
    3098:	dc011a17 	ldw	r16,1128(sp)
    309c:	dec11e04 	addi	sp,sp,1144
    30a0:	f800283a 	ret
    30a4:	047fffc4 	movi	r17,-1
    30a8:	003ff106 	br	3070 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003070>

000030ac <__swsetup_r>:
    30ac:	008000b4 	movhi	r2,2
    30b0:	defffd04 	addi	sp,sp,-12
    30b4:	10b05204 	addi	r2,r2,-16056
    30b8:	dc400115 	stw	r17,4(sp)
    30bc:	2023883a 	mov	r17,r4
    30c0:	11000017 	ldw	r4,0(r2)
    30c4:	dc000015 	stw	r16,0(sp)
    30c8:	dfc00215 	stw	ra,8(sp)
    30cc:	2821883a 	mov	r16,r5
    30d0:	20000226 	beq	r4,zero,30dc <__swsetup_r+0x30>
    30d4:	20800e17 	ldw	r2,56(r4)
    30d8:	10003126 	beq	r2,zero,31a0 <__swsetup_r+0xf4>
    30dc:	8080030b 	ldhu	r2,12(r16)
    30e0:	10c0020c 	andi	r3,r2,8
    30e4:	1009883a 	mov	r4,r2
    30e8:	18000f26 	beq	r3,zero,3128 <__swsetup_r+0x7c>
    30ec:	80c00417 	ldw	r3,16(r16)
    30f0:	18001526 	beq	r3,zero,3148 <__swsetup_r+0x9c>
    30f4:	1100004c 	andi	r4,r2,1
    30f8:	20001c1e 	bne	r4,zero,316c <__swsetup_r+0xc0>
    30fc:	1080008c 	andi	r2,r2,2
    3100:	1000291e 	bne	r2,zero,31a8 <__swsetup_r+0xfc>
    3104:	80800517 	ldw	r2,20(r16)
    3108:	80800215 	stw	r2,8(r16)
    310c:	18001c26 	beq	r3,zero,3180 <__swsetup_r+0xd4>
    3110:	0005883a 	mov	r2,zero
    3114:	dfc00217 	ldw	ra,8(sp)
    3118:	dc400117 	ldw	r17,4(sp)
    311c:	dc000017 	ldw	r16,0(sp)
    3120:	dec00304 	addi	sp,sp,12
    3124:	f800283a 	ret
    3128:	2080040c 	andi	r2,r4,16
    312c:	10002e26 	beq	r2,zero,31e8 <__swsetup_r+0x13c>
    3130:	2080010c 	andi	r2,r4,4
    3134:	10001e1e 	bne	r2,zero,31b0 <__swsetup_r+0x104>
    3138:	80c00417 	ldw	r3,16(r16)
    313c:	20800214 	ori	r2,r4,8
    3140:	8080030d 	sth	r2,12(r16)
    3144:	183feb1e 	bne	r3,zero,30f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70030f4>
    3148:	1100a00c 	andi	r4,r2,640
    314c:	01408004 	movi	r5,512
    3150:	217fe826 	beq	r4,r5,30f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70030f4>
    3154:	800b883a 	mov	r5,r16
    3158:	8809883a 	mov	r4,r17
    315c:	0005c240 	call	5c24 <__smakebuf_r>
    3160:	8080030b 	ldhu	r2,12(r16)
    3164:	80c00417 	ldw	r3,16(r16)
    3168:	003fe206 	br	30f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70030f4>
    316c:	80800517 	ldw	r2,20(r16)
    3170:	80000215 	stw	zero,8(r16)
    3174:	0085c83a 	sub	r2,zero,r2
    3178:	80800615 	stw	r2,24(r16)
    317c:	183fe41e 	bne	r3,zero,3110 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003110>
    3180:	80c0030b 	ldhu	r3,12(r16)
    3184:	0005883a 	mov	r2,zero
    3188:	1900200c 	andi	r4,r3,128
    318c:	203fe126 	beq	r4,zero,3114 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003114>
    3190:	18c01014 	ori	r3,r3,64
    3194:	80c0030d 	sth	r3,12(r16)
    3198:	00bfffc4 	movi	r2,-1
    319c:	003fdd06 	br	3114 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003114>
    31a0:	00050800 	call	5080 <__sinit>
    31a4:	003fcd06 	br	30dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70030dc>
    31a8:	0005883a 	mov	r2,zero
    31ac:	003fd606 	br	3108 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003108>
    31b0:	81400c17 	ldw	r5,48(r16)
    31b4:	28000626 	beq	r5,zero,31d0 <__swsetup_r+0x124>
    31b8:	80801004 	addi	r2,r16,64
    31bc:	28800326 	beq	r5,r2,31cc <__swsetup_r+0x120>
    31c0:	8809883a 	mov	r4,r17
    31c4:	00051f40 	call	51f4 <_free_r>
    31c8:	8100030b 	ldhu	r4,12(r16)
    31cc:	80000c15 	stw	zero,48(r16)
    31d0:	80c00417 	ldw	r3,16(r16)
    31d4:	00bff6c4 	movi	r2,-37
    31d8:	1108703a 	and	r4,r2,r4
    31dc:	80000115 	stw	zero,4(r16)
    31e0:	80c00015 	stw	r3,0(r16)
    31e4:	003fd506 	br	313c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700313c>
    31e8:	00800244 	movi	r2,9
    31ec:	88800015 	stw	r2,0(r17)
    31f0:	20801014 	ori	r2,r4,64
    31f4:	8080030d 	sth	r2,12(r16)
    31f8:	00bfffc4 	movi	r2,-1
    31fc:	003fc506 	br	3114 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003114>

00003200 <quorem>:
    3200:	defff704 	addi	sp,sp,-36
    3204:	dc800215 	stw	r18,8(sp)
    3208:	20800417 	ldw	r2,16(r4)
    320c:	2c800417 	ldw	r18,16(r5)
    3210:	dfc00815 	stw	ra,32(sp)
    3214:	ddc00715 	stw	r23,28(sp)
    3218:	dd800615 	stw	r22,24(sp)
    321c:	dd400515 	stw	r21,20(sp)
    3220:	dd000415 	stw	r20,16(sp)
    3224:	dcc00315 	stw	r19,12(sp)
    3228:	dc400115 	stw	r17,4(sp)
    322c:	dc000015 	stw	r16,0(sp)
    3230:	14807116 	blt	r2,r18,33f8 <quorem+0x1f8>
    3234:	94bfffc4 	addi	r18,r18,-1
    3238:	94ad883a 	add	r22,r18,r18
    323c:	b5ad883a 	add	r22,r22,r22
    3240:	2c400504 	addi	r17,r5,20
    3244:	8da9883a 	add	r20,r17,r22
    3248:	25400504 	addi	r21,r4,20
    324c:	282f883a 	mov	r23,r5
    3250:	adad883a 	add	r22,r21,r22
    3254:	a1400017 	ldw	r5,0(r20)
    3258:	2021883a 	mov	r16,r4
    325c:	b1000017 	ldw	r4,0(r22)
    3260:	29400044 	addi	r5,r5,1
    3264:	000ae000 	call	ae00 <__udivsi3>
    3268:	1027883a 	mov	r19,r2
    326c:	10002c26 	beq	r2,zero,3320 <quorem+0x120>
    3270:	a813883a 	mov	r9,r21
    3274:	880b883a 	mov	r5,r17
    3278:	0009883a 	mov	r4,zero
    327c:	000d883a 	mov	r6,zero
    3280:	2a000017 	ldw	r8,0(r5)
    3284:	49c00017 	ldw	r7,0(r9)
    3288:	29400104 	addi	r5,r5,4
    328c:	40bfffcc 	andi	r2,r8,65535
    3290:	14c5383a 	mul	r2,r2,r19
    3294:	4010d43a 	srli	r8,r8,16
    3298:	38ffffcc 	andi	r3,r7,65535
    329c:	1105883a 	add	r2,r2,r4
    32a0:	1008d43a 	srli	r4,r2,16
    32a4:	44d1383a 	mul	r8,r8,r19
    32a8:	198d883a 	add	r6,r3,r6
    32ac:	10ffffcc 	andi	r3,r2,65535
    32b0:	30c7c83a 	sub	r3,r6,r3
    32b4:	380ed43a 	srli	r7,r7,16
    32b8:	4105883a 	add	r2,r8,r4
    32bc:	180dd43a 	srai	r6,r3,16
    32c0:	113fffcc 	andi	r4,r2,65535
    32c4:	390fc83a 	sub	r7,r7,r4
    32c8:	398d883a 	add	r6,r7,r6
    32cc:	300e943a 	slli	r7,r6,16
    32d0:	18ffffcc 	andi	r3,r3,65535
    32d4:	1008d43a 	srli	r4,r2,16
    32d8:	38ceb03a 	or	r7,r7,r3
    32dc:	49c00015 	stw	r7,0(r9)
    32e0:	300dd43a 	srai	r6,r6,16
    32e4:	4a400104 	addi	r9,r9,4
    32e8:	a17fe52e 	bgeu	r20,r5,3280 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003280>
    32ec:	b0800017 	ldw	r2,0(r22)
    32f0:	10000b1e 	bne	r2,zero,3320 <quorem+0x120>
    32f4:	b0bfff04 	addi	r2,r22,-4
    32f8:	a880082e 	bgeu	r21,r2,331c <quorem+0x11c>
    32fc:	b0ffff17 	ldw	r3,-4(r22)
    3300:	18000326 	beq	r3,zero,3310 <quorem+0x110>
    3304:	00000506 	br	331c <quorem+0x11c>
    3308:	10c00017 	ldw	r3,0(r2)
    330c:	1800031e 	bne	r3,zero,331c <quorem+0x11c>
    3310:	10bfff04 	addi	r2,r2,-4
    3314:	94bfffc4 	addi	r18,r18,-1
    3318:	a8bffb36 	bltu	r21,r2,3308 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003308>
    331c:	84800415 	stw	r18,16(r16)
    3320:	b80b883a 	mov	r5,r23
    3324:	8009883a 	mov	r4,r16
    3328:	00073640 	call	7364 <__mcmp>
    332c:	10002616 	blt	r2,zero,33c8 <quorem+0x1c8>
    3330:	9cc00044 	addi	r19,r19,1
    3334:	a805883a 	mov	r2,r21
    3338:	000b883a 	mov	r5,zero
    333c:	11000017 	ldw	r4,0(r2)
    3340:	89800017 	ldw	r6,0(r17)
    3344:	10800104 	addi	r2,r2,4
    3348:	20ffffcc 	andi	r3,r4,65535
    334c:	194b883a 	add	r5,r3,r5
    3350:	30ffffcc 	andi	r3,r6,65535
    3354:	28c7c83a 	sub	r3,r5,r3
    3358:	300cd43a 	srli	r6,r6,16
    335c:	2008d43a 	srli	r4,r4,16
    3360:	180bd43a 	srai	r5,r3,16
    3364:	18ffffcc 	andi	r3,r3,65535
    3368:	2189c83a 	sub	r4,r4,r6
    336c:	2149883a 	add	r4,r4,r5
    3370:	200c943a 	slli	r6,r4,16
    3374:	8c400104 	addi	r17,r17,4
    3378:	200bd43a 	srai	r5,r4,16
    337c:	30c6b03a 	or	r3,r6,r3
    3380:	10ffff15 	stw	r3,-4(r2)
    3384:	a47fed2e 	bgeu	r20,r17,333c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700333c>
    3388:	9485883a 	add	r2,r18,r18
    338c:	1085883a 	add	r2,r2,r2
    3390:	a887883a 	add	r3,r21,r2
    3394:	18800017 	ldw	r2,0(r3)
    3398:	10000b1e 	bne	r2,zero,33c8 <quorem+0x1c8>
    339c:	18bfff04 	addi	r2,r3,-4
    33a0:	a880082e 	bgeu	r21,r2,33c4 <quorem+0x1c4>
    33a4:	18ffff17 	ldw	r3,-4(r3)
    33a8:	18000326 	beq	r3,zero,33b8 <quorem+0x1b8>
    33ac:	00000506 	br	33c4 <quorem+0x1c4>
    33b0:	10c00017 	ldw	r3,0(r2)
    33b4:	1800031e 	bne	r3,zero,33c4 <quorem+0x1c4>
    33b8:	10bfff04 	addi	r2,r2,-4
    33bc:	94bfffc4 	addi	r18,r18,-1
    33c0:	a8bffb36 	bltu	r21,r2,33b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70033b0>
    33c4:	84800415 	stw	r18,16(r16)
    33c8:	9805883a 	mov	r2,r19
    33cc:	dfc00817 	ldw	ra,32(sp)
    33d0:	ddc00717 	ldw	r23,28(sp)
    33d4:	dd800617 	ldw	r22,24(sp)
    33d8:	dd400517 	ldw	r21,20(sp)
    33dc:	dd000417 	ldw	r20,16(sp)
    33e0:	dcc00317 	ldw	r19,12(sp)
    33e4:	dc800217 	ldw	r18,8(sp)
    33e8:	dc400117 	ldw	r17,4(sp)
    33ec:	dc000017 	ldw	r16,0(sp)
    33f0:	dec00904 	addi	sp,sp,36
    33f4:	f800283a 	ret
    33f8:	0005883a 	mov	r2,zero
    33fc:	003ff306 	br	33cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70033cc>

00003400 <_dtoa_r>:
    3400:	20801017 	ldw	r2,64(r4)
    3404:	deffde04 	addi	sp,sp,-136
    3408:	df002015 	stw	fp,128(sp)
    340c:	dcc01b15 	stw	r19,108(sp)
    3410:	dc801a15 	stw	r18,104(sp)
    3414:	dc401915 	stw	r17,100(sp)
    3418:	dc001815 	stw	r16,96(sp)
    341c:	dfc02115 	stw	ra,132(sp)
    3420:	ddc01f15 	stw	r23,124(sp)
    3424:	dd801e15 	stw	r22,120(sp)
    3428:	dd401d15 	stw	r21,116(sp)
    342c:	dd001c15 	stw	r20,112(sp)
    3430:	d9c00315 	stw	r7,12(sp)
    3434:	2039883a 	mov	fp,r4
    3438:	3023883a 	mov	r17,r6
    343c:	2825883a 	mov	r18,r5
    3440:	dc002417 	ldw	r16,144(sp)
    3444:	3027883a 	mov	r19,r6
    3448:	10000826 	beq	r2,zero,346c <_dtoa_r+0x6c>
    344c:	21801117 	ldw	r6,68(r4)
    3450:	00c00044 	movi	r3,1
    3454:	100b883a 	mov	r5,r2
    3458:	1986983a 	sll	r3,r3,r6
    345c:	11800115 	stw	r6,4(r2)
    3460:	10c00215 	stw	r3,8(r2)
    3464:	0006b440 	call	6b44 <_Bfree>
    3468:	e0001015 	stw	zero,64(fp)
    346c:	88002e16 	blt	r17,zero,3528 <_dtoa_r+0x128>
    3470:	80000015 	stw	zero,0(r16)
    3474:	889ffc2c 	andhi	r2,r17,32752
    3478:	00dffc34 	movhi	r3,32752
    347c:	10c01c26 	beq	r2,r3,34f0 <_dtoa_r+0xf0>
    3480:	000d883a 	mov	r6,zero
    3484:	000f883a 	mov	r7,zero
    3488:	9009883a 	mov	r4,r18
    348c:	980b883a 	mov	r5,r19
    3490:	000c0500 	call	c050 <__eqdf2>
    3494:	10002b1e 	bne	r2,zero,3544 <_dtoa_r+0x144>
    3498:	d9c02317 	ldw	r7,140(sp)
    349c:	00800044 	movi	r2,1
    34a0:	38800015 	stw	r2,0(r7)
    34a4:	d8802517 	ldw	r2,148(sp)
    34a8:	10019e26 	beq	r2,zero,3b24 <_dtoa_r+0x724>
    34ac:	d8c02517 	ldw	r3,148(sp)
    34b0:	008000b4 	movhi	r2,2
    34b4:	10a79844 	addi	r2,r2,-24991
    34b8:	18800015 	stw	r2,0(r3)
    34bc:	10bfffc4 	addi	r2,r2,-1
    34c0:	dfc02117 	ldw	ra,132(sp)
    34c4:	df002017 	ldw	fp,128(sp)
    34c8:	ddc01f17 	ldw	r23,124(sp)
    34cc:	dd801e17 	ldw	r22,120(sp)
    34d0:	dd401d17 	ldw	r21,116(sp)
    34d4:	dd001c17 	ldw	r20,112(sp)
    34d8:	dcc01b17 	ldw	r19,108(sp)
    34dc:	dc801a17 	ldw	r18,104(sp)
    34e0:	dc401917 	ldw	r17,100(sp)
    34e4:	dc001817 	ldw	r16,96(sp)
    34e8:	dec02204 	addi	sp,sp,136
    34ec:	f800283a 	ret
    34f0:	d8c02317 	ldw	r3,140(sp)
    34f4:	0089c3c4 	movi	r2,9999
    34f8:	18800015 	stw	r2,0(r3)
    34fc:	90017726 	beq	r18,zero,3adc <_dtoa_r+0x6dc>
    3500:	008000b4 	movhi	r2,2
    3504:	10a7a404 	addi	r2,r2,-24944
    3508:	d9002517 	ldw	r4,148(sp)
    350c:	203fec26 	beq	r4,zero,34c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70034c0>
    3510:	10c000c7 	ldb	r3,3(r2)
    3514:	1801781e 	bne	r3,zero,3af8 <_dtoa_r+0x6f8>
    3518:	10c000c4 	addi	r3,r2,3
    351c:	d9802517 	ldw	r6,148(sp)
    3520:	30c00015 	stw	r3,0(r6)
    3524:	003fe606 	br	34c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70034c0>
    3528:	04e00034 	movhi	r19,32768
    352c:	9cffffc4 	addi	r19,r19,-1
    3530:	00800044 	movi	r2,1
    3534:	8ce6703a 	and	r19,r17,r19
    3538:	80800015 	stw	r2,0(r16)
    353c:	9823883a 	mov	r17,r19
    3540:	003fcc06 	br	3474 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003474>
    3544:	d8800204 	addi	r2,sp,8
    3548:	d8800015 	stw	r2,0(sp)
    354c:	d9c00104 	addi	r7,sp,4
    3550:	900b883a 	mov	r5,r18
    3554:	980d883a 	mov	r6,r19
    3558:	e009883a 	mov	r4,fp
    355c:	8820d53a 	srli	r16,r17,20
    3560:	00077300 	call	7730 <__d2b>
    3564:	d8800915 	stw	r2,36(sp)
    3568:	8001651e 	bne	r16,zero,3b00 <_dtoa_r+0x700>
    356c:	dd800217 	ldw	r22,8(sp)
    3570:	dc000117 	ldw	r16,4(sp)
    3574:	00800804 	movi	r2,32
    3578:	b421883a 	add	r16,r22,r16
    357c:	80c10c84 	addi	r3,r16,1074
    3580:	10c2d10e 	bge	r2,r3,40c8 <_dtoa_r+0xcc8>
    3584:	00801004 	movi	r2,64
    3588:	81010484 	addi	r4,r16,1042
    358c:	10c7c83a 	sub	r3,r2,r3
    3590:	9108d83a 	srl	r4,r18,r4
    3594:	88e2983a 	sll	r17,r17,r3
    3598:	2448b03a 	or	r4,r4,r17
    359c:	000d4180 	call	d418 <__floatunsidf>
    35a0:	017f8434 	movhi	r5,65040
    35a4:	01800044 	movi	r6,1
    35a8:	1009883a 	mov	r4,r2
    35ac:	194b883a 	add	r5,r3,r5
    35b0:	843fffc4 	addi	r16,r16,-1
    35b4:	d9801115 	stw	r6,68(sp)
    35b8:	000d883a 	mov	r6,zero
    35bc:	01cffe34 	movhi	r7,16376
    35c0:	000c9c00 	call	c9c0 <__subdf3>
    35c4:	0198dbf4 	movhi	r6,25455
    35c8:	01cff4f4 	movhi	r7,16339
    35cc:	3190d844 	addi	r6,r6,17249
    35d0:	39e1e9c4 	addi	r7,r7,-30809
    35d4:	1009883a 	mov	r4,r2
    35d8:	180b883a 	mov	r5,r3
    35dc:	000c2a80 	call	c2a8 <__muldf3>
    35e0:	01a2d874 	movhi	r6,35681
    35e4:	01cff1f4 	movhi	r7,16327
    35e8:	31b22cc4 	addi	r6,r6,-14157
    35ec:	39e28a04 	addi	r7,r7,-30168
    35f0:	180b883a 	mov	r5,r3
    35f4:	1009883a 	mov	r4,r2
    35f8:	000aebc0 	call	aebc <__adddf3>
    35fc:	8009883a 	mov	r4,r16
    3600:	1029883a 	mov	r20,r2
    3604:	1823883a 	mov	r17,r3
    3608:	000d33c0 	call	d33c <__floatsidf>
    360c:	019427f4 	movhi	r6,20639
    3610:	01cff4f4 	movhi	r7,16339
    3614:	319e7ec4 	addi	r6,r6,31227
    3618:	39d104c4 	addi	r7,r7,17427
    361c:	1009883a 	mov	r4,r2
    3620:	180b883a 	mov	r5,r3
    3624:	000c2a80 	call	c2a8 <__muldf3>
    3628:	100d883a 	mov	r6,r2
    362c:	180f883a 	mov	r7,r3
    3630:	a009883a 	mov	r4,r20
    3634:	880b883a 	mov	r5,r17
    3638:	000aebc0 	call	aebc <__adddf3>
    363c:	1009883a 	mov	r4,r2
    3640:	180b883a 	mov	r5,r3
    3644:	1029883a 	mov	r20,r2
    3648:	1823883a 	mov	r17,r3
    364c:	000d2bc0 	call	d2bc <__fixdfsi>
    3650:	000d883a 	mov	r6,zero
    3654:	000f883a 	mov	r7,zero
    3658:	a009883a 	mov	r4,r20
    365c:	880b883a 	mov	r5,r17
    3660:	d8800515 	stw	r2,20(sp)
    3664:	000c1b40 	call	c1b4 <__ledf2>
    3668:	10028716 	blt	r2,zero,4088 <_dtoa_r+0xc88>
    366c:	d8c00517 	ldw	r3,20(sp)
    3670:	00800584 	movi	r2,22
    3674:	10c27536 	bltu	r2,r3,404c <_dtoa_r+0xc4c>
    3678:	180490fa 	slli	r2,r3,3
    367c:	00c000b4 	movhi	r3,2
    3680:	18e7bf04 	addi	r3,r3,-24836
    3684:	1885883a 	add	r2,r3,r2
    3688:	11000017 	ldw	r4,0(r2)
    368c:	11400117 	ldw	r5,4(r2)
    3690:	900d883a 	mov	r6,r18
    3694:	980f883a 	mov	r7,r19
    3698:	000c0d80 	call	c0d8 <__gedf2>
    369c:	00828d0e 	bge	zero,r2,40d4 <_dtoa_r+0xcd4>
    36a0:	d9000517 	ldw	r4,20(sp)
    36a4:	d8000e15 	stw	zero,56(sp)
    36a8:	213fffc4 	addi	r4,r4,-1
    36ac:	d9000515 	stw	r4,20(sp)
    36b0:	b42dc83a 	sub	r22,r22,r16
    36b4:	b5bfffc4 	addi	r22,r22,-1
    36b8:	b0026f16 	blt	r22,zero,4078 <_dtoa_r+0xc78>
    36bc:	d8000815 	stw	zero,32(sp)
    36c0:	d9c00517 	ldw	r7,20(sp)
    36c4:	38026416 	blt	r7,zero,4058 <_dtoa_r+0xc58>
    36c8:	b1ed883a 	add	r22,r22,r7
    36cc:	d9c00d15 	stw	r7,52(sp)
    36d0:	d8000a15 	stw	zero,40(sp)
    36d4:	d9800317 	ldw	r6,12(sp)
    36d8:	00800244 	movi	r2,9
    36dc:	11811436 	bltu	r2,r6,3b30 <_dtoa_r+0x730>
    36e0:	00800144 	movi	r2,5
    36e4:	1184e10e 	bge	r2,r6,4a6c <_dtoa_r+0x166c>
    36e8:	31bfff04 	addi	r6,r6,-4
    36ec:	d9800315 	stw	r6,12(sp)
    36f0:	0023883a 	mov	r17,zero
    36f4:	d9800317 	ldw	r6,12(sp)
    36f8:	008000c4 	movi	r2,3
    36fc:	30836726 	beq	r6,r2,449c <_dtoa_r+0x109c>
    3700:	1183410e 	bge	r2,r6,4408 <_dtoa_r+0x1008>
    3704:	d9c00317 	ldw	r7,12(sp)
    3708:	00800104 	movi	r2,4
    370c:	38827c26 	beq	r7,r2,4100 <_dtoa_r+0xd00>
    3710:	00800144 	movi	r2,5
    3714:	3884c41e 	bne	r7,r2,4a28 <_dtoa_r+0x1628>
    3718:	00800044 	movi	r2,1
    371c:	d8800b15 	stw	r2,44(sp)
    3720:	d8c00517 	ldw	r3,20(sp)
    3724:	d9002217 	ldw	r4,136(sp)
    3728:	1907883a 	add	r3,r3,r4
    372c:	19800044 	addi	r6,r3,1
    3730:	d8c00c15 	stw	r3,48(sp)
    3734:	d9800615 	stw	r6,24(sp)
    3738:	0183a40e 	bge	zero,r6,45cc <_dtoa_r+0x11cc>
    373c:	d9800617 	ldw	r6,24(sp)
    3740:	3021883a 	mov	r16,r6
    3744:	e0001115 	stw	zero,68(fp)
    3748:	008005c4 	movi	r2,23
    374c:	1184c92e 	bgeu	r2,r6,4a74 <_dtoa_r+0x1674>
    3750:	00c00044 	movi	r3,1
    3754:	00800104 	movi	r2,4
    3758:	1085883a 	add	r2,r2,r2
    375c:	11000504 	addi	r4,r2,20
    3760:	180b883a 	mov	r5,r3
    3764:	18c00044 	addi	r3,r3,1
    3768:	313ffb2e 	bgeu	r6,r4,3758 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003758>
    376c:	e1401115 	stw	r5,68(fp)
    3770:	e009883a 	mov	r4,fp
    3774:	0006a9c0 	call	6a9c <_Balloc>
    3778:	d8800715 	stw	r2,28(sp)
    377c:	e0801015 	stw	r2,64(fp)
    3780:	00800384 	movi	r2,14
    3784:	1400f736 	bltu	r2,r16,3b64 <_dtoa_r+0x764>
    3788:	8800f626 	beq	r17,zero,3b64 <_dtoa_r+0x764>
    378c:	d9c00517 	ldw	r7,20(sp)
    3790:	01c39a0e 	bge	zero,r7,45fc <_dtoa_r+0x11fc>
    3794:	388003cc 	andi	r2,r7,15
    3798:	100490fa 	slli	r2,r2,3
    379c:	382bd13a 	srai	r21,r7,4
    37a0:	00c000b4 	movhi	r3,2
    37a4:	18e7bf04 	addi	r3,r3,-24836
    37a8:	1885883a 	add	r2,r3,r2
    37ac:	a8c0040c 	andi	r3,r21,16
    37b0:	12400017 	ldw	r9,0(r2)
    37b4:	12000117 	ldw	r8,4(r2)
    37b8:	18037926 	beq	r3,zero,45a0 <_dtoa_r+0x11a0>
    37bc:	008000b4 	movhi	r2,2
    37c0:	10a7b504 	addi	r2,r2,-24876
    37c4:	11800817 	ldw	r6,32(r2)
    37c8:	11c00917 	ldw	r7,36(r2)
    37cc:	9009883a 	mov	r4,r18
    37d0:	980b883a 	mov	r5,r19
    37d4:	da001715 	stw	r8,92(sp)
    37d8:	da401615 	stw	r9,88(sp)
    37dc:	000b7680 	call	b768 <__divdf3>
    37e0:	da001717 	ldw	r8,92(sp)
    37e4:	da401617 	ldw	r9,88(sp)
    37e8:	ad4003cc 	andi	r21,r21,15
    37ec:	040000c4 	movi	r16,3
    37f0:	1023883a 	mov	r17,r2
    37f4:	1829883a 	mov	r20,r3
    37f8:	a8001126 	beq	r21,zero,3840 <_dtoa_r+0x440>
    37fc:	05c000b4 	movhi	r23,2
    3800:	bde7b504 	addi	r23,r23,-24876
    3804:	4805883a 	mov	r2,r9
    3808:	4007883a 	mov	r3,r8
    380c:	a980004c 	andi	r6,r21,1
    3810:	1009883a 	mov	r4,r2
    3814:	a82bd07a 	srai	r21,r21,1
    3818:	180b883a 	mov	r5,r3
    381c:	30000426 	beq	r6,zero,3830 <_dtoa_r+0x430>
    3820:	b9800017 	ldw	r6,0(r23)
    3824:	b9c00117 	ldw	r7,4(r23)
    3828:	84000044 	addi	r16,r16,1
    382c:	000c2a80 	call	c2a8 <__muldf3>
    3830:	bdc00204 	addi	r23,r23,8
    3834:	a83ff51e 	bne	r21,zero,380c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700380c>
    3838:	1013883a 	mov	r9,r2
    383c:	1811883a 	mov	r8,r3
    3840:	480d883a 	mov	r6,r9
    3844:	400f883a 	mov	r7,r8
    3848:	8809883a 	mov	r4,r17
    384c:	a00b883a 	mov	r5,r20
    3850:	000b7680 	call	b768 <__divdf3>
    3854:	d8800f15 	stw	r2,60(sp)
    3858:	d8c01015 	stw	r3,64(sp)
    385c:	d8c00e17 	ldw	r3,56(sp)
    3860:	18000626 	beq	r3,zero,387c <_dtoa_r+0x47c>
    3864:	d9000f17 	ldw	r4,60(sp)
    3868:	d9401017 	ldw	r5,64(sp)
    386c:	000d883a 	mov	r6,zero
    3870:	01cffc34 	movhi	r7,16368
    3874:	000c1b40 	call	c1b4 <__ledf2>
    3878:	10040b16 	blt	r2,zero,48a8 <_dtoa_r+0x14a8>
    387c:	8009883a 	mov	r4,r16
    3880:	000d33c0 	call	d33c <__floatsidf>
    3884:	d9800f17 	ldw	r6,60(sp)
    3888:	d9c01017 	ldw	r7,64(sp)
    388c:	1009883a 	mov	r4,r2
    3890:	180b883a 	mov	r5,r3
    3894:	000c2a80 	call	c2a8 <__muldf3>
    3898:	000d883a 	mov	r6,zero
    389c:	01d00734 	movhi	r7,16412
    38a0:	1009883a 	mov	r4,r2
    38a4:	180b883a 	mov	r5,r3
    38a8:	000aebc0 	call	aebc <__adddf3>
    38ac:	1021883a 	mov	r16,r2
    38b0:	d8800617 	ldw	r2,24(sp)
    38b4:	047f3034 	movhi	r17,64704
    38b8:	1c63883a 	add	r17,r3,r17
    38bc:	10031826 	beq	r2,zero,4520 <_dtoa_r+0x1120>
    38c0:	d8c00517 	ldw	r3,20(sp)
    38c4:	db000617 	ldw	r12,24(sp)
    38c8:	d8c01315 	stw	r3,76(sp)
    38cc:	d9000b17 	ldw	r4,44(sp)
    38d0:	20038f26 	beq	r4,zero,4710 <_dtoa_r+0x1310>
    38d4:	60bfffc4 	addi	r2,r12,-1
    38d8:	100490fa 	slli	r2,r2,3
    38dc:	00c000b4 	movhi	r3,2
    38e0:	18e7bf04 	addi	r3,r3,-24836
    38e4:	1885883a 	add	r2,r3,r2
    38e8:	11800017 	ldw	r6,0(r2)
    38ec:	11c00117 	ldw	r7,4(r2)
    38f0:	d8800717 	ldw	r2,28(sp)
    38f4:	0009883a 	mov	r4,zero
    38f8:	014ff834 	movhi	r5,16352
    38fc:	db001615 	stw	r12,88(sp)
    3900:	15c00044 	addi	r23,r2,1
    3904:	000b7680 	call	b768 <__divdf3>
    3908:	800d883a 	mov	r6,r16
    390c:	880f883a 	mov	r7,r17
    3910:	1009883a 	mov	r4,r2
    3914:	180b883a 	mov	r5,r3
    3918:	000c9c00 	call	c9c0 <__subdf3>
    391c:	d9401017 	ldw	r5,64(sp)
    3920:	d9000f17 	ldw	r4,60(sp)
    3924:	102b883a 	mov	r21,r2
    3928:	d8c01215 	stw	r3,72(sp)
    392c:	000d2bc0 	call	d2bc <__fixdfsi>
    3930:	1009883a 	mov	r4,r2
    3934:	1029883a 	mov	r20,r2
    3938:	000d33c0 	call	d33c <__floatsidf>
    393c:	d9000f17 	ldw	r4,60(sp)
    3940:	d9401017 	ldw	r5,64(sp)
    3944:	100d883a 	mov	r6,r2
    3948:	180f883a 	mov	r7,r3
    394c:	000c9c00 	call	c9c0 <__subdf3>
    3950:	1823883a 	mov	r17,r3
    3954:	d8c00717 	ldw	r3,28(sp)
    3958:	d9401217 	ldw	r5,72(sp)
    395c:	a2000c04 	addi	r8,r20,48
    3960:	1021883a 	mov	r16,r2
    3964:	1a000005 	stb	r8,0(r3)
    3968:	800d883a 	mov	r6,r16
    396c:	880f883a 	mov	r7,r17
    3970:	a809883a 	mov	r4,r21
    3974:	4029883a 	mov	r20,r8
    3978:	000c0d80 	call	c0d8 <__gedf2>
    397c:	00841d16 	blt	zero,r2,49f4 <_dtoa_r+0x15f4>
    3980:	800d883a 	mov	r6,r16
    3984:	880f883a 	mov	r7,r17
    3988:	0009883a 	mov	r4,zero
    398c:	014ffc34 	movhi	r5,16368
    3990:	000c9c00 	call	c9c0 <__subdf3>
    3994:	d9401217 	ldw	r5,72(sp)
    3998:	100d883a 	mov	r6,r2
    399c:	180f883a 	mov	r7,r3
    39a0:	a809883a 	mov	r4,r21
    39a4:	000c0d80 	call	c0d8 <__gedf2>
    39a8:	db001617 	ldw	r12,88(sp)
    39ac:	00840e16 	blt	zero,r2,49e8 <_dtoa_r+0x15e8>
    39b0:	00800044 	movi	r2,1
    39b4:	13006b0e 	bge	r2,r12,3b64 <_dtoa_r+0x764>
    39b8:	d9000717 	ldw	r4,28(sp)
    39bc:	dd800f15 	stw	r22,60(sp)
    39c0:	dcc01015 	stw	r19,64(sp)
    39c4:	2319883a 	add	r12,r4,r12
    39c8:	dcc01217 	ldw	r19,72(sp)
    39cc:	602d883a 	mov	r22,r12
    39d0:	dc801215 	stw	r18,72(sp)
    39d4:	b825883a 	mov	r18,r23
    39d8:	00000906 	br	3a00 <_dtoa_r+0x600>
    39dc:	000c9c00 	call	c9c0 <__subdf3>
    39e0:	a80d883a 	mov	r6,r21
    39e4:	980f883a 	mov	r7,r19
    39e8:	1009883a 	mov	r4,r2
    39ec:	180b883a 	mov	r5,r3
    39f0:	000c1b40 	call	c1b4 <__ledf2>
    39f4:	1003e816 	blt	r2,zero,4998 <_dtoa_r+0x1598>
    39f8:	b825883a 	mov	r18,r23
    39fc:	bd83e926 	beq	r23,r22,49a4 <_dtoa_r+0x15a4>
    3a00:	a809883a 	mov	r4,r21
    3a04:	980b883a 	mov	r5,r19
    3a08:	000d883a 	mov	r6,zero
    3a0c:	01d00934 	movhi	r7,16420
    3a10:	000c2a80 	call	c2a8 <__muldf3>
    3a14:	000d883a 	mov	r6,zero
    3a18:	01d00934 	movhi	r7,16420
    3a1c:	8009883a 	mov	r4,r16
    3a20:	880b883a 	mov	r5,r17
    3a24:	102b883a 	mov	r21,r2
    3a28:	1827883a 	mov	r19,r3
    3a2c:	000c2a80 	call	c2a8 <__muldf3>
    3a30:	180b883a 	mov	r5,r3
    3a34:	1009883a 	mov	r4,r2
    3a38:	1821883a 	mov	r16,r3
    3a3c:	1023883a 	mov	r17,r2
    3a40:	000d2bc0 	call	d2bc <__fixdfsi>
    3a44:	1009883a 	mov	r4,r2
    3a48:	1029883a 	mov	r20,r2
    3a4c:	000d33c0 	call	d33c <__floatsidf>
    3a50:	8809883a 	mov	r4,r17
    3a54:	800b883a 	mov	r5,r16
    3a58:	100d883a 	mov	r6,r2
    3a5c:	180f883a 	mov	r7,r3
    3a60:	000c9c00 	call	c9c0 <__subdf3>
    3a64:	a5000c04 	addi	r20,r20,48
    3a68:	a80d883a 	mov	r6,r21
    3a6c:	980f883a 	mov	r7,r19
    3a70:	1009883a 	mov	r4,r2
    3a74:	180b883a 	mov	r5,r3
    3a78:	95000005 	stb	r20,0(r18)
    3a7c:	1021883a 	mov	r16,r2
    3a80:	1823883a 	mov	r17,r3
    3a84:	000c1b40 	call	c1b4 <__ledf2>
    3a88:	bdc00044 	addi	r23,r23,1
    3a8c:	800d883a 	mov	r6,r16
    3a90:	880f883a 	mov	r7,r17
    3a94:	0009883a 	mov	r4,zero
    3a98:	014ffc34 	movhi	r5,16368
    3a9c:	103fcf0e 	bge	r2,zero,39dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70039dc>
    3aa0:	d8c01317 	ldw	r3,76(sp)
    3aa4:	d8c00515 	stw	r3,20(sp)
    3aa8:	d9400917 	ldw	r5,36(sp)
    3aac:	e009883a 	mov	r4,fp
    3ab0:	0006b440 	call	6b44 <_Bfree>
    3ab4:	d9000517 	ldw	r4,20(sp)
    3ab8:	d9802317 	ldw	r6,140(sp)
    3abc:	d9c02517 	ldw	r7,148(sp)
    3ac0:	b8000005 	stb	zero,0(r23)
    3ac4:	20800044 	addi	r2,r4,1
    3ac8:	30800015 	stw	r2,0(r6)
    3acc:	3802aa26 	beq	r7,zero,4578 <_dtoa_r+0x1178>
    3ad0:	3dc00015 	stw	r23,0(r7)
    3ad4:	d8800717 	ldw	r2,28(sp)
    3ad8:	003e7906 	br	34c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70034c0>
    3adc:	00800434 	movhi	r2,16
    3ae0:	10bfffc4 	addi	r2,r2,-1
    3ae4:	88a2703a 	and	r17,r17,r2
    3ae8:	883e851e 	bne	r17,zero,3500 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003500>
    3aec:	008000b4 	movhi	r2,2
    3af0:	10a7a104 	addi	r2,r2,-24956
    3af4:	003e8406 	br	3508 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003508>
    3af8:	10c00204 	addi	r3,r2,8
    3afc:	003e8706 	br	351c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700351c>
    3b00:	01400434 	movhi	r5,16
    3b04:	297fffc4 	addi	r5,r5,-1
    3b08:	994a703a 	and	r5,r19,r5
    3b0c:	9009883a 	mov	r4,r18
    3b10:	843f0044 	addi	r16,r16,-1023
    3b14:	294ffc34 	orhi	r5,r5,16368
    3b18:	dd800217 	ldw	r22,8(sp)
    3b1c:	d8001115 	stw	zero,68(sp)
    3b20:	003ea506 	br	35b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70035b8>
    3b24:	008000b4 	movhi	r2,2
    3b28:	10a79804 	addi	r2,r2,-24992
    3b2c:	003e6406 	br	34c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70034c0>
    3b30:	e0001115 	stw	zero,68(fp)
    3b34:	000b883a 	mov	r5,zero
    3b38:	e009883a 	mov	r4,fp
    3b3c:	0006a9c0 	call	6a9c <_Balloc>
    3b40:	01bfffc4 	movi	r6,-1
    3b44:	01c00044 	movi	r7,1
    3b48:	d8800715 	stw	r2,28(sp)
    3b4c:	d9800c15 	stw	r6,48(sp)
    3b50:	e0801015 	stw	r2,64(fp)
    3b54:	d8000315 	stw	zero,12(sp)
    3b58:	d9c00b15 	stw	r7,44(sp)
    3b5c:	d9800615 	stw	r6,24(sp)
    3b60:	d8002215 	stw	zero,136(sp)
    3b64:	d8800117 	ldw	r2,4(sp)
    3b68:	10008916 	blt	r2,zero,3d90 <_dtoa_r+0x990>
    3b6c:	d9000517 	ldw	r4,20(sp)
    3b70:	00c00384 	movi	r3,14
    3b74:	19008616 	blt	r3,r4,3d90 <_dtoa_r+0x990>
    3b78:	200490fa 	slli	r2,r4,3
    3b7c:	00c000b4 	movhi	r3,2
    3b80:	d9802217 	ldw	r6,136(sp)
    3b84:	18e7bf04 	addi	r3,r3,-24836
    3b88:	1885883a 	add	r2,r3,r2
    3b8c:	14000017 	ldw	r16,0(r2)
    3b90:	14400117 	ldw	r17,4(r2)
    3b94:	30016316 	blt	r6,zero,4124 <_dtoa_r+0xd24>
    3b98:	800d883a 	mov	r6,r16
    3b9c:	880f883a 	mov	r7,r17
    3ba0:	9009883a 	mov	r4,r18
    3ba4:	980b883a 	mov	r5,r19
    3ba8:	000b7680 	call	b768 <__divdf3>
    3bac:	180b883a 	mov	r5,r3
    3bb0:	1009883a 	mov	r4,r2
    3bb4:	000d2bc0 	call	d2bc <__fixdfsi>
    3bb8:	1009883a 	mov	r4,r2
    3bbc:	102b883a 	mov	r21,r2
    3bc0:	000d33c0 	call	d33c <__floatsidf>
    3bc4:	800d883a 	mov	r6,r16
    3bc8:	880f883a 	mov	r7,r17
    3bcc:	1009883a 	mov	r4,r2
    3bd0:	180b883a 	mov	r5,r3
    3bd4:	000c2a80 	call	c2a8 <__muldf3>
    3bd8:	100d883a 	mov	r6,r2
    3bdc:	180f883a 	mov	r7,r3
    3be0:	9009883a 	mov	r4,r18
    3be4:	980b883a 	mov	r5,r19
    3be8:	000c9c00 	call	c9c0 <__subdf3>
    3bec:	d9c00717 	ldw	r7,28(sp)
    3bf0:	1009883a 	mov	r4,r2
    3bf4:	a8800c04 	addi	r2,r21,48
    3bf8:	38800005 	stb	r2,0(r7)
    3bfc:	3dc00044 	addi	r23,r7,1
    3c00:	d9c00617 	ldw	r7,24(sp)
    3c04:	01800044 	movi	r6,1
    3c08:	180b883a 	mov	r5,r3
    3c0c:	2005883a 	mov	r2,r4
    3c10:	39803826 	beq	r7,r6,3cf4 <_dtoa_r+0x8f4>
    3c14:	000d883a 	mov	r6,zero
    3c18:	01d00934 	movhi	r7,16420
    3c1c:	000c2a80 	call	c2a8 <__muldf3>
    3c20:	000d883a 	mov	r6,zero
    3c24:	000f883a 	mov	r7,zero
    3c28:	1009883a 	mov	r4,r2
    3c2c:	180b883a 	mov	r5,r3
    3c30:	1025883a 	mov	r18,r2
    3c34:	1827883a 	mov	r19,r3
    3c38:	000c0500 	call	c050 <__eqdf2>
    3c3c:	103f9a26 	beq	r2,zero,3aa8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003aa8>
    3c40:	d9c00617 	ldw	r7,24(sp)
    3c44:	d8c00717 	ldw	r3,28(sp)
    3c48:	b829883a 	mov	r20,r23
    3c4c:	38bfffc4 	addi	r2,r7,-1
    3c50:	18ad883a 	add	r22,r3,r2
    3c54:	00000a06 	br	3c80 <_dtoa_r+0x880>
    3c58:	000c2a80 	call	c2a8 <__muldf3>
    3c5c:	000d883a 	mov	r6,zero
    3c60:	000f883a 	mov	r7,zero
    3c64:	1009883a 	mov	r4,r2
    3c68:	180b883a 	mov	r5,r3
    3c6c:	1025883a 	mov	r18,r2
    3c70:	1827883a 	mov	r19,r3
    3c74:	b829883a 	mov	r20,r23
    3c78:	000c0500 	call	c050 <__eqdf2>
    3c7c:	103f8a26 	beq	r2,zero,3aa8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003aa8>
    3c80:	800d883a 	mov	r6,r16
    3c84:	880f883a 	mov	r7,r17
    3c88:	9009883a 	mov	r4,r18
    3c8c:	980b883a 	mov	r5,r19
    3c90:	000b7680 	call	b768 <__divdf3>
    3c94:	180b883a 	mov	r5,r3
    3c98:	1009883a 	mov	r4,r2
    3c9c:	000d2bc0 	call	d2bc <__fixdfsi>
    3ca0:	1009883a 	mov	r4,r2
    3ca4:	102b883a 	mov	r21,r2
    3ca8:	000d33c0 	call	d33c <__floatsidf>
    3cac:	800d883a 	mov	r6,r16
    3cb0:	880f883a 	mov	r7,r17
    3cb4:	1009883a 	mov	r4,r2
    3cb8:	180b883a 	mov	r5,r3
    3cbc:	000c2a80 	call	c2a8 <__muldf3>
    3cc0:	100d883a 	mov	r6,r2
    3cc4:	180f883a 	mov	r7,r3
    3cc8:	9009883a 	mov	r4,r18
    3ccc:	980b883a 	mov	r5,r19
    3cd0:	000c9c00 	call	c9c0 <__subdf3>
    3cd4:	aa000c04 	addi	r8,r21,48
    3cd8:	a2000005 	stb	r8,0(r20)
    3cdc:	000d883a 	mov	r6,zero
    3ce0:	01d00934 	movhi	r7,16420
    3ce4:	1009883a 	mov	r4,r2
    3ce8:	180b883a 	mov	r5,r3
    3cec:	a5c00044 	addi	r23,r20,1
    3cf0:	b53fd91e 	bne	r22,r20,3c58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003c58>
    3cf4:	100d883a 	mov	r6,r2
    3cf8:	180f883a 	mov	r7,r3
    3cfc:	1009883a 	mov	r4,r2
    3d00:	180b883a 	mov	r5,r3
    3d04:	000aebc0 	call	aebc <__adddf3>
    3d08:	100d883a 	mov	r6,r2
    3d0c:	180f883a 	mov	r7,r3
    3d10:	8009883a 	mov	r4,r16
    3d14:	880b883a 	mov	r5,r17
    3d18:	1027883a 	mov	r19,r2
    3d1c:	1825883a 	mov	r18,r3
    3d20:	000c1b40 	call	c1b4 <__ledf2>
    3d24:	10000816 	blt	r2,zero,3d48 <_dtoa_r+0x948>
    3d28:	980d883a 	mov	r6,r19
    3d2c:	900f883a 	mov	r7,r18
    3d30:	8009883a 	mov	r4,r16
    3d34:	880b883a 	mov	r5,r17
    3d38:	000c0500 	call	c050 <__eqdf2>
    3d3c:	103f5a1e 	bne	r2,zero,3aa8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003aa8>
    3d40:	ad40004c 	andi	r21,r21,1
    3d44:	a83f5826 	beq	r21,zero,3aa8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003aa8>
    3d48:	bd3fffc3 	ldbu	r20,-1(r23)
    3d4c:	b8bfffc4 	addi	r2,r23,-1
    3d50:	1007883a 	mov	r3,r2
    3d54:	01400e44 	movi	r5,57
    3d58:	d9800717 	ldw	r6,28(sp)
    3d5c:	00000506 	br	3d74 <_dtoa_r+0x974>
    3d60:	18ffffc4 	addi	r3,r3,-1
    3d64:	11824726 	beq	r2,r6,4684 <_dtoa_r+0x1284>
    3d68:	1d000003 	ldbu	r20,0(r3)
    3d6c:	102f883a 	mov	r23,r2
    3d70:	10bfffc4 	addi	r2,r2,-1
    3d74:	a1003fcc 	andi	r4,r20,255
    3d78:	2100201c 	xori	r4,r4,128
    3d7c:	213fe004 	addi	r4,r4,-128
    3d80:	217ff726 	beq	r4,r5,3d60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003d60>
    3d84:	a2000044 	addi	r8,r20,1
    3d88:	12000005 	stb	r8,0(r2)
    3d8c:	003f4606 	br	3aa8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003aa8>
    3d90:	d9000b17 	ldw	r4,44(sp)
    3d94:	2000c826 	beq	r4,zero,40b8 <_dtoa_r+0xcb8>
    3d98:	d9800317 	ldw	r6,12(sp)
    3d9c:	00c00044 	movi	r3,1
    3da0:	1980f90e 	bge	r3,r6,4188 <_dtoa_r+0xd88>
    3da4:	d8800617 	ldw	r2,24(sp)
    3da8:	d8c00a17 	ldw	r3,40(sp)
    3dac:	157fffc4 	addi	r21,r2,-1
    3db0:	1d41f316 	blt	r3,r21,4580 <_dtoa_r+0x1180>
    3db4:	1d6bc83a 	sub	r21,r3,r21
    3db8:	d9c00617 	ldw	r7,24(sp)
    3dbc:	3802aa16 	blt	r7,zero,4868 <_dtoa_r+0x1468>
    3dc0:	dd000817 	ldw	r20,32(sp)
    3dc4:	d8800617 	ldw	r2,24(sp)
    3dc8:	d8c00817 	ldw	r3,32(sp)
    3dcc:	01400044 	movi	r5,1
    3dd0:	e009883a 	mov	r4,fp
    3dd4:	1887883a 	add	r3,r3,r2
    3dd8:	d8c00815 	stw	r3,32(sp)
    3ddc:	b0ad883a 	add	r22,r22,r2
    3de0:	0006ea80 	call	6ea8 <__i2b>
    3de4:	1023883a 	mov	r17,r2
    3de8:	a0000826 	beq	r20,zero,3e0c <_dtoa_r+0xa0c>
    3dec:	0580070e 	bge	zero,r22,3e0c <_dtoa_r+0xa0c>
    3df0:	a005883a 	mov	r2,r20
    3df4:	b500b916 	blt	r22,r20,40dc <_dtoa_r+0xcdc>
    3df8:	d9000817 	ldw	r4,32(sp)
    3dfc:	a0a9c83a 	sub	r20,r20,r2
    3e00:	b0adc83a 	sub	r22,r22,r2
    3e04:	2089c83a 	sub	r4,r4,r2
    3e08:	d9000815 	stw	r4,32(sp)
    3e0c:	d9800a17 	ldw	r6,40(sp)
    3e10:	0181810e 	bge	zero,r6,4418 <_dtoa_r+0x1018>
    3e14:	d9c00b17 	ldw	r7,44(sp)
    3e18:	3800b326 	beq	r7,zero,40e8 <_dtoa_r+0xce8>
    3e1c:	a800b226 	beq	r21,zero,40e8 <_dtoa_r+0xce8>
    3e20:	880b883a 	mov	r5,r17
    3e24:	a80d883a 	mov	r6,r21
    3e28:	e009883a 	mov	r4,fp
    3e2c:	00070dc0 	call	70dc <__pow5mult>
    3e30:	d9800917 	ldw	r6,36(sp)
    3e34:	100b883a 	mov	r5,r2
    3e38:	e009883a 	mov	r4,fp
    3e3c:	1023883a 	mov	r17,r2
    3e40:	0006ee40 	call	6ee4 <__multiply>
    3e44:	1021883a 	mov	r16,r2
    3e48:	d8800a17 	ldw	r2,40(sp)
    3e4c:	d9400917 	ldw	r5,36(sp)
    3e50:	e009883a 	mov	r4,fp
    3e54:	1545c83a 	sub	r2,r2,r21
    3e58:	d8800a15 	stw	r2,40(sp)
    3e5c:	0006b440 	call	6b44 <_Bfree>
    3e60:	d8c00a17 	ldw	r3,40(sp)
    3e64:	18009f1e 	bne	r3,zero,40e4 <_dtoa_r+0xce4>
    3e68:	05c00044 	movi	r23,1
    3e6c:	e009883a 	mov	r4,fp
    3e70:	b80b883a 	mov	r5,r23
    3e74:	0006ea80 	call	6ea8 <__i2b>
    3e78:	d9000d17 	ldw	r4,52(sp)
    3e7c:	102b883a 	mov	r21,r2
    3e80:	2000ce26 	beq	r4,zero,41bc <_dtoa_r+0xdbc>
    3e84:	200d883a 	mov	r6,r4
    3e88:	100b883a 	mov	r5,r2
    3e8c:	e009883a 	mov	r4,fp
    3e90:	00070dc0 	call	70dc <__pow5mult>
    3e94:	d9800317 	ldw	r6,12(sp)
    3e98:	102b883a 	mov	r21,r2
    3e9c:	b981810e 	bge	r23,r6,44a4 <_dtoa_r+0x10a4>
    3ea0:	0027883a 	mov	r19,zero
    3ea4:	a8800417 	ldw	r2,16(r21)
    3ea8:	05c00804 	movi	r23,32
    3eac:	10800104 	addi	r2,r2,4
    3eb0:	1085883a 	add	r2,r2,r2
    3eb4:	1085883a 	add	r2,r2,r2
    3eb8:	a885883a 	add	r2,r21,r2
    3ebc:	11000017 	ldw	r4,0(r2)
    3ec0:	0006d900 	call	6d90 <__hi0bits>
    3ec4:	b885c83a 	sub	r2,r23,r2
    3ec8:	1585883a 	add	r2,r2,r22
    3ecc:	108007cc 	andi	r2,r2,31
    3ed0:	1000b326 	beq	r2,zero,41a0 <_dtoa_r+0xda0>
    3ed4:	00c00804 	movi	r3,32
    3ed8:	1887c83a 	sub	r3,r3,r2
    3edc:	01000104 	movi	r4,4
    3ee0:	20c2cd0e 	bge	r4,r3,4a18 <_dtoa_r+0x1618>
    3ee4:	00c00704 	movi	r3,28
    3ee8:	1885c83a 	sub	r2,r3,r2
    3eec:	d8c00817 	ldw	r3,32(sp)
    3ef0:	a0a9883a 	add	r20,r20,r2
    3ef4:	b0ad883a 	add	r22,r22,r2
    3ef8:	1887883a 	add	r3,r3,r2
    3efc:	d8c00815 	stw	r3,32(sp)
    3f00:	d9800817 	ldw	r6,32(sp)
    3f04:	0180040e 	bge	zero,r6,3f18 <_dtoa_r+0xb18>
    3f08:	800b883a 	mov	r5,r16
    3f0c:	e009883a 	mov	r4,fp
    3f10:	000721c0 	call	721c <__lshift>
    3f14:	1021883a 	mov	r16,r2
    3f18:	0580050e 	bge	zero,r22,3f30 <_dtoa_r+0xb30>
    3f1c:	a80b883a 	mov	r5,r21
    3f20:	b00d883a 	mov	r6,r22
    3f24:	e009883a 	mov	r4,fp
    3f28:	000721c0 	call	721c <__lshift>
    3f2c:	102b883a 	mov	r21,r2
    3f30:	d9c00e17 	ldw	r7,56(sp)
    3f34:	3801211e 	bne	r7,zero,43bc <_dtoa_r+0xfbc>
    3f38:	d9800617 	ldw	r6,24(sp)
    3f3c:	0181380e 	bge	zero,r6,4420 <_dtoa_r+0x1020>
    3f40:	d8c00b17 	ldw	r3,44(sp)
    3f44:	1800ab1e 	bne	r3,zero,41f4 <_dtoa_r+0xdf4>
    3f48:	dc800717 	ldw	r18,28(sp)
    3f4c:	dcc00617 	ldw	r19,24(sp)
    3f50:	9029883a 	mov	r20,r18
    3f54:	00000206 	br	3f60 <_dtoa_r+0xb60>
    3f58:	0006b6c0 	call	6b6c <__multadd>
    3f5c:	1021883a 	mov	r16,r2
    3f60:	a80b883a 	mov	r5,r21
    3f64:	8009883a 	mov	r4,r16
    3f68:	00032000 	call	3200 <quorem>
    3f6c:	10800c04 	addi	r2,r2,48
    3f70:	90800005 	stb	r2,0(r18)
    3f74:	94800044 	addi	r18,r18,1
    3f78:	9507c83a 	sub	r3,r18,r20
    3f7c:	000f883a 	mov	r7,zero
    3f80:	01800284 	movi	r6,10
    3f84:	800b883a 	mov	r5,r16
    3f88:	e009883a 	mov	r4,fp
    3f8c:	1cfff216 	blt	r3,r19,3f58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003f58>
    3f90:	1011883a 	mov	r8,r2
    3f94:	d8800617 	ldw	r2,24(sp)
    3f98:	0082370e 	bge	zero,r2,4878 <_dtoa_r+0x1478>
    3f9c:	d9000717 	ldw	r4,28(sp)
    3fa0:	0025883a 	mov	r18,zero
    3fa4:	20af883a 	add	r23,r4,r2
    3fa8:	01800044 	movi	r6,1
    3fac:	800b883a 	mov	r5,r16
    3fb0:	e009883a 	mov	r4,fp
    3fb4:	da001715 	stw	r8,92(sp)
    3fb8:	000721c0 	call	721c <__lshift>
    3fbc:	a80b883a 	mov	r5,r21
    3fc0:	1009883a 	mov	r4,r2
    3fc4:	d8800915 	stw	r2,36(sp)
    3fc8:	00073640 	call	7364 <__mcmp>
    3fcc:	da001717 	ldw	r8,92(sp)
    3fd0:	0081800e 	bge	zero,r2,45d4 <_dtoa_r+0x11d4>
    3fd4:	b93fffc3 	ldbu	r4,-1(r23)
    3fd8:	b8bfffc4 	addi	r2,r23,-1
    3fdc:	1007883a 	mov	r3,r2
    3fe0:	01800e44 	movi	r6,57
    3fe4:	d9c00717 	ldw	r7,28(sp)
    3fe8:	00000506 	br	4000 <_dtoa_r+0xc00>
    3fec:	18ffffc4 	addi	r3,r3,-1
    3ff0:	11c12326 	beq	r2,r7,4480 <_dtoa_r+0x1080>
    3ff4:	19000003 	ldbu	r4,0(r3)
    3ff8:	102f883a 	mov	r23,r2
    3ffc:	10bfffc4 	addi	r2,r2,-1
    4000:	21403fcc 	andi	r5,r4,255
    4004:	2940201c 	xori	r5,r5,128
    4008:	297fe004 	addi	r5,r5,-128
    400c:	29bff726 	beq	r5,r6,3fec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003fec>
    4010:	21000044 	addi	r4,r4,1
    4014:	11000005 	stb	r4,0(r2)
    4018:	a80b883a 	mov	r5,r21
    401c:	e009883a 	mov	r4,fp
    4020:	0006b440 	call	6b44 <_Bfree>
    4024:	883ea026 	beq	r17,zero,3aa8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003aa8>
    4028:	90000426 	beq	r18,zero,403c <_dtoa_r+0xc3c>
    402c:	94400326 	beq	r18,r17,403c <_dtoa_r+0xc3c>
    4030:	900b883a 	mov	r5,r18
    4034:	e009883a 	mov	r4,fp
    4038:	0006b440 	call	6b44 <_Bfree>
    403c:	880b883a 	mov	r5,r17
    4040:	e009883a 	mov	r4,fp
    4044:	0006b440 	call	6b44 <_Bfree>
    4048:	003e9706 	br	3aa8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003aa8>
    404c:	01800044 	movi	r6,1
    4050:	d9800e15 	stw	r6,56(sp)
    4054:	003d9606 	br	36b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70036b0>
    4058:	d8800817 	ldw	r2,32(sp)
    405c:	d8c00517 	ldw	r3,20(sp)
    4060:	d8000d15 	stw	zero,52(sp)
    4064:	10c5c83a 	sub	r2,r2,r3
    4068:	00c9c83a 	sub	r4,zero,r3
    406c:	d8800815 	stw	r2,32(sp)
    4070:	d9000a15 	stw	r4,40(sp)
    4074:	003d9706 	br	36d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70036d4>
    4078:	05adc83a 	sub	r22,zero,r22
    407c:	dd800815 	stw	r22,32(sp)
    4080:	002d883a 	mov	r22,zero
    4084:	003d8e06 	br	36c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70036c0>
    4088:	d9000517 	ldw	r4,20(sp)
    408c:	000d33c0 	call	d33c <__floatsidf>
    4090:	100d883a 	mov	r6,r2
    4094:	180f883a 	mov	r7,r3
    4098:	a009883a 	mov	r4,r20
    409c:	880b883a 	mov	r5,r17
    40a0:	000c0500 	call	c050 <__eqdf2>
    40a4:	103d7126 	beq	r2,zero,366c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700366c>
    40a8:	d9c00517 	ldw	r7,20(sp)
    40ac:	39ffffc4 	addi	r7,r7,-1
    40b0:	d9c00515 	stw	r7,20(sp)
    40b4:	003d6d06 	br	366c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700366c>
    40b8:	dd400a17 	ldw	r21,40(sp)
    40bc:	dd000817 	ldw	r20,32(sp)
    40c0:	0023883a 	mov	r17,zero
    40c4:	003f4806 	br	3de8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003de8>
    40c8:	10e3c83a 	sub	r17,r2,r3
    40cc:	9448983a 	sll	r4,r18,r17
    40d0:	003d3206 	br	359c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700359c>
    40d4:	d8000e15 	stw	zero,56(sp)
    40d8:	003d7506 	br	36b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70036b0>
    40dc:	b005883a 	mov	r2,r22
    40e0:	003f4506 	br	3df8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003df8>
    40e4:	dc000915 	stw	r16,36(sp)
    40e8:	d9800a17 	ldw	r6,40(sp)
    40ec:	d9400917 	ldw	r5,36(sp)
    40f0:	e009883a 	mov	r4,fp
    40f4:	00070dc0 	call	70dc <__pow5mult>
    40f8:	1021883a 	mov	r16,r2
    40fc:	003f5a06 	br	3e68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003e68>
    4100:	01c00044 	movi	r7,1
    4104:	d9c00b15 	stw	r7,44(sp)
    4108:	d8802217 	ldw	r2,136(sp)
    410c:	0081280e 	bge	zero,r2,45b0 <_dtoa_r+0x11b0>
    4110:	100d883a 	mov	r6,r2
    4114:	1021883a 	mov	r16,r2
    4118:	d8800c15 	stw	r2,48(sp)
    411c:	d8800615 	stw	r2,24(sp)
    4120:	003d8806 	br	3744 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003744>
    4124:	d8800617 	ldw	r2,24(sp)
    4128:	00be9b16 	blt	zero,r2,3b98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003b98>
    412c:	10010f1e 	bne	r2,zero,456c <_dtoa_r+0x116c>
    4130:	880b883a 	mov	r5,r17
    4134:	000d883a 	mov	r6,zero
    4138:	01d00534 	movhi	r7,16404
    413c:	8009883a 	mov	r4,r16
    4140:	000c2a80 	call	c2a8 <__muldf3>
    4144:	900d883a 	mov	r6,r18
    4148:	980f883a 	mov	r7,r19
    414c:	1009883a 	mov	r4,r2
    4150:	180b883a 	mov	r5,r3
    4154:	000c0d80 	call	c0d8 <__gedf2>
    4158:	002b883a 	mov	r21,zero
    415c:	0023883a 	mov	r17,zero
    4160:	1000bf16 	blt	r2,zero,4460 <_dtoa_r+0x1060>
    4164:	d9802217 	ldw	r6,136(sp)
    4168:	ddc00717 	ldw	r23,28(sp)
    416c:	018c303a 	nor	r6,zero,r6
    4170:	d9800515 	stw	r6,20(sp)
    4174:	a80b883a 	mov	r5,r21
    4178:	e009883a 	mov	r4,fp
    417c:	0006b440 	call	6b44 <_Bfree>
    4180:	883e4926 	beq	r17,zero,3aa8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003aa8>
    4184:	003fad06 	br	403c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700403c>
    4188:	d9c01117 	ldw	r7,68(sp)
    418c:	3801bc26 	beq	r7,zero,4880 <_dtoa_r+0x1480>
    4190:	10810cc4 	addi	r2,r2,1075
    4194:	dd400a17 	ldw	r21,40(sp)
    4198:	dd000817 	ldw	r20,32(sp)
    419c:	003f0a06 	br	3dc8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003dc8>
    41a0:	00800704 	movi	r2,28
    41a4:	d9000817 	ldw	r4,32(sp)
    41a8:	a0a9883a 	add	r20,r20,r2
    41ac:	b0ad883a 	add	r22,r22,r2
    41b0:	2089883a 	add	r4,r4,r2
    41b4:	d9000815 	stw	r4,32(sp)
    41b8:	003f5106 	br	3f00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003f00>
    41bc:	d8c00317 	ldw	r3,12(sp)
    41c0:	b8c1fc0e 	bge	r23,r3,49b4 <_dtoa_r+0x15b4>
    41c4:	0027883a 	mov	r19,zero
    41c8:	b805883a 	mov	r2,r23
    41cc:	003f3e06 	br	3ec8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003ec8>
    41d0:	880b883a 	mov	r5,r17
    41d4:	e009883a 	mov	r4,fp
    41d8:	000f883a 	mov	r7,zero
    41dc:	01800284 	movi	r6,10
    41e0:	0006b6c0 	call	6b6c <__multadd>
    41e4:	d9000c17 	ldw	r4,48(sp)
    41e8:	1023883a 	mov	r17,r2
    41ec:	0102040e 	bge	zero,r4,4a00 <_dtoa_r+0x1600>
    41f0:	d9000615 	stw	r4,24(sp)
    41f4:	0500050e 	bge	zero,r20,420c <_dtoa_r+0xe0c>
    41f8:	880b883a 	mov	r5,r17
    41fc:	a00d883a 	mov	r6,r20
    4200:	e009883a 	mov	r4,fp
    4204:	000721c0 	call	721c <__lshift>
    4208:	1023883a 	mov	r17,r2
    420c:	9801241e 	bne	r19,zero,46a0 <_dtoa_r+0x12a0>
    4210:	8829883a 	mov	r20,r17
    4214:	d9000617 	ldw	r4,24(sp)
    4218:	dcc00717 	ldw	r19,28(sp)
    421c:	9480004c 	andi	r18,r18,1
    4220:	20bfffc4 	addi	r2,r4,-1
    4224:	9885883a 	add	r2,r19,r2
    4228:	d8800415 	stw	r2,16(sp)
    422c:	dc800615 	stw	r18,24(sp)
    4230:	a80b883a 	mov	r5,r21
    4234:	8009883a 	mov	r4,r16
    4238:	00032000 	call	3200 <quorem>
    423c:	880b883a 	mov	r5,r17
    4240:	8009883a 	mov	r4,r16
    4244:	102f883a 	mov	r23,r2
    4248:	00073640 	call	7364 <__mcmp>
    424c:	a80b883a 	mov	r5,r21
    4250:	a00d883a 	mov	r6,r20
    4254:	e009883a 	mov	r4,fp
    4258:	102d883a 	mov	r22,r2
    425c:	00073c40 	call	73c4 <__mdiff>
    4260:	1007883a 	mov	r3,r2
    4264:	10800317 	ldw	r2,12(r2)
    4268:	bc800c04 	addi	r18,r23,48
    426c:	180b883a 	mov	r5,r3
    4270:	10004e1e 	bne	r2,zero,43ac <_dtoa_r+0xfac>
    4274:	8009883a 	mov	r4,r16
    4278:	d8c01615 	stw	r3,88(sp)
    427c:	00073640 	call	7364 <__mcmp>
    4280:	d8c01617 	ldw	r3,88(sp)
    4284:	e009883a 	mov	r4,fp
    4288:	d8801615 	stw	r2,88(sp)
    428c:	180b883a 	mov	r5,r3
    4290:	0006b440 	call	6b44 <_Bfree>
    4294:	d8801617 	ldw	r2,88(sp)
    4298:	1000041e 	bne	r2,zero,42ac <_dtoa_r+0xeac>
    429c:	d9800317 	ldw	r6,12(sp)
    42a0:	3000021e 	bne	r6,zero,42ac <_dtoa_r+0xeac>
    42a4:	d8c00617 	ldw	r3,24(sp)
    42a8:	18003726 	beq	r3,zero,4388 <_dtoa_r+0xf88>
    42ac:	b0002016 	blt	r22,zero,4330 <_dtoa_r+0xf30>
    42b0:	b000041e 	bne	r22,zero,42c4 <_dtoa_r+0xec4>
    42b4:	d9000317 	ldw	r4,12(sp)
    42b8:	2000021e 	bne	r4,zero,42c4 <_dtoa_r+0xec4>
    42bc:	d8c00617 	ldw	r3,24(sp)
    42c0:	18001b26 	beq	r3,zero,4330 <_dtoa_r+0xf30>
    42c4:	00810716 	blt	zero,r2,46e4 <_dtoa_r+0x12e4>
    42c8:	d8c00417 	ldw	r3,16(sp)
    42cc:	9d800044 	addi	r22,r19,1
    42d0:	9c800005 	stb	r18,0(r19)
    42d4:	b02f883a 	mov	r23,r22
    42d8:	98c10626 	beq	r19,r3,46f4 <_dtoa_r+0x12f4>
    42dc:	800b883a 	mov	r5,r16
    42e0:	000f883a 	mov	r7,zero
    42e4:	01800284 	movi	r6,10
    42e8:	e009883a 	mov	r4,fp
    42ec:	0006b6c0 	call	6b6c <__multadd>
    42f0:	1021883a 	mov	r16,r2
    42f4:	000f883a 	mov	r7,zero
    42f8:	01800284 	movi	r6,10
    42fc:	880b883a 	mov	r5,r17
    4300:	e009883a 	mov	r4,fp
    4304:	8d002526 	beq	r17,r20,439c <_dtoa_r+0xf9c>
    4308:	0006b6c0 	call	6b6c <__multadd>
    430c:	a00b883a 	mov	r5,r20
    4310:	000f883a 	mov	r7,zero
    4314:	01800284 	movi	r6,10
    4318:	e009883a 	mov	r4,fp
    431c:	1023883a 	mov	r17,r2
    4320:	0006b6c0 	call	6b6c <__multadd>
    4324:	1029883a 	mov	r20,r2
    4328:	b027883a 	mov	r19,r22
    432c:	003fc006 	br	4230 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004230>
    4330:	9011883a 	mov	r8,r18
    4334:	00800e0e 	bge	zero,r2,4370 <_dtoa_r+0xf70>
    4338:	800b883a 	mov	r5,r16
    433c:	01800044 	movi	r6,1
    4340:	e009883a 	mov	r4,fp
    4344:	da001715 	stw	r8,92(sp)
    4348:	000721c0 	call	721c <__lshift>
    434c:	a80b883a 	mov	r5,r21
    4350:	1009883a 	mov	r4,r2
    4354:	1021883a 	mov	r16,r2
    4358:	00073640 	call	7364 <__mcmp>
    435c:	da001717 	ldw	r8,92(sp)
    4360:	0081960e 	bge	zero,r2,49bc <_dtoa_r+0x15bc>
    4364:	00800e44 	movi	r2,57
    4368:	40817026 	beq	r8,r2,492c <_dtoa_r+0x152c>
    436c:	ba000c44 	addi	r8,r23,49
    4370:	8825883a 	mov	r18,r17
    4374:	9dc00044 	addi	r23,r19,1
    4378:	9a000005 	stb	r8,0(r19)
    437c:	a023883a 	mov	r17,r20
    4380:	dc000915 	stw	r16,36(sp)
    4384:	003f2406 	br	4018 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004018>
    4388:	00800e44 	movi	r2,57
    438c:	9011883a 	mov	r8,r18
    4390:	90816626 	beq	r18,r2,492c <_dtoa_r+0x152c>
    4394:	05bff516 	blt	zero,r22,436c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700436c>
    4398:	003ff506 	br	4370 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004370>
    439c:	0006b6c0 	call	6b6c <__multadd>
    43a0:	1023883a 	mov	r17,r2
    43a4:	1029883a 	mov	r20,r2
    43a8:	003fdf06 	br	4328 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004328>
    43ac:	e009883a 	mov	r4,fp
    43b0:	0006b440 	call	6b44 <_Bfree>
    43b4:	00800044 	movi	r2,1
    43b8:	003fbc06 	br	42ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70042ac>
    43bc:	a80b883a 	mov	r5,r21
    43c0:	8009883a 	mov	r4,r16
    43c4:	00073640 	call	7364 <__mcmp>
    43c8:	103edb0e 	bge	r2,zero,3f38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003f38>
    43cc:	800b883a 	mov	r5,r16
    43d0:	000f883a 	mov	r7,zero
    43d4:	01800284 	movi	r6,10
    43d8:	e009883a 	mov	r4,fp
    43dc:	0006b6c0 	call	6b6c <__multadd>
    43e0:	1021883a 	mov	r16,r2
    43e4:	d8800517 	ldw	r2,20(sp)
    43e8:	d8c00b17 	ldw	r3,44(sp)
    43ec:	10bfffc4 	addi	r2,r2,-1
    43f0:	d8800515 	stw	r2,20(sp)
    43f4:	183f761e 	bne	r3,zero,41d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70041d0>
    43f8:	d9000c17 	ldw	r4,48(sp)
    43fc:	0101730e 	bge	zero,r4,49cc <_dtoa_r+0x15cc>
    4400:	d9000615 	stw	r4,24(sp)
    4404:	003ed006 	br	3f48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003f48>
    4408:	00800084 	movi	r2,2
    440c:	3081861e 	bne	r6,r2,4a28 <_dtoa_r+0x1628>
    4410:	d8000b15 	stw	zero,44(sp)
    4414:	003f3c06 	br	4108 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004108>
    4418:	dc000917 	ldw	r16,36(sp)
    441c:	003e9206 	br	3e68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003e68>
    4420:	d9c00317 	ldw	r7,12(sp)
    4424:	00800084 	movi	r2,2
    4428:	11fec50e 	bge	r2,r7,3f40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003f40>
    442c:	d9000617 	ldw	r4,24(sp)
    4430:	20013c1e 	bne	r4,zero,4924 <_dtoa_r+0x1524>
    4434:	a80b883a 	mov	r5,r21
    4438:	000f883a 	mov	r7,zero
    443c:	01800144 	movi	r6,5
    4440:	e009883a 	mov	r4,fp
    4444:	0006b6c0 	call	6b6c <__multadd>
    4448:	100b883a 	mov	r5,r2
    444c:	8009883a 	mov	r4,r16
    4450:	102b883a 	mov	r21,r2
    4454:	00073640 	call	7364 <__mcmp>
    4458:	dc000915 	stw	r16,36(sp)
    445c:	00bf410e 	bge	zero,r2,4164 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004164>
    4460:	d9c00717 	ldw	r7,28(sp)
    4464:	00800c44 	movi	r2,49
    4468:	38800005 	stb	r2,0(r7)
    446c:	d8800517 	ldw	r2,20(sp)
    4470:	3dc00044 	addi	r23,r7,1
    4474:	10800044 	addi	r2,r2,1
    4478:	d8800515 	stw	r2,20(sp)
    447c:	003f3d06 	br	4174 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004174>
    4480:	d9800517 	ldw	r6,20(sp)
    4484:	d9c00717 	ldw	r7,28(sp)
    4488:	00800c44 	movi	r2,49
    448c:	31800044 	addi	r6,r6,1
    4490:	d9800515 	stw	r6,20(sp)
    4494:	38800005 	stb	r2,0(r7)
    4498:	003edf06 	br	4018 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004018>
    449c:	d8000b15 	stw	zero,44(sp)
    44a0:	003c9f06 	br	3720 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003720>
    44a4:	903e7e1e 	bne	r18,zero,3ea0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003ea0>
    44a8:	00800434 	movhi	r2,16
    44ac:	10bfffc4 	addi	r2,r2,-1
    44b0:	9884703a 	and	r2,r19,r2
    44b4:	1000ea1e 	bne	r2,zero,4860 <_dtoa_r+0x1460>
    44b8:	9cdffc2c 	andhi	r19,r19,32752
    44bc:	9800e826 	beq	r19,zero,4860 <_dtoa_r+0x1460>
    44c0:	d9c00817 	ldw	r7,32(sp)
    44c4:	b5800044 	addi	r22,r22,1
    44c8:	04c00044 	movi	r19,1
    44cc:	39c00044 	addi	r7,r7,1
    44d0:	d9c00815 	stw	r7,32(sp)
    44d4:	d8800d17 	ldw	r2,52(sp)
    44d8:	103e721e 	bne	r2,zero,3ea4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003ea4>
    44dc:	00800044 	movi	r2,1
    44e0:	003e7906 	br	3ec8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003ec8>
    44e4:	8009883a 	mov	r4,r16
    44e8:	000d33c0 	call	d33c <__floatsidf>
    44ec:	d9800f17 	ldw	r6,60(sp)
    44f0:	d9c01017 	ldw	r7,64(sp)
    44f4:	1009883a 	mov	r4,r2
    44f8:	180b883a 	mov	r5,r3
    44fc:	000c2a80 	call	c2a8 <__muldf3>
    4500:	000d883a 	mov	r6,zero
    4504:	01d00734 	movhi	r7,16412
    4508:	1009883a 	mov	r4,r2
    450c:	180b883a 	mov	r5,r3
    4510:	000aebc0 	call	aebc <__adddf3>
    4514:	047f3034 	movhi	r17,64704
    4518:	1021883a 	mov	r16,r2
    451c:	1c63883a 	add	r17,r3,r17
    4520:	d9000f17 	ldw	r4,60(sp)
    4524:	d9401017 	ldw	r5,64(sp)
    4528:	000d883a 	mov	r6,zero
    452c:	01d00534 	movhi	r7,16404
    4530:	000c9c00 	call	c9c0 <__subdf3>
    4534:	800d883a 	mov	r6,r16
    4538:	880f883a 	mov	r7,r17
    453c:	1009883a 	mov	r4,r2
    4540:	180b883a 	mov	r5,r3
    4544:	102b883a 	mov	r21,r2
    4548:	1829883a 	mov	r20,r3
    454c:	000c0d80 	call	c0d8 <__gedf2>
    4550:	00806c16 	blt	zero,r2,4704 <_dtoa_r+0x1304>
    4554:	89e0003c 	xorhi	r7,r17,32768
    4558:	800d883a 	mov	r6,r16
    455c:	a809883a 	mov	r4,r21
    4560:	a00b883a 	mov	r5,r20
    4564:	000c1b40 	call	c1b4 <__ledf2>
    4568:	103d7e0e 	bge	r2,zero,3b64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003b64>
    456c:	002b883a 	mov	r21,zero
    4570:	0023883a 	mov	r17,zero
    4574:	003efb06 	br	4164 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004164>
    4578:	d8800717 	ldw	r2,28(sp)
    457c:	003bd006 	br	34c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70034c0>
    4580:	d9000a17 	ldw	r4,40(sp)
    4584:	d9800d17 	ldw	r6,52(sp)
    4588:	dd400a15 	stw	r21,40(sp)
    458c:	a905c83a 	sub	r2,r21,r4
    4590:	308d883a 	add	r6,r6,r2
    4594:	d9800d15 	stw	r6,52(sp)
    4598:	002b883a 	mov	r21,zero
    459c:	003e0606 	br	3db8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003db8>
    45a0:	9023883a 	mov	r17,r18
    45a4:	9829883a 	mov	r20,r19
    45a8:	04000084 	movi	r16,2
    45ac:	003c9206 	br	37f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70037f8>
    45b0:	04000044 	movi	r16,1
    45b4:	dc000c15 	stw	r16,48(sp)
    45b8:	dc000615 	stw	r16,24(sp)
    45bc:	dc002215 	stw	r16,136(sp)
    45c0:	e0001115 	stw	zero,68(fp)
    45c4:	000b883a 	mov	r5,zero
    45c8:	003c6906 	br	3770 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003770>
    45cc:	3021883a 	mov	r16,r6
    45d0:	003ffb06 	br	45c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70045c0>
    45d4:	1000021e 	bne	r2,zero,45e0 <_dtoa_r+0x11e0>
    45d8:	4200004c 	andi	r8,r8,1
    45dc:	403e7d1e 	bne	r8,zero,3fd4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003fd4>
    45e0:	01000c04 	movi	r4,48
    45e4:	00000106 	br	45ec <_dtoa_r+0x11ec>
    45e8:	102f883a 	mov	r23,r2
    45ec:	b8bfffc4 	addi	r2,r23,-1
    45f0:	10c00007 	ldb	r3,0(r2)
    45f4:	193ffc26 	beq	r3,r4,45e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70045e8>
    45f8:	003e8706 	br	4018 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004018>
    45fc:	d8800517 	ldw	r2,20(sp)
    4600:	00a3c83a 	sub	r17,zero,r2
    4604:	8800a426 	beq	r17,zero,4898 <_dtoa_r+0x1498>
    4608:	888003cc 	andi	r2,r17,15
    460c:	100490fa 	slli	r2,r2,3
    4610:	00c000b4 	movhi	r3,2
    4614:	18e7bf04 	addi	r3,r3,-24836
    4618:	1885883a 	add	r2,r3,r2
    461c:	11800017 	ldw	r6,0(r2)
    4620:	11c00117 	ldw	r7,4(r2)
    4624:	9009883a 	mov	r4,r18
    4628:	980b883a 	mov	r5,r19
    462c:	8823d13a 	srai	r17,r17,4
    4630:	000c2a80 	call	c2a8 <__muldf3>
    4634:	d8800f15 	stw	r2,60(sp)
    4638:	d8c01015 	stw	r3,64(sp)
    463c:	8800e826 	beq	r17,zero,49e0 <_dtoa_r+0x15e0>
    4640:	050000b4 	movhi	r20,2
    4644:	a527b504 	addi	r20,r20,-24876
    4648:	04000084 	movi	r16,2
    464c:	8980004c 	andi	r6,r17,1
    4650:	1009883a 	mov	r4,r2
    4654:	8823d07a 	srai	r17,r17,1
    4658:	180b883a 	mov	r5,r3
    465c:	30000426 	beq	r6,zero,4670 <_dtoa_r+0x1270>
    4660:	a1800017 	ldw	r6,0(r20)
    4664:	a1c00117 	ldw	r7,4(r20)
    4668:	84000044 	addi	r16,r16,1
    466c:	000c2a80 	call	c2a8 <__muldf3>
    4670:	a5000204 	addi	r20,r20,8
    4674:	883ff51e 	bne	r17,zero,464c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700464c>
    4678:	d8800f15 	stw	r2,60(sp)
    467c:	d8c01015 	stw	r3,64(sp)
    4680:	003c7606 	br	385c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700385c>
    4684:	00c00c04 	movi	r3,48
    4688:	10c00005 	stb	r3,0(r2)
    468c:	d8c00517 	ldw	r3,20(sp)
    4690:	bd3fffc3 	ldbu	r20,-1(r23)
    4694:	18c00044 	addi	r3,r3,1
    4698:	d8c00515 	stw	r3,20(sp)
    469c:	003db906 	br	3d84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003d84>
    46a0:	89400117 	ldw	r5,4(r17)
    46a4:	e009883a 	mov	r4,fp
    46a8:	0006a9c0 	call	6a9c <_Balloc>
    46ac:	89800417 	ldw	r6,16(r17)
    46b0:	89400304 	addi	r5,r17,12
    46b4:	11000304 	addi	r4,r2,12
    46b8:	31800084 	addi	r6,r6,2
    46bc:	318d883a 	add	r6,r6,r6
    46c0:	318d883a 	add	r6,r6,r6
    46c4:	1027883a 	mov	r19,r2
    46c8:	00066d00 	call	66d0 <memcpy>
    46cc:	01800044 	movi	r6,1
    46d0:	980b883a 	mov	r5,r19
    46d4:	e009883a 	mov	r4,fp
    46d8:	000721c0 	call	721c <__lshift>
    46dc:	1029883a 	mov	r20,r2
    46e0:	003ecc06 	br	4214 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004214>
    46e4:	00800e44 	movi	r2,57
    46e8:	90809026 	beq	r18,r2,492c <_dtoa_r+0x152c>
    46ec:	92000044 	addi	r8,r18,1
    46f0:	003f1f06 	br	4370 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004370>
    46f4:	9011883a 	mov	r8,r18
    46f8:	8825883a 	mov	r18,r17
    46fc:	a023883a 	mov	r17,r20
    4700:	003e2906 	br	3fa8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003fa8>
    4704:	002b883a 	mov	r21,zero
    4708:	0023883a 	mov	r17,zero
    470c:	003f5406 	br	4460 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004460>
    4710:	61bfffc4 	addi	r6,r12,-1
    4714:	300490fa 	slli	r2,r6,3
    4718:	00c000b4 	movhi	r3,2
    471c:	18e7bf04 	addi	r3,r3,-24836
    4720:	1885883a 	add	r2,r3,r2
    4724:	11000017 	ldw	r4,0(r2)
    4728:	11400117 	ldw	r5,4(r2)
    472c:	d8800717 	ldw	r2,28(sp)
    4730:	880f883a 	mov	r7,r17
    4734:	d9801215 	stw	r6,72(sp)
    4738:	800d883a 	mov	r6,r16
    473c:	db001615 	stw	r12,88(sp)
    4740:	15c00044 	addi	r23,r2,1
    4744:	000c2a80 	call	c2a8 <__muldf3>
    4748:	d9401017 	ldw	r5,64(sp)
    474c:	d9000f17 	ldw	r4,60(sp)
    4750:	d8c01515 	stw	r3,84(sp)
    4754:	d8801415 	stw	r2,80(sp)
    4758:	000d2bc0 	call	d2bc <__fixdfsi>
    475c:	1009883a 	mov	r4,r2
    4760:	1021883a 	mov	r16,r2
    4764:	000d33c0 	call	d33c <__floatsidf>
    4768:	d9000f17 	ldw	r4,60(sp)
    476c:	d9401017 	ldw	r5,64(sp)
    4770:	100d883a 	mov	r6,r2
    4774:	180f883a 	mov	r7,r3
    4778:	000c9c00 	call	c9c0 <__subdf3>
    477c:	1829883a 	mov	r20,r3
    4780:	d8c00717 	ldw	r3,28(sp)
    4784:	84000c04 	addi	r16,r16,48
    4788:	1023883a 	mov	r17,r2
    478c:	1c000005 	stb	r16,0(r3)
    4790:	db001617 	ldw	r12,88(sp)
    4794:	00800044 	movi	r2,1
    4798:	60802226 	beq	r12,r2,4824 <_dtoa_r+0x1424>
    479c:	d9c00717 	ldw	r7,28(sp)
    47a0:	8805883a 	mov	r2,r17
    47a4:	b82b883a 	mov	r21,r23
    47a8:	3b19883a 	add	r12,r7,r12
    47ac:	6023883a 	mov	r17,r12
    47b0:	a007883a 	mov	r3,r20
    47b4:	dc800f15 	stw	r18,60(sp)
    47b8:	000d883a 	mov	r6,zero
    47bc:	01d00934 	movhi	r7,16420
    47c0:	1009883a 	mov	r4,r2
    47c4:	180b883a 	mov	r5,r3
    47c8:	000c2a80 	call	c2a8 <__muldf3>
    47cc:	180b883a 	mov	r5,r3
    47d0:	1009883a 	mov	r4,r2
    47d4:	1829883a 	mov	r20,r3
    47d8:	1025883a 	mov	r18,r2
    47dc:	000d2bc0 	call	d2bc <__fixdfsi>
    47e0:	1009883a 	mov	r4,r2
    47e4:	1021883a 	mov	r16,r2
    47e8:	000d33c0 	call	d33c <__floatsidf>
    47ec:	100d883a 	mov	r6,r2
    47f0:	180f883a 	mov	r7,r3
    47f4:	9009883a 	mov	r4,r18
    47f8:	a00b883a 	mov	r5,r20
    47fc:	84000c04 	addi	r16,r16,48
    4800:	000c9c00 	call	c9c0 <__subdf3>
    4804:	ad400044 	addi	r21,r21,1
    4808:	ac3fffc5 	stb	r16,-1(r21)
    480c:	ac7fea1e 	bne	r21,r17,47b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70047b8>
    4810:	1023883a 	mov	r17,r2
    4814:	d8801217 	ldw	r2,72(sp)
    4818:	dc800f17 	ldw	r18,60(sp)
    481c:	1829883a 	mov	r20,r3
    4820:	b8af883a 	add	r23,r23,r2
    4824:	d9001417 	ldw	r4,80(sp)
    4828:	d9401517 	ldw	r5,84(sp)
    482c:	000d883a 	mov	r6,zero
    4830:	01cff834 	movhi	r7,16352
    4834:	000aebc0 	call	aebc <__adddf3>
    4838:	880d883a 	mov	r6,r17
    483c:	a00f883a 	mov	r7,r20
    4840:	1009883a 	mov	r4,r2
    4844:	180b883a 	mov	r5,r3
    4848:	000c1b40 	call	c1b4 <__ledf2>
    484c:	10003e0e 	bge	r2,zero,4948 <_dtoa_r+0x1548>
    4850:	d9001317 	ldw	r4,76(sp)
    4854:	bd3fffc3 	ldbu	r20,-1(r23)
    4858:	d9000515 	stw	r4,20(sp)
    485c:	003d3b06 	br	3d4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003d4c>
    4860:	0027883a 	mov	r19,zero
    4864:	003f1b06 	br	44d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70044d4>
    4868:	d8800817 	ldw	r2,32(sp)
    486c:	11e9c83a 	sub	r20,r2,r7
    4870:	0005883a 	mov	r2,zero
    4874:	003d5406 	br	3dc8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003dc8>
    4878:	00800044 	movi	r2,1
    487c:	003dc706 	br	3f9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003f9c>
    4880:	d8c00217 	ldw	r3,8(sp)
    4884:	00800d84 	movi	r2,54
    4888:	dd400a17 	ldw	r21,40(sp)
    488c:	10c5c83a 	sub	r2,r2,r3
    4890:	dd000817 	ldw	r20,32(sp)
    4894:	003d4c06 	br	3dc8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003dc8>
    4898:	dc800f15 	stw	r18,60(sp)
    489c:	dcc01015 	stw	r19,64(sp)
    48a0:	04000084 	movi	r16,2
    48a4:	003bed06 	br	385c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700385c>
    48a8:	d9000617 	ldw	r4,24(sp)
    48ac:	203f0d26 	beq	r4,zero,44e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70044e4>
    48b0:	d9800c17 	ldw	r6,48(sp)
    48b4:	01bcab0e 	bge	zero,r6,3b64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003b64>
    48b8:	d9401017 	ldw	r5,64(sp)
    48bc:	d9000f17 	ldw	r4,60(sp)
    48c0:	000d883a 	mov	r6,zero
    48c4:	01d00934 	movhi	r7,16420
    48c8:	000c2a80 	call	c2a8 <__muldf3>
    48cc:	81000044 	addi	r4,r16,1
    48d0:	d8800f15 	stw	r2,60(sp)
    48d4:	d8c01015 	stw	r3,64(sp)
    48d8:	000d33c0 	call	d33c <__floatsidf>
    48dc:	d9800f17 	ldw	r6,60(sp)
    48e0:	d9c01017 	ldw	r7,64(sp)
    48e4:	1009883a 	mov	r4,r2
    48e8:	180b883a 	mov	r5,r3
    48ec:	000c2a80 	call	c2a8 <__muldf3>
    48f0:	01d00734 	movhi	r7,16412
    48f4:	000d883a 	mov	r6,zero
    48f8:	1009883a 	mov	r4,r2
    48fc:	180b883a 	mov	r5,r3
    4900:	000aebc0 	call	aebc <__adddf3>
    4904:	d9c00517 	ldw	r7,20(sp)
    4908:	047f3034 	movhi	r17,64704
    490c:	1021883a 	mov	r16,r2
    4910:	39ffffc4 	addi	r7,r7,-1
    4914:	d9c01315 	stw	r7,76(sp)
    4918:	1c63883a 	add	r17,r3,r17
    491c:	db000c17 	ldw	r12,48(sp)
    4920:	003bea06 	br	38cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70038cc>
    4924:	dc000915 	stw	r16,36(sp)
    4928:	003e0e06 	br	4164 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004164>
    492c:	01000e44 	movi	r4,57
    4930:	8825883a 	mov	r18,r17
    4934:	9dc00044 	addi	r23,r19,1
    4938:	99000005 	stb	r4,0(r19)
    493c:	a023883a 	mov	r17,r20
    4940:	dc000915 	stw	r16,36(sp)
    4944:	003da406 	br	3fd8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003fd8>
    4948:	d9801417 	ldw	r6,80(sp)
    494c:	d9c01517 	ldw	r7,84(sp)
    4950:	0009883a 	mov	r4,zero
    4954:	014ff834 	movhi	r5,16352
    4958:	000c9c00 	call	c9c0 <__subdf3>
    495c:	880d883a 	mov	r6,r17
    4960:	a00f883a 	mov	r7,r20
    4964:	1009883a 	mov	r4,r2
    4968:	180b883a 	mov	r5,r3
    496c:	000c0d80 	call	c0d8 <__gedf2>
    4970:	00bc7c0e 	bge	zero,r2,3b64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003b64>
    4974:	01000c04 	movi	r4,48
    4978:	00000106 	br	4980 <_dtoa_r+0x1580>
    497c:	102f883a 	mov	r23,r2
    4980:	b8bfffc4 	addi	r2,r23,-1
    4984:	10c00007 	ldb	r3,0(r2)
    4988:	193ffc26 	beq	r3,r4,497c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700497c>
    498c:	d9801317 	ldw	r6,76(sp)
    4990:	d9800515 	stw	r6,20(sp)
    4994:	003c4406 	br	3aa8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003aa8>
    4998:	d9801317 	ldw	r6,76(sp)
    499c:	d9800515 	stw	r6,20(sp)
    49a0:	003cea06 	br	3d4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003d4c>
    49a4:	dd800f17 	ldw	r22,60(sp)
    49a8:	dcc01017 	ldw	r19,64(sp)
    49ac:	dc801217 	ldw	r18,72(sp)
    49b0:	003c6c06 	br	3b64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003b64>
    49b4:	903e031e 	bne	r18,zero,41c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70041c4>
    49b8:	003ebb06 	br	44a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70044a8>
    49bc:	103e6c1e 	bne	r2,zero,4370 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004370>
    49c0:	4080004c 	andi	r2,r8,1
    49c4:	103e6a26 	beq	r2,zero,4370 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004370>
    49c8:	003e6606 	br	4364 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004364>
    49cc:	d8c00317 	ldw	r3,12(sp)
    49d0:	00800084 	movi	r2,2
    49d4:	10c02916 	blt	r2,r3,4a7c <_dtoa_r+0x167c>
    49d8:	d9000c17 	ldw	r4,48(sp)
    49dc:	003e8806 	br	4400 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004400>
    49e0:	04000084 	movi	r16,2
    49e4:	003b9d06 	br	385c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700385c>
    49e8:	d9001317 	ldw	r4,76(sp)
    49ec:	d9000515 	stw	r4,20(sp)
    49f0:	003cd606 	br	3d4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003d4c>
    49f4:	d8801317 	ldw	r2,76(sp)
    49f8:	d8800515 	stw	r2,20(sp)
    49fc:	003c2a06 	br	3aa8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003aa8>
    4a00:	d9800317 	ldw	r6,12(sp)
    4a04:	00800084 	movi	r2,2
    4a08:	11801516 	blt	r2,r6,4a60 <_dtoa_r+0x1660>
    4a0c:	d9c00c17 	ldw	r7,48(sp)
    4a10:	d9c00615 	stw	r7,24(sp)
    4a14:	003df706 	br	41f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70041f4>
    4a18:	193d3926 	beq	r3,r4,3f00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003f00>
    4a1c:	00c00f04 	movi	r3,60
    4a20:	1885c83a 	sub	r2,r3,r2
    4a24:	003ddf06 	br	41a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70041a4>
    4a28:	e009883a 	mov	r4,fp
    4a2c:	e0001115 	stw	zero,68(fp)
    4a30:	000b883a 	mov	r5,zero
    4a34:	0006a9c0 	call	6a9c <_Balloc>
    4a38:	d8800715 	stw	r2,28(sp)
    4a3c:	d8c00717 	ldw	r3,28(sp)
    4a40:	00bfffc4 	movi	r2,-1
    4a44:	01000044 	movi	r4,1
    4a48:	d8800c15 	stw	r2,48(sp)
    4a4c:	e0c01015 	stw	r3,64(fp)
    4a50:	d9000b15 	stw	r4,44(sp)
    4a54:	d8800615 	stw	r2,24(sp)
    4a58:	d8002215 	stw	zero,136(sp)
    4a5c:	003c4106 	br	3b64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003b64>
    4a60:	d8c00c17 	ldw	r3,48(sp)
    4a64:	d8c00615 	stw	r3,24(sp)
    4a68:	003e7006 	br	442c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700442c>
    4a6c:	04400044 	movi	r17,1
    4a70:	003b2006 	br	36f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70036f4>
    4a74:	000b883a 	mov	r5,zero
    4a78:	003b3d06 	br	3770 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003770>
    4a7c:	d8800c17 	ldw	r2,48(sp)
    4a80:	d8800615 	stw	r2,24(sp)
    4a84:	003e6906 	br	442c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700442c>

00004a88 <__sflush_r>:
    4a88:	2880030b 	ldhu	r2,12(r5)
    4a8c:	defffb04 	addi	sp,sp,-20
    4a90:	dcc00315 	stw	r19,12(sp)
    4a94:	dc400115 	stw	r17,4(sp)
    4a98:	dfc00415 	stw	ra,16(sp)
    4a9c:	dc800215 	stw	r18,8(sp)
    4aa0:	dc000015 	stw	r16,0(sp)
    4aa4:	10c0020c 	andi	r3,r2,8
    4aa8:	2823883a 	mov	r17,r5
    4aac:	2027883a 	mov	r19,r4
    4ab0:	1800311e 	bne	r3,zero,4b78 <__sflush_r+0xf0>
    4ab4:	28c00117 	ldw	r3,4(r5)
    4ab8:	10820014 	ori	r2,r2,2048
    4abc:	2880030d 	sth	r2,12(r5)
    4ac0:	00c04b0e 	bge	zero,r3,4bf0 <__sflush_r+0x168>
    4ac4:	8a000a17 	ldw	r8,40(r17)
    4ac8:	40002326 	beq	r8,zero,4b58 <__sflush_r+0xd0>
    4acc:	9c000017 	ldw	r16,0(r19)
    4ad0:	10c4000c 	andi	r3,r2,4096
    4ad4:	98000015 	stw	zero,0(r19)
    4ad8:	18004826 	beq	r3,zero,4bfc <__sflush_r+0x174>
    4adc:	89801417 	ldw	r6,80(r17)
    4ae0:	10c0010c 	andi	r3,r2,4
    4ae4:	18000626 	beq	r3,zero,4b00 <__sflush_r+0x78>
    4ae8:	88c00117 	ldw	r3,4(r17)
    4aec:	88800c17 	ldw	r2,48(r17)
    4af0:	30cdc83a 	sub	r6,r6,r3
    4af4:	10000226 	beq	r2,zero,4b00 <__sflush_r+0x78>
    4af8:	88800f17 	ldw	r2,60(r17)
    4afc:	308dc83a 	sub	r6,r6,r2
    4b00:	89400717 	ldw	r5,28(r17)
    4b04:	000f883a 	mov	r7,zero
    4b08:	9809883a 	mov	r4,r19
    4b0c:	403ee83a 	callr	r8
    4b10:	00ffffc4 	movi	r3,-1
    4b14:	10c04426 	beq	r2,r3,4c28 <__sflush_r+0x1a0>
    4b18:	88c0030b 	ldhu	r3,12(r17)
    4b1c:	89000417 	ldw	r4,16(r17)
    4b20:	88000115 	stw	zero,4(r17)
    4b24:	197dffcc 	andi	r5,r3,63487
    4b28:	8940030d 	sth	r5,12(r17)
    4b2c:	89000015 	stw	r4,0(r17)
    4b30:	18c4000c 	andi	r3,r3,4096
    4b34:	18002c1e 	bne	r3,zero,4be8 <__sflush_r+0x160>
    4b38:	89400c17 	ldw	r5,48(r17)
    4b3c:	9c000015 	stw	r16,0(r19)
    4b40:	28000526 	beq	r5,zero,4b58 <__sflush_r+0xd0>
    4b44:	88801004 	addi	r2,r17,64
    4b48:	28800226 	beq	r5,r2,4b54 <__sflush_r+0xcc>
    4b4c:	9809883a 	mov	r4,r19
    4b50:	00051f40 	call	51f4 <_free_r>
    4b54:	88000c15 	stw	zero,48(r17)
    4b58:	0005883a 	mov	r2,zero
    4b5c:	dfc00417 	ldw	ra,16(sp)
    4b60:	dcc00317 	ldw	r19,12(sp)
    4b64:	dc800217 	ldw	r18,8(sp)
    4b68:	dc400117 	ldw	r17,4(sp)
    4b6c:	dc000017 	ldw	r16,0(sp)
    4b70:	dec00504 	addi	sp,sp,20
    4b74:	f800283a 	ret
    4b78:	2c800417 	ldw	r18,16(r5)
    4b7c:	903ff626 	beq	r18,zero,4b58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004b58>
    4b80:	2c000017 	ldw	r16,0(r5)
    4b84:	108000cc 	andi	r2,r2,3
    4b88:	2c800015 	stw	r18,0(r5)
    4b8c:	84a1c83a 	sub	r16,r16,r18
    4b90:	1000131e 	bne	r2,zero,4be0 <__sflush_r+0x158>
    4b94:	28800517 	ldw	r2,20(r5)
    4b98:	88800215 	stw	r2,8(r17)
    4b9c:	04000316 	blt	zero,r16,4bac <__sflush_r+0x124>
    4ba0:	003fed06 	br	4b58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004b58>
    4ba4:	90a5883a 	add	r18,r18,r2
    4ba8:	043feb0e 	bge	zero,r16,4b58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004b58>
    4bac:	88800917 	ldw	r2,36(r17)
    4bb0:	89400717 	ldw	r5,28(r17)
    4bb4:	800f883a 	mov	r7,r16
    4bb8:	900d883a 	mov	r6,r18
    4bbc:	9809883a 	mov	r4,r19
    4bc0:	103ee83a 	callr	r2
    4bc4:	80a1c83a 	sub	r16,r16,r2
    4bc8:	00bff616 	blt	zero,r2,4ba4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004ba4>
    4bcc:	88c0030b 	ldhu	r3,12(r17)
    4bd0:	00bfffc4 	movi	r2,-1
    4bd4:	18c01014 	ori	r3,r3,64
    4bd8:	88c0030d 	sth	r3,12(r17)
    4bdc:	003fdf06 	br	4b5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004b5c>
    4be0:	0005883a 	mov	r2,zero
    4be4:	003fec06 	br	4b98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004b98>
    4be8:	88801415 	stw	r2,80(r17)
    4bec:	003fd206 	br	4b38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004b38>
    4bf0:	28c00f17 	ldw	r3,60(r5)
    4bf4:	00ffb316 	blt	zero,r3,4ac4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004ac4>
    4bf8:	003fd706 	br	4b58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004b58>
    4bfc:	89400717 	ldw	r5,28(r17)
    4c00:	000d883a 	mov	r6,zero
    4c04:	01c00044 	movi	r7,1
    4c08:	9809883a 	mov	r4,r19
    4c0c:	403ee83a 	callr	r8
    4c10:	100d883a 	mov	r6,r2
    4c14:	00bfffc4 	movi	r2,-1
    4c18:	30801426 	beq	r6,r2,4c6c <__sflush_r+0x1e4>
    4c1c:	8880030b 	ldhu	r2,12(r17)
    4c20:	8a000a17 	ldw	r8,40(r17)
    4c24:	003fae06 	br	4ae0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004ae0>
    4c28:	98c00017 	ldw	r3,0(r19)
    4c2c:	183fba26 	beq	r3,zero,4b18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004b18>
    4c30:	01000744 	movi	r4,29
    4c34:	19000626 	beq	r3,r4,4c50 <__sflush_r+0x1c8>
    4c38:	01000584 	movi	r4,22
    4c3c:	19000426 	beq	r3,r4,4c50 <__sflush_r+0x1c8>
    4c40:	88c0030b 	ldhu	r3,12(r17)
    4c44:	18c01014 	ori	r3,r3,64
    4c48:	88c0030d 	sth	r3,12(r17)
    4c4c:	003fc306 	br	4b5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004b5c>
    4c50:	8880030b 	ldhu	r2,12(r17)
    4c54:	88c00417 	ldw	r3,16(r17)
    4c58:	88000115 	stw	zero,4(r17)
    4c5c:	10bdffcc 	andi	r2,r2,63487
    4c60:	8880030d 	sth	r2,12(r17)
    4c64:	88c00015 	stw	r3,0(r17)
    4c68:	003fb306 	br	4b38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004b38>
    4c6c:	98800017 	ldw	r2,0(r19)
    4c70:	103fea26 	beq	r2,zero,4c1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004c1c>
    4c74:	00c00744 	movi	r3,29
    4c78:	10c00226 	beq	r2,r3,4c84 <__sflush_r+0x1fc>
    4c7c:	00c00584 	movi	r3,22
    4c80:	10c0031e 	bne	r2,r3,4c90 <__sflush_r+0x208>
    4c84:	9c000015 	stw	r16,0(r19)
    4c88:	0005883a 	mov	r2,zero
    4c8c:	003fb306 	br	4b5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004b5c>
    4c90:	88c0030b 	ldhu	r3,12(r17)
    4c94:	3005883a 	mov	r2,r6
    4c98:	18c01014 	ori	r3,r3,64
    4c9c:	88c0030d 	sth	r3,12(r17)
    4ca0:	003fae06 	br	4b5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004b5c>

00004ca4 <_fflush_r>:
    4ca4:	defffd04 	addi	sp,sp,-12
    4ca8:	dc000115 	stw	r16,4(sp)
    4cac:	dfc00215 	stw	ra,8(sp)
    4cb0:	2021883a 	mov	r16,r4
    4cb4:	20000226 	beq	r4,zero,4cc0 <_fflush_r+0x1c>
    4cb8:	20800e17 	ldw	r2,56(r4)
    4cbc:	10000c26 	beq	r2,zero,4cf0 <_fflush_r+0x4c>
    4cc0:	2880030f 	ldh	r2,12(r5)
    4cc4:	1000051e 	bne	r2,zero,4cdc <_fflush_r+0x38>
    4cc8:	0005883a 	mov	r2,zero
    4ccc:	dfc00217 	ldw	ra,8(sp)
    4cd0:	dc000117 	ldw	r16,4(sp)
    4cd4:	dec00304 	addi	sp,sp,12
    4cd8:	f800283a 	ret
    4cdc:	8009883a 	mov	r4,r16
    4ce0:	dfc00217 	ldw	ra,8(sp)
    4ce4:	dc000117 	ldw	r16,4(sp)
    4ce8:	dec00304 	addi	sp,sp,12
    4cec:	0004a881 	jmpi	4a88 <__sflush_r>
    4cf0:	d9400015 	stw	r5,0(sp)
    4cf4:	00050800 	call	5080 <__sinit>
    4cf8:	d9400017 	ldw	r5,0(sp)
    4cfc:	003ff006 	br	4cc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004cc0>

00004d00 <fflush>:
    4d00:	20000526 	beq	r4,zero,4d18 <fflush+0x18>
    4d04:	008000b4 	movhi	r2,2
    4d08:	10b05204 	addi	r2,r2,-16056
    4d0c:	200b883a 	mov	r5,r4
    4d10:	11000017 	ldw	r4,0(r2)
    4d14:	0004ca41 	jmpi	4ca4 <_fflush_r>
    4d18:	008000b4 	movhi	r2,2
    4d1c:	10b05104 	addi	r2,r2,-16060
    4d20:	11000017 	ldw	r4,0(r2)
    4d24:	01400034 	movhi	r5,0
    4d28:	29532904 	addi	r5,r5,19620
    4d2c:	0005a841 	jmpi	5a84 <_fwalk_reent>

00004d30 <__fp_unlock>:
    4d30:	0005883a 	mov	r2,zero
    4d34:	f800283a 	ret

00004d38 <_cleanup_r>:
    4d38:	01400074 	movhi	r5,1
    4d3c:	2966a704 	addi	r5,r5,-25956
    4d40:	0005a841 	jmpi	5a84 <_fwalk_reent>

00004d44 <__sinit.part.1>:
    4d44:	defff704 	addi	sp,sp,-36
    4d48:	00c00034 	movhi	r3,0
    4d4c:	dfc00815 	stw	ra,32(sp)
    4d50:	ddc00715 	stw	r23,28(sp)
    4d54:	dd800615 	stw	r22,24(sp)
    4d58:	dd400515 	stw	r21,20(sp)
    4d5c:	dd000415 	stw	r20,16(sp)
    4d60:	dcc00315 	stw	r19,12(sp)
    4d64:	dc800215 	stw	r18,8(sp)
    4d68:	dc400115 	stw	r17,4(sp)
    4d6c:	dc000015 	stw	r16,0(sp)
    4d70:	18d34e04 	addi	r3,r3,19768
    4d74:	24000117 	ldw	r16,4(r4)
    4d78:	20c00f15 	stw	r3,60(r4)
    4d7c:	2080bb04 	addi	r2,r4,748
    4d80:	00c000c4 	movi	r3,3
    4d84:	20c0b915 	stw	r3,740(r4)
    4d88:	2080ba15 	stw	r2,744(r4)
    4d8c:	2000b815 	stw	zero,736(r4)
    4d90:	05c00204 	movi	r23,8
    4d94:	00800104 	movi	r2,4
    4d98:	2025883a 	mov	r18,r4
    4d9c:	b80d883a 	mov	r6,r23
    4da0:	81001704 	addi	r4,r16,92
    4da4:	000b883a 	mov	r5,zero
    4da8:	80000015 	stw	zero,0(r16)
    4dac:	80000115 	stw	zero,4(r16)
    4db0:	80000215 	stw	zero,8(r16)
    4db4:	8080030d 	sth	r2,12(r16)
    4db8:	80001915 	stw	zero,100(r16)
    4dbc:	8000038d 	sth	zero,14(r16)
    4dc0:	80000415 	stw	zero,16(r16)
    4dc4:	80000515 	stw	zero,20(r16)
    4dc8:	80000615 	stw	zero,24(r16)
    4dcc:	00069740 	call	6974 <memset>
    4dd0:	05800074 	movhi	r22,1
    4dd4:	94400217 	ldw	r17,8(r18)
    4dd8:	05400074 	movhi	r21,1
    4ddc:	05000074 	movhi	r20,1
    4de0:	04c00074 	movhi	r19,1
    4de4:	b5a03104 	addi	r22,r22,-32572
    4de8:	ad604804 	addi	r21,r21,-32480
    4dec:	a5206704 	addi	r20,r20,-32356
    4df0:	9ce07e04 	addi	r19,r19,-32264
    4df4:	85800815 	stw	r22,32(r16)
    4df8:	85400915 	stw	r21,36(r16)
    4dfc:	85000a15 	stw	r20,40(r16)
    4e00:	84c00b15 	stw	r19,44(r16)
    4e04:	84000715 	stw	r16,28(r16)
    4e08:	00800284 	movi	r2,10
    4e0c:	8880030d 	sth	r2,12(r17)
    4e10:	00800044 	movi	r2,1
    4e14:	b80d883a 	mov	r6,r23
    4e18:	89001704 	addi	r4,r17,92
    4e1c:	000b883a 	mov	r5,zero
    4e20:	88000015 	stw	zero,0(r17)
    4e24:	88000115 	stw	zero,4(r17)
    4e28:	88000215 	stw	zero,8(r17)
    4e2c:	88001915 	stw	zero,100(r17)
    4e30:	8880038d 	sth	r2,14(r17)
    4e34:	88000415 	stw	zero,16(r17)
    4e38:	88000515 	stw	zero,20(r17)
    4e3c:	88000615 	stw	zero,24(r17)
    4e40:	00069740 	call	6974 <memset>
    4e44:	94000317 	ldw	r16,12(r18)
    4e48:	00800484 	movi	r2,18
    4e4c:	8c400715 	stw	r17,28(r17)
    4e50:	8d800815 	stw	r22,32(r17)
    4e54:	8d400915 	stw	r21,36(r17)
    4e58:	8d000a15 	stw	r20,40(r17)
    4e5c:	8cc00b15 	stw	r19,44(r17)
    4e60:	8080030d 	sth	r2,12(r16)
    4e64:	00800084 	movi	r2,2
    4e68:	80000015 	stw	zero,0(r16)
    4e6c:	80000115 	stw	zero,4(r16)
    4e70:	80000215 	stw	zero,8(r16)
    4e74:	80001915 	stw	zero,100(r16)
    4e78:	8080038d 	sth	r2,14(r16)
    4e7c:	80000415 	stw	zero,16(r16)
    4e80:	80000515 	stw	zero,20(r16)
    4e84:	80000615 	stw	zero,24(r16)
    4e88:	b80d883a 	mov	r6,r23
    4e8c:	000b883a 	mov	r5,zero
    4e90:	81001704 	addi	r4,r16,92
    4e94:	00069740 	call	6974 <memset>
    4e98:	00800044 	movi	r2,1
    4e9c:	84000715 	stw	r16,28(r16)
    4ea0:	85800815 	stw	r22,32(r16)
    4ea4:	85400915 	stw	r21,36(r16)
    4ea8:	85000a15 	stw	r20,40(r16)
    4eac:	84c00b15 	stw	r19,44(r16)
    4eb0:	90800e15 	stw	r2,56(r18)
    4eb4:	dfc00817 	ldw	ra,32(sp)
    4eb8:	ddc00717 	ldw	r23,28(sp)
    4ebc:	dd800617 	ldw	r22,24(sp)
    4ec0:	dd400517 	ldw	r21,20(sp)
    4ec4:	dd000417 	ldw	r20,16(sp)
    4ec8:	dcc00317 	ldw	r19,12(sp)
    4ecc:	dc800217 	ldw	r18,8(sp)
    4ed0:	dc400117 	ldw	r17,4(sp)
    4ed4:	dc000017 	ldw	r16,0(sp)
    4ed8:	dec00904 	addi	sp,sp,36
    4edc:	f800283a 	ret

00004ee0 <__fp_lock>:
    4ee0:	0005883a 	mov	r2,zero
    4ee4:	f800283a 	ret

00004ee8 <__sfmoreglue>:
    4ee8:	defffc04 	addi	sp,sp,-16
    4eec:	dc400115 	stw	r17,4(sp)
    4ef0:	2c7fffc4 	addi	r17,r5,-1
    4ef4:	8c401a24 	muli	r17,r17,104
    4ef8:	dc800215 	stw	r18,8(sp)
    4efc:	2825883a 	mov	r18,r5
    4f00:	89401d04 	addi	r5,r17,116
    4f04:	dc000015 	stw	r16,0(sp)
    4f08:	dfc00315 	stw	ra,12(sp)
    4f0c:	0005de00 	call	5de0 <_malloc_r>
    4f10:	1021883a 	mov	r16,r2
    4f14:	10000726 	beq	r2,zero,4f34 <__sfmoreglue+0x4c>
    4f18:	11000304 	addi	r4,r2,12
    4f1c:	10000015 	stw	zero,0(r2)
    4f20:	14800115 	stw	r18,4(r2)
    4f24:	11000215 	stw	r4,8(r2)
    4f28:	89801a04 	addi	r6,r17,104
    4f2c:	000b883a 	mov	r5,zero
    4f30:	00069740 	call	6974 <memset>
    4f34:	8005883a 	mov	r2,r16
    4f38:	dfc00317 	ldw	ra,12(sp)
    4f3c:	dc800217 	ldw	r18,8(sp)
    4f40:	dc400117 	ldw	r17,4(sp)
    4f44:	dc000017 	ldw	r16,0(sp)
    4f48:	dec00404 	addi	sp,sp,16
    4f4c:	f800283a 	ret

00004f50 <__sfp>:
    4f50:	defffb04 	addi	sp,sp,-20
    4f54:	dc000015 	stw	r16,0(sp)
    4f58:	040000b4 	movhi	r16,2
    4f5c:	84305104 	addi	r16,r16,-16060
    4f60:	dcc00315 	stw	r19,12(sp)
    4f64:	2027883a 	mov	r19,r4
    4f68:	81000017 	ldw	r4,0(r16)
    4f6c:	dfc00415 	stw	ra,16(sp)
    4f70:	dc800215 	stw	r18,8(sp)
    4f74:	20800e17 	ldw	r2,56(r4)
    4f78:	dc400115 	stw	r17,4(sp)
    4f7c:	1000021e 	bne	r2,zero,4f88 <__sfp+0x38>
    4f80:	0004d440 	call	4d44 <__sinit.part.1>
    4f84:	81000017 	ldw	r4,0(r16)
    4f88:	2480b804 	addi	r18,r4,736
    4f8c:	047fffc4 	movi	r17,-1
    4f90:	91000117 	ldw	r4,4(r18)
    4f94:	94000217 	ldw	r16,8(r18)
    4f98:	213fffc4 	addi	r4,r4,-1
    4f9c:	20000a16 	blt	r4,zero,4fc8 <__sfp+0x78>
    4fa0:	8080030f 	ldh	r2,12(r16)
    4fa4:	10000c26 	beq	r2,zero,4fd8 <__sfp+0x88>
    4fa8:	80c01d04 	addi	r3,r16,116
    4fac:	00000206 	br	4fb8 <__sfp+0x68>
    4fb0:	18bfe60f 	ldh	r2,-104(r3)
    4fb4:	10000826 	beq	r2,zero,4fd8 <__sfp+0x88>
    4fb8:	213fffc4 	addi	r4,r4,-1
    4fbc:	1c3ffd04 	addi	r16,r3,-12
    4fc0:	18c01a04 	addi	r3,r3,104
    4fc4:	247ffa1e 	bne	r4,r17,4fb0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004fb0>
    4fc8:	90800017 	ldw	r2,0(r18)
    4fcc:	10001d26 	beq	r2,zero,5044 <__sfp+0xf4>
    4fd0:	1025883a 	mov	r18,r2
    4fd4:	003fee06 	br	4f90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004f90>
    4fd8:	00bfffc4 	movi	r2,-1
    4fdc:	8080038d 	sth	r2,14(r16)
    4fe0:	00800044 	movi	r2,1
    4fe4:	8080030d 	sth	r2,12(r16)
    4fe8:	80001915 	stw	zero,100(r16)
    4fec:	80000015 	stw	zero,0(r16)
    4ff0:	80000215 	stw	zero,8(r16)
    4ff4:	80000115 	stw	zero,4(r16)
    4ff8:	80000415 	stw	zero,16(r16)
    4ffc:	80000515 	stw	zero,20(r16)
    5000:	80000615 	stw	zero,24(r16)
    5004:	01800204 	movi	r6,8
    5008:	000b883a 	mov	r5,zero
    500c:	81001704 	addi	r4,r16,92
    5010:	00069740 	call	6974 <memset>
    5014:	8005883a 	mov	r2,r16
    5018:	80000c15 	stw	zero,48(r16)
    501c:	80000d15 	stw	zero,52(r16)
    5020:	80001115 	stw	zero,68(r16)
    5024:	80001215 	stw	zero,72(r16)
    5028:	dfc00417 	ldw	ra,16(sp)
    502c:	dcc00317 	ldw	r19,12(sp)
    5030:	dc800217 	ldw	r18,8(sp)
    5034:	dc400117 	ldw	r17,4(sp)
    5038:	dc000017 	ldw	r16,0(sp)
    503c:	dec00504 	addi	sp,sp,20
    5040:	f800283a 	ret
    5044:	01400104 	movi	r5,4
    5048:	9809883a 	mov	r4,r19
    504c:	0004ee80 	call	4ee8 <__sfmoreglue>
    5050:	90800015 	stw	r2,0(r18)
    5054:	103fde1e 	bne	r2,zero,4fd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004fd0>
    5058:	00800304 	movi	r2,12
    505c:	98800015 	stw	r2,0(r19)
    5060:	0005883a 	mov	r2,zero
    5064:	003ff006 	br	5028 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005028>

00005068 <_cleanup>:
    5068:	008000b4 	movhi	r2,2
    506c:	10b05104 	addi	r2,r2,-16060
    5070:	11000017 	ldw	r4,0(r2)
    5074:	01400074 	movhi	r5,1
    5078:	2966a704 	addi	r5,r5,-25956
    507c:	0005a841 	jmpi	5a84 <_fwalk_reent>

00005080 <__sinit>:
    5080:	20800e17 	ldw	r2,56(r4)
    5084:	10000126 	beq	r2,zero,508c <__sinit+0xc>
    5088:	f800283a 	ret
    508c:	0004d441 	jmpi	4d44 <__sinit.part.1>

00005090 <__sfp_lock_acquire>:
    5090:	f800283a 	ret

00005094 <__sfp_lock_release>:
    5094:	f800283a 	ret

00005098 <__sinit_lock_acquire>:
    5098:	f800283a 	ret

0000509c <__sinit_lock_release>:
    509c:	f800283a 	ret

000050a0 <__fp_lock_all>:
    50a0:	008000b4 	movhi	r2,2
    50a4:	10b05204 	addi	r2,r2,-16056
    50a8:	11000017 	ldw	r4,0(r2)
    50ac:	01400034 	movhi	r5,0
    50b0:	2953b804 	addi	r5,r5,20192
    50b4:	00059c01 	jmpi	59c0 <_fwalk>

000050b8 <__fp_unlock_all>:
    50b8:	008000b4 	movhi	r2,2
    50bc:	10b05204 	addi	r2,r2,-16056
    50c0:	11000017 	ldw	r4,0(r2)
    50c4:	01400034 	movhi	r5,0
    50c8:	29534c04 	addi	r5,r5,19760
    50cc:	00059c01 	jmpi	59c0 <_fwalk>

000050d0 <_malloc_trim_r>:
    50d0:	defffb04 	addi	sp,sp,-20
    50d4:	dcc00315 	stw	r19,12(sp)
    50d8:	04c000b4 	movhi	r19,2
    50dc:	dc800215 	stw	r18,8(sp)
    50e0:	dc400115 	stw	r17,4(sp)
    50e4:	dc000015 	stw	r16,0(sp)
    50e8:	dfc00415 	stw	ra,16(sp)
    50ec:	2821883a 	mov	r16,r5
    50f0:	9cea0704 	addi	r19,r19,-22500
    50f4:	2025883a 	mov	r18,r4
    50f8:	000df840 	call	df84 <__malloc_lock>
    50fc:	98800217 	ldw	r2,8(r19)
    5100:	14400117 	ldw	r17,4(r2)
    5104:	00bfff04 	movi	r2,-4
    5108:	88a2703a 	and	r17,r17,r2
    510c:	8c21c83a 	sub	r16,r17,r16
    5110:	8403fbc4 	addi	r16,r16,4079
    5114:	8020d33a 	srli	r16,r16,12
    5118:	0083ffc4 	movi	r2,4095
    511c:	843fffc4 	addi	r16,r16,-1
    5120:	8020933a 	slli	r16,r16,12
    5124:	1400060e 	bge	r2,r16,5140 <_malloc_trim_r+0x70>
    5128:	000b883a 	mov	r5,zero
    512c:	9009883a 	mov	r4,r18
    5130:	00080700 	call	8070 <_sbrk_r>
    5134:	98c00217 	ldw	r3,8(r19)
    5138:	1c47883a 	add	r3,r3,r17
    513c:	10c00a26 	beq	r2,r3,5168 <_malloc_trim_r+0x98>
    5140:	9009883a 	mov	r4,r18
    5144:	000e0a40 	call	e0a4 <__malloc_unlock>
    5148:	0005883a 	mov	r2,zero
    514c:	dfc00417 	ldw	ra,16(sp)
    5150:	dcc00317 	ldw	r19,12(sp)
    5154:	dc800217 	ldw	r18,8(sp)
    5158:	dc400117 	ldw	r17,4(sp)
    515c:	dc000017 	ldw	r16,0(sp)
    5160:	dec00504 	addi	sp,sp,20
    5164:	f800283a 	ret
    5168:	040bc83a 	sub	r5,zero,r16
    516c:	9009883a 	mov	r4,r18
    5170:	00080700 	call	8070 <_sbrk_r>
    5174:	00ffffc4 	movi	r3,-1
    5178:	10c00d26 	beq	r2,r3,51b0 <_malloc_trim_r+0xe0>
    517c:	00c000b4 	movhi	r3,2
    5180:	18f85204 	addi	r3,r3,-7864
    5184:	18800017 	ldw	r2,0(r3)
    5188:	99000217 	ldw	r4,8(r19)
    518c:	8c23c83a 	sub	r17,r17,r16
    5190:	8c400054 	ori	r17,r17,1
    5194:	1421c83a 	sub	r16,r2,r16
    5198:	24400115 	stw	r17,4(r4)
    519c:	9009883a 	mov	r4,r18
    51a0:	1c000015 	stw	r16,0(r3)
    51a4:	000e0a40 	call	e0a4 <__malloc_unlock>
    51a8:	00800044 	movi	r2,1
    51ac:	003fe706 	br	514c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700514c>
    51b0:	000b883a 	mov	r5,zero
    51b4:	9009883a 	mov	r4,r18
    51b8:	00080700 	call	8070 <_sbrk_r>
    51bc:	99000217 	ldw	r4,8(r19)
    51c0:	014003c4 	movi	r5,15
    51c4:	1107c83a 	sub	r3,r2,r4
    51c8:	28ffdd0e 	bge	r5,r3,5140 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005140>
    51cc:	014000b4 	movhi	r5,2
    51d0:	29705404 	addi	r5,r5,-16048
    51d4:	29400017 	ldw	r5,0(r5)
    51d8:	18c00054 	ori	r3,r3,1
    51dc:	20c00115 	stw	r3,4(r4)
    51e0:	00c000b4 	movhi	r3,2
    51e4:	1145c83a 	sub	r2,r2,r5
    51e8:	18f85204 	addi	r3,r3,-7864
    51ec:	18800015 	stw	r2,0(r3)
    51f0:	003fd306 	br	5140 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005140>

000051f4 <_free_r>:
    51f4:	28004126 	beq	r5,zero,52fc <_free_r+0x108>
    51f8:	defffd04 	addi	sp,sp,-12
    51fc:	dc400115 	stw	r17,4(sp)
    5200:	dc000015 	stw	r16,0(sp)
    5204:	2023883a 	mov	r17,r4
    5208:	2821883a 	mov	r16,r5
    520c:	dfc00215 	stw	ra,8(sp)
    5210:	000df840 	call	df84 <__malloc_lock>
    5214:	81ffff17 	ldw	r7,-4(r16)
    5218:	00bfff84 	movi	r2,-2
    521c:	010000b4 	movhi	r4,2
    5220:	81bffe04 	addi	r6,r16,-8
    5224:	3884703a 	and	r2,r7,r2
    5228:	212a0704 	addi	r4,r4,-22500
    522c:	308b883a 	add	r5,r6,r2
    5230:	2a400117 	ldw	r9,4(r5)
    5234:	22000217 	ldw	r8,8(r4)
    5238:	00ffff04 	movi	r3,-4
    523c:	48c6703a 	and	r3,r9,r3
    5240:	2a005726 	beq	r5,r8,53a0 <_free_r+0x1ac>
    5244:	28c00115 	stw	r3,4(r5)
    5248:	39c0004c 	andi	r7,r7,1
    524c:	3800091e 	bne	r7,zero,5274 <_free_r+0x80>
    5250:	823ffe17 	ldw	r8,-8(r16)
    5254:	22400204 	addi	r9,r4,8
    5258:	320dc83a 	sub	r6,r6,r8
    525c:	31c00217 	ldw	r7,8(r6)
    5260:	1205883a 	add	r2,r2,r8
    5264:	3a406526 	beq	r7,r9,53fc <_free_r+0x208>
    5268:	32000317 	ldw	r8,12(r6)
    526c:	3a000315 	stw	r8,12(r7)
    5270:	41c00215 	stw	r7,8(r8)
    5274:	28cf883a 	add	r7,r5,r3
    5278:	39c00117 	ldw	r7,4(r7)
    527c:	39c0004c 	andi	r7,r7,1
    5280:	38003a26 	beq	r7,zero,536c <_free_r+0x178>
    5284:	10c00054 	ori	r3,r2,1
    5288:	30c00115 	stw	r3,4(r6)
    528c:	3087883a 	add	r3,r6,r2
    5290:	18800015 	stw	r2,0(r3)
    5294:	00c07fc4 	movi	r3,511
    5298:	18801936 	bltu	r3,r2,5300 <_free_r+0x10c>
    529c:	1004d0fa 	srli	r2,r2,3
    52a0:	01c00044 	movi	r7,1
    52a4:	21400117 	ldw	r5,4(r4)
    52a8:	10c00044 	addi	r3,r2,1
    52ac:	18c7883a 	add	r3,r3,r3
    52b0:	1005d0ba 	srai	r2,r2,2
    52b4:	18c7883a 	add	r3,r3,r3
    52b8:	18c7883a 	add	r3,r3,r3
    52bc:	1907883a 	add	r3,r3,r4
    52c0:	3884983a 	sll	r2,r7,r2
    52c4:	19c00017 	ldw	r7,0(r3)
    52c8:	1a3ffe04 	addi	r8,r3,-8
    52cc:	1144b03a 	or	r2,r2,r5
    52d0:	32000315 	stw	r8,12(r6)
    52d4:	31c00215 	stw	r7,8(r6)
    52d8:	20800115 	stw	r2,4(r4)
    52dc:	19800015 	stw	r6,0(r3)
    52e0:	39800315 	stw	r6,12(r7)
    52e4:	8809883a 	mov	r4,r17
    52e8:	dfc00217 	ldw	ra,8(sp)
    52ec:	dc400117 	ldw	r17,4(sp)
    52f0:	dc000017 	ldw	r16,0(sp)
    52f4:	dec00304 	addi	sp,sp,12
    52f8:	000e0a41 	jmpi	e0a4 <__malloc_unlock>
    52fc:	f800283a 	ret
    5300:	100ad27a 	srli	r5,r2,9
    5304:	00c00104 	movi	r3,4
    5308:	19404a36 	bltu	r3,r5,5434 <_free_r+0x240>
    530c:	100ad1ba 	srli	r5,r2,6
    5310:	28c00e44 	addi	r3,r5,57
    5314:	18c7883a 	add	r3,r3,r3
    5318:	29400e04 	addi	r5,r5,56
    531c:	18c7883a 	add	r3,r3,r3
    5320:	18c7883a 	add	r3,r3,r3
    5324:	1909883a 	add	r4,r3,r4
    5328:	20c00017 	ldw	r3,0(r4)
    532c:	01c000b4 	movhi	r7,2
    5330:	213ffe04 	addi	r4,r4,-8
    5334:	39ea0704 	addi	r7,r7,-22500
    5338:	20c04426 	beq	r4,r3,544c <_free_r+0x258>
    533c:	01ffff04 	movi	r7,-4
    5340:	19400117 	ldw	r5,4(r3)
    5344:	29ca703a 	and	r5,r5,r7
    5348:	1140022e 	bgeu	r2,r5,5354 <_free_r+0x160>
    534c:	18c00217 	ldw	r3,8(r3)
    5350:	20fffb1e 	bne	r4,r3,5340 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005340>
    5354:	19000317 	ldw	r4,12(r3)
    5358:	31000315 	stw	r4,12(r6)
    535c:	30c00215 	stw	r3,8(r6)
    5360:	21800215 	stw	r6,8(r4)
    5364:	19800315 	stw	r6,12(r3)
    5368:	003fde06 	br	52e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70052e4>
    536c:	29c00217 	ldw	r7,8(r5)
    5370:	10c5883a 	add	r2,r2,r3
    5374:	00c000b4 	movhi	r3,2
    5378:	18ea0904 	addi	r3,r3,-22492
    537c:	38c03b26 	beq	r7,r3,546c <_free_r+0x278>
    5380:	2a000317 	ldw	r8,12(r5)
    5384:	11400054 	ori	r5,r2,1
    5388:	3087883a 	add	r3,r6,r2
    538c:	3a000315 	stw	r8,12(r7)
    5390:	41c00215 	stw	r7,8(r8)
    5394:	31400115 	stw	r5,4(r6)
    5398:	18800015 	stw	r2,0(r3)
    539c:	003fbd06 	br	5294 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005294>
    53a0:	39c0004c 	andi	r7,r7,1
    53a4:	10c5883a 	add	r2,r2,r3
    53a8:	3800071e 	bne	r7,zero,53c8 <_free_r+0x1d4>
    53ac:	81fffe17 	ldw	r7,-8(r16)
    53b0:	31cdc83a 	sub	r6,r6,r7
    53b4:	30c00317 	ldw	r3,12(r6)
    53b8:	31400217 	ldw	r5,8(r6)
    53bc:	11c5883a 	add	r2,r2,r7
    53c0:	28c00315 	stw	r3,12(r5)
    53c4:	19400215 	stw	r5,8(r3)
    53c8:	10c00054 	ori	r3,r2,1
    53cc:	30c00115 	stw	r3,4(r6)
    53d0:	00c000b4 	movhi	r3,2
    53d4:	18f05504 	addi	r3,r3,-16044
    53d8:	18c00017 	ldw	r3,0(r3)
    53dc:	21800215 	stw	r6,8(r4)
    53e0:	10ffc036 	bltu	r2,r3,52e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70052e4>
    53e4:	008000b4 	movhi	r2,2
    53e8:	10b83004 	addi	r2,r2,-8000
    53ec:	11400017 	ldw	r5,0(r2)
    53f0:	8809883a 	mov	r4,r17
    53f4:	00050d00 	call	50d0 <_malloc_trim_r>
    53f8:	003fba06 	br	52e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70052e4>
    53fc:	28c9883a 	add	r4,r5,r3
    5400:	21000117 	ldw	r4,4(r4)
    5404:	2100004c 	andi	r4,r4,1
    5408:	2000391e 	bne	r4,zero,54f0 <_free_r+0x2fc>
    540c:	29c00217 	ldw	r7,8(r5)
    5410:	29000317 	ldw	r4,12(r5)
    5414:	1885883a 	add	r2,r3,r2
    5418:	10c00054 	ori	r3,r2,1
    541c:	39000315 	stw	r4,12(r7)
    5420:	21c00215 	stw	r7,8(r4)
    5424:	30c00115 	stw	r3,4(r6)
    5428:	308d883a 	add	r6,r6,r2
    542c:	30800015 	stw	r2,0(r6)
    5430:	003fac06 	br	52e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70052e4>
    5434:	00c00504 	movi	r3,20
    5438:	19401536 	bltu	r3,r5,5490 <_free_r+0x29c>
    543c:	28c01704 	addi	r3,r5,92
    5440:	18c7883a 	add	r3,r3,r3
    5444:	294016c4 	addi	r5,r5,91
    5448:	003fb406 	br	531c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700531c>
    544c:	280bd0ba 	srai	r5,r5,2
    5450:	00c00044 	movi	r3,1
    5454:	38800117 	ldw	r2,4(r7)
    5458:	194a983a 	sll	r5,r3,r5
    545c:	2007883a 	mov	r3,r4
    5460:	2884b03a 	or	r2,r5,r2
    5464:	38800115 	stw	r2,4(r7)
    5468:	003fbb06 	br	5358 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005358>
    546c:	21800515 	stw	r6,20(r4)
    5470:	21800415 	stw	r6,16(r4)
    5474:	10c00054 	ori	r3,r2,1
    5478:	31c00315 	stw	r7,12(r6)
    547c:	31c00215 	stw	r7,8(r6)
    5480:	30c00115 	stw	r3,4(r6)
    5484:	308d883a 	add	r6,r6,r2
    5488:	30800015 	stw	r2,0(r6)
    548c:	003f9506 	br	52e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70052e4>
    5490:	00c01504 	movi	r3,84
    5494:	19400536 	bltu	r3,r5,54ac <_free_r+0x2b8>
    5498:	100ad33a 	srli	r5,r2,12
    549c:	28c01bc4 	addi	r3,r5,111
    54a0:	18c7883a 	add	r3,r3,r3
    54a4:	29401b84 	addi	r5,r5,110
    54a8:	003f9c06 	br	531c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700531c>
    54ac:	00c05504 	movi	r3,340
    54b0:	19400536 	bltu	r3,r5,54c8 <_free_r+0x2d4>
    54b4:	100ad3fa 	srli	r5,r2,15
    54b8:	28c01e04 	addi	r3,r5,120
    54bc:	18c7883a 	add	r3,r3,r3
    54c0:	29401dc4 	addi	r5,r5,119
    54c4:	003f9506 	br	531c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700531c>
    54c8:	00c15504 	movi	r3,1364
    54cc:	19400536 	bltu	r3,r5,54e4 <_free_r+0x2f0>
    54d0:	100ad4ba 	srli	r5,r2,18
    54d4:	28c01f44 	addi	r3,r5,125
    54d8:	18c7883a 	add	r3,r3,r3
    54dc:	29401f04 	addi	r5,r5,124
    54e0:	003f8e06 	br	531c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700531c>
    54e4:	00c03f84 	movi	r3,254
    54e8:	01401f84 	movi	r5,126
    54ec:	003f8b06 	br	531c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700531c>
    54f0:	10c00054 	ori	r3,r2,1
    54f4:	30c00115 	stw	r3,4(r6)
    54f8:	308d883a 	add	r6,r6,r2
    54fc:	30800015 	stw	r2,0(r6)
    5500:	003f7806 	br	52e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70052e4>

00005504 <__sfvwrite_r>:
    5504:	30800217 	ldw	r2,8(r6)
    5508:	10006726 	beq	r2,zero,56a8 <__sfvwrite_r+0x1a4>
    550c:	28c0030b 	ldhu	r3,12(r5)
    5510:	defff404 	addi	sp,sp,-48
    5514:	dd400715 	stw	r21,28(sp)
    5518:	dd000615 	stw	r20,24(sp)
    551c:	dc000215 	stw	r16,8(sp)
    5520:	dfc00b15 	stw	ra,44(sp)
    5524:	df000a15 	stw	fp,40(sp)
    5528:	ddc00915 	stw	r23,36(sp)
    552c:	dd800815 	stw	r22,32(sp)
    5530:	dcc00515 	stw	r19,20(sp)
    5534:	dc800415 	stw	r18,16(sp)
    5538:	dc400315 	stw	r17,12(sp)
    553c:	1880020c 	andi	r2,r3,8
    5540:	2821883a 	mov	r16,r5
    5544:	202b883a 	mov	r21,r4
    5548:	3029883a 	mov	r20,r6
    554c:	10002726 	beq	r2,zero,55ec <__sfvwrite_r+0xe8>
    5550:	28800417 	ldw	r2,16(r5)
    5554:	10002526 	beq	r2,zero,55ec <__sfvwrite_r+0xe8>
    5558:	1880008c 	andi	r2,r3,2
    555c:	a4400017 	ldw	r17,0(r20)
    5560:	10002a26 	beq	r2,zero,560c <__sfvwrite_r+0x108>
    5564:	05a00034 	movhi	r22,32768
    5568:	0027883a 	mov	r19,zero
    556c:	0025883a 	mov	r18,zero
    5570:	b5bf0004 	addi	r22,r22,-1024
    5574:	980d883a 	mov	r6,r19
    5578:	a809883a 	mov	r4,r21
    557c:	90004626 	beq	r18,zero,5698 <__sfvwrite_r+0x194>
    5580:	900f883a 	mov	r7,r18
    5584:	b480022e 	bgeu	r22,r18,5590 <__sfvwrite_r+0x8c>
    5588:	01e00034 	movhi	r7,32768
    558c:	39ff0004 	addi	r7,r7,-1024
    5590:	80800917 	ldw	r2,36(r16)
    5594:	81400717 	ldw	r5,28(r16)
    5598:	103ee83a 	callr	r2
    559c:	0080570e 	bge	zero,r2,56fc <__sfvwrite_r+0x1f8>
    55a0:	a0c00217 	ldw	r3,8(r20)
    55a4:	98a7883a 	add	r19,r19,r2
    55a8:	90a5c83a 	sub	r18,r18,r2
    55ac:	1885c83a 	sub	r2,r3,r2
    55b0:	a0800215 	stw	r2,8(r20)
    55b4:	103fef1e 	bne	r2,zero,5574 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005574>
    55b8:	0005883a 	mov	r2,zero
    55bc:	dfc00b17 	ldw	ra,44(sp)
    55c0:	df000a17 	ldw	fp,40(sp)
    55c4:	ddc00917 	ldw	r23,36(sp)
    55c8:	dd800817 	ldw	r22,32(sp)
    55cc:	dd400717 	ldw	r21,28(sp)
    55d0:	dd000617 	ldw	r20,24(sp)
    55d4:	dcc00517 	ldw	r19,20(sp)
    55d8:	dc800417 	ldw	r18,16(sp)
    55dc:	dc400317 	ldw	r17,12(sp)
    55e0:	dc000217 	ldw	r16,8(sp)
    55e4:	dec00c04 	addi	sp,sp,48
    55e8:	f800283a 	ret
    55ec:	800b883a 	mov	r5,r16
    55f0:	a809883a 	mov	r4,r21
    55f4:	00030ac0 	call	30ac <__swsetup_r>
    55f8:	1000eb1e 	bne	r2,zero,59a8 <__sfvwrite_r+0x4a4>
    55fc:	80c0030b 	ldhu	r3,12(r16)
    5600:	a4400017 	ldw	r17,0(r20)
    5604:	1880008c 	andi	r2,r3,2
    5608:	103fd61e 	bne	r2,zero,5564 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005564>
    560c:	1880004c 	andi	r2,r3,1
    5610:	10003f1e 	bne	r2,zero,5710 <__sfvwrite_r+0x20c>
    5614:	0039883a 	mov	fp,zero
    5618:	0025883a 	mov	r18,zero
    561c:	90001a26 	beq	r18,zero,5688 <__sfvwrite_r+0x184>
    5620:	1880800c 	andi	r2,r3,512
    5624:	84c00217 	ldw	r19,8(r16)
    5628:	10002126 	beq	r2,zero,56b0 <__sfvwrite_r+0x1ac>
    562c:	982f883a 	mov	r23,r19
    5630:	94c09336 	bltu	r18,r19,5880 <__sfvwrite_r+0x37c>
    5634:	1881200c 	andi	r2,r3,1152
    5638:	10009e1e 	bne	r2,zero,58b4 <__sfvwrite_r+0x3b0>
    563c:	81000017 	ldw	r4,0(r16)
    5640:	b80d883a 	mov	r6,r23
    5644:	e00b883a 	mov	r5,fp
    5648:	00068180 	call	6818 <memmove>
    564c:	80c00217 	ldw	r3,8(r16)
    5650:	81000017 	ldw	r4,0(r16)
    5654:	9005883a 	mov	r2,r18
    5658:	1ce7c83a 	sub	r19,r3,r19
    565c:	25cf883a 	add	r7,r4,r23
    5660:	84c00215 	stw	r19,8(r16)
    5664:	81c00015 	stw	r7,0(r16)
    5668:	a0c00217 	ldw	r3,8(r20)
    566c:	e0b9883a 	add	fp,fp,r2
    5670:	90a5c83a 	sub	r18,r18,r2
    5674:	18a7c83a 	sub	r19,r3,r2
    5678:	a4c00215 	stw	r19,8(r20)
    567c:	983fce26 	beq	r19,zero,55b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70055b8>
    5680:	80c0030b 	ldhu	r3,12(r16)
    5684:	903fe61e 	bne	r18,zero,5620 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005620>
    5688:	8f000017 	ldw	fp,0(r17)
    568c:	8c800117 	ldw	r18,4(r17)
    5690:	8c400204 	addi	r17,r17,8
    5694:	003fe106 	br	561c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700561c>
    5698:	8cc00017 	ldw	r19,0(r17)
    569c:	8c800117 	ldw	r18,4(r17)
    56a0:	8c400204 	addi	r17,r17,8
    56a4:	003fb306 	br	5574 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005574>
    56a8:	0005883a 	mov	r2,zero
    56ac:	f800283a 	ret
    56b0:	81000017 	ldw	r4,0(r16)
    56b4:	80800417 	ldw	r2,16(r16)
    56b8:	11005736 	bltu	r2,r4,5818 <__sfvwrite_r+0x314>
    56bc:	85c00517 	ldw	r23,20(r16)
    56c0:	95c05536 	bltu	r18,r23,5818 <__sfvwrite_r+0x314>
    56c4:	00a00034 	movhi	r2,32768
    56c8:	10bfffc4 	addi	r2,r2,-1
    56cc:	9009883a 	mov	r4,r18
    56d0:	1480012e 	bgeu	r2,r18,56d8 <__sfvwrite_r+0x1d4>
    56d4:	1009883a 	mov	r4,r2
    56d8:	b80b883a 	mov	r5,r23
    56dc:	000ad080 	call	ad08 <__divsi3>
    56e0:	15cf383a 	mul	r7,r2,r23
    56e4:	81400717 	ldw	r5,28(r16)
    56e8:	80800917 	ldw	r2,36(r16)
    56ec:	e00d883a 	mov	r6,fp
    56f0:	a809883a 	mov	r4,r21
    56f4:	103ee83a 	callr	r2
    56f8:	00bfdb16 	blt	zero,r2,5668 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005668>
    56fc:	8080030b 	ldhu	r2,12(r16)
    5700:	10801014 	ori	r2,r2,64
    5704:	8080030d 	sth	r2,12(r16)
    5708:	00bfffc4 	movi	r2,-1
    570c:	003fab06 	br	55bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70055bc>
    5710:	0027883a 	mov	r19,zero
    5714:	0011883a 	mov	r8,zero
    5718:	0039883a 	mov	fp,zero
    571c:	0025883a 	mov	r18,zero
    5720:	90001f26 	beq	r18,zero,57a0 <__sfvwrite_r+0x29c>
    5724:	40005a26 	beq	r8,zero,5890 <__sfvwrite_r+0x38c>
    5728:	982d883a 	mov	r22,r19
    572c:	94c0012e 	bgeu	r18,r19,5734 <__sfvwrite_r+0x230>
    5730:	902d883a 	mov	r22,r18
    5734:	81000017 	ldw	r4,0(r16)
    5738:	80800417 	ldw	r2,16(r16)
    573c:	b02f883a 	mov	r23,r22
    5740:	81c00517 	ldw	r7,20(r16)
    5744:	1100032e 	bgeu	r2,r4,5754 <__sfvwrite_r+0x250>
    5748:	80c00217 	ldw	r3,8(r16)
    574c:	38c7883a 	add	r3,r7,r3
    5750:	1d801816 	blt	r3,r22,57b4 <__sfvwrite_r+0x2b0>
    5754:	b1c03e16 	blt	r22,r7,5850 <__sfvwrite_r+0x34c>
    5758:	80800917 	ldw	r2,36(r16)
    575c:	81400717 	ldw	r5,28(r16)
    5760:	e00d883a 	mov	r6,fp
    5764:	da000115 	stw	r8,4(sp)
    5768:	a809883a 	mov	r4,r21
    576c:	103ee83a 	callr	r2
    5770:	102f883a 	mov	r23,r2
    5774:	da000117 	ldw	r8,4(sp)
    5778:	00bfe00e 	bge	zero,r2,56fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70056fc>
    577c:	9de7c83a 	sub	r19,r19,r23
    5780:	98001f26 	beq	r19,zero,5800 <__sfvwrite_r+0x2fc>
    5784:	a0800217 	ldw	r2,8(r20)
    5788:	e5f9883a 	add	fp,fp,r23
    578c:	95e5c83a 	sub	r18,r18,r23
    5790:	15efc83a 	sub	r23,r2,r23
    5794:	a5c00215 	stw	r23,8(r20)
    5798:	b83f8726 	beq	r23,zero,55b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70055b8>
    579c:	903fe11e 	bne	r18,zero,5724 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005724>
    57a0:	8f000017 	ldw	fp,0(r17)
    57a4:	8c800117 	ldw	r18,4(r17)
    57a8:	0011883a 	mov	r8,zero
    57ac:	8c400204 	addi	r17,r17,8
    57b0:	003fdb06 	br	5720 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005720>
    57b4:	180d883a 	mov	r6,r3
    57b8:	e00b883a 	mov	r5,fp
    57bc:	da000115 	stw	r8,4(sp)
    57c0:	d8c00015 	stw	r3,0(sp)
    57c4:	00068180 	call	6818 <memmove>
    57c8:	d8c00017 	ldw	r3,0(sp)
    57cc:	80800017 	ldw	r2,0(r16)
    57d0:	800b883a 	mov	r5,r16
    57d4:	a809883a 	mov	r4,r21
    57d8:	10c5883a 	add	r2,r2,r3
    57dc:	80800015 	stw	r2,0(r16)
    57e0:	d8c00015 	stw	r3,0(sp)
    57e4:	0004ca40 	call	4ca4 <_fflush_r>
    57e8:	d8c00017 	ldw	r3,0(sp)
    57ec:	da000117 	ldw	r8,4(sp)
    57f0:	103fc21e 	bne	r2,zero,56fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70056fc>
    57f4:	182f883a 	mov	r23,r3
    57f8:	9de7c83a 	sub	r19,r19,r23
    57fc:	983fe11e 	bne	r19,zero,5784 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005784>
    5800:	800b883a 	mov	r5,r16
    5804:	a809883a 	mov	r4,r21
    5808:	0004ca40 	call	4ca4 <_fflush_r>
    580c:	103fbb1e 	bne	r2,zero,56fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70056fc>
    5810:	0011883a 	mov	r8,zero
    5814:	003fdb06 	br	5784 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005784>
    5818:	94c0012e 	bgeu	r18,r19,5820 <__sfvwrite_r+0x31c>
    581c:	9027883a 	mov	r19,r18
    5820:	980d883a 	mov	r6,r19
    5824:	e00b883a 	mov	r5,fp
    5828:	00068180 	call	6818 <memmove>
    582c:	80800217 	ldw	r2,8(r16)
    5830:	80c00017 	ldw	r3,0(r16)
    5834:	14c5c83a 	sub	r2,r2,r19
    5838:	1cc7883a 	add	r3,r3,r19
    583c:	80800215 	stw	r2,8(r16)
    5840:	80c00015 	stw	r3,0(r16)
    5844:	10004326 	beq	r2,zero,5954 <__sfvwrite_r+0x450>
    5848:	9805883a 	mov	r2,r19
    584c:	003f8606 	br	5668 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005668>
    5850:	b00d883a 	mov	r6,r22
    5854:	e00b883a 	mov	r5,fp
    5858:	da000115 	stw	r8,4(sp)
    585c:	00068180 	call	6818 <memmove>
    5860:	80800217 	ldw	r2,8(r16)
    5864:	80c00017 	ldw	r3,0(r16)
    5868:	da000117 	ldw	r8,4(sp)
    586c:	1585c83a 	sub	r2,r2,r22
    5870:	1dad883a 	add	r22,r3,r22
    5874:	80800215 	stw	r2,8(r16)
    5878:	85800015 	stw	r22,0(r16)
    587c:	003fbf06 	br	577c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700577c>
    5880:	81000017 	ldw	r4,0(r16)
    5884:	9027883a 	mov	r19,r18
    5888:	902f883a 	mov	r23,r18
    588c:	003f6c06 	br	5640 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005640>
    5890:	900d883a 	mov	r6,r18
    5894:	01400284 	movi	r5,10
    5898:	e009883a 	mov	r4,fp
    589c:	00065ec0 	call	65ec <memchr>
    58a0:	10003e26 	beq	r2,zero,599c <__sfvwrite_r+0x498>
    58a4:	10800044 	addi	r2,r2,1
    58a8:	1727c83a 	sub	r19,r2,fp
    58ac:	02000044 	movi	r8,1
    58b0:	003f9d06 	br	5728 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005728>
    58b4:	80800517 	ldw	r2,20(r16)
    58b8:	81400417 	ldw	r5,16(r16)
    58bc:	81c00017 	ldw	r7,0(r16)
    58c0:	10a7883a 	add	r19,r2,r2
    58c4:	9885883a 	add	r2,r19,r2
    58c8:	1026d7fa 	srli	r19,r2,31
    58cc:	396dc83a 	sub	r22,r7,r5
    58d0:	b1000044 	addi	r4,r22,1
    58d4:	9885883a 	add	r2,r19,r2
    58d8:	1027d07a 	srai	r19,r2,1
    58dc:	2485883a 	add	r2,r4,r18
    58e0:	980d883a 	mov	r6,r19
    58e4:	9880022e 	bgeu	r19,r2,58f0 <__sfvwrite_r+0x3ec>
    58e8:	1027883a 	mov	r19,r2
    58ec:	100d883a 	mov	r6,r2
    58f0:	18c1000c 	andi	r3,r3,1024
    58f4:	18001c26 	beq	r3,zero,5968 <__sfvwrite_r+0x464>
    58f8:	300b883a 	mov	r5,r6
    58fc:	a809883a 	mov	r4,r21
    5900:	0005de00 	call	5de0 <_malloc_r>
    5904:	102f883a 	mov	r23,r2
    5908:	10002926 	beq	r2,zero,59b0 <__sfvwrite_r+0x4ac>
    590c:	81400417 	ldw	r5,16(r16)
    5910:	b00d883a 	mov	r6,r22
    5914:	1009883a 	mov	r4,r2
    5918:	00066d00 	call	66d0 <memcpy>
    591c:	8080030b 	ldhu	r2,12(r16)
    5920:	00fedfc4 	movi	r3,-1153
    5924:	10c4703a 	and	r2,r2,r3
    5928:	10802014 	ori	r2,r2,128
    592c:	8080030d 	sth	r2,12(r16)
    5930:	bd89883a 	add	r4,r23,r22
    5934:	9d8fc83a 	sub	r7,r19,r22
    5938:	85c00415 	stw	r23,16(r16)
    593c:	84c00515 	stw	r19,20(r16)
    5940:	81000015 	stw	r4,0(r16)
    5944:	9027883a 	mov	r19,r18
    5948:	81c00215 	stw	r7,8(r16)
    594c:	902f883a 	mov	r23,r18
    5950:	003f3b06 	br	5640 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005640>
    5954:	800b883a 	mov	r5,r16
    5958:	a809883a 	mov	r4,r21
    595c:	0004ca40 	call	4ca4 <_fflush_r>
    5960:	103fb926 	beq	r2,zero,5848 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005848>
    5964:	003f6506 	br	56fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70056fc>
    5968:	a809883a 	mov	r4,r21
    596c:	0007a980 	call	7a98 <_realloc_r>
    5970:	102f883a 	mov	r23,r2
    5974:	103fee1e 	bne	r2,zero,5930 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005930>
    5978:	81400417 	ldw	r5,16(r16)
    597c:	a809883a 	mov	r4,r21
    5980:	00051f40 	call	51f4 <_free_r>
    5984:	8080030b 	ldhu	r2,12(r16)
    5988:	00ffdfc4 	movi	r3,-129
    598c:	1884703a 	and	r2,r3,r2
    5990:	00c00304 	movi	r3,12
    5994:	a8c00015 	stw	r3,0(r21)
    5998:	003f5906 	br	5700 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005700>
    599c:	94c00044 	addi	r19,r18,1
    59a0:	02000044 	movi	r8,1
    59a4:	003f6006 	br	5728 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005728>
    59a8:	00bfffc4 	movi	r2,-1
    59ac:	003f0306 	br	55bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70055bc>
    59b0:	00800304 	movi	r2,12
    59b4:	a8800015 	stw	r2,0(r21)
    59b8:	8080030b 	ldhu	r2,12(r16)
    59bc:	003f5006 	br	5700 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005700>

000059c0 <_fwalk>:
    59c0:	defff704 	addi	sp,sp,-36
    59c4:	dd000415 	stw	r20,16(sp)
    59c8:	dfc00815 	stw	ra,32(sp)
    59cc:	ddc00715 	stw	r23,28(sp)
    59d0:	dd800615 	stw	r22,24(sp)
    59d4:	dd400515 	stw	r21,20(sp)
    59d8:	dcc00315 	stw	r19,12(sp)
    59dc:	dc800215 	stw	r18,8(sp)
    59e0:	dc400115 	stw	r17,4(sp)
    59e4:	dc000015 	stw	r16,0(sp)
    59e8:	2500b804 	addi	r20,r4,736
    59ec:	a0002326 	beq	r20,zero,5a7c <_fwalk+0xbc>
    59f0:	282b883a 	mov	r21,r5
    59f4:	002f883a 	mov	r23,zero
    59f8:	05800044 	movi	r22,1
    59fc:	04ffffc4 	movi	r19,-1
    5a00:	a4400117 	ldw	r17,4(r20)
    5a04:	a4800217 	ldw	r18,8(r20)
    5a08:	8c7fffc4 	addi	r17,r17,-1
    5a0c:	88000d16 	blt	r17,zero,5a44 <_fwalk+0x84>
    5a10:	94000304 	addi	r16,r18,12
    5a14:	94800384 	addi	r18,r18,14
    5a18:	8080000b 	ldhu	r2,0(r16)
    5a1c:	8c7fffc4 	addi	r17,r17,-1
    5a20:	813ffd04 	addi	r4,r16,-12
    5a24:	b080042e 	bgeu	r22,r2,5a38 <_fwalk+0x78>
    5a28:	9080000f 	ldh	r2,0(r18)
    5a2c:	14c00226 	beq	r2,r19,5a38 <_fwalk+0x78>
    5a30:	a83ee83a 	callr	r21
    5a34:	b8aeb03a 	or	r23,r23,r2
    5a38:	84001a04 	addi	r16,r16,104
    5a3c:	94801a04 	addi	r18,r18,104
    5a40:	8cfff51e 	bne	r17,r19,5a18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005a18>
    5a44:	a5000017 	ldw	r20,0(r20)
    5a48:	a03fed1e 	bne	r20,zero,5a00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005a00>
    5a4c:	b805883a 	mov	r2,r23
    5a50:	dfc00817 	ldw	ra,32(sp)
    5a54:	ddc00717 	ldw	r23,28(sp)
    5a58:	dd800617 	ldw	r22,24(sp)
    5a5c:	dd400517 	ldw	r21,20(sp)
    5a60:	dd000417 	ldw	r20,16(sp)
    5a64:	dcc00317 	ldw	r19,12(sp)
    5a68:	dc800217 	ldw	r18,8(sp)
    5a6c:	dc400117 	ldw	r17,4(sp)
    5a70:	dc000017 	ldw	r16,0(sp)
    5a74:	dec00904 	addi	sp,sp,36
    5a78:	f800283a 	ret
    5a7c:	002f883a 	mov	r23,zero
    5a80:	003ff206 	br	5a4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005a4c>

00005a84 <_fwalk_reent>:
    5a84:	defff704 	addi	sp,sp,-36
    5a88:	dd000415 	stw	r20,16(sp)
    5a8c:	dfc00815 	stw	ra,32(sp)
    5a90:	ddc00715 	stw	r23,28(sp)
    5a94:	dd800615 	stw	r22,24(sp)
    5a98:	dd400515 	stw	r21,20(sp)
    5a9c:	dcc00315 	stw	r19,12(sp)
    5aa0:	dc800215 	stw	r18,8(sp)
    5aa4:	dc400115 	stw	r17,4(sp)
    5aa8:	dc000015 	stw	r16,0(sp)
    5aac:	2500b804 	addi	r20,r4,736
    5ab0:	a0002326 	beq	r20,zero,5b40 <_fwalk_reent+0xbc>
    5ab4:	282b883a 	mov	r21,r5
    5ab8:	2027883a 	mov	r19,r4
    5abc:	002f883a 	mov	r23,zero
    5ac0:	05800044 	movi	r22,1
    5ac4:	04bfffc4 	movi	r18,-1
    5ac8:	a4400117 	ldw	r17,4(r20)
    5acc:	a4000217 	ldw	r16,8(r20)
    5ad0:	8c7fffc4 	addi	r17,r17,-1
    5ad4:	88000c16 	blt	r17,zero,5b08 <_fwalk_reent+0x84>
    5ad8:	84000304 	addi	r16,r16,12
    5adc:	8080000b 	ldhu	r2,0(r16)
    5ae0:	8c7fffc4 	addi	r17,r17,-1
    5ae4:	817ffd04 	addi	r5,r16,-12
    5ae8:	b080052e 	bgeu	r22,r2,5b00 <_fwalk_reent+0x7c>
    5aec:	8080008f 	ldh	r2,2(r16)
    5af0:	9809883a 	mov	r4,r19
    5af4:	14800226 	beq	r2,r18,5b00 <_fwalk_reent+0x7c>
    5af8:	a83ee83a 	callr	r21
    5afc:	b8aeb03a 	or	r23,r23,r2
    5b00:	84001a04 	addi	r16,r16,104
    5b04:	8cbff51e 	bne	r17,r18,5adc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005adc>
    5b08:	a5000017 	ldw	r20,0(r20)
    5b0c:	a03fee1e 	bne	r20,zero,5ac8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005ac8>
    5b10:	b805883a 	mov	r2,r23
    5b14:	dfc00817 	ldw	ra,32(sp)
    5b18:	ddc00717 	ldw	r23,28(sp)
    5b1c:	dd800617 	ldw	r22,24(sp)
    5b20:	dd400517 	ldw	r21,20(sp)
    5b24:	dd000417 	ldw	r20,16(sp)
    5b28:	dcc00317 	ldw	r19,12(sp)
    5b2c:	dc800217 	ldw	r18,8(sp)
    5b30:	dc400117 	ldw	r17,4(sp)
    5b34:	dc000017 	ldw	r16,0(sp)
    5b38:	dec00904 	addi	sp,sp,36
    5b3c:	f800283a 	ret
    5b40:	002f883a 	mov	r23,zero
    5b44:	003ff206 	br	5b10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005b10>

00005b48 <_setlocale_r>:
    5b48:	30001b26 	beq	r6,zero,5bb8 <_setlocale_r+0x70>
    5b4c:	014000b4 	movhi	r5,2
    5b50:	defffe04 	addi	sp,sp,-8
    5b54:	2967a504 	addi	r5,r5,-24940
    5b58:	3009883a 	mov	r4,r6
    5b5c:	dc000015 	stw	r16,0(sp)
    5b60:	dfc00115 	stw	ra,4(sp)
    5b64:	3021883a 	mov	r16,r6
    5b68:	00082000 	call	8200 <strcmp>
    5b6c:	1000061e 	bne	r2,zero,5b88 <_setlocale_r+0x40>
    5b70:	008000b4 	movhi	r2,2
    5b74:	10a78604 	addi	r2,r2,-25064
    5b78:	dfc00117 	ldw	ra,4(sp)
    5b7c:	dc000017 	ldw	r16,0(sp)
    5b80:	dec00204 	addi	sp,sp,8
    5b84:	f800283a 	ret
    5b88:	014000b4 	movhi	r5,2
    5b8c:	29678604 	addi	r5,r5,-25064
    5b90:	8009883a 	mov	r4,r16
    5b94:	00082000 	call	8200 <strcmp>
    5b98:	103ff526 	beq	r2,zero,5b70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005b70>
    5b9c:	014000b4 	movhi	r5,2
    5ba0:	29679004 	addi	r5,r5,-25024
    5ba4:	8009883a 	mov	r4,r16
    5ba8:	00082000 	call	8200 <strcmp>
    5bac:	103ff026 	beq	r2,zero,5b70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005b70>
    5bb0:	0005883a 	mov	r2,zero
    5bb4:	003ff006 	br	5b78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005b78>
    5bb8:	008000b4 	movhi	r2,2
    5bbc:	10a78604 	addi	r2,r2,-25064
    5bc0:	f800283a 	ret

00005bc4 <__locale_charset>:
    5bc4:	008000b4 	movhi	r2,2
    5bc8:	10a9f104 	addi	r2,r2,-22588
    5bcc:	f800283a 	ret

00005bd0 <__locale_mb_cur_max>:
    5bd0:	008000b4 	movhi	r2,2
    5bd4:	10b05304 	addi	r2,r2,-16052
    5bd8:	10800017 	ldw	r2,0(r2)
    5bdc:	f800283a 	ret

00005be0 <__locale_msgcharset>:
    5be0:	008000b4 	movhi	r2,2
    5be4:	10a9e904 	addi	r2,r2,-22620
    5be8:	f800283a 	ret

00005bec <__locale_cjk_lang>:
    5bec:	0005883a 	mov	r2,zero
    5bf0:	f800283a 	ret

00005bf4 <_localeconv_r>:
    5bf4:	008000b4 	movhi	r2,2
    5bf8:	10a9f904 	addi	r2,r2,-22556
    5bfc:	f800283a 	ret

00005c00 <setlocale>:
    5c00:	008000b4 	movhi	r2,2
    5c04:	10b05204 	addi	r2,r2,-16056
    5c08:	280d883a 	mov	r6,r5
    5c0c:	200b883a 	mov	r5,r4
    5c10:	11000017 	ldw	r4,0(r2)
    5c14:	0005b481 	jmpi	5b48 <_setlocale_r>

00005c18 <localeconv>:
    5c18:	008000b4 	movhi	r2,2
    5c1c:	10a9f904 	addi	r2,r2,-22556
    5c20:	f800283a 	ret

00005c24 <__smakebuf_r>:
    5c24:	2880030b 	ldhu	r2,12(r5)
    5c28:	10c0008c 	andi	r3,r2,2
    5c2c:	1800411e 	bne	r3,zero,5d34 <__smakebuf_r+0x110>
    5c30:	deffec04 	addi	sp,sp,-80
    5c34:	dc000f15 	stw	r16,60(sp)
    5c38:	2821883a 	mov	r16,r5
    5c3c:	2940038f 	ldh	r5,14(r5)
    5c40:	dc401015 	stw	r17,64(sp)
    5c44:	dfc01315 	stw	ra,76(sp)
    5c48:	dcc01215 	stw	r19,72(sp)
    5c4c:	dc801115 	stw	r18,68(sp)
    5c50:	2023883a 	mov	r17,r4
    5c54:	28001c16 	blt	r5,zero,5cc8 <__smakebuf_r+0xa4>
    5c58:	d80d883a 	mov	r6,sp
    5c5c:	0009da80 	call	9da8 <_fstat_r>
    5c60:	10001816 	blt	r2,zero,5cc4 <__smakebuf_r+0xa0>
    5c64:	d8800117 	ldw	r2,4(sp)
    5c68:	00e00014 	movui	r3,32768
    5c6c:	10bc000c 	andi	r2,r2,61440
    5c70:	14c80020 	cmpeqi	r19,r2,8192
    5c74:	10c03726 	beq	r2,r3,5d54 <__smakebuf_r+0x130>
    5c78:	80c0030b 	ldhu	r3,12(r16)
    5c7c:	18c20014 	ori	r3,r3,2048
    5c80:	80c0030d 	sth	r3,12(r16)
    5c84:	00c80004 	movi	r3,8192
    5c88:	10c0521e 	bne	r2,r3,5dd4 <__smakebuf_r+0x1b0>
    5c8c:	8140038f 	ldh	r5,14(r16)
    5c90:	8809883a 	mov	r4,r17
    5c94:	0009e040 	call	9e04 <_isatty_r>
    5c98:	10004c26 	beq	r2,zero,5dcc <__smakebuf_r+0x1a8>
    5c9c:	8080030b 	ldhu	r2,12(r16)
    5ca0:	80c010c4 	addi	r3,r16,67
    5ca4:	80c00015 	stw	r3,0(r16)
    5ca8:	10800054 	ori	r2,r2,1
    5cac:	8080030d 	sth	r2,12(r16)
    5cb0:	00800044 	movi	r2,1
    5cb4:	80c00415 	stw	r3,16(r16)
    5cb8:	80800515 	stw	r2,20(r16)
    5cbc:	04810004 	movi	r18,1024
    5cc0:	00000706 	br	5ce0 <__smakebuf_r+0xbc>
    5cc4:	8080030b 	ldhu	r2,12(r16)
    5cc8:	10c0200c 	andi	r3,r2,128
    5ccc:	18001f1e 	bne	r3,zero,5d4c <__smakebuf_r+0x128>
    5cd0:	04810004 	movi	r18,1024
    5cd4:	10820014 	ori	r2,r2,2048
    5cd8:	8080030d 	sth	r2,12(r16)
    5cdc:	0027883a 	mov	r19,zero
    5ce0:	900b883a 	mov	r5,r18
    5ce4:	8809883a 	mov	r4,r17
    5ce8:	0005de00 	call	5de0 <_malloc_r>
    5cec:	10002c26 	beq	r2,zero,5da0 <__smakebuf_r+0x17c>
    5cf0:	80c0030b 	ldhu	r3,12(r16)
    5cf4:	01000034 	movhi	r4,0
    5cf8:	21134e04 	addi	r4,r4,19768
    5cfc:	89000f15 	stw	r4,60(r17)
    5d00:	18c02014 	ori	r3,r3,128
    5d04:	80c0030d 	sth	r3,12(r16)
    5d08:	80800015 	stw	r2,0(r16)
    5d0c:	80800415 	stw	r2,16(r16)
    5d10:	84800515 	stw	r18,20(r16)
    5d14:	98001a1e 	bne	r19,zero,5d80 <__smakebuf_r+0x15c>
    5d18:	dfc01317 	ldw	ra,76(sp)
    5d1c:	dcc01217 	ldw	r19,72(sp)
    5d20:	dc801117 	ldw	r18,68(sp)
    5d24:	dc401017 	ldw	r17,64(sp)
    5d28:	dc000f17 	ldw	r16,60(sp)
    5d2c:	dec01404 	addi	sp,sp,80
    5d30:	f800283a 	ret
    5d34:	288010c4 	addi	r2,r5,67
    5d38:	28800015 	stw	r2,0(r5)
    5d3c:	28800415 	stw	r2,16(r5)
    5d40:	00800044 	movi	r2,1
    5d44:	28800515 	stw	r2,20(r5)
    5d48:	f800283a 	ret
    5d4c:	04801004 	movi	r18,64
    5d50:	003fe006 	br	5cd4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005cd4>
    5d54:	81000a17 	ldw	r4,40(r16)
    5d58:	00c00074 	movhi	r3,1
    5d5c:	18e06704 	addi	r3,r3,-32356
    5d60:	20ffc51e 	bne	r4,r3,5c78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005c78>
    5d64:	8080030b 	ldhu	r2,12(r16)
    5d68:	04810004 	movi	r18,1024
    5d6c:	84801315 	stw	r18,76(r16)
    5d70:	1484b03a 	or	r2,r2,r18
    5d74:	8080030d 	sth	r2,12(r16)
    5d78:	0027883a 	mov	r19,zero
    5d7c:	003fd806 	br	5ce0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005ce0>
    5d80:	8140038f 	ldh	r5,14(r16)
    5d84:	8809883a 	mov	r4,r17
    5d88:	0009e040 	call	9e04 <_isatty_r>
    5d8c:	103fe226 	beq	r2,zero,5d18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005d18>
    5d90:	8080030b 	ldhu	r2,12(r16)
    5d94:	10800054 	ori	r2,r2,1
    5d98:	8080030d 	sth	r2,12(r16)
    5d9c:	003fde06 	br	5d18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005d18>
    5da0:	8080030b 	ldhu	r2,12(r16)
    5da4:	10c0800c 	andi	r3,r2,512
    5da8:	183fdb1e 	bne	r3,zero,5d18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005d18>
    5dac:	10800094 	ori	r2,r2,2
    5db0:	80c010c4 	addi	r3,r16,67
    5db4:	8080030d 	sth	r2,12(r16)
    5db8:	00800044 	movi	r2,1
    5dbc:	80c00015 	stw	r3,0(r16)
    5dc0:	80c00415 	stw	r3,16(r16)
    5dc4:	80800515 	stw	r2,20(r16)
    5dc8:	003fd306 	br	5d18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005d18>
    5dcc:	04810004 	movi	r18,1024
    5dd0:	003fc306 	br	5ce0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005ce0>
    5dd4:	0027883a 	mov	r19,zero
    5dd8:	04810004 	movi	r18,1024
    5ddc:	003fc006 	br	5ce0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005ce0>

00005de0 <_malloc_r>:
    5de0:	defff504 	addi	sp,sp,-44
    5de4:	dc800315 	stw	r18,12(sp)
    5de8:	dfc00a15 	stw	ra,40(sp)
    5dec:	df000915 	stw	fp,36(sp)
    5df0:	ddc00815 	stw	r23,32(sp)
    5df4:	dd800715 	stw	r22,28(sp)
    5df8:	dd400615 	stw	r21,24(sp)
    5dfc:	dd000515 	stw	r20,20(sp)
    5e00:	dcc00415 	stw	r19,16(sp)
    5e04:	dc400215 	stw	r17,8(sp)
    5e08:	dc000115 	stw	r16,4(sp)
    5e0c:	288002c4 	addi	r2,r5,11
    5e10:	00c00584 	movi	r3,22
    5e14:	2025883a 	mov	r18,r4
    5e18:	18807f2e 	bgeu	r3,r2,6018 <_malloc_r+0x238>
    5e1c:	047ffe04 	movi	r17,-8
    5e20:	1462703a 	and	r17,r2,r17
    5e24:	8800a316 	blt	r17,zero,60b4 <_malloc_r+0x2d4>
    5e28:	8940a236 	bltu	r17,r5,60b4 <_malloc_r+0x2d4>
    5e2c:	000df840 	call	df84 <__malloc_lock>
    5e30:	00807dc4 	movi	r2,503
    5e34:	1441e92e 	bgeu	r2,r17,65dc <_malloc_r+0x7fc>
    5e38:	8804d27a 	srli	r2,r17,9
    5e3c:	1000a126 	beq	r2,zero,60c4 <_malloc_r+0x2e4>
    5e40:	00c00104 	movi	r3,4
    5e44:	18811e36 	bltu	r3,r2,62c0 <_malloc_r+0x4e0>
    5e48:	8804d1ba 	srli	r2,r17,6
    5e4c:	12000e44 	addi	r8,r2,57
    5e50:	11c00e04 	addi	r7,r2,56
    5e54:	4209883a 	add	r4,r8,r8
    5e58:	04c000b4 	movhi	r19,2
    5e5c:	2109883a 	add	r4,r4,r4
    5e60:	9cea0704 	addi	r19,r19,-22500
    5e64:	2109883a 	add	r4,r4,r4
    5e68:	9909883a 	add	r4,r19,r4
    5e6c:	24000117 	ldw	r16,4(r4)
    5e70:	213ffe04 	addi	r4,r4,-8
    5e74:	24009726 	beq	r4,r16,60d4 <_malloc_r+0x2f4>
    5e78:	80800117 	ldw	r2,4(r16)
    5e7c:	01bfff04 	movi	r6,-4
    5e80:	014003c4 	movi	r5,15
    5e84:	1184703a 	and	r2,r2,r6
    5e88:	1447c83a 	sub	r3,r2,r17
    5e8c:	28c00716 	blt	r5,r3,5eac <_malloc_r+0xcc>
    5e90:	1800920e 	bge	r3,zero,60dc <_malloc_r+0x2fc>
    5e94:	84000317 	ldw	r16,12(r16)
    5e98:	24008e26 	beq	r4,r16,60d4 <_malloc_r+0x2f4>
    5e9c:	80800117 	ldw	r2,4(r16)
    5ea0:	1184703a 	and	r2,r2,r6
    5ea4:	1447c83a 	sub	r3,r2,r17
    5ea8:	28fff90e 	bge	r5,r3,5e90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005e90>
    5eac:	3809883a 	mov	r4,r7
    5eb0:	018000b4 	movhi	r6,2
    5eb4:	9c000417 	ldw	r16,16(r19)
    5eb8:	31aa0704 	addi	r6,r6,-22500
    5ebc:	32000204 	addi	r8,r6,8
    5ec0:	82013426 	beq	r16,r8,6394 <_malloc_r+0x5b4>
    5ec4:	80c00117 	ldw	r3,4(r16)
    5ec8:	00bfff04 	movi	r2,-4
    5ecc:	188e703a 	and	r7,r3,r2
    5ed0:	3c45c83a 	sub	r2,r7,r17
    5ed4:	00c003c4 	movi	r3,15
    5ed8:	18811f16 	blt	r3,r2,6358 <_malloc_r+0x578>
    5edc:	32000515 	stw	r8,20(r6)
    5ee0:	32000415 	stw	r8,16(r6)
    5ee4:	10007f0e 	bge	r2,zero,60e4 <_malloc_r+0x304>
    5ee8:	00807fc4 	movi	r2,511
    5eec:	11c0fd36 	bltu	r2,r7,62e4 <_malloc_r+0x504>
    5ef0:	3806d0fa 	srli	r3,r7,3
    5ef4:	01c00044 	movi	r7,1
    5ef8:	30800117 	ldw	r2,4(r6)
    5efc:	19400044 	addi	r5,r3,1
    5f00:	294b883a 	add	r5,r5,r5
    5f04:	1807d0ba 	srai	r3,r3,2
    5f08:	294b883a 	add	r5,r5,r5
    5f0c:	294b883a 	add	r5,r5,r5
    5f10:	298b883a 	add	r5,r5,r6
    5f14:	38c6983a 	sll	r3,r7,r3
    5f18:	29c00017 	ldw	r7,0(r5)
    5f1c:	2a7ffe04 	addi	r9,r5,-8
    5f20:	1886b03a 	or	r3,r3,r2
    5f24:	82400315 	stw	r9,12(r16)
    5f28:	81c00215 	stw	r7,8(r16)
    5f2c:	30c00115 	stw	r3,4(r6)
    5f30:	2c000015 	stw	r16,0(r5)
    5f34:	3c000315 	stw	r16,12(r7)
    5f38:	2005d0ba 	srai	r2,r4,2
    5f3c:	01400044 	movi	r5,1
    5f40:	288a983a 	sll	r5,r5,r2
    5f44:	19406f36 	bltu	r3,r5,6104 <_malloc_r+0x324>
    5f48:	28c4703a 	and	r2,r5,r3
    5f4c:	10000a1e 	bne	r2,zero,5f78 <_malloc_r+0x198>
    5f50:	00bfff04 	movi	r2,-4
    5f54:	294b883a 	add	r5,r5,r5
    5f58:	2088703a 	and	r4,r4,r2
    5f5c:	28c4703a 	and	r2,r5,r3
    5f60:	21000104 	addi	r4,r4,4
    5f64:	1000041e 	bne	r2,zero,5f78 <_malloc_r+0x198>
    5f68:	294b883a 	add	r5,r5,r5
    5f6c:	28c4703a 	and	r2,r5,r3
    5f70:	21000104 	addi	r4,r4,4
    5f74:	103ffc26 	beq	r2,zero,5f68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005f68>
    5f78:	02bfff04 	movi	r10,-4
    5f7c:	024003c4 	movi	r9,15
    5f80:	21800044 	addi	r6,r4,1
    5f84:	318d883a 	add	r6,r6,r6
    5f88:	318d883a 	add	r6,r6,r6
    5f8c:	318d883a 	add	r6,r6,r6
    5f90:	998d883a 	add	r6,r19,r6
    5f94:	333ffe04 	addi	r12,r6,-8
    5f98:	2017883a 	mov	r11,r4
    5f9c:	31800104 	addi	r6,r6,4
    5fa0:	34000017 	ldw	r16,0(r6)
    5fa4:	31fffd04 	addi	r7,r6,-12
    5fa8:	81c0041e 	bne	r16,r7,5fbc <_malloc_r+0x1dc>
    5fac:	0000fb06 	br	639c <_malloc_r+0x5bc>
    5fb0:	1801030e 	bge	r3,zero,63c0 <_malloc_r+0x5e0>
    5fb4:	84000317 	ldw	r16,12(r16)
    5fb8:	81c0f826 	beq	r16,r7,639c <_malloc_r+0x5bc>
    5fbc:	80800117 	ldw	r2,4(r16)
    5fc0:	1284703a 	and	r2,r2,r10
    5fc4:	1447c83a 	sub	r3,r2,r17
    5fc8:	48fff90e 	bge	r9,r3,5fb0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005fb0>
    5fcc:	80800317 	ldw	r2,12(r16)
    5fd0:	81000217 	ldw	r4,8(r16)
    5fd4:	89400054 	ori	r5,r17,1
    5fd8:	81400115 	stw	r5,4(r16)
    5fdc:	20800315 	stw	r2,12(r4)
    5fe0:	11000215 	stw	r4,8(r2)
    5fe4:	8463883a 	add	r17,r16,r17
    5fe8:	9c400515 	stw	r17,20(r19)
    5fec:	9c400415 	stw	r17,16(r19)
    5ff0:	18800054 	ori	r2,r3,1
    5ff4:	88800115 	stw	r2,4(r17)
    5ff8:	8a000315 	stw	r8,12(r17)
    5ffc:	8a000215 	stw	r8,8(r17)
    6000:	88e3883a 	add	r17,r17,r3
    6004:	88c00015 	stw	r3,0(r17)
    6008:	9009883a 	mov	r4,r18
    600c:	000e0a40 	call	e0a4 <__malloc_unlock>
    6010:	80800204 	addi	r2,r16,8
    6014:	00001b06 	br	6084 <_malloc_r+0x2a4>
    6018:	04400404 	movi	r17,16
    601c:	89402536 	bltu	r17,r5,60b4 <_malloc_r+0x2d4>
    6020:	000df840 	call	df84 <__malloc_lock>
    6024:	00800184 	movi	r2,6
    6028:	01000084 	movi	r4,2
    602c:	04c000b4 	movhi	r19,2
    6030:	1085883a 	add	r2,r2,r2
    6034:	9cea0704 	addi	r19,r19,-22500
    6038:	1085883a 	add	r2,r2,r2
    603c:	9885883a 	add	r2,r19,r2
    6040:	14000117 	ldw	r16,4(r2)
    6044:	10fffe04 	addi	r3,r2,-8
    6048:	80c0d926 	beq	r16,r3,63b0 <_malloc_r+0x5d0>
    604c:	80c00117 	ldw	r3,4(r16)
    6050:	81000317 	ldw	r4,12(r16)
    6054:	00bfff04 	movi	r2,-4
    6058:	1884703a 	and	r2,r3,r2
    605c:	81400217 	ldw	r5,8(r16)
    6060:	8085883a 	add	r2,r16,r2
    6064:	10c00117 	ldw	r3,4(r2)
    6068:	29000315 	stw	r4,12(r5)
    606c:	21400215 	stw	r5,8(r4)
    6070:	18c00054 	ori	r3,r3,1
    6074:	10c00115 	stw	r3,4(r2)
    6078:	9009883a 	mov	r4,r18
    607c:	000e0a40 	call	e0a4 <__malloc_unlock>
    6080:	80800204 	addi	r2,r16,8
    6084:	dfc00a17 	ldw	ra,40(sp)
    6088:	df000917 	ldw	fp,36(sp)
    608c:	ddc00817 	ldw	r23,32(sp)
    6090:	dd800717 	ldw	r22,28(sp)
    6094:	dd400617 	ldw	r21,24(sp)
    6098:	dd000517 	ldw	r20,20(sp)
    609c:	dcc00417 	ldw	r19,16(sp)
    60a0:	dc800317 	ldw	r18,12(sp)
    60a4:	dc400217 	ldw	r17,8(sp)
    60a8:	dc000117 	ldw	r16,4(sp)
    60ac:	dec00b04 	addi	sp,sp,44
    60b0:	f800283a 	ret
    60b4:	00800304 	movi	r2,12
    60b8:	90800015 	stw	r2,0(r18)
    60bc:	0005883a 	mov	r2,zero
    60c0:	003ff006 	br	6084 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006084>
    60c4:	01002004 	movi	r4,128
    60c8:	02001004 	movi	r8,64
    60cc:	01c00fc4 	movi	r7,63
    60d0:	003f6106 	br	5e58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005e58>
    60d4:	4009883a 	mov	r4,r8
    60d8:	003f7506 	br	5eb0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005eb0>
    60dc:	81000317 	ldw	r4,12(r16)
    60e0:	003fde06 	br	605c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700605c>
    60e4:	81c5883a 	add	r2,r16,r7
    60e8:	11400117 	ldw	r5,4(r2)
    60ec:	9009883a 	mov	r4,r18
    60f0:	29400054 	ori	r5,r5,1
    60f4:	11400115 	stw	r5,4(r2)
    60f8:	000e0a40 	call	e0a4 <__malloc_unlock>
    60fc:	80800204 	addi	r2,r16,8
    6100:	003fe006 	br	6084 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006084>
    6104:	9c000217 	ldw	r16,8(r19)
    6108:	00bfff04 	movi	r2,-4
    610c:	85800117 	ldw	r22,4(r16)
    6110:	b0ac703a 	and	r22,r22,r2
    6114:	b4400336 	bltu	r22,r17,6124 <_malloc_r+0x344>
    6118:	b445c83a 	sub	r2,r22,r17
    611c:	00c003c4 	movi	r3,15
    6120:	18805d16 	blt	r3,r2,6298 <_malloc_r+0x4b8>
    6124:	05c000b4 	movhi	r23,2
    6128:	008000b4 	movhi	r2,2
    612c:	10b83004 	addi	r2,r2,-8000
    6130:	bdf05404 	addi	r23,r23,-16048
    6134:	15400017 	ldw	r21,0(r2)
    6138:	b8c00017 	ldw	r3,0(r23)
    613c:	00bfffc4 	movi	r2,-1
    6140:	858d883a 	add	r6,r16,r22
    6144:	8d6b883a 	add	r21,r17,r21
    6148:	1880ea26 	beq	r3,r2,64f4 <_malloc_r+0x714>
    614c:	ad4403c4 	addi	r21,r21,4111
    6150:	00bc0004 	movi	r2,-4096
    6154:	a8aa703a 	and	r21,r21,r2
    6158:	a80b883a 	mov	r5,r21
    615c:	9009883a 	mov	r4,r18
    6160:	d9800015 	stw	r6,0(sp)
    6164:	00080700 	call	8070 <_sbrk_r>
    6168:	1029883a 	mov	r20,r2
    616c:	00bfffc4 	movi	r2,-1
    6170:	d9800017 	ldw	r6,0(sp)
    6174:	a080e826 	beq	r20,r2,6518 <_malloc_r+0x738>
    6178:	a180a636 	bltu	r20,r6,6414 <_malloc_r+0x634>
    617c:	070000b4 	movhi	fp,2
    6180:	e7385204 	addi	fp,fp,-7864
    6184:	e0800017 	ldw	r2,0(fp)
    6188:	a887883a 	add	r3,r21,r2
    618c:	e0c00015 	stw	r3,0(fp)
    6190:	3500e626 	beq	r6,r20,652c <_malloc_r+0x74c>
    6194:	b9000017 	ldw	r4,0(r23)
    6198:	00bfffc4 	movi	r2,-1
    619c:	2080ee26 	beq	r4,r2,6558 <_malloc_r+0x778>
    61a0:	a185c83a 	sub	r2,r20,r6
    61a4:	10c5883a 	add	r2,r2,r3
    61a8:	e0800015 	stw	r2,0(fp)
    61ac:	a0c001cc 	andi	r3,r20,7
    61b0:	1800bc26 	beq	r3,zero,64a4 <_malloc_r+0x6c4>
    61b4:	a0e9c83a 	sub	r20,r20,r3
    61b8:	00840204 	movi	r2,4104
    61bc:	a5000204 	addi	r20,r20,8
    61c0:	10c7c83a 	sub	r3,r2,r3
    61c4:	a545883a 	add	r2,r20,r21
    61c8:	1083ffcc 	andi	r2,r2,4095
    61cc:	18abc83a 	sub	r21,r3,r2
    61d0:	a80b883a 	mov	r5,r21
    61d4:	9009883a 	mov	r4,r18
    61d8:	00080700 	call	8070 <_sbrk_r>
    61dc:	00ffffc4 	movi	r3,-1
    61e0:	10c0e126 	beq	r2,r3,6568 <_malloc_r+0x788>
    61e4:	1505c83a 	sub	r2,r2,r20
    61e8:	1545883a 	add	r2,r2,r21
    61ec:	10800054 	ori	r2,r2,1
    61f0:	e0c00017 	ldw	r3,0(fp)
    61f4:	9d000215 	stw	r20,8(r19)
    61f8:	a0800115 	stw	r2,4(r20)
    61fc:	a8c7883a 	add	r3,r21,r3
    6200:	e0c00015 	stw	r3,0(fp)
    6204:	84c00e26 	beq	r16,r19,6240 <_malloc_r+0x460>
    6208:	018003c4 	movi	r6,15
    620c:	3580a72e 	bgeu	r6,r22,64ac <_malloc_r+0x6cc>
    6210:	81400117 	ldw	r5,4(r16)
    6214:	013ffe04 	movi	r4,-8
    6218:	b0bffd04 	addi	r2,r22,-12
    621c:	1104703a 	and	r2,r2,r4
    6220:	2900004c 	andi	r4,r5,1
    6224:	2088b03a 	or	r4,r4,r2
    6228:	81000115 	stw	r4,4(r16)
    622c:	01400144 	movi	r5,5
    6230:	8089883a 	add	r4,r16,r2
    6234:	21400115 	stw	r5,4(r4)
    6238:	21400215 	stw	r5,8(r4)
    623c:	3080cd36 	bltu	r6,r2,6574 <_malloc_r+0x794>
    6240:	008000b4 	movhi	r2,2
    6244:	10b82f04 	addi	r2,r2,-8004
    6248:	11000017 	ldw	r4,0(r2)
    624c:	20c0012e 	bgeu	r4,r3,6254 <_malloc_r+0x474>
    6250:	10c00015 	stw	r3,0(r2)
    6254:	008000b4 	movhi	r2,2
    6258:	10b82e04 	addi	r2,r2,-8008
    625c:	11000017 	ldw	r4,0(r2)
    6260:	9c000217 	ldw	r16,8(r19)
    6264:	20c0012e 	bgeu	r4,r3,626c <_malloc_r+0x48c>
    6268:	10c00015 	stw	r3,0(r2)
    626c:	80c00117 	ldw	r3,4(r16)
    6270:	00bfff04 	movi	r2,-4
    6274:	1886703a 	and	r3,r3,r2
    6278:	1c45c83a 	sub	r2,r3,r17
    627c:	1c400236 	bltu	r3,r17,6288 <_malloc_r+0x4a8>
    6280:	00c003c4 	movi	r3,15
    6284:	18800416 	blt	r3,r2,6298 <_malloc_r+0x4b8>
    6288:	9009883a 	mov	r4,r18
    628c:	000e0a40 	call	e0a4 <__malloc_unlock>
    6290:	0005883a 	mov	r2,zero
    6294:	003f7b06 	br	6084 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006084>
    6298:	88c00054 	ori	r3,r17,1
    629c:	80c00115 	stw	r3,4(r16)
    62a0:	8463883a 	add	r17,r16,r17
    62a4:	10800054 	ori	r2,r2,1
    62a8:	9c400215 	stw	r17,8(r19)
    62ac:	88800115 	stw	r2,4(r17)
    62b0:	9009883a 	mov	r4,r18
    62b4:	000e0a40 	call	e0a4 <__malloc_unlock>
    62b8:	80800204 	addi	r2,r16,8
    62bc:	003f7106 	br	6084 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006084>
    62c0:	00c00504 	movi	r3,20
    62c4:	18804a2e 	bgeu	r3,r2,63f0 <_malloc_r+0x610>
    62c8:	00c01504 	movi	r3,84
    62cc:	18806e36 	bltu	r3,r2,6488 <_malloc_r+0x6a8>
    62d0:	8804d33a 	srli	r2,r17,12
    62d4:	12001bc4 	addi	r8,r2,111
    62d8:	11c01b84 	addi	r7,r2,110
    62dc:	4209883a 	add	r4,r8,r8
    62e0:	003edd06 	br	5e58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005e58>
    62e4:	3804d27a 	srli	r2,r7,9
    62e8:	00c00104 	movi	r3,4
    62ec:	1880442e 	bgeu	r3,r2,6400 <_malloc_r+0x620>
    62f0:	00c00504 	movi	r3,20
    62f4:	18808136 	bltu	r3,r2,64fc <_malloc_r+0x71c>
    62f8:	11401704 	addi	r5,r2,92
    62fc:	10c016c4 	addi	r3,r2,91
    6300:	294b883a 	add	r5,r5,r5
    6304:	294b883a 	add	r5,r5,r5
    6308:	294b883a 	add	r5,r5,r5
    630c:	994b883a 	add	r5,r19,r5
    6310:	28800017 	ldw	r2,0(r5)
    6314:	018000b4 	movhi	r6,2
    6318:	297ffe04 	addi	r5,r5,-8
    631c:	31aa0704 	addi	r6,r6,-22500
    6320:	28806526 	beq	r5,r2,64b8 <_malloc_r+0x6d8>
    6324:	01bfff04 	movi	r6,-4
    6328:	10c00117 	ldw	r3,4(r2)
    632c:	1986703a 	and	r3,r3,r6
    6330:	38c0022e 	bgeu	r7,r3,633c <_malloc_r+0x55c>
    6334:	10800217 	ldw	r2,8(r2)
    6338:	28bffb1e 	bne	r5,r2,6328 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006328>
    633c:	11400317 	ldw	r5,12(r2)
    6340:	98c00117 	ldw	r3,4(r19)
    6344:	81400315 	stw	r5,12(r16)
    6348:	80800215 	stw	r2,8(r16)
    634c:	2c000215 	stw	r16,8(r5)
    6350:	14000315 	stw	r16,12(r2)
    6354:	003ef806 	br	5f38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005f38>
    6358:	88c00054 	ori	r3,r17,1
    635c:	80c00115 	stw	r3,4(r16)
    6360:	8463883a 	add	r17,r16,r17
    6364:	34400515 	stw	r17,20(r6)
    6368:	34400415 	stw	r17,16(r6)
    636c:	10c00054 	ori	r3,r2,1
    6370:	8a000315 	stw	r8,12(r17)
    6374:	8a000215 	stw	r8,8(r17)
    6378:	88c00115 	stw	r3,4(r17)
    637c:	88a3883a 	add	r17,r17,r2
    6380:	88800015 	stw	r2,0(r17)
    6384:	9009883a 	mov	r4,r18
    6388:	000e0a40 	call	e0a4 <__malloc_unlock>
    638c:	80800204 	addi	r2,r16,8
    6390:	003f3c06 	br	6084 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006084>
    6394:	30c00117 	ldw	r3,4(r6)
    6398:	003ee706 	br	5f38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005f38>
    639c:	5ac00044 	addi	r11,r11,1
    63a0:	588000cc 	andi	r2,r11,3
    63a4:	31800204 	addi	r6,r6,8
    63a8:	103efd1e 	bne	r2,zero,5fa0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005fa0>
    63ac:	00002406 	br	6440 <_malloc_r+0x660>
    63b0:	14000317 	ldw	r16,12(r2)
    63b4:	143f251e 	bne	r2,r16,604c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700604c>
    63b8:	21000084 	addi	r4,r4,2
    63bc:	003ebc06 	br	5eb0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005eb0>
    63c0:	8085883a 	add	r2,r16,r2
    63c4:	10c00117 	ldw	r3,4(r2)
    63c8:	81000317 	ldw	r4,12(r16)
    63cc:	81400217 	ldw	r5,8(r16)
    63d0:	18c00054 	ori	r3,r3,1
    63d4:	10c00115 	stw	r3,4(r2)
    63d8:	29000315 	stw	r4,12(r5)
    63dc:	21400215 	stw	r5,8(r4)
    63e0:	9009883a 	mov	r4,r18
    63e4:	000e0a40 	call	e0a4 <__malloc_unlock>
    63e8:	80800204 	addi	r2,r16,8
    63ec:	003f2506 	br	6084 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006084>
    63f0:	12001704 	addi	r8,r2,92
    63f4:	11c016c4 	addi	r7,r2,91
    63f8:	4209883a 	add	r4,r8,r8
    63fc:	003e9606 	br	5e58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005e58>
    6400:	3804d1ba 	srli	r2,r7,6
    6404:	11400e44 	addi	r5,r2,57
    6408:	10c00e04 	addi	r3,r2,56
    640c:	294b883a 	add	r5,r5,r5
    6410:	003fbc06 	br	6304 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006304>
    6414:	84ff5926 	beq	r16,r19,617c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700617c>
    6418:	008000b4 	movhi	r2,2
    641c:	10aa0704 	addi	r2,r2,-22500
    6420:	14000217 	ldw	r16,8(r2)
    6424:	00bfff04 	movi	r2,-4
    6428:	80c00117 	ldw	r3,4(r16)
    642c:	1886703a 	and	r3,r3,r2
    6430:	003f9106 	br	6278 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006278>
    6434:	60800217 	ldw	r2,8(r12)
    6438:	213fffc4 	addi	r4,r4,-1
    643c:	1300651e 	bne	r2,r12,65d4 <_malloc_r+0x7f4>
    6440:	208000cc 	andi	r2,r4,3
    6444:	633ffe04 	addi	r12,r12,-8
    6448:	103ffa1e 	bne	r2,zero,6434 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006434>
    644c:	98800117 	ldw	r2,4(r19)
    6450:	0146303a 	nor	r3,zero,r5
    6454:	1884703a 	and	r2,r3,r2
    6458:	98800115 	stw	r2,4(r19)
    645c:	294b883a 	add	r5,r5,r5
    6460:	117f2836 	bltu	r2,r5,6104 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006104>
    6464:	283f2726 	beq	r5,zero,6104 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006104>
    6468:	2886703a 	and	r3,r5,r2
    646c:	5809883a 	mov	r4,r11
    6470:	183ec31e 	bne	r3,zero,5f80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005f80>
    6474:	294b883a 	add	r5,r5,r5
    6478:	2886703a 	and	r3,r5,r2
    647c:	21000104 	addi	r4,r4,4
    6480:	183ffc26 	beq	r3,zero,6474 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006474>
    6484:	003ebe06 	br	5f80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005f80>
    6488:	00c05504 	movi	r3,340
    648c:	18801236 	bltu	r3,r2,64d8 <_malloc_r+0x6f8>
    6490:	8804d3fa 	srli	r2,r17,15
    6494:	12001e04 	addi	r8,r2,120
    6498:	11c01dc4 	addi	r7,r2,119
    649c:	4209883a 	add	r4,r8,r8
    64a0:	003e6d06 	br	5e58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005e58>
    64a4:	00c40004 	movi	r3,4096
    64a8:	003f4606 	br	61c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70061c4>
    64ac:	00800044 	movi	r2,1
    64b0:	a0800115 	stw	r2,4(r20)
    64b4:	003f7406 	br	6288 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006288>
    64b8:	1805d0ba 	srai	r2,r3,2
    64bc:	01c00044 	movi	r7,1
    64c0:	30c00117 	ldw	r3,4(r6)
    64c4:	388e983a 	sll	r7,r7,r2
    64c8:	2805883a 	mov	r2,r5
    64cc:	38c6b03a 	or	r3,r7,r3
    64d0:	30c00115 	stw	r3,4(r6)
    64d4:	003f9b06 	br	6344 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006344>
    64d8:	00c15504 	movi	r3,1364
    64dc:	18801a36 	bltu	r3,r2,6548 <_malloc_r+0x768>
    64e0:	8804d4ba 	srli	r2,r17,18
    64e4:	12001f44 	addi	r8,r2,125
    64e8:	11c01f04 	addi	r7,r2,124
    64ec:	4209883a 	add	r4,r8,r8
    64f0:	003e5906 	br	5e58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005e58>
    64f4:	ad400404 	addi	r21,r21,16
    64f8:	003f1706 	br	6158 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006158>
    64fc:	00c01504 	movi	r3,84
    6500:	18802336 	bltu	r3,r2,6590 <_malloc_r+0x7b0>
    6504:	3804d33a 	srli	r2,r7,12
    6508:	11401bc4 	addi	r5,r2,111
    650c:	10c01b84 	addi	r3,r2,110
    6510:	294b883a 	add	r5,r5,r5
    6514:	003f7b06 	br	6304 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006304>
    6518:	9c000217 	ldw	r16,8(r19)
    651c:	00bfff04 	movi	r2,-4
    6520:	80c00117 	ldw	r3,4(r16)
    6524:	1886703a 	and	r3,r3,r2
    6528:	003f5306 	br	6278 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006278>
    652c:	3083ffcc 	andi	r2,r6,4095
    6530:	103f181e 	bne	r2,zero,6194 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006194>
    6534:	99000217 	ldw	r4,8(r19)
    6538:	b545883a 	add	r2,r22,r21
    653c:	10800054 	ori	r2,r2,1
    6540:	20800115 	stw	r2,4(r4)
    6544:	003f3e06 	br	6240 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006240>
    6548:	01003f84 	movi	r4,254
    654c:	02001fc4 	movi	r8,127
    6550:	01c01f84 	movi	r7,126
    6554:	003e4006 	br	5e58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005e58>
    6558:	008000b4 	movhi	r2,2
    655c:	10b05404 	addi	r2,r2,-16048
    6560:	15000015 	stw	r20,0(r2)
    6564:	003f1106 	br	61ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70061ac>
    6568:	00800044 	movi	r2,1
    656c:	002b883a 	mov	r21,zero
    6570:	003f1f06 	br	61f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70061f0>
    6574:	81400204 	addi	r5,r16,8
    6578:	9009883a 	mov	r4,r18
    657c:	00051f40 	call	51f4 <_free_r>
    6580:	008000b4 	movhi	r2,2
    6584:	10b85204 	addi	r2,r2,-7864
    6588:	10c00017 	ldw	r3,0(r2)
    658c:	003f2c06 	br	6240 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006240>
    6590:	00c05504 	movi	r3,340
    6594:	18800536 	bltu	r3,r2,65ac <_malloc_r+0x7cc>
    6598:	3804d3fa 	srli	r2,r7,15
    659c:	11401e04 	addi	r5,r2,120
    65a0:	10c01dc4 	addi	r3,r2,119
    65a4:	294b883a 	add	r5,r5,r5
    65a8:	003f5606 	br	6304 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006304>
    65ac:	00c15504 	movi	r3,1364
    65b0:	18800536 	bltu	r3,r2,65c8 <_malloc_r+0x7e8>
    65b4:	3804d4ba 	srli	r2,r7,18
    65b8:	11401f44 	addi	r5,r2,125
    65bc:	10c01f04 	addi	r3,r2,124
    65c0:	294b883a 	add	r5,r5,r5
    65c4:	003f4f06 	br	6304 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006304>
    65c8:	01403f84 	movi	r5,254
    65cc:	00c01f84 	movi	r3,126
    65d0:	003f4c06 	br	6304 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006304>
    65d4:	98800117 	ldw	r2,4(r19)
    65d8:	003fa006 	br	645c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700645c>
    65dc:	8808d0fa 	srli	r4,r17,3
    65e0:	20800044 	addi	r2,r4,1
    65e4:	1085883a 	add	r2,r2,r2
    65e8:	003e9006 	br	602c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700602c>

000065ec <memchr>:
    65ec:	208000cc 	andi	r2,r4,3
    65f0:	280f883a 	mov	r7,r5
    65f4:	10003426 	beq	r2,zero,66c8 <memchr+0xdc>
    65f8:	30bfffc4 	addi	r2,r6,-1
    65fc:	30001a26 	beq	r6,zero,6668 <memchr+0x7c>
    6600:	20c00003 	ldbu	r3,0(r4)
    6604:	29803fcc 	andi	r6,r5,255
    6608:	30c0051e 	bne	r6,r3,6620 <memchr+0x34>
    660c:	00001806 	br	6670 <memchr+0x84>
    6610:	10001526 	beq	r2,zero,6668 <memchr+0x7c>
    6614:	20c00003 	ldbu	r3,0(r4)
    6618:	10bfffc4 	addi	r2,r2,-1
    661c:	30c01426 	beq	r6,r3,6670 <memchr+0x84>
    6620:	21000044 	addi	r4,r4,1
    6624:	20c000cc 	andi	r3,r4,3
    6628:	183ff91e 	bne	r3,zero,6610 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006610>
    662c:	020000c4 	movi	r8,3
    6630:	40801136 	bltu	r8,r2,6678 <memchr+0x8c>
    6634:	10000c26 	beq	r2,zero,6668 <memchr+0x7c>
    6638:	20c00003 	ldbu	r3,0(r4)
    663c:	29403fcc 	andi	r5,r5,255
    6640:	28c00b26 	beq	r5,r3,6670 <memchr+0x84>
    6644:	20c00044 	addi	r3,r4,1
    6648:	39803fcc 	andi	r6,r7,255
    664c:	2089883a 	add	r4,r4,r2
    6650:	00000306 	br	6660 <memchr+0x74>
    6654:	18c00044 	addi	r3,r3,1
    6658:	197fffc3 	ldbu	r5,-1(r3)
    665c:	31400526 	beq	r6,r5,6674 <memchr+0x88>
    6660:	1805883a 	mov	r2,r3
    6664:	20fffb1e 	bne	r4,r3,6654 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006654>
    6668:	0005883a 	mov	r2,zero
    666c:	f800283a 	ret
    6670:	2005883a 	mov	r2,r4
    6674:	f800283a 	ret
    6678:	28c03fcc 	andi	r3,r5,255
    667c:	1812923a 	slli	r9,r3,8
    6680:	02ffbff4 	movhi	r11,65279
    6684:	02a02074 	movhi	r10,32897
    6688:	48d2b03a 	or	r9,r9,r3
    668c:	4806943a 	slli	r3,r9,16
    6690:	5affbfc4 	addi	r11,r11,-257
    6694:	52a02004 	addi	r10,r10,-32640
    6698:	48d2b03a 	or	r9,r9,r3
    669c:	20c00017 	ldw	r3,0(r4)
    66a0:	48c6f03a 	xor	r3,r9,r3
    66a4:	1acd883a 	add	r6,r3,r11
    66a8:	00c6303a 	nor	r3,zero,r3
    66ac:	30c6703a 	and	r3,r6,r3
    66b0:	1a86703a 	and	r3,r3,r10
    66b4:	183fe01e 	bne	r3,zero,6638 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006638>
    66b8:	10bfff04 	addi	r2,r2,-4
    66bc:	21000104 	addi	r4,r4,4
    66c0:	40bff636 	bltu	r8,r2,669c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700669c>
    66c4:	003fdb06 	br	6634 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006634>
    66c8:	3005883a 	mov	r2,r6
    66cc:	003fd706 	br	662c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700662c>

000066d0 <memcpy>:
    66d0:	defffd04 	addi	sp,sp,-12
    66d4:	dfc00215 	stw	ra,8(sp)
    66d8:	dc400115 	stw	r17,4(sp)
    66dc:	dc000015 	stw	r16,0(sp)
    66e0:	00c003c4 	movi	r3,15
    66e4:	2005883a 	mov	r2,r4
    66e8:	1980452e 	bgeu	r3,r6,6800 <memcpy+0x130>
    66ec:	2906b03a 	or	r3,r5,r4
    66f0:	18c000cc 	andi	r3,r3,3
    66f4:	1800441e 	bne	r3,zero,6808 <memcpy+0x138>
    66f8:	347ffc04 	addi	r17,r6,-16
    66fc:	8822d13a 	srli	r17,r17,4
    6700:	28c00104 	addi	r3,r5,4
    6704:	23400104 	addi	r13,r4,4
    6708:	8820913a 	slli	r16,r17,4
    670c:	2b000204 	addi	r12,r5,8
    6710:	22c00204 	addi	r11,r4,8
    6714:	84000504 	addi	r16,r16,20
    6718:	2a800304 	addi	r10,r5,12
    671c:	22400304 	addi	r9,r4,12
    6720:	2c21883a 	add	r16,r5,r16
    6724:	2811883a 	mov	r8,r5
    6728:	200f883a 	mov	r7,r4
    672c:	41000017 	ldw	r4,0(r8)
    6730:	1fc00017 	ldw	ra,0(r3)
    6734:	63c00017 	ldw	r15,0(r12)
    6738:	39000015 	stw	r4,0(r7)
    673c:	53800017 	ldw	r14,0(r10)
    6740:	6fc00015 	stw	ra,0(r13)
    6744:	5bc00015 	stw	r15,0(r11)
    6748:	4b800015 	stw	r14,0(r9)
    674c:	18c00404 	addi	r3,r3,16
    6750:	39c00404 	addi	r7,r7,16
    6754:	42000404 	addi	r8,r8,16
    6758:	6b400404 	addi	r13,r13,16
    675c:	63000404 	addi	r12,r12,16
    6760:	5ac00404 	addi	r11,r11,16
    6764:	52800404 	addi	r10,r10,16
    6768:	4a400404 	addi	r9,r9,16
    676c:	1c3fef1e 	bne	r3,r16,672c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700672c>
    6770:	89c00044 	addi	r7,r17,1
    6774:	380e913a 	slli	r7,r7,4
    6778:	310003cc 	andi	r4,r6,15
    677c:	02c000c4 	movi	r11,3
    6780:	11c7883a 	add	r3,r2,r7
    6784:	29cb883a 	add	r5,r5,r7
    6788:	5900212e 	bgeu	r11,r4,6810 <memcpy+0x140>
    678c:	1813883a 	mov	r9,r3
    6790:	2811883a 	mov	r8,r5
    6794:	200f883a 	mov	r7,r4
    6798:	42800017 	ldw	r10,0(r8)
    679c:	4a400104 	addi	r9,r9,4
    67a0:	39ffff04 	addi	r7,r7,-4
    67a4:	4abfff15 	stw	r10,-4(r9)
    67a8:	42000104 	addi	r8,r8,4
    67ac:	59fffa36 	bltu	r11,r7,6798 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006798>
    67b0:	213fff04 	addi	r4,r4,-4
    67b4:	2008d0ba 	srli	r4,r4,2
    67b8:	318000cc 	andi	r6,r6,3
    67bc:	21000044 	addi	r4,r4,1
    67c0:	2109883a 	add	r4,r4,r4
    67c4:	2109883a 	add	r4,r4,r4
    67c8:	1907883a 	add	r3,r3,r4
    67cc:	290b883a 	add	r5,r5,r4
    67d0:	30000626 	beq	r6,zero,67ec <memcpy+0x11c>
    67d4:	198d883a 	add	r6,r3,r6
    67d8:	29c00003 	ldbu	r7,0(r5)
    67dc:	18c00044 	addi	r3,r3,1
    67e0:	29400044 	addi	r5,r5,1
    67e4:	19ffffc5 	stb	r7,-1(r3)
    67e8:	19bffb1e 	bne	r3,r6,67d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70067d8>
    67ec:	dfc00217 	ldw	ra,8(sp)
    67f0:	dc400117 	ldw	r17,4(sp)
    67f4:	dc000017 	ldw	r16,0(sp)
    67f8:	dec00304 	addi	sp,sp,12
    67fc:	f800283a 	ret
    6800:	2007883a 	mov	r3,r4
    6804:	003ff206 	br	67d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70067d0>
    6808:	2007883a 	mov	r3,r4
    680c:	003ff106 	br	67d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70067d4>
    6810:	200d883a 	mov	r6,r4
    6814:	003fee06 	br	67d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70067d0>

00006818 <memmove>:
    6818:	2005883a 	mov	r2,r4
    681c:	29000b2e 	bgeu	r5,r4,684c <memmove+0x34>
    6820:	298f883a 	add	r7,r5,r6
    6824:	21c0092e 	bgeu	r4,r7,684c <memmove+0x34>
    6828:	2187883a 	add	r3,r4,r6
    682c:	198bc83a 	sub	r5,r3,r6
    6830:	30004826 	beq	r6,zero,6954 <memmove+0x13c>
    6834:	39ffffc4 	addi	r7,r7,-1
    6838:	39000003 	ldbu	r4,0(r7)
    683c:	18ffffc4 	addi	r3,r3,-1
    6840:	19000005 	stb	r4,0(r3)
    6844:	28fffb1e 	bne	r5,r3,6834 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006834>
    6848:	f800283a 	ret
    684c:	00c003c4 	movi	r3,15
    6850:	1980412e 	bgeu	r3,r6,6958 <memmove+0x140>
    6854:	2886b03a 	or	r3,r5,r2
    6858:	18c000cc 	andi	r3,r3,3
    685c:	1800401e 	bne	r3,zero,6960 <memmove+0x148>
    6860:	33fffc04 	addi	r15,r6,-16
    6864:	781ed13a 	srli	r15,r15,4
    6868:	28c00104 	addi	r3,r5,4
    686c:	13400104 	addi	r13,r2,4
    6870:	781c913a 	slli	r14,r15,4
    6874:	2b000204 	addi	r12,r5,8
    6878:	12c00204 	addi	r11,r2,8
    687c:	73800504 	addi	r14,r14,20
    6880:	2a800304 	addi	r10,r5,12
    6884:	12400304 	addi	r9,r2,12
    6888:	2b9d883a 	add	r14,r5,r14
    688c:	2811883a 	mov	r8,r5
    6890:	100f883a 	mov	r7,r2
    6894:	41000017 	ldw	r4,0(r8)
    6898:	39c00404 	addi	r7,r7,16
    689c:	18c00404 	addi	r3,r3,16
    68a0:	393ffc15 	stw	r4,-16(r7)
    68a4:	193ffc17 	ldw	r4,-16(r3)
    68a8:	6b400404 	addi	r13,r13,16
    68ac:	5ac00404 	addi	r11,r11,16
    68b0:	693ffc15 	stw	r4,-16(r13)
    68b4:	61000017 	ldw	r4,0(r12)
    68b8:	4a400404 	addi	r9,r9,16
    68bc:	42000404 	addi	r8,r8,16
    68c0:	593ffc15 	stw	r4,-16(r11)
    68c4:	51000017 	ldw	r4,0(r10)
    68c8:	63000404 	addi	r12,r12,16
    68cc:	52800404 	addi	r10,r10,16
    68d0:	493ffc15 	stw	r4,-16(r9)
    68d4:	1bbfef1e 	bne	r3,r14,6894 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006894>
    68d8:	79000044 	addi	r4,r15,1
    68dc:	2008913a 	slli	r4,r4,4
    68e0:	328003cc 	andi	r10,r6,15
    68e4:	02c000c4 	movi	r11,3
    68e8:	1107883a 	add	r3,r2,r4
    68ec:	290b883a 	add	r5,r5,r4
    68f0:	5a801e2e 	bgeu	r11,r10,696c <memmove+0x154>
    68f4:	1813883a 	mov	r9,r3
    68f8:	2811883a 	mov	r8,r5
    68fc:	500f883a 	mov	r7,r10
    6900:	41000017 	ldw	r4,0(r8)
    6904:	4a400104 	addi	r9,r9,4
    6908:	39ffff04 	addi	r7,r7,-4
    690c:	493fff15 	stw	r4,-4(r9)
    6910:	42000104 	addi	r8,r8,4
    6914:	59fffa36 	bltu	r11,r7,6900 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006900>
    6918:	513fff04 	addi	r4,r10,-4
    691c:	2008d0ba 	srli	r4,r4,2
    6920:	318000cc 	andi	r6,r6,3
    6924:	21000044 	addi	r4,r4,1
    6928:	2109883a 	add	r4,r4,r4
    692c:	2109883a 	add	r4,r4,r4
    6930:	1907883a 	add	r3,r3,r4
    6934:	290b883a 	add	r5,r5,r4
    6938:	30000b26 	beq	r6,zero,6968 <memmove+0x150>
    693c:	198d883a 	add	r6,r3,r6
    6940:	29c00003 	ldbu	r7,0(r5)
    6944:	18c00044 	addi	r3,r3,1
    6948:	29400044 	addi	r5,r5,1
    694c:	19ffffc5 	stb	r7,-1(r3)
    6950:	19bffb1e 	bne	r3,r6,6940 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006940>
    6954:	f800283a 	ret
    6958:	1007883a 	mov	r3,r2
    695c:	003ff606 	br	6938 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006938>
    6960:	1007883a 	mov	r3,r2
    6964:	003ff506 	br	693c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700693c>
    6968:	f800283a 	ret
    696c:	500d883a 	mov	r6,r10
    6970:	003ff106 	br	6938 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006938>

00006974 <memset>:
    6974:	20c000cc 	andi	r3,r4,3
    6978:	2005883a 	mov	r2,r4
    697c:	18004426 	beq	r3,zero,6a90 <memset+0x11c>
    6980:	31ffffc4 	addi	r7,r6,-1
    6984:	30004026 	beq	r6,zero,6a88 <memset+0x114>
    6988:	2813883a 	mov	r9,r5
    698c:	200d883a 	mov	r6,r4
    6990:	2007883a 	mov	r3,r4
    6994:	00000406 	br	69a8 <memset+0x34>
    6998:	3a3fffc4 	addi	r8,r7,-1
    699c:	31800044 	addi	r6,r6,1
    69a0:	38003926 	beq	r7,zero,6a88 <memset+0x114>
    69a4:	400f883a 	mov	r7,r8
    69a8:	18c00044 	addi	r3,r3,1
    69ac:	32400005 	stb	r9,0(r6)
    69b0:	1a0000cc 	andi	r8,r3,3
    69b4:	403ff81e 	bne	r8,zero,6998 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006998>
    69b8:	010000c4 	movi	r4,3
    69bc:	21c02d2e 	bgeu	r4,r7,6a74 <memset+0x100>
    69c0:	29003fcc 	andi	r4,r5,255
    69c4:	200c923a 	slli	r6,r4,8
    69c8:	3108b03a 	or	r4,r6,r4
    69cc:	200c943a 	slli	r6,r4,16
    69d0:	218cb03a 	or	r6,r4,r6
    69d4:	010003c4 	movi	r4,15
    69d8:	21c0182e 	bgeu	r4,r7,6a3c <memset+0xc8>
    69dc:	3b3ffc04 	addi	r12,r7,-16
    69e0:	6018d13a 	srli	r12,r12,4
    69e4:	1a000104 	addi	r8,r3,4
    69e8:	1ac00204 	addi	r11,r3,8
    69ec:	6008913a 	slli	r4,r12,4
    69f0:	1a800304 	addi	r10,r3,12
    69f4:	1813883a 	mov	r9,r3
    69f8:	21000504 	addi	r4,r4,20
    69fc:	1909883a 	add	r4,r3,r4
    6a00:	49800015 	stw	r6,0(r9)
    6a04:	41800015 	stw	r6,0(r8)
    6a08:	59800015 	stw	r6,0(r11)
    6a0c:	51800015 	stw	r6,0(r10)
    6a10:	42000404 	addi	r8,r8,16
    6a14:	4a400404 	addi	r9,r9,16
    6a18:	5ac00404 	addi	r11,r11,16
    6a1c:	52800404 	addi	r10,r10,16
    6a20:	413ff71e 	bne	r8,r4,6a00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006a00>
    6a24:	63000044 	addi	r12,r12,1
    6a28:	6018913a 	slli	r12,r12,4
    6a2c:	39c003cc 	andi	r7,r7,15
    6a30:	010000c4 	movi	r4,3
    6a34:	1b07883a 	add	r3,r3,r12
    6a38:	21c00e2e 	bgeu	r4,r7,6a74 <memset+0x100>
    6a3c:	1813883a 	mov	r9,r3
    6a40:	3811883a 	mov	r8,r7
    6a44:	010000c4 	movi	r4,3
    6a48:	49800015 	stw	r6,0(r9)
    6a4c:	423fff04 	addi	r8,r8,-4
    6a50:	4a400104 	addi	r9,r9,4
    6a54:	223ffc36 	bltu	r4,r8,6a48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006a48>
    6a58:	393fff04 	addi	r4,r7,-4
    6a5c:	2008d0ba 	srli	r4,r4,2
    6a60:	39c000cc 	andi	r7,r7,3
    6a64:	21000044 	addi	r4,r4,1
    6a68:	2109883a 	add	r4,r4,r4
    6a6c:	2109883a 	add	r4,r4,r4
    6a70:	1907883a 	add	r3,r3,r4
    6a74:	38000526 	beq	r7,zero,6a8c <memset+0x118>
    6a78:	19cf883a 	add	r7,r3,r7
    6a7c:	19400005 	stb	r5,0(r3)
    6a80:	18c00044 	addi	r3,r3,1
    6a84:	38fffd1e 	bne	r7,r3,6a7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006a7c>
    6a88:	f800283a 	ret
    6a8c:	f800283a 	ret
    6a90:	2007883a 	mov	r3,r4
    6a94:	300f883a 	mov	r7,r6
    6a98:	003fc706 	br	69b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70069b8>

00006a9c <_Balloc>:
    6a9c:	20801317 	ldw	r2,76(r4)
    6aa0:	defffc04 	addi	sp,sp,-16
    6aa4:	dc400115 	stw	r17,4(sp)
    6aa8:	dc000015 	stw	r16,0(sp)
    6aac:	dfc00315 	stw	ra,12(sp)
    6ab0:	dc800215 	stw	r18,8(sp)
    6ab4:	2023883a 	mov	r17,r4
    6ab8:	2821883a 	mov	r16,r5
    6abc:	10000f26 	beq	r2,zero,6afc <_Balloc+0x60>
    6ac0:	8407883a 	add	r3,r16,r16
    6ac4:	18c7883a 	add	r3,r3,r3
    6ac8:	10c7883a 	add	r3,r2,r3
    6acc:	18800017 	ldw	r2,0(r3)
    6ad0:	10001126 	beq	r2,zero,6b18 <_Balloc+0x7c>
    6ad4:	11000017 	ldw	r4,0(r2)
    6ad8:	19000015 	stw	r4,0(r3)
    6adc:	10000415 	stw	zero,16(r2)
    6ae0:	10000315 	stw	zero,12(r2)
    6ae4:	dfc00317 	ldw	ra,12(sp)
    6ae8:	dc800217 	ldw	r18,8(sp)
    6aec:	dc400117 	ldw	r17,4(sp)
    6af0:	dc000017 	ldw	r16,0(sp)
    6af4:	dec00404 	addi	sp,sp,16
    6af8:	f800283a 	ret
    6afc:	01800844 	movi	r6,33
    6b00:	01400104 	movi	r5,4
    6b04:	00099d80 	call	99d8 <_calloc_r>
    6b08:	88801315 	stw	r2,76(r17)
    6b0c:	103fec1e 	bne	r2,zero,6ac0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006ac0>
    6b10:	0005883a 	mov	r2,zero
    6b14:	003ff306 	br	6ae4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006ae4>
    6b18:	01400044 	movi	r5,1
    6b1c:	2c24983a 	sll	r18,r5,r16
    6b20:	8809883a 	mov	r4,r17
    6b24:	91800144 	addi	r6,r18,5
    6b28:	318d883a 	add	r6,r6,r6
    6b2c:	318d883a 	add	r6,r6,r6
    6b30:	00099d80 	call	99d8 <_calloc_r>
    6b34:	103ff626 	beq	r2,zero,6b10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006b10>
    6b38:	14000115 	stw	r16,4(r2)
    6b3c:	14800215 	stw	r18,8(r2)
    6b40:	003fe606 	br	6adc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006adc>

00006b44 <_Bfree>:
    6b44:	28000826 	beq	r5,zero,6b68 <_Bfree+0x24>
    6b48:	28c00117 	ldw	r3,4(r5)
    6b4c:	20801317 	ldw	r2,76(r4)
    6b50:	18c7883a 	add	r3,r3,r3
    6b54:	18c7883a 	add	r3,r3,r3
    6b58:	10c5883a 	add	r2,r2,r3
    6b5c:	10c00017 	ldw	r3,0(r2)
    6b60:	28c00015 	stw	r3,0(r5)
    6b64:	11400015 	stw	r5,0(r2)
    6b68:	f800283a 	ret

00006b6c <__multadd>:
    6b6c:	defffa04 	addi	sp,sp,-24
    6b70:	dc800315 	stw	r18,12(sp)
    6b74:	dc400215 	stw	r17,8(sp)
    6b78:	dc000115 	stw	r16,4(sp)
    6b7c:	2823883a 	mov	r17,r5
    6b80:	2c000417 	ldw	r16,16(r5)
    6b84:	dfc00515 	stw	ra,20(sp)
    6b88:	dcc00415 	stw	r19,16(sp)
    6b8c:	2025883a 	mov	r18,r4
    6b90:	29400504 	addi	r5,r5,20
    6b94:	0011883a 	mov	r8,zero
    6b98:	28c00017 	ldw	r3,0(r5)
    6b9c:	29400104 	addi	r5,r5,4
    6ba0:	42000044 	addi	r8,r8,1
    6ba4:	18bfffcc 	andi	r2,r3,65535
    6ba8:	1185383a 	mul	r2,r2,r6
    6bac:	1806d43a 	srli	r3,r3,16
    6bb0:	11cf883a 	add	r7,r2,r7
    6bb4:	3808d43a 	srli	r4,r7,16
    6bb8:	1987383a 	mul	r3,r3,r6
    6bbc:	38bfffcc 	andi	r2,r7,65535
    6bc0:	1907883a 	add	r3,r3,r4
    6bc4:	1808943a 	slli	r4,r3,16
    6bc8:	180ed43a 	srli	r7,r3,16
    6bcc:	2085883a 	add	r2,r4,r2
    6bd0:	28bfff15 	stw	r2,-4(r5)
    6bd4:	443ff016 	blt	r8,r16,6b98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006b98>
    6bd8:	38000926 	beq	r7,zero,6c00 <__multadd+0x94>
    6bdc:	88800217 	ldw	r2,8(r17)
    6be0:	80800f0e 	bge	r16,r2,6c20 <__multadd+0xb4>
    6be4:	80800144 	addi	r2,r16,5
    6be8:	1085883a 	add	r2,r2,r2
    6bec:	1085883a 	add	r2,r2,r2
    6bf0:	8885883a 	add	r2,r17,r2
    6bf4:	11c00015 	stw	r7,0(r2)
    6bf8:	84000044 	addi	r16,r16,1
    6bfc:	8c000415 	stw	r16,16(r17)
    6c00:	8805883a 	mov	r2,r17
    6c04:	dfc00517 	ldw	ra,20(sp)
    6c08:	dcc00417 	ldw	r19,16(sp)
    6c0c:	dc800317 	ldw	r18,12(sp)
    6c10:	dc400217 	ldw	r17,8(sp)
    6c14:	dc000117 	ldw	r16,4(sp)
    6c18:	dec00604 	addi	sp,sp,24
    6c1c:	f800283a 	ret
    6c20:	89400117 	ldw	r5,4(r17)
    6c24:	9009883a 	mov	r4,r18
    6c28:	d9c00015 	stw	r7,0(sp)
    6c2c:	29400044 	addi	r5,r5,1
    6c30:	0006a9c0 	call	6a9c <_Balloc>
    6c34:	89800417 	ldw	r6,16(r17)
    6c38:	89400304 	addi	r5,r17,12
    6c3c:	11000304 	addi	r4,r2,12
    6c40:	31800084 	addi	r6,r6,2
    6c44:	318d883a 	add	r6,r6,r6
    6c48:	318d883a 	add	r6,r6,r6
    6c4c:	1027883a 	mov	r19,r2
    6c50:	00066d00 	call	66d0 <memcpy>
    6c54:	d9c00017 	ldw	r7,0(sp)
    6c58:	88000a26 	beq	r17,zero,6c84 <__multadd+0x118>
    6c5c:	88c00117 	ldw	r3,4(r17)
    6c60:	90801317 	ldw	r2,76(r18)
    6c64:	18c7883a 	add	r3,r3,r3
    6c68:	18c7883a 	add	r3,r3,r3
    6c6c:	10c5883a 	add	r2,r2,r3
    6c70:	10c00017 	ldw	r3,0(r2)
    6c74:	88c00015 	stw	r3,0(r17)
    6c78:	14400015 	stw	r17,0(r2)
    6c7c:	9823883a 	mov	r17,r19
    6c80:	003fd806 	br	6be4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006be4>
    6c84:	9823883a 	mov	r17,r19
    6c88:	003fd606 	br	6be4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006be4>

00006c8c <__s2b>:
    6c8c:	defff904 	addi	sp,sp,-28
    6c90:	dc400115 	stw	r17,4(sp)
    6c94:	dc000015 	stw	r16,0(sp)
    6c98:	2023883a 	mov	r17,r4
    6c9c:	2821883a 	mov	r16,r5
    6ca0:	39000204 	addi	r4,r7,8
    6ca4:	01400244 	movi	r5,9
    6ca8:	dcc00315 	stw	r19,12(sp)
    6cac:	dc800215 	stw	r18,8(sp)
    6cb0:	dfc00615 	stw	ra,24(sp)
    6cb4:	dd400515 	stw	r21,20(sp)
    6cb8:	dd000415 	stw	r20,16(sp)
    6cbc:	3825883a 	mov	r18,r7
    6cc0:	3027883a 	mov	r19,r6
    6cc4:	000ad080 	call	ad08 <__divsi3>
    6cc8:	00c00044 	movi	r3,1
    6ccc:	000b883a 	mov	r5,zero
    6cd0:	1880030e 	bge	r3,r2,6ce0 <__s2b+0x54>
    6cd4:	18c7883a 	add	r3,r3,r3
    6cd8:	29400044 	addi	r5,r5,1
    6cdc:	18bffd16 	blt	r3,r2,6cd4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006cd4>
    6ce0:	8809883a 	mov	r4,r17
    6ce4:	0006a9c0 	call	6a9c <_Balloc>
    6ce8:	d8c00717 	ldw	r3,28(sp)
    6cec:	10c00515 	stw	r3,20(r2)
    6cf0:	00c00044 	movi	r3,1
    6cf4:	10c00415 	stw	r3,16(r2)
    6cf8:	00c00244 	movi	r3,9
    6cfc:	1cc0210e 	bge	r3,r19,6d84 <__s2b+0xf8>
    6d00:	80eb883a 	add	r21,r16,r3
    6d04:	a829883a 	mov	r20,r21
    6d08:	84e1883a 	add	r16,r16,r19
    6d0c:	a1c00007 	ldb	r7,0(r20)
    6d10:	01800284 	movi	r6,10
    6d14:	a5000044 	addi	r20,r20,1
    6d18:	100b883a 	mov	r5,r2
    6d1c:	39fff404 	addi	r7,r7,-48
    6d20:	8809883a 	mov	r4,r17
    6d24:	0006b6c0 	call	6b6c <__multadd>
    6d28:	a43ff81e 	bne	r20,r16,6d0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006d0c>
    6d2c:	ace1883a 	add	r16,r21,r19
    6d30:	843ffe04 	addi	r16,r16,-8
    6d34:	9c800a0e 	bge	r19,r18,6d60 <__s2b+0xd4>
    6d38:	94e5c83a 	sub	r18,r18,r19
    6d3c:	84a5883a 	add	r18,r16,r18
    6d40:	81c00007 	ldb	r7,0(r16)
    6d44:	01800284 	movi	r6,10
    6d48:	84000044 	addi	r16,r16,1
    6d4c:	100b883a 	mov	r5,r2
    6d50:	39fff404 	addi	r7,r7,-48
    6d54:	8809883a 	mov	r4,r17
    6d58:	0006b6c0 	call	6b6c <__multadd>
    6d5c:	84bff81e 	bne	r16,r18,6d40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006d40>
    6d60:	dfc00617 	ldw	ra,24(sp)
    6d64:	dd400517 	ldw	r21,20(sp)
    6d68:	dd000417 	ldw	r20,16(sp)
    6d6c:	dcc00317 	ldw	r19,12(sp)
    6d70:	dc800217 	ldw	r18,8(sp)
    6d74:	dc400117 	ldw	r17,4(sp)
    6d78:	dc000017 	ldw	r16,0(sp)
    6d7c:	dec00704 	addi	sp,sp,28
    6d80:	f800283a 	ret
    6d84:	84000284 	addi	r16,r16,10
    6d88:	1827883a 	mov	r19,r3
    6d8c:	003fe906 	br	6d34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006d34>

00006d90 <__hi0bits>:
    6d90:	20bfffec 	andhi	r2,r4,65535
    6d94:	1000141e 	bne	r2,zero,6de8 <__hi0bits+0x58>
    6d98:	2008943a 	slli	r4,r4,16
    6d9c:	00800404 	movi	r2,16
    6da0:	20ffc02c 	andhi	r3,r4,65280
    6da4:	1800021e 	bne	r3,zero,6db0 <__hi0bits+0x20>
    6da8:	2008923a 	slli	r4,r4,8
    6dac:	10800204 	addi	r2,r2,8
    6db0:	20fc002c 	andhi	r3,r4,61440
    6db4:	1800021e 	bne	r3,zero,6dc0 <__hi0bits+0x30>
    6db8:	2008913a 	slli	r4,r4,4
    6dbc:	10800104 	addi	r2,r2,4
    6dc0:	20f0002c 	andhi	r3,r4,49152
    6dc4:	1800031e 	bne	r3,zero,6dd4 <__hi0bits+0x44>
    6dc8:	2109883a 	add	r4,r4,r4
    6dcc:	10800084 	addi	r2,r2,2
    6dd0:	2109883a 	add	r4,r4,r4
    6dd4:	20000316 	blt	r4,zero,6de4 <__hi0bits+0x54>
    6dd8:	2110002c 	andhi	r4,r4,16384
    6ddc:	2000041e 	bne	r4,zero,6df0 <__hi0bits+0x60>
    6de0:	00800804 	movi	r2,32
    6de4:	f800283a 	ret
    6de8:	0005883a 	mov	r2,zero
    6dec:	003fec06 	br	6da0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006da0>
    6df0:	10800044 	addi	r2,r2,1
    6df4:	f800283a 	ret

00006df8 <__lo0bits>:
    6df8:	20c00017 	ldw	r3,0(r4)
    6dfc:	188001cc 	andi	r2,r3,7
    6e00:	10000826 	beq	r2,zero,6e24 <__lo0bits+0x2c>
    6e04:	1880004c 	andi	r2,r3,1
    6e08:	1000211e 	bne	r2,zero,6e90 <__lo0bits+0x98>
    6e0c:	1880008c 	andi	r2,r3,2
    6e10:	1000211e 	bne	r2,zero,6e98 <__lo0bits+0xa0>
    6e14:	1806d0ba 	srli	r3,r3,2
    6e18:	00800084 	movi	r2,2
    6e1c:	20c00015 	stw	r3,0(r4)
    6e20:	f800283a 	ret
    6e24:	18bfffcc 	andi	r2,r3,65535
    6e28:	10001326 	beq	r2,zero,6e78 <__lo0bits+0x80>
    6e2c:	0005883a 	mov	r2,zero
    6e30:	19403fcc 	andi	r5,r3,255
    6e34:	2800021e 	bne	r5,zero,6e40 <__lo0bits+0x48>
    6e38:	1806d23a 	srli	r3,r3,8
    6e3c:	10800204 	addi	r2,r2,8
    6e40:	194003cc 	andi	r5,r3,15
    6e44:	2800021e 	bne	r5,zero,6e50 <__lo0bits+0x58>
    6e48:	1806d13a 	srli	r3,r3,4
    6e4c:	10800104 	addi	r2,r2,4
    6e50:	194000cc 	andi	r5,r3,3
    6e54:	2800021e 	bne	r5,zero,6e60 <__lo0bits+0x68>
    6e58:	1806d0ba 	srli	r3,r3,2
    6e5c:	10800084 	addi	r2,r2,2
    6e60:	1940004c 	andi	r5,r3,1
    6e64:	2800081e 	bne	r5,zero,6e88 <__lo0bits+0x90>
    6e68:	1806d07a 	srli	r3,r3,1
    6e6c:	1800051e 	bne	r3,zero,6e84 <__lo0bits+0x8c>
    6e70:	00800804 	movi	r2,32
    6e74:	f800283a 	ret
    6e78:	1806d43a 	srli	r3,r3,16
    6e7c:	00800404 	movi	r2,16
    6e80:	003feb06 	br	6e30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006e30>
    6e84:	10800044 	addi	r2,r2,1
    6e88:	20c00015 	stw	r3,0(r4)
    6e8c:	f800283a 	ret
    6e90:	0005883a 	mov	r2,zero
    6e94:	f800283a 	ret
    6e98:	1806d07a 	srli	r3,r3,1
    6e9c:	00800044 	movi	r2,1
    6ea0:	20c00015 	stw	r3,0(r4)
    6ea4:	f800283a 	ret

00006ea8 <__i2b>:
    6ea8:	defffd04 	addi	sp,sp,-12
    6eac:	dc000015 	stw	r16,0(sp)
    6eb0:	04000044 	movi	r16,1
    6eb4:	dc400115 	stw	r17,4(sp)
    6eb8:	2823883a 	mov	r17,r5
    6ebc:	800b883a 	mov	r5,r16
    6ec0:	dfc00215 	stw	ra,8(sp)
    6ec4:	0006a9c0 	call	6a9c <_Balloc>
    6ec8:	14400515 	stw	r17,20(r2)
    6ecc:	14000415 	stw	r16,16(r2)
    6ed0:	dfc00217 	ldw	ra,8(sp)
    6ed4:	dc400117 	ldw	r17,4(sp)
    6ed8:	dc000017 	ldw	r16,0(sp)
    6edc:	dec00304 	addi	sp,sp,12
    6ee0:	f800283a 	ret

00006ee4 <__multiply>:
    6ee4:	defffa04 	addi	sp,sp,-24
    6ee8:	dcc00315 	stw	r19,12(sp)
    6eec:	dc800215 	stw	r18,8(sp)
    6ef0:	34c00417 	ldw	r19,16(r6)
    6ef4:	2c800417 	ldw	r18,16(r5)
    6ef8:	dd000415 	stw	r20,16(sp)
    6efc:	dc400115 	stw	r17,4(sp)
    6f00:	dfc00515 	stw	ra,20(sp)
    6f04:	dc000015 	stw	r16,0(sp)
    6f08:	2829883a 	mov	r20,r5
    6f0c:	3023883a 	mov	r17,r6
    6f10:	94c0050e 	bge	r18,r19,6f28 <__multiply+0x44>
    6f14:	9007883a 	mov	r3,r18
    6f18:	3029883a 	mov	r20,r6
    6f1c:	9825883a 	mov	r18,r19
    6f20:	2823883a 	mov	r17,r5
    6f24:	1827883a 	mov	r19,r3
    6f28:	a0800217 	ldw	r2,8(r20)
    6f2c:	94e1883a 	add	r16,r18,r19
    6f30:	a1400117 	ldw	r5,4(r20)
    6f34:	1400010e 	bge	r2,r16,6f3c <__multiply+0x58>
    6f38:	29400044 	addi	r5,r5,1
    6f3c:	0006a9c0 	call	6a9c <_Balloc>
    6f40:	8415883a 	add	r10,r16,r16
    6f44:	12c00504 	addi	r11,r2,20
    6f48:	5295883a 	add	r10,r10,r10
    6f4c:	5a95883a 	add	r10,r11,r10
    6f50:	5807883a 	mov	r3,r11
    6f54:	5a80032e 	bgeu	r11,r10,6f64 <__multiply+0x80>
    6f58:	18000015 	stw	zero,0(r3)
    6f5c:	18c00104 	addi	r3,r3,4
    6f60:	1abffd36 	bltu	r3,r10,6f58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006f58>
    6f64:	9ce7883a 	add	r19,r19,r19
    6f68:	94a5883a 	add	r18,r18,r18
    6f6c:	89800504 	addi	r6,r17,20
    6f70:	9ce7883a 	add	r19,r19,r19
    6f74:	a3400504 	addi	r13,r20,20
    6f78:	94a5883a 	add	r18,r18,r18
    6f7c:	34d9883a 	add	r12,r6,r19
    6f80:	6c93883a 	add	r9,r13,r18
    6f84:	3300422e 	bgeu	r6,r12,7090 <__multiply+0x1ac>
    6f88:	37c00017 	ldw	ra,0(r6)
    6f8c:	fbffffcc 	andi	r15,ra,65535
    6f90:	78001b26 	beq	r15,zero,7000 <__multiply+0x11c>
    6f94:	5811883a 	mov	r8,r11
    6f98:	681d883a 	mov	r14,r13
    6f9c:	000f883a 	mov	r7,zero
    6fa0:	71000017 	ldw	r4,0(r14)
    6fa4:	40c00017 	ldw	r3,0(r8)
    6fa8:	73800104 	addi	r14,r14,4
    6fac:	217fffcc 	andi	r5,r4,65535
    6fb0:	2bcb383a 	mul	r5,r5,r15
    6fb4:	2008d43a 	srli	r4,r4,16
    6fb8:	1c7fffcc 	andi	r17,r3,65535
    6fbc:	2c4b883a 	add	r5,r5,r17
    6fc0:	29cb883a 	add	r5,r5,r7
    6fc4:	23c9383a 	mul	r4,r4,r15
    6fc8:	1806d43a 	srli	r3,r3,16
    6fcc:	280ed43a 	srli	r7,r5,16
    6fd0:	297fffcc 	andi	r5,r5,65535
    6fd4:	20c7883a 	add	r3,r4,r3
    6fd8:	19c7883a 	add	r3,r3,r7
    6fdc:	1808943a 	slli	r4,r3,16
    6fe0:	4023883a 	mov	r17,r8
    6fe4:	180ed43a 	srli	r7,r3,16
    6fe8:	214ab03a 	or	r5,r4,r5
    6fec:	41400015 	stw	r5,0(r8)
    6ff0:	42000104 	addi	r8,r8,4
    6ff4:	727fea36 	bltu	r14,r9,6fa0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006fa0>
    6ff8:	89c00115 	stw	r7,4(r17)
    6ffc:	37c00017 	ldw	ra,0(r6)
    7000:	f83ed43a 	srli	ra,ra,16
    7004:	f8001f26 	beq	ra,zero,7084 <__multiply+0x1a0>
    7008:	58c00017 	ldw	r3,0(r11)
    700c:	681d883a 	mov	r14,r13
    7010:	581f883a 	mov	r15,r11
    7014:	1811883a 	mov	r8,r3
    7018:	5825883a 	mov	r18,r11
    701c:	000f883a 	mov	r7,zero
    7020:	00000106 	br	7028 <__multiply+0x144>
    7024:	8825883a 	mov	r18,r17
    7028:	7140000b 	ldhu	r5,0(r14)
    702c:	4010d43a 	srli	r8,r8,16
    7030:	193fffcc 	andi	r4,r3,65535
    7034:	2fcb383a 	mul	r5,r5,ra
    7038:	7bc00104 	addi	r15,r15,4
    703c:	73800104 	addi	r14,r14,4
    7040:	2a0b883a 	add	r5,r5,r8
    7044:	29cb883a 	add	r5,r5,r7
    7048:	2806943a 	slli	r3,r5,16
    704c:	94400104 	addi	r17,r18,4
    7050:	280ad43a 	srli	r5,r5,16
    7054:	1908b03a 	or	r4,r3,r4
    7058:	793fff15 	stw	r4,-4(r15)
    705c:	70ffff17 	ldw	r3,-4(r14)
    7060:	8a000017 	ldw	r8,0(r17)
    7064:	1806d43a 	srli	r3,r3,16
    7068:	413fffcc 	andi	r4,r8,65535
    706c:	1fc7383a 	mul	r3,r3,ra
    7070:	1907883a 	add	r3,r3,r4
    7074:	1947883a 	add	r3,r3,r5
    7078:	180ed43a 	srli	r7,r3,16
    707c:	727fe936 	bltu	r14,r9,7024 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007024>
    7080:	90c00115 	stw	r3,4(r18)
    7084:	31800104 	addi	r6,r6,4
    7088:	5ac00104 	addi	r11,r11,4
    708c:	333fbe36 	bltu	r6,r12,6f88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006f88>
    7090:	0400090e 	bge	zero,r16,70b8 <__multiply+0x1d4>
    7094:	50ffff17 	ldw	r3,-4(r10)
    7098:	52bfff04 	addi	r10,r10,-4
    709c:	18000326 	beq	r3,zero,70ac <__multiply+0x1c8>
    70a0:	00000506 	br	70b8 <__multiply+0x1d4>
    70a4:	50c00017 	ldw	r3,0(r10)
    70a8:	1800031e 	bne	r3,zero,70b8 <__multiply+0x1d4>
    70ac:	843fffc4 	addi	r16,r16,-1
    70b0:	52bfff04 	addi	r10,r10,-4
    70b4:	803ffb1e 	bne	r16,zero,70a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70070a4>
    70b8:	14000415 	stw	r16,16(r2)
    70bc:	dfc00517 	ldw	ra,20(sp)
    70c0:	dd000417 	ldw	r20,16(sp)
    70c4:	dcc00317 	ldw	r19,12(sp)
    70c8:	dc800217 	ldw	r18,8(sp)
    70cc:	dc400117 	ldw	r17,4(sp)
    70d0:	dc000017 	ldw	r16,0(sp)
    70d4:	dec00604 	addi	sp,sp,24
    70d8:	f800283a 	ret

000070dc <__pow5mult>:
    70dc:	defffa04 	addi	sp,sp,-24
    70e0:	dcc00315 	stw	r19,12(sp)
    70e4:	dc000015 	stw	r16,0(sp)
    70e8:	dfc00515 	stw	ra,20(sp)
    70ec:	dd000415 	stw	r20,16(sp)
    70f0:	dc800215 	stw	r18,8(sp)
    70f4:	dc400115 	stw	r17,4(sp)
    70f8:	308000cc 	andi	r2,r6,3
    70fc:	3021883a 	mov	r16,r6
    7100:	2027883a 	mov	r19,r4
    7104:	10002f1e 	bne	r2,zero,71c4 <__pow5mult+0xe8>
    7108:	2825883a 	mov	r18,r5
    710c:	8021d0ba 	srai	r16,r16,2
    7110:	80001a26 	beq	r16,zero,717c <__pow5mult+0xa0>
    7114:	9c401217 	ldw	r17,72(r19)
    7118:	8800061e 	bne	r17,zero,7134 <__pow5mult+0x58>
    711c:	00003406 	br	71f0 <__pow5mult+0x114>
    7120:	8021d07a 	srai	r16,r16,1
    7124:	80001526 	beq	r16,zero,717c <__pow5mult+0xa0>
    7128:	88800017 	ldw	r2,0(r17)
    712c:	10001c26 	beq	r2,zero,71a0 <__pow5mult+0xc4>
    7130:	1023883a 	mov	r17,r2
    7134:	8080004c 	andi	r2,r16,1
    7138:	103ff926 	beq	r2,zero,7120 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007120>
    713c:	880d883a 	mov	r6,r17
    7140:	900b883a 	mov	r5,r18
    7144:	9809883a 	mov	r4,r19
    7148:	0006ee40 	call	6ee4 <__multiply>
    714c:	90001b26 	beq	r18,zero,71bc <__pow5mult+0xe0>
    7150:	91000117 	ldw	r4,4(r18)
    7154:	98c01317 	ldw	r3,76(r19)
    7158:	8021d07a 	srai	r16,r16,1
    715c:	2109883a 	add	r4,r4,r4
    7160:	2109883a 	add	r4,r4,r4
    7164:	1907883a 	add	r3,r3,r4
    7168:	19000017 	ldw	r4,0(r3)
    716c:	91000015 	stw	r4,0(r18)
    7170:	1c800015 	stw	r18,0(r3)
    7174:	1025883a 	mov	r18,r2
    7178:	803feb1e 	bne	r16,zero,7128 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007128>
    717c:	9005883a 	mov	r2,r18
    7180:	dfc00517 	ldw	ra,20(sp)
    7184:	dd000417 	ldw	r20,16(sp)
    7188:	dcc00317 	ldw	r19,12(sp)
    718c:	dc800217 	ldw	r18,8(sp)
    7190:	dc400117 	ldw	r17,4(sp)
    7194:	dc000017 	ldw	r16,0(sp)
    7198:	dec00604 	addi	sp,sp,24
    719c:	f800283a 	ret
    71a0:	880d883a 	mov	r6,r17
    71a4:	880b883a 	mov	r5,r17
    71a8:	9809883a 	mov	r4,r19
    71ac:	0006ee40 	call	6ee4 <__multiply>
    71b0:	88800015 	stw	r2,0(r17)
    71b4:	10000015 	stw	zero,0(r2)
    71b8:	003fdd06 	br	7130 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007130>
    71bc:	1025883a 	mov	r18,r2
    71c0:	003fd706 	br	7120 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007120>
    71c4:	10bfffc4 	addi	r2,r2,-1
    71c8:	1085883a 	add	r2,r2,r2
    71cc:	00c000b4 	movhi	r3,2
    71d0:	18e7a804 	addi	r3,r3,-24928
    71d4:	1085883a 	add	r2,r2,r2
    71d8:	1885883a 	add	r2,r3,r2
    71dc:	11800017 	ldw	r6,0(r2)
    71e0:	000f883a 	mov	r7,zero
    71e4:	0006b6c0 	call	6b6c <__multadd>
    71e8:	1025883a 	mov	r18,r2
    71ec:	003fc706 	br	710c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700710c>
    71f0:	05000044 	movi	r20,1
    71f4:	a00b883a 	mov	r5,r20
    71f8:	9809883a 	mov	r4,r19
    71fc:	0006a9c0 	call	6a9c <_Balloc>
    7200:	1023883a 	mov	r17,r2
    7204:	00809c44 	movi	r2,625
    7208:	88800515 	stw	r2,20(r17)
    720c:	8d000415 	stw	r20,16(r17)
    7210:	9c401215 	stw	r17,72(r19)
    7214:	88000015 	stw	zero,0(r17)
    7218:	003fc606 	br	7134 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007134>

0000721c <__lshift>:
    721c:	defff904 	addi	sp,sp,-28
    7220:	dd400515 	stw	r21,20(sp)
    7224:	dcc00315 	stw	r19,12(sp)
    7228:	302bd17a 	srai	r21,r6,5
    722c:	2cc00417 	ldw	r19,16(r5)
    7230:	28800217 	ldw	r2,8(r5)
    7234:	dd000415 	stw	r20,16(sp)
    7238:	ace7883a 	add	r19,r21,r19
    723c:	dc800215 	stw	r18,8(sp)
    7240:	dc400115 	stw	r17,4(sp)
    7244:	dc000015 	stw	r16,0(sp)
    7248:	dfc00615 	stw	ra,24(sp)
    724c:	9c000044 	addi	r16,r19,1
    7250:	2823883a 	mov	r17,r5
    7254:	3029883a 	mov	r20,r6
    7258:	2025883a 	mov	r18,r4
    725c:	29400117 	ldw	r5,4(r5)
    7260:	1400030e 	bge	r2,r16,7270 <__lshift+0x54>
    7264:	1085883a 	add	r2,r2,r2
    7268:	29400044 	addi	r5,r5,1
    726c:	143ffd16 	blt	r2,r16,7264 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007264>
    7270:	9009883a 	mov	r4,r18
    7274:	0006a9c0 	call	6a9c <_Balloc>
    7278:	10c00504 	addi	r3,r2,20
    727c:	0540070e 	bge	zero,r21,729c <__lshift+0x80>
    7280:	ad6b883a 	add	r21,r21,r21
    7284:	ad6b883a 	add	r21,r21,r21
    7288:	1809883a 	mov	r4,r3
    728c:	1d47883a 	add	r3,r3,r21
    7290:	20000015 	stw	zero,0(r4)
    7294:	21000104 	addi	r4,r4,4
    7298:	193ffd1e 	bne	r3,r4,7290 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007290>
    729c:	8a000417 	ldw	r8,16(r17)
    72a0:	89000504 	addi	r4,r17,20
    72a4:	a18007cc 	andi	r6,r20,31
    72a8:	4211883a 	add	r8,r8,r8
    72ac:	4211883a 	add	r8,r8,r8
    72b0:	2211883a 	add	r8,r4,r8
    72b4:	30002326 	beq	r6,zero,7344 <__lshift+0x128>
    72b8:	02400804 	movi	r9,32
    72bc:	4993c83a 	sub	r9,r9,r6
    72c0:	000b883a 	mov	r5,zero
    72c4:	21c00017 	ldw	r7,0(r4)
    72c8:	1815883a 	mov	r10,r3
    72cc:	18c00104 	addi	r3,r3,4
    72d0:	398e983a 	sll	r7,r7,r6
    72d4:	21000104 	addi	r4,r4,4
    72d8:	394ab03a 	or	r5,r7,r5
    72dc:	197fff15 	stw	r5,-4(r3)
    72e0:	217fff17 	ldw	r5,-4(r4)
    72e4:	2a4ad83a 	srl	r5,r5,r9
    72e8:	223ff636 	bltu	r4,r8,72c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70072c4>
    72ec:	51400115 	stw	r5,4(r10)
    72f0:	28001a1e 	bne	r5,zero,735c <__lshift+0x140>
    72f4:	843fffc4 	addi	r16,r16,-1
    72f8:	14000415 	stw	r16,16(r2)
    72fc:	88000826 	beq	r17,zero,7320 <__lshift+0x104>
    7300:	89000117 	ldw	r4,4(r17)
    7304:	90c01317 	ldw	r3,76(r18)
    7308:	2109883a 	add	r4,r4,r4
    730c:	2109883a 	add	r4,r4,r4
    7310:	1907883a 	add	r3,r3,r4
    7314:	19000017 	ldw	r4,0(r3)
    7318:	89000015 	stw	r4,0(r17)
    731c:	1c400015 	stw	r17,0(r3)
    7320:	dfc00617 	ldw	ra,24(sp)
    7324:	dd400517 	ldw	r21,20(sp)
    7328:	dd000417 	ldw	r20,16(sp)
    732c:	dcc00317 	ldw	r19,12(sp)
    7330:	dc800217 	ldw	r18,8(sp)
    7334:	dc400117 	ldw	r17,4(sp)
    7338:	dc000017 	ldw	r16,0(sp)
    733c:	dec00704 	addi	sp,sp,28
    7340:	f800283a 	ret
    7344:	21400017 	ldw	r5,0(r4)
    7348:	18c00104 	addi	r3,r3,4
    734c:	21000104 	addi	r4,r4,4
    7350:	197fff15 	stw	r5,-4(r3)
    7354:	223ffb36 	bltu	r4,r8,7344 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007344>
    7358:	003fe606 	br	72f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70072f4>
    735c:	9c000084 	addi	r16,r19,2
    7360:	003fe406 	br	72f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70072f4>

00007364 <__mcmp>:
    7364:	20800417 	ldw	r2,16(r4)
    7368:	28c00417 	ldw	r3,16(r5)
    736c:	10c5c83a 	sub	r2,r2,r3
    7370:	1000111e 	bne	r2,zero,73b8 <__mcmp+0x54>
    7374:	18c7883a 	add	r3,r3,r3
    7378:	18c7883a 	add	r3,r3,r3
    737c:	21000504 	addi	r4,r4,20
    7380:	29400504 	addi	r5,r5,20
    7384:	20c5883a 	add	r2,r4,r3
    7388:	28cb883a 	add	r5,r5,r3
    738c:	00000106 	br	7394 <__mcmp+0x30>
    7390:	20800a2e 	bgeu	r4,r2,73bc <__mcmp+0x58>
    7394:	10bfff04 	addi	r2,r2,-4
    7398:	297fff04 	addi	r5,r5,-4
    739c:	11800017 	ldw	r6,0(r2)
    73a0:	28c00017 	ldw	r3,0(r5)
    73a4:	30fffa26 	beq	r6,r3,7390 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007390>
    73a8:	30c00236 	bltu	r6,r3,73b4 <__mcmp+0x50>
    73ac:	00800044 	movi	r2,1
    73b0:	f800283a 	ret
    73b4:	00bfffc4 	movi	r2,-1
    73b8:	f800283a 	ret
    73bc:	0005883a 	mov	r2,zero
    73c0:	f800283a 	ret

000073c4 <__mdiff>:
    73c4:	28c00417 	ldw	r3,16(r5)
    73c8:	30800417 	ldw	r2,16(r6)
    73cc:	defffa04 	addi	sp,sp,-24
    73d0:	dcc00315 	stw	r19,12(sp)
    73d4:	dc800215 	stw	r18,8(sp)
    73d8:	dfc00515 	stw	ra,20(sp)
    73dc:	dd000415 	stw	r20,16(sp)
    73e0:	dc400115 	stw	r17,4(sp)
    73e4:	dc000015 	stw	r16,0(sp)
    73e8:	1887c83a 	sub	r3,r3,r2
    73ec:	2825883a 	mov	r18,r5
    73f0:	3027883a 	mov	r19,r6
    73f4:	1800141e 	bne	r3,zero,7448 <__mdiff+0x84>
    73f8:	1085883a 	add	r2,r2,r2
    73fc:	1085883a 	add	r2,r2,r2
    7400:	2a000504 	addi	r8,r5,20
    7404:	34000504 	addi	r16,r6,20
    7408:	4087883a 	add	r3,r8,r2
    740c:	8085883a 	add	r2,r16,r2
    7410:	00000106 	br	7418 <__mdiff+0x54>
    7414:	40c0592e 	bgeu	r8,r3,757c <__mdiff+0x1b8>
    7418:	18ffff04 	addi	r3,r3,-4
    741c:	10bfff04 	addi	r2,r2,-4
    7420:	19c00017 	ldw	r7,0(r3)
    7424:	11400017 	ldw	r5,0(r2)
    7428:	397ffa26 	beq	r7,r5,7414 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007414>
    742c:	3940592e 	bgeu	r7,r5,7594 <__mdiff+0x1d0>
    7430:	9005883a 	mov	r2,r18
    7434:	4023883a 	mov	r17,r8
    7438:	9825883a 	mov	r18,r19
    743c:	05000044 	movi	r20,1
    7440:	1027883a 	mov	r19,r2
    7444:	00000406 	br	7458 <__mdiff+0x94>
    7448:	18005616 	blt	r3,zero,75a4 <__mdiff+0x1e0>
    744c:	34400504 	addi	r17,r6,20
    7450:	2c000504 	addi	r16,r5,20
    7454:	0029883a 	mov	r20,zero
    7458:	91400117 	ldw	r5,4(r18)
    745c:	0006a9c0 	call	6a9c <_Balloc>
    7460:	92400417 	ldw	r9,16(r18)
    7464:	9b000417 	ldw	r12,16(r19)
    7468:	12c00504 	addi	r11,r2,20
    746c:	4a51883a 	add	r8,r9,r9
    7470:	6319883a 	add	r12,r12,r12
    7474:	4211883a 	add	r8,r8,r8
    7478:	6319883a 	add	r12,r12,r12
    747c:	15000315 	stw	r20,12(r2)
    7480:	8211883a 	add	r8,r16,r8
    7484:	8b19883a 	add	r12,r17,r12
    7488:	0007883a 	mov	r3,zero
    748c:	81400017 	ldw	r5,0(r16)
    7490:	89c00017 	ldw	r7,0(r17)
    7494:	59800104 	addi	r6,r11,4
    7498:	293fffcc 	andi	r4,r5,65535
    749c:	20c7883a 	add	r3,r4,r3
    74a0:	393fffcc 	andi	r4,r7,65535
    74a4:	1909c83a 	sub	r4,r3,r4
    74a8:	280ad43a 	srli	r5,r5,16
    74ac:	380ed43a 	srli	r7,r7,16
    74b0:	2007d43a 	srai	r3,r4,16
    74b4:	213fffcc 	andi	r4,r4,65535
    74b8:	29cbc83a 	sub	r5,r5,r7
    74bc:	28c7883a 	add	r3,r5,r3
    74c0:	180a943a 	slli	r5,r3,16
    74c4:	8c400104 	addi	r17,r17,4
    74c8:	84000104 	addi	r16,r16,4
    74cc:	2908b03a 	or	r4,r5,r4
    74d0:	59000015 	stw	r4,0(r11)
    74d4:	1807d43a 	srai	r3,r3,16
    74d8:	3015883a 	mov	r10,r6
    74dc:	3017883a 	mov	r11,r6
    74e0:	8b3fea36 	bltu	r17,r12,748c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700748c>
    74e4:	8200162e 	bgeu	r16,r8,7540 <__mdiff+0x17c>
    74e8:	8017883a 	mov	r11,r16
    74ec:	59400017 	ldw	r5,0(r11)
    74f0:	31800104 	addi	r6,r6,4
    74f4:	5ac00104 	addi	r11,r11,4
    74f8:	293fffcc 	andi	r4,r5,65535
    74fc:	20c7883a 	add	r3,r4,r3
    7500:	280ed43a 	srli	r7,r5,16
    7504:	180bd43a 	srai	r5,r3,16
    7508:	193fffcc 	andi	r4,r3,65535
    750c:	3947883a 	add	r3,r7,r5
    7510:	180a943a 	slli	r5,r3,16
    7514:	1807d43a 	srai	r3,r3,16
    7518:	2908b03a 	or	r4,r5,r4
    751c:	313fff15 	stw	r4,-4(r6)
    7520:	5a3ff236 	bltu	r11,r8,74ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70074ec>
    7524:	0406303a 	nor	r3,zero,r16
    7528:	1a07883a 	add	r3,r3,r8
    752c:	1806d0ba 	srli	r3,r3,2
    7530:	18c00044 	addi	r3,r3,1
    7534:	18c7883a 	add	r3,r3,r3
    7538:	18c7883a 	add	r3,r3,r3
    753c:	50d5883a 	add	r10,r10,r3
    7540:	50ffff04 	addi	r3,r10,-4
    7544:	2000041e 	bne	r4,zero,7558 <__mdiff+0x194>
    7548:	18ffff04 	addi	r3,r3,-4
    754c:	19000017 	ldw	r4,0(r3)
    7550:	4a7fffc4 	addi	r9,r9,-1
    7554:	203ffc26 	beq	r4,zero,7548 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007548>
    7558:	12400415 	stw	r9,16(r2)
    755c:	dfc00517 	ldw	ra,20(sp)
    7560:	dd000417 	ldw	r20,16(sp)
    7564:	dcc00317 	ldw	r19,12(sp)
    7568:	dc800217 	ldw	r18,8(sp)
    756c:	dc400117 	ldw	r17,4(sp)
    7570:	dc000017 	ldw	r16,0(sp)
    7574:	dec00604 	addi	sp,sp,24
    7578:	f800283a 	ret
    757c:	000b883a 	mov	r5,zero
    7580:	0006a9c0 	call	6a9c <_Balloc>
    7584:	00c00044 	movi	r3,1
    7588:	10c00415 	stw	r3,16(r2)
    758c:	10000515 	stw	zero,20(r2)
    7590:	003ff206 	br	755c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700755c>
    7594:	8023883a 	mov	r17,r16
    7598:	0029883a 	mov	r20,zero
    759c:	4021883a 	mov	r16,r8
    75a0:	003fad06 	br	7458 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007458>
    75a4:	9005883a 	mov	r2,r18
    75a8:	94400504 	addi	r17,r18,20
    75ac:	9c000504 	addi	r16,r19,20
    75b0:	9825883a 	mov	r18,r19
    75b4:	05000044 	movi	r20,1
    75b8:	1027883a 	mov	r19,r2
    75bc:	003fa606 	br	7458 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007458>

000075c0 <__ulp>:
    75c0:	295ffc2c 	andhi	r5,r5,32752
    75c4:	00bf3034 	movhi	r2,64704
    75c8:	2887883a 	add	r3,r5,r2
    75cc:	00c0020e 	bge	zero,r3,75d8 <__ulp+0x18>
    75d0:	0005883a 	mov	r2,zero
    75d4:	f800283a 	ret
    75d8:	00c7c83a 	sub	r3,zero,r3
    75dc:	1807d53a 	srai	r3,r3,20
    75e0:	008004c4 	movi	r2,19
    75e4:	10c00b0e 	bge	r2,r3,7614 <__ulp+0x54>
    75e8:	18bffb04 	addi	r2,r3,-20
    75ec:	01000784 	movi	r4,30
    75f0:	0007883a 	mov	r3,zero
    75f4:	20800516 	blt	r4,r2,760c <__ulp+0x4c>
    75f8:	010007c4 	movi	r4,31
    75fc:	2089c83a 	sub	r4,r4,r2
    7600:	00800044 	movi	r2,1
    7604:	1104983a 	sll	r2,r2,r4
    7608:	f800283a 	ret
    760c:	00800044 	movi	r2,1
    7610:	f800283a 	ret
    7614:	01400234 	movhi	r5,8
    7618:	28c7d83a 	sra	r3,r5,r3
    761c:	0005883a 	mov	r2,zero
    7620:	f800283a 	ret

00007624 <__b2d>:
    7624:	defffa04 	addi	sp,sp,-24
    7628:	dc000015 	stw	r16,0(sp)
    762c:	24000417 	ldw	r16,16(r4)
    7630:	dc400115 	stw	r17,4(sp)
    7634:	24400504 	addi	r17,r4,20
    7638:	8421883a 	add	r16,r16,r16
    763c:	8421883a 	add	r16,r16,r16
    7640:	8c21883a 	add	r16,r17,r16
    7644:	dc800215 	stw	r18,8(sp)
    7648:	84bfff17 	ldw	r18,-4(r16)
    764c:	dd000415 	stw	r20,16(sp)
    7650:	dcc00315 	stw	r19,12(sp)
    7654:	9009883a 	mov	r4,r18
    7658:	2829883a 	mov	r20,r5
    765c:	dfc00515 	stw	ra,20(sp)
    7660:	0006d900 	call	6d90 <__hi0bits>
    7664:	00c00804 	movi	r3,32
    7668:	1889c83a 	sub	r4,r3,r2
    766c:	a1000015 	stw	r4,0(r20)
    7670:	01000284 	movi	r4,10
    7674:	84ffff04 	addi	r19,r16,-4
    7678:	20801216 	blt	r4,r2,76c4 <__b2d+0xa0>
    767c:	018002c4 	movi	r6,11
    7680:	308dc83a 	sub	r6,r6,r2
    7684:	9186d83a 	srl	r3,r18,r6
    7688:	18cffc34 	orhi	r3,r3,16368
    768c:	8cc0212e 	bgeu	r17,r19,7714 <__b2d+0xf0>
    7690:	813ffe17 	ldw	r4,-8(r16)
    7694:	218cd83a 	srl	r6,r4,r6
    7698:	10800544 	addi	r2,r2,21
    769c:	9084983a 	sll	r2,r18,r2
    76a0:	1184b03a 	or	r2,r2,r6
    76a4:	dfc00517 	ldw	ra,20(sp)
    76a8:	dd000417 	ldw	r20,16(sp)
    76ac:	dcc00317 	ldw	r19,12(sp)
    76b0:	dc800217 	ldw	r18,8(sp)
    76b4:	dc400117 	ldw	r17,4(sp)
    76b8:	dc000017 	ldw	r16,0(sp)
    76bc:	dec00604 	addi	sp,sp,24
    76c0:	f800283a 	ret
    76c4:	8cc00f2e 	bgeu	r17,r19,7704 <__b2d+0xe0>
    76c8:	117ffd44 	addi	r5,r2,-11
    76cc:	80bffe17 	ldw	r2,-8(r16)
    76d0:	28000e26 	beq	r5,zero,770c <__b2d+0xe8>
    76d4:	1949c83a 	sub	r4,r3,r5
    76d8:	9164983a 	sll	r18,r18,r5
    76dc:	1106d83a 	srl	r3,r2,r4
    76e0:	81bffe04 	addi	r6,r16,-8
    76e4:	948ffc34 	orhi	r18,r18,16368
    76e8:	90c6b03a 	or	r3,r18,r3
    76ec:	89800e2e 	bgeu	r17,r6,7728 <__b2d+0x104>
    76f0:	81bffd17 	ldw	r6,-12(r16)
    76f4:	1144983a 	sll	r2,r2,r5
    76f8:	310ad83a 	srl	r5,r6,r4
    76fc:	2884b03a 	or	r2,r5,r2
    7700:	003fe806 	br	76a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70076a4>
    7704:	10bffd44 	addi	r2,r2,-11
    7708:	1000041e 	bne	r2,zero,771c <__b2d+0xf8>
    770c:	90cffc34 	orhi	r3,r18,16368
    7710:	003fe406 	br	76a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70076a4>
    7714:	000d883a 	mov	r6,zero
    7718:	003fdf06 	br	7698 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007698>
    771c:	90a4983a 	sll	r18,r18,r2
    7720:	0005883a 	mov	r2,zero
    7724:	003ff906 	br	770c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700770c>
    7728:	1144983a 	sll	r2,r2,r5
    772c:	003fdd06 	br	76a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70076a4>

00007730 <__d2b>:
    7730:	defff804 	addi	sp,sp,-32
    7734:	dc000215 	stw	r16,8(sp)
    7738:	3021883a 	mov	r16,r6
    773c:	dc400315 	stw	r17,12(sp)
    7740:	8022907a 	slli	r17,r16,1
    7744:	dd000615 	stw	r20,24(sp)
    7748:	2829883a 	mov	r20,r5
    774c:	01400044 	movi	r5,1
    7750:	dcc00515 	stw	r19,20(sp)
    7754:	dc800415 	stw	r18,16(sp)
    7758:	dfc00715 	stw	ra,28(sp)
    775c:	3825883a 	mov	r18,r7
    7760:	8822d57a 	srli	r17,r17,21
    7764:	0006a9c0 	call	6a9c <_Balloc>
    7768:	1027883a 	mov	r19,r2
    776c:	00800434 	movhi	r2,16
    7770:	10bfffc4 	addi	r2,r2,-1
    7774:	808c703a 	and	r6,r16,r2
    7778:	88000126 	beq	r17,zero,7780 <__d2b+0x50>
    777c:	31800434 	orhi	r6,r6,16
    7780:	d9800015 	stw	r6,0(sp)
    7784:	a0002426 	beq	r20,zero,7818 <__d2b+0xe8>
    7788:	d9000104 	addi	r4,sp,4
    778c:	dd000115 	stw	r20,4(sp)
    7790:	0006df80 	call	6df8 <__lo0bits>
    7794:	d8c00017 	ldw	r3,0(sp)
    7798:	10002f1e 	bne	r2,zero,7858 <__d2b+0x128>
    779c:	d9000117 	ldw	r4,4(sp)
    77a0:	99000515 	stw	r4,20(r19)
    77a4:	1821003a 	cmpeq	r16,r3,zero
    77a8:	01000084 	movi	r4,2
    77ac:	2421c83a 	sub	r16,r4,r16
    77b0:	98c00615 	stw	r3,24(r19)
    77b4:	9c000415 	stw	r16,16(r19)
    77b8:	88001f1e 	bne	r17,zero,7838 <__d2b+0x108>
    77bc:	10bef384 	addi	r2,r2,-1074
    77c0:	90800015 	stw	r2,0(r18)
    77c4:	00900034 	movhi	r2,16384
    77c8:	10bfffc4 	addi	r2,r2,-1
    77cc:	8085883a 	add	r2,r16,r2
    77d0:	1085883a 	add	r2,r2,r2
    77d4:	1085883a 	add	r2,r2,r2
    77d8:	9885883a 	add	r2,r19,r2
    77dc:	11000517 	ldw	r4,20(r2)
    77e0:	8020917a 	slli	r16,r16,5
    77e4:	0006d900 	call	6d90 <__hi0bits>
    77e8:	d8c00817 	ldw	r3,32(sp)
    77ec:	8085c83a 	sub	r2,r16,r2
    77f0:	18800015 	stw	r2,0(r3)
    77f4:	9805883a 	mov	r2,r19
    77f8:	dfc00717 	ldw	ra,28(sp)
    77fc:	dd000617 	ldw	r20,24(sp)
    7800:	dcc00517 	ldw	r19,20(sp)
    7804:	dc800417 	ldw	r18,16(sp)
    7808:	dc400317 	ldw	r17,12(sp)
    780c:	dc000217 	ldw	r16,8(sp)
    7810:	dec00804 	addi	sp,sp,32
    7814:	f800283a 	ret
    7818:	d809883a 	mov	r4,sp
    781c:	0006df80 	call	6df8 <__lo0bits>
    7820:	d8c00017 	ldw	r3,0(sp)
    7824:	04000044 	movi	r16,1
    7828:	9c000415 	stw	r16,16(r19)
    782c:	98c00515 	stw	r3,20(r19)
    7830:	10800804 	addi	r2,r2,32
    7834:	883fe126 	beq	r17,zero,77bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70077bc>
    7838:	00c00d44 	movi	r3,53
    783c:	8c7ef344 	addi	r17,r17,-1075
    7840:	88a3883a 	add	r17,r17,r2
    7844:	1885c83a 	sub	r2,r3,r2
    7848:	d8c00817 	ldw	r3,32(sp)
    784c:	94400015 	stw	r17,0(r18)
    7850:	18800015 	stw	r2,0(r3)
    7854:	003fe706 	br	77f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70077f4>
    7858:	01000804 	movi	r4,32
    785c:	2089c83a 	sub	r4,r4,r2
    7860:	1908983a 	sll	r4,r3,r4
    7864:	d9400117 	ldw	r5,4(sp)
    7868:	1886d83a 	srl	r3,r3,r2
    786c:	2148b03a 	or	r4,r4,r5
    7870:	99000515 	stw	r4,20(r19)
    7874:	d8c00015 	stw	r3,0(sp)
    7878:	003fca06 	br	77a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70077a4>

0000787c <__ratio>:
    787c:	defff904 	addi	sp,sp,-28
    7880:	dc400315 	stw	r17,12(sp)
    7884:	2823883a 	mov	r17,r5
    7888:	d9400104 	addi	r5,sp,4
    788c:	dfc00615 	stw	ra,24(sp)
    7890:	dcc00515 	stw	r19,20(sp)
    7894:	dc800415 	stw	r18,16(sp)
    7898:	2027883a 	mov	r19,r4
    789c:	dc000215 	stw	r16,8(sp)
    78a0:	00076240 	call	7624 <__b2d>
    78a4:	d80b883a 	mov	r5,sp
    78a8:	8809883a 	mov	r4,r17
    78ac:	1025883a 	mov	r18,r2
    78b0:	1821883a 	mov	r16,r3
    78b4:	00076240 	call	7624 <__b2d>
    78b8:	8a000417 	ldw	r8,16(r17)
    78bc:	99000417 	ldw	r4,16(r19)
    78c0:	d9400117 	ldw	r5,4(sp)
    78c4:	2209c83a 	sub	r4,r4,r8
    78c8:	2010917a 	slli	r8,r4,5
    78cc:	d9000017 	ldw	r4,0(sp)
    78d0:	2909c83a 	sub	r4,r5,r4
    78d4:	4109883a 	add	r4,r8,r4
    78d8:	01000e0e 	bge	zero,r4,7914 <__ratio+0x98>
    78dc:	2008953a 	slli	r4,r4,20
    78e0:	2421883a 	add	r16,r4,r16
    78e4:	100d883a 	mov	r6,r2
    78e8:	180f883a 	mov	r7,r3
    78ec:	9009883a 	mov	r4,r18
    78f0:	800b883a 	mov	r5,r16
    78f4:	000b7680 	call	b768 <__divdf3>
    78f8:	dfc00617 	ldw	ra,24(sp)
    78fc:	dcc00517 	ldw	r19,20(sp)
    7900:	dc800417 	ldw	r18,16(sp)
    7904:	dc400317 	ldw	r17,12(sp)
    7908:	dc000217 	ldw	r16,8(sp)
    790c:	dec00704 	addi	sp,sp,28
    7910:	f800283a 	ret
    7914:	2008953a 	slli	r4,r4,20
    7918:	1907c83a 	sub	r3,r3,r4
    791c:	003ff106 	br	78e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70078e4>

00007920 <_mprec_log10>:
    7920:	defffe04 	addi	sp,sp,-8
    7924:	dc000015 	stw	r16,0(sp)
    7928:	dfc00115 	stw	ra,4(sp)
    792c:	008005c4 	movi	r2,23
    7930:	2021883a 	mov	r16,r4
    7934:	11000d0e 	bge	r2,r4,796c <_mprec_log10+0x4c>
    7938:	0005883a 	mov	r2,zero
    793c:	00cffc34 	movhi	r3,16368
    7940:	843fffc4 	addi	r16,r16,-1
    7944:	000d883a 	mov	r6,zero
    7948:	01d00934 	movhi	r7,16420
    794c:	1009883a 	mov	r4,r2
    7950:	180b883a 	mov	r5,r3
    7954:	000c2a80 	call	c2a8 <__muldf3>
    7958:	803ff91e 	bne	r16,zero,7940 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007940>
    795c:	dfc00117 	ldw	ra,4(sp)
    7960:	dc000017 	ldw	r16,0(sp)
    7964:	dec00204 	addi	sp,sp,8
    7968:	f800283a 	ret
    796c:	202090fa 	slli	r16,r4,3
    7970:	008000b4 	movhi	r2,2
    7974:	10a7bf04 	addi	r2,r2,-24836
    7978:	1421883a 	add	r16,r2,r16
    797c:	80800017 	ldw	r2,0(r16)
    7980:	80c00117 	ldw	r3,4(r16)
    7984:	dfc00117 	ldw	ra,4(sp)
    7988:	dc000017 	ldw	r16,0(sp)
    798c:	dec00204 	addi	sp,sp,8
    7990:	f800283a 	ret

00007994 <__copybits>:
    7994:	297fffc4 	addi	r5,r5,-1
    7998:	280fd17a 	srai	r7,r5,5
    799c:	30c00417 	ldw	r3,16(r6)
    79a0:	30800504 	addi	r2,r6,20
    79a4:	39c00044 	addi	r7,r7,1
    79a8:	18c7883a 	add	r3,r3,r3
    79ac:	39cf883a 	add	r7,r7,r7
    79b0:	18c7883a 	add	r3,r3,r3
    79b4:	39cf883a 	add	r7,r7,r7
    79b8:	10c7883a 	add	r3,r2,r3
    79bc:	21cf883a 	add	r7,r4,r7
    79c0:	10c00d2e 	bgeu	r2,r3,79f8 <__copybits+0x64>
    79c4:	200b883a 	mov	r5,r4
    79c8:	12000017 	ldw	r8,0(r2)
    79cc:	29400104 	addi	r5,r5,4
    79d0:	10800104 	addi	r2,r2,4
    79d4:	2a3fff15 	stw	r8,-4(r5)
    79d8:	10fffb36 	bltu	r2,r3,79c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70079c8>
    79dc:	1985c83a 	sub	r2,r3,r6
    79e0:	10bffac4 	addi	r2,r2,-21
    79e4:	1004d0ba 	srli	r2,r2,2
    79e8:	10800044 	addi	r2,r2,1
    79ec:	1085883a 	add	r2,r2,r2
    79f0:	1085883a 	add	r2,r2,r2
    79f4:	2089883a 	add	r4,r4,r2
    79f8:	21c0032e 	bgeu	r4,r7,7a08 <__copybits+0x74>
    79fc:	20000015 	stw	zero,0(r4)
    7a00:	21000104 	addi	r4,r4,4
    7a04:	21fffd36 	bltu	r4,r7,79fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70079fc>
    7a08:	f800283a 	ret

00007a0c <__any_on>:
    7a0c:	20c00417 	ldw	r3,16(r4)
    7a10:	2805d17a 	srai	r2,r5,5
    7a14:	21000504 	addi	r4,r4,20
    7a18:	18800d0e 	bge	r3,r2,7a50 <__any_on+0x44>
    7a1c:	18c7883a 	add	r3,r3,r3
    7a20:	18c7883a 	add	r3,r3,r3
    7a24:	20c7883a 	add	r3,r4,r3
    7a28:	20c0192e 	bgeu	r4,r3,7a90 <__any_on+0x84>
    7a2c:	18bfff17 	ldw	r2,-4(r3)
    7a30:	18ffff04 	addi	r3,r3,-4
    7a34:	1000041e 	bne	r2,zero,7a48 <__any_on+0x3c>
    7a38:	20c0142e 	bgeu	r4,r3,7a8c <__any_on+0x80>
    7a3c:	18ffff04 	addi	r3,r3,-4
    7a40:	19400017 	ldw	r5,0(r3)
    7a44:	283ffc26 	beq	r5,zero,7a38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007a38>
    7a48:	00800044 	movi	r2,1
    7a4c:	f800283a 	ret
    7a50:	10c00a0e 	bge	r2,r3,7a7c <__any_on+0x70>
    7a54:	1085883a 	add	r2,r2,r2
    7a58:	1085883a 	add	r2,r2,r2
    7a5c:	294007cc 	andi	r5,r5,31
    7a60:	2087883a 	add	r3,r4,r2
    7a64:	283ff026 	beq	r5,zero,7a28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007a28>
    7a68:	19800017 	ldw	r6,0(r3)
    7a6c:	3144d83a 	srl	r2,r6,r5
    7a70:	114a983a 	sll	r5,r2,r5
    7a74:	317ff41e 	bne	r6,r5,7a48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007a48>
    7a78:	003feb06 	br	7a28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007a28>
    7a7c:	1085883a 	add	r2,r2,r2
    7a80:	1085883a 	add	r2,r2,r2
    7a84:	2087883a 	add	r3,r4,r2
    7a88:	003fe706 	br	7a28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007a28>
    7a8c:	f800283a 	ret
    7a90:	0005883a 	mov	r2,zero
    7a94:	f800283a 	ret

00007a98 <_realloc_r>:
    7a98:	defff604 	addi	sp,sp,-40
    7a9c:	dc800215 	stw	r18,8(sp)
    7aa0:	dfc00915 	stw	ra,36(sp)
    7aa4:	df000815 	stw	fp,32(sp)
    7aa8:	ddc00715 	stw	r23,28(sp)
    7aac:	dd800615 	stw	r22,24(sp)
    7ab0:	dd400515 	stw	r21,20(sp)
    7ab4:	dd000415 	stw	r20,16(sp)
    7ab8:	dcc00315 	stw	r19,12(sp)
    7abc:	dc400115 	stw	r17,4(sp)
    7ac0:	dc000015 	stw	r16,0(sp)
    7ac4:	3025883a 	mov	r18,r6
    7ac8:	2800b726 	beq	r5,zero,7da8 <_realloc_r+0x310>
    7acc:	282b883a 	mov	r21,r5
    7ad0:	2029883a 	mov	r20,r4
    7ad4:	000df840 	call	df84 <__malloc_lock>
    7ad8:	a8bfff17 	ldw	r2,-4(r21)
    7adc:	043fff04 	movi	r16,-4
    7ae0:	90c002c4 	addi	r3,r18,11
    7ae4:	01000584 	movi	r4,22
    7ae8:	acfffe04 	addi	r19,r21,-8
    7aec:	1420703a 	and	r16,r2,r16
    7af0:	20c0332e 	bgeu	r4,r3,7bc0 <_realloc_r+0x128>
    7af4:	047ffe04 	movi	r17,-8
    7af8:	1c62703a 	and	r17,r3,r17
    7afc:	8807883a 	mov	r3,r17
    7b00:	88005816 	blt	r17,zero,7c64 <_realloc_r+0x1cc>
    7b04:	8c805736 	bltu	r17,r18,7c64 <_realloc_r+0x1cc>
    7b08:	80c0300e 	bge	r16,r3,7bcc <_realloc_r+0x134>
    7b0c:	070000b4 	movhi	fp,2
    7b10:	e72a0704 	addi	fp,fp,-22500
    7b14:	e1c00217 	ldw	r7,8(fp)
    7b18:	9c09883a 	add	r4,r19,r16
    7b1c:	22000117 	ldw	r8,4(r4)
    7b20:	21c06326 	beq	r4,r7,7cb0 <_realloc_r+0x218>
    7b24:	017fff84 	movi	r5,-2
    7b28:	414a703a 	and	r5,r8,r5
    7b2c:	214b883a 	add	r5,r4,r5
    7b30:	29800117 	ldw	r6,4(r5)
    7b34:	3180004c 	andi	r6,r6,1
    7b38:	30003f26 	beq	r6,zero,7c38 <_realloc_r+0x1a0>
    7b3c:	1080004c 	andi	r2,r2,1
    7b40:	10008326 	beq	r2,zero,7d50 <_realloc_r+0x2b8>
    7b44:	900b883a 	mov	r5,r18
    7b48:	a009883a 	mov	r4,r20
    7b4c:	0005de00 	call	5de0 <_malloc_r>
    7b50:	1025883a 	mov	r18,r2
    7b54:	10011e26 	beq	r2,zero,7fd0 <_realloc_r+0x538>
    7b58:	a93fff17 	ldw	r4,-4(r21)
    7b5c:	10fffe04 	addi	r3,r2,-8
    7b60:	00bfff84 	movi	r2,-2
    7b64:	2084703a 	and	r2,r4,r2
    7b68:	9885883a 	add	r2,r19,r2
    7b6c:	1880ee26 	beq	r3,r2,7f28 <_realloc_r+0x490>
    7b70:	81bfff04 	addi	r6,r16,-4
    7b74:	00800904 	movi	r2,36
    7b78:	1180b836 	bltu	r2,r6,7e5c <_realloc_r+0x3c4>
    7b7c:	00c004c4 	movi	r3,19
    7b80:	19809636 	bltu	r3,r6,7ddc <_realloc_r+0x344>
    7b84:	9005883a 	mov	r2,r18
    7b88:	a807883a 	mov	r3,r21
    7b8c:	19000017 	ldw	r4,0(r3)
    7b90:	11000015 	stw	r4,0(r2)
    7b94:	19000117 	ldw	r4,4(r3)
    7b98:	11000115 	stw	r4,4(r2)
    7b9c:	18c00217 	ldw	r3,8(r3)
    7ba0:	10c00215 	stw	r3,8(r2)
    7ba4:	a80b883a 	mov	r5,r21
    7ba8:	a009883a 	mov	r4,r20
    7bac:	00051f40 	call	51f4 <_free_r>
    7bb0:	a009883a 	mov	r4,r20
    7bb4:	000e0a40 	call	e0a4 <__malloc_unlock>
    7bb8:	9005883a 	mov	r2,r18
    7bbc:	00001206 	br	7c08 <_realloc_r+0x170>
    7bc0:	00c00404 	movi	r3,16
    7bc4:	1823883a 	mov	r17,r3
    7bc8:	003fce06 	br	7b04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007b04>
    7bcc:	a825883a 	mov	r18,r21
    7bd0:	8445c83a 	sub	r2,r16,r17
    7bd4:	00c003c4 	movi	r3,15
    7bd8:	18802636 	bltu	r3,r2,7c74 <_realloc_r+0x1dc>
    7bdc:	99800117 	ldw	r6,4(r19)
    7be0:	9c07883a 	add	r3,r19,r16
    7be4:	3180004c 	andi	r6,r6,1
    7be8:	3420b03a 	or	r16,r6,r16
    7bec:	9c000115 	stw	r16,4(r19)
    7bf0:	18800117 	ldw	r2,4(r3)
    7bf4:	10800054 	ori	r2,r2,1
    7bf8:	18800115 	stw	r2,4(r3)
    7bfc:	a009883a 	mov	r4,r20
    7c00:	000e0a40 	call	e0a4 <__malloc_unlock>
    7c04:	9005883a 	mov	r2,r18
    7c08:	dfc00917 	ldw	ra,36(sp)
    7c0c:	df000817 	ldw	fp,32(sp)
    7c10:	ddc00717 	ldw	r23,28(sp)
    7c14:	dd800617 	ldw	r22,24(sp)
    7c18:	dd400517 	ldw	r21,20(sp)
    7c1c:	dd000417 	ldw	r20,16(sp)
    7c20:	dcc00317 	ldw	r19,12(sp)
    7c24:	dc800217 	ldw	r18,8(sp)
    7c28:	dc400117 	ldw	r17,4(sp)
    7c2c:	dc000017 	ldw	r16,0(sp)
    7c30:	dec00a04 	addi	sp,sp,40
    7c34:	f800283a 	ret
    7c38:	017fff04 	movi	r5,-4
    7c3c:	414a703a 	and	r5,r8,r5
    7c40:	814d883a 	add	r6,r16,r5
    7c44:	30c01f16 	blt	r6,r3,7cc4 <_realloc_r+0x22c>
    7c48:	20800317 	ldw	r2,12(r4)
    7c4c:	20c00217 	ldw	r3,8(r4)
    7c50:	a825883a 	mov	r18,r21
    7c54:	3021883a 	mov	r16,r6
    7c58:	18800315 	stw	r2,12(r3)
    7c5c:	10c00215 	stw	r3,8(r2)
    7c60:	003fdb06 	br	7bd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007bd0>
    7c64:	00800304 	movi	r2,12
    7c68:	a0800015 	stw	r2,0(r20)
    7c6c:	0005883a 	mov	r2,zero
    7c70:	003fe506 	br	7c08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007c08>
    7c74:	98c00117 	ldw	r3,4(r19)
    7c78:	9c4b883a 	add	r5,r19,r17
    7c7c:	11000054 	ori	r4,r2,1
    7c80:	18c0004c 	andi	r3,r3,1
    7c84:	1c62b03a 	or	r17,r3,r17
    7c88:	9c400115 	stw	r17,4(r19)
    7c8c:	29000115 	stw	r4,4(r5)
    7c90:	2885883a 	add	r2,r5,r2
    7c94:	10c00117 	ldw	r3,4(r2)
    7c98:	29400204 	addi	r5,r5,8
    7c9c:	a009883a 	mov	r4,r20
    7ca0:	18c00054 	ori	r3,r3,1
    7ca4:	10c00115 	stw	r3,4(r2)
    7ca8:	00051f40 	call	51f4 <_free_r>
    7cac:	003fd306 	br	7bfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007bfc>
    7cb0:	017fff04 	movi	r5,-4
    7cb4:	414a703a 	and	r5,r8,r5
    7cb8:	89800404 	addi	r6,r17,16
    7cbc:	8151883a 	add	r8,r16,r5
    7cc0:	4180590e 	bge	r8,r6,7e28 <_realloc_r+0x390>
    7cc4:	1080004c 	andi	r2,r2,1
    7cc8:	103f9e1e 	bne	r2,zero,7b44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007b44>
    7ccc:	adbffe17 	ldw	r22,-8(r21)
    7cd0:	00bfff04 	movi	r2,-4
    7cd4:	9dadc83a 	sub	r22,r19,r22
    7cd8:	b1800117 	ldw	r6,4(r22)
    7cdc:	3084703a 	and	r2,r6,r2
    7ce0:	20002026 	beq	r4,zero,7d64 <_realloc_r+0x2cc>
    7ce4:	80af883a 	add	r23,r16,r2
    7ce8:	b96f883a 	add	r23,r23,r5
    7cec:	21c05f26 	beq	r4,r7,7e6c <_realloc_r+0x3d4>
    7cf0:	b8c01c16 	blt	r23,r3,7d64 <_realloc_r+0x2cc>
    7cf4:	20800317 	ldw	r2,12(r4)
    7cf8:	20c00217 	ldw	r3,8(r4)
    7cfc:	81bfff04 	addi	r6,r16,-4
    7d00:	01000904 	movi	r4,36
    7d04:	18800315 	stw	r2,12(r3)
    7d08:	10c00215 	stw	r3,8(r2)
    7d0c:	b0c00217 	ldw	r3,8(r22)
    7d10:	b0800317 	ldw	r2,12(r22)
    7d14:	b4800204 	addi	r18,r22,8
    7d18:	18800315 	stw	r2,12(r3)
    7d1c:	10c00215 	stw	r3,8(r2)
    7d20:	21801b36 	bltu	r4,r6,7d90 <_realloc_r+0x2f8>
    7d24:	008004c4 	movi	r2,19
    7d28:	1180352e 	bgeu	r2,r6,7e00 <_realloc_r+0x368>
    7d2c:	a8800017 	ldw	r2,0(r21)
    7d30:	b0800215 	stw	r2,8(r22)
    7d34:	a8800117 	ldw	r2,4(r21)
    7d38:	b0800315 	stw	r2,12(r22)
    7d3c:	008006c4 	movi	r2,27
    7d40:	11807f36 	bltu	r2,r6,7f40 <_realloc_r+0x4a8>
    7d44:	b0800404 	addi	r2,r22,16
    7d48:	ad400204 	addi	r21,r21,8
    7d4c:	00002d06 	br	7e04 <_realloc_r+0x36c>
    7d50:	adbffe17 	ldw	r22,-8(r21)
    7d54:	00bfff04 	movi	r2,-4
    7d58:	9dadc83a 	sub	r22,r19,r22
    7d5c:	b1000117 	ldw	r4,4(r22)
    7d60:	2084703a 	and	r2,r4,r2
    7d64:	b03f7726 	beq	r22,zero,7b44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007b44>
    7d68:	80af883a 	add	r23,r16,r2
    7d6c:	b8ff7516 	blt	r23,r3,7b44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007b44>
    7d70:	b0800317 	ldw	r2,12(r22)
    7d74:	b0c00217 	ldw	r3,8(r22)
    7d78:	81bfff04 	addi	r6,r16,-4
    7d7c:	01000904 	movi	r4,36
    7d80:	18800315 	stw	r2,12(r3)
    7d84:	10c00215 	stw	r3,8(r2)
    7d88:	b4800204 	addi	r18,r22,8
    7d8c:	21bfe52e 	bgeu	r4,r6,7d24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007d24>
    7d90:	a80b883a 	mov	r5,r21
    7d94:	9009883a 	mov	r4,r18
    7d98:	00068180 	call	6818 <memmove>
    7d9c:	b821883a 	mov	r16,r23
    7da0:	b027883a 	mov	r19,r22
    7da4:	003f8a06 	br	7bd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007bd0>
    7da8:	300b883a 	mov	r5,r6
    7dac:	dfc00917 	ldw	ra,36(sp)
    7db0:	df000817 	ldw	fp,32(sp)
    7db4:	ddc00717 	ldw	r23,28(sp)
    7db8:	dd800617 	ldw	r22,24(sp)
    7dbc:	dd400517 	ldw	r21,20(sp)
    7dc0:	dd000417 	ldw	r20,16(sp)
    7dc4:	dcc00317 	ldw	r19,12(sp)
    7dc8:	dc800217 	ldw	r18,8(sp)
    7dcc:	dc400117 	ldw	r17,4(sp)
    7dd0:	dc000017 	ldw	r16,0(sp)
    7dd4:	dec00a04 	addi	sp,sp,40
    7dd8:	0005de01 	jmpi	5de0 <_malloc_r>
    7ddc:	a8c00017 	ldw	r3,0(r21)
    7de0:	90c00015 	stw	r3,0(r18)
    7de4:	a8c00117 	ldw	r3,4(r21)
    7de8:	90c00115 	stw	r3,4(r18)
    7dec:	00c006c4 	movi	r3,27
    7df0:	19804536 	bltu	r3,r6,7f08 <_realloc_r+0x470>
    7df4:	90800204 	addi	r2,r18,8
    7df8:	a8c00204 	addi	r3,r21,8
    7dfc:	003f6306 	br	7b8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007b8c>
    7e00:	9005883a 	mov	r2,r18
    7e04:	a8c00017 	ldw	r3,0(r21)
    7e08:	b821883a 	mov	r16,r23
    7e0c:	b027883a 	mov	r19,r22
    7e10:	10c00015 	stw	r3,0(r2)
    7e14:	a8c00117 	ldw	r3,4(r21)
    7e18:	10c00115 	stw	r3,4(r2)
    7e1c:	a8c00217 	ldw	r3,8(r21)
    7e20:	10c00215 	stw	r3,8(r2)
    7e24:	003f6a06 	br	7bd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007bd0>
    7e28:	9c67883a 	add	r19,r19,r17
    7e2c:	4445c83a 	sub	r2,r8,r17
    7e30:	e4c00215 	stw	r19,8(fp)
    7e34:	10800054 	ori	r2,r2,1
    7e38:	98800115 	stw	r2,4(r19)
    7e3c:	a8bfff17 	ldw	r2,-4(r21)
    7e40:	a009883a 	mov	r4,r20
    7e44:	1080004c 	andi	r2,r2,1
    7e48:	1462b03a 	or	r17,r2,r17
    7e4c:	ac7fff15 	stw	r17,-4(r21)
    7e50:	000e0a40 	call	e0a4 <__malloc_unlock>
    7e54:	a805883a 	mov	r2,r21
    7e58:	003f6b06 	br	7c08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007c08>
    7e5c:	a80b883a 	mov	r5,r21
    7e60:	9009883a 	mov	r4,r18
    7e64:	00068180 	call	6818 <memmove>
    7e68:	003f4e06 	br	7ba4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007ba4>
    7e6c:	89000404 	addi	r4,r17,16
    7e70:	b93fbc16 	blt	r23,r4,7d64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007d64>
    7e74:	b0800317 	ldw	r2,12(r22)
    7e78:	b0c00217 	ldw	r3,8(r22)
    7e7c:	81bfff04 	addi	r6,r16,-4
    7e80:	01000904 	movi	r4,36
    7e84:	18800315 	stw	r2,12(r3)
    7e88:	10c00215 	stw	r3,8(r2)
    7e8c:	b4800204 	addi	r18,r22,8
    7e90:	21804336 	bltu	r4,r6,7fa0 <_realloc_r+0x508>
    7e94:	008004c4 	movi	r2,19
    7e98:	11803f2e 	bgeu	r2,r6,7f98 <_realloc_r+0x500>
    7e9c:	a8800017 	ldw	r2,0(r21)
    7ea0:	b0800215 	stw	r2,8(r22)
    7ea4:	a8800117 	ldw	r2,4(r21)
    7ea8:	b0800315 	stw	r2,12(r22)
    7eac:	008006c4 	movi	r2,27
    7eb0:	11803f36 	bltu	r2,r6,7fb0 <_realloc_r+0x518>
    7eb4:	b0800404 	addi	r2,r22,16
    7eb8:	ad400204 	addi	r21,r21,8
    7ebc:	a8c00017 	ldw	r3,0(r21)
    7ec0:	10c00015 	stw	r3,0(r2)
    7ec4:	a8c00117 	ldw	r3,4(r21)
    7ec8:	10c00115 	stw	r3,4(r2)
    7ecc:	a8c00217 	ldw	r3,8(r21)
    7ed0:	10c00215 	stw	r3,8(r2)
    7ed4:	b447883a 	add	r3,r22,r17
    7ed8:	bc45c83a 	sub	r2,r23,r17
    7edc:	e0c00215 	stw	r3,8(fp)
    7ee0:	10800054 	ori	r2,r2,1
    7ee4:	18800115 	stw	r2,4(r3)
    7ee8:	b0800117 	ldw	r2,4(r22)
    7eec:	a009883a 	mov	r4,r20
    7ef0:	1080004c 	andi	r2,r2,1
    7ef4:	1462b03a 	or	r17,r2,r17
    7ef8:	b4400115 	stw	r17,4(r22)
    7efc:	000e0a40 	call	e0a4 <__malloc_unlock>
    7f00:	9005883a 	mov	r2,r18
    7f04:	003f4006 	br	7c08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007c08>
    7f08:	a8c00217 	ldw	r3,8(r21)
    7f0c:	90c00215 	stw	r3,8(r18)
    7f10:	a8c00317 	ldw	r3,12(r21)
    7f14:	90c00315 	stw	r3,12(r18)
    7f18:	30801126 	beq	r6,r2,7f60 <_realloc_r+0x4c8>
    7f1c:	90800404 	addi	r2,r18,16
    7f20:	a8c00404 	addi	r3,r21,16
    7f24:	003f1906 	br	7b8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007b8c>
    7f28:	90ffff17 	ldw	r3,-4(r18)
    7f2c:	00bfff04 	movi	r2,-4
    7f30:	a825883a 	mov	r18,r21
    7f34:	1884703a 	and	r2,r3,r2
    7f38:	80a1883a 	add	r16,r16,r2
    7f3c:	003f2406 	br	7bd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007bd0>
    7f40:	a8800217 	ldw	r2,8(r21)
    7f44:	b0800415 	stw	r2,16(r22)
    7f48:	a8800317 	ldw	r2,12(r21)
    7f4c:	b0800515 	stw	r2,20(r22)
    7f50:	31000a26 	beq	r6,r4,7f7c <_realloc_r+0x4e4>
    7f54:	b0800604 	addi	r2,r22,24
    7f58:	ad400404 	addi	r21,r21,16
    7f5c:	003fa906 	br	7e04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007e04>
    7f60:	a9000417 	ldw	r4,16(r21)
    7f64:	90800604 	addi	r2,r18,24
    7f68:	a8c00604 	addi	r3,r21,24
    7f6c:	91000415 	stw	r4,16(r18)
    7f70:	a9000517 	ldw	r4,20(r21)
    7f74:	91000515 	stw	r4,20(r18)
    7f78:	003f0406 	br	7b8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007b8c>
    7f7c:	a8c00417 	ldw	r3,16(r21)
    7f80:	ad400604 	addi	r21,r21,24
    7f84:	b0800804 	addi	r2,r22,32
    7f88:	b0c00615 	stw	r3,24(r22)
    7f8c:	a8ffff17 	ldw	r3,-4(r21)
    7f90:	b0c00715 	stw	r3,28(r22)
    7f94:	003f9b06 	br	7e04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007e04>
    7f98:	9005883a 	mov	r2,r18
    7f9c:	003fc706 	br	7ebc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007ebc>
    7fa0:	a80b883a 	mov	r5,r21
    7fa4:	9009883a 	mov	r4,r18
    7fa8:	00068180 	call	6818 <memmove>
    7fac:	003fc906 	br	7ed4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007ed4>
    7fb0:	a8800217 	ldw	r2,8(r21)
    7fb4:	b0800415 	stw	r2,16(r22)
    7fb8:	a8800317 	ldw	r2,12(r21)
    7fbc:	b0800515 	stw	r2,20(r22)
    7fc0:	31000726 	beq	r6,r4,7fe0 <_realloc_r+0x548>
    7fc4:	b0800604 	addi	r2,r22,24
    7fc8:	ad400404 	addi	r21,r21,16
    7fcc:	003fbb06 	br	7ebc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007ebc>
    7fd0:	a009883a 	mov	r4,r20
    7fd4:	000e0a40 	call	e0a4 <__malloc_unlock>
    7fd8:	0005883a 	mov	r2,zero
    7fdc:	003f0a06 	br	7c08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007c08>
    7fe0:	a8c00417 	ldw	r3,16(r21)
    7fe4:	ad400604 	addi	r21,r21,24
    7fe8:	b0800804 	addi	r2,r22,32
    7fec:	b0c00615 	stw	r3,24(r22)
    7ff0:	a8ffff17 	ldw	r3,-4(r21)
    7ff4:	b0c00715 	stw	r3,28(r22)
    7ff8:	003fb006 	br	7ebc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007ebc>

00007ffc <__fpclassifyd>:
    7ffc:	00a00034 	movhi	r2,32768
    8000:	10bfffc4 	addi	r2,r2,-1
    8004:	2884703a 	and	r2,r5,r2
    8008:	10000726 	beq	r2,zero,8028 <__fpclassifyd+0x2c>
    800c:	00fffc34 	movhi	r3,65520
    8010:	019ff834 	movhi	r6,32736
    8014:	28c7883a 	add	r3,r5,r3
    8018:	31bfffc4 	addi	r6,r6,-1
    801c:	30c00536 	bltu	r6,r3,8034 <__fpclassifyd+0x38>
    8020:	00800104 	movi	r2,4
    8024:	f800283a 	ret
    8028:	2000021e 	bne	r4,zero,8034 <__fpclassifyd+0x38>
    802c:	00800084 	movi	r2,2
    8030:	f800283a 	ret
    8034:	00dffc34 	movhi	r3,32752
    8038:	019ff834 	movhi	r6,32736
    803c:	28cb883a 	add	r5,r5,r3
    8040:	31bfffc4 	addi	r6,r6,-1
    8044:	317ff62e 	bgeu	r6,r5,8020 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008020>
    8048:	01400434 	movhi	r5,16
    804c:	297fffc4 	addi	r5,r5,-1
    8050:	28800236 	bltu	r5,r2,805c <__fpclassifyd+0x60>
    8054:	008000c4 	movi	r2,3
    8058:	f800283a 	ret
    805c:	10c00226 	beq	r2,r3,8068 <__fpclassifyd+0x6c>
    8060:	0005883a 	mov	r2,zero
    8064:	f800283a 	ret
    8068:	2005003a 	cmpeq	r2,r4,zero
    806c:	f800283a 	ret

00008070 <_sbrk_r>:
    8070:	defffd04 	addi	sp,sp,-12
    8074:	dc000015 	stw	r16,0(sp)
    8078:	040000b4 	movhi	r16,2
    807c:	dc400115 	stw	r17,4(sp)
    8080:	84383104 	addi	r16,r16,-7996
    8084:	2023883a 	mov	r17,r4
    8088:	2809883a 	mov	r4,r5
    808c:	dfc00215 	stw	ra,8(sp)
    8090:	80000015 	stw	zero,0(r16)
    8094:	000dc7c0 	call	dc7c <sbrk>
    8098:	00ffffc4 	movi	r3,-1
    809c:	10c00526 	beq	r2,r3,80b4 <_sbrk_r+0x44>
    80a0:	dfc00217 	ldw	ra,8(sp)
    80a4:	dc400117 	ldw	r17,4(sp)
    80a8:	dc000017 	ldw	r16,0(sp)
    80ac:	dec00304 	addi	sp,sp,12
    80b0:	f800283a 	ret
    80b4:	80c00017 	ldw	r3,0(r16)
    80b8:	183ff926 	beq	r3,zero,80a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70080a0>
    80bc:	88c00015 	stw	r3,0(r17)
    80c0:	003ff706 	br	80a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70080a0>

000080c4 <__sread>:
    80c4:	defffe04 	addi	sp,sp,-8
    80c8:	dc000015 	stw	r16,0(sp)
    80cc:	2821883a 	mov	r16,r5
    80d0:	2940038f 	ldh	r5,14(r5)
    80d4:	dfc00115 	stw	ra,4(sp)
    80d8:	0009eb80 	call	9eb8 <_read_r>
    80dc:	10000716 	blt	r2,zero,80fc <__sread+0x38>
    80e0:	80c01417 	ldw	r3,80(r16)
    80e4:	1887883a 	add	r3,r3,r2
    80e8:	80c01415 	stw	r3,80(r16)
    80ec:	dfc00117 	ldw	ra,4(sp)
    80f0:	dc000017 	ldw	r16,0(sp)
    80f4:	dec00204 	addi	sp,sp,8
    80f8:	f800283a 	ret
    80fc:	80c0030b 	ldhu	r3,12(r16)
    8100:	18fbffcc 	andi	r3,r3,61439
    8104:	80c0030d 	sth	r3,12(r16)
    8108:	dfc00117 	ldw	ra,4(sp)
    810c:	dc000017 	ldw	r16,0(sp)
    8110:	dec00204 	addi	sp,sp,8
    8114:	f800283a 	ret

00008118 <__seofread>:
    8118:	0005883a 	mov	r2,zero
    811c:	f800283a 	ret

00008120 <__swrite>:
    8120:	2880030b 	ldhu	r2,12(r5)
    8124:	defffb04 	addi	sp,sp,-20
    8128:	dcc00315 	stw	r19,12(sp)
    812c:	dc800215 	stw	r18,8(sp)
    8130:	dc400115 	stw	r17,4(sp)
    8134:	dc000015 	stw	r16,0(sp)
    8138:	dfc00415 	stw	ra,16(sp)
    813c:	10c0400c 	andi	r3,r2,256
    8140:	2821883a 	mov	r16,r5
    8144:	2023883a 	mov	r17,r4
    8148:	3025883a 	mov	r18,r6
    814c:	3827883a 	mov	r19,r7
    8150:	18000526 	beq	r3,zero,8168 <__swrite+0x48>
    8154:	2940038f 	ldh	r5,14(r5)
    8158:	01c00084 	movi	r7,2
    815c:	000d883a 	mov	r6,zero
    8160:	0009e580 	call	9e58 <_lseek_r>
    8164:	8080030b 	ldhu	r2,12(r16)
    8168:	8140038f 	ldh	r5,14(r16)
    816c:	10bbffcc 	andi	r2,r2,61439
    8170:	980f883a 	mov	r7,r19
    8174:	900d883a 	mov	r6,r18
    8178:	8809883a 	mov	r4,r17
    817c:	8080030d 	sth	r2,12(r16)
    8180:	dfc00417 	ldw	ra,16(sp)
    8184:	dcc00317 	ldw	r19,12(sp)
    8188:	dc800217 	ldw	r18,8(sp)
    818c:	dc400117 	ldw	r17,4(sp)
    8190:	dc000017 	ldw	r16,0(sp)
    8194:	dec00504 	addi	sp,sp,20
    8198:	00099241 	jmpi	9924 <_write_r>

0000819c <__sseek>:
    819c:	defffe04 	addi	sp,sp,-8
    81a0:	dc000015 	stw	r16,0(sp)
    81a4:	2821883a 	mov	r16,r5
    81a8:	2940038f 	ldh	r5,14(r5)
    81ac:	dfc00115 	stw	ra,4(sp)
    81b0:	0009e580 	call	9e58 <_lseek_r>
    81b4:	00ffffc4 	movi	r3,-1
    81b8:	10c00826 	beq	r2,r3,81dc <__sseek+0x40>
    81bc:	80c0030b 	ldhu	r3,12(r16)
    81c0:	80801415 	stw	r2,80(r16)
    81c4:	18c40014 	ori	r3,r3,4096
    81c8:	80c0030d 	sth	r3,12(r16)
    81cc:	dfc00117 	ldw	ra,4(sp)
    81d0:	dc000017 	ldw	r16,0(sp)
    81d4:	dec00204 	addi	sp,sp,8
    81d8:	f800283a 	ret
    81dc:	80c0030b 	ldhu	r3,12(r16)
    81e0:	18fbffcc 	andi	r3,r3,61439
    81e4:	80c0030d 	sth	r3,12(r16)
    81e8:	dfc00117 	ldw	ra,4(sp)
    81ec:	dc000017 	ldw	r16,0(sp)
    81f0:	dec00204 	addi	sp,sp,8
    81f4:	f800283a 	ret

000081f8 <__sclose>:
    81f8:	2940038f 	ldh	r5,14(r5)
    81fc:	00099841 	jmpi	9984 <_close_r>

00008200 <strcmp>:
    8200:	2144b03a 	or	r2,r4,r5
    8204:	108000cc 	andi	r2,r2,3
    8208:	1000171e 	bne	r2,zero,8268 <strcmp+0x68>
    820c:	20800017 	ldw	r2,0(r4)
    8210:	28c00017 	ldw	r3,0(r5)
    8214:	10c0141e 	bne	r2,r3,8268 <strcmp+0x68>
    8218:	027fbff4 	movhi	r9,65279
    821c:	4a7fbfc4 	addi	r9,r9,-257
    8220:	0086303a 	nor	r3,zero,r2
    8224:	02202074 	movhi	r8,32897
    8228:	1245883a 	add	r2,r2,r9
    822c:	42202004 	addi	r8,r8,-32640
    8230:	10c4703a 	and	r2,r2,r3
    8234:	1204703a 	and	r2,r2,r8
    8238:	10000226 	beq	r2,zero,8244 <strcmp+0x44>
    823c:	00002306 	br	82cc <strcmp+0xcc>
    8240:	1000221e 	bne	r2,zero,82cc <strcmp+0xcc>
    8244:	21000104 	addi	r4,r4,4
    8248:	20c00017 	ldw	r3,0(r4)
    824c:	29400104 	addi	r5,r5,4
    8250:	29800017 	ldw	r6,0(r5)
    8254:	1a4f883a 	add	r7,r3,r9
    8258:	00c4303a 	nor	r2,zero,r3
    825c:	3884703a 	and	r2,r7,r2
    8260:	1204703a 	and	r2,r2,r8
    8264:	19bff626 	beq	r3,r6,8240 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008240>
    8268:	20800003 	ldbu	r2,0(r4)
    826c:	10c03fcc 	andi	r3,r2,255
    8270:	18c0201c 	xori	r3,r3,128
    8274:	18ffe004 	addi	r3,r3,-128
    8278:	18000c26 	beq	r3,zero,82ac <strcmp+0xac>
    827c:	29800007 	ldb	r6,0(r5)
    8280:	19800326 	beq	r3,r6,8290 <strcmp+0x90>
    8284:	00001306 	br	82d4 <strcmp+0xd4>
    8288:	29800007 	ldb	r6,0(r5)
    828c:	11800b1e 	bne	r2,r6,82bc <strcmp+0xbc>
    8290:	21000044 	addi	r4,r4,1
    8294:	20c00003 	ldbu	r3,0(r4)
    8298:	29400044 	addi	r5,r5,1
    829c:	18803fcc 	andi	r2,r3,255
    82a0:	1080201c 	xori	r2,r2,128
    82a4:	10bfe004 	addi	r2,r2,-128
    82a8:	103ff71e 	bne	r2,zero,8288 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008288>
    82ac:	0007883a 	mov	r3,zero
    82b0:	28800003 	ldbu	r2,0(r5)
    82b4:	1885c83a 	sub	r2,r3,r2
    82b8:	f800283a 	ret
    82bc:	28800003 	ldbu	r2,0(r5)
    82c0:	18c03fcc 	andi	r3,r3,255
    82c4:	1885c83a 	sub	r2,r3,r2
    82c8:	f800283a 	ret
    82cc:	0005883a 	mov	r2,zero
    82d0:	f800283a 	ret
    82d4:	10c03fcc 	andi	r3,r2,255
    82d8:	003ff506 	br	82b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70082b0>

000082dc <__sprint_r.part.0>:
    82dc:	28801917 	ldw	r2,100(r5)
    82e0:	defff604 	addi	sp,sp,-40
    82e4:	dd400515 	stw	r21,20(sp)
    82e8:	dfc00915 	stw	ra,36(sp)
    82ec:	df000815 	stw	fp,32(sp)
    82f0:	ddc00715 	stw	r23,28(sp)
    82f4:	dd800615 	stw	r22,24(sp)
    82f8:	dd000415 	stw	r20,16(sp)
    82fc:	dcc00315 	stw	r19,12(sp)
    8300:	dc800215 	stw	r18,8(sp)
    8304:	dc400115 	stw	r17,4(sp)
    8308:	dc000015 	stw	r16,0(sp)
    830c:	1088000c 	andi	r2,r2,8192
    8310:	302b883a 	mov	r21,r6
    8314:	10002e26 	beq	r2,zero,83d0 <__sprint_r.part.0+0xf4>
    8318:	30800217 	ldw	r2,8(r6)
    831c:	35800017 	ldw	r22,0(r6)
    8320:	10002926 	beq	r2,zero,83c8 <__sprint_r.part.0+0xec>
    8324:	2827883a 	mov	r19,r5
    8328:	2029883a 	mov	r20,r4
    832c:	b5c00104 	addi	r23,r22,4
    8330:	04bfffc4 	movi	r18,-1
    8334:	bc400017 	ldw	r17,0(r23)
    8338:	b4000017 	ldw	r16,0(r22)
    833c:	0039883a 	mov	fp,zero
    8340:	8822d0ba 	srli	r17,r17,2
    8344:	8800031e 	bne	r17,zero,8354 <__sprint_r.part.0+0x78>
    8348:	00001806 	br	83ac <__sprint_r.part.0+0xd0>
    834c:	84000104 	addi	r16,r16,4
    8350:	8f001526 	beq	r17,fp,83a8 <__sprint_r.part.0+0xcc>
    8354:	81400017 	ldw	r5,0(r16)
    8358:	980d883a 	mov	r6,r19
    835c:	a009883a 	mov	r4,r20
    8360:	0009d040 	call	9d04 <_fputwc_r>
    8364:	e7000044 	addi	fp,fp,1
    8368:	14bff81e 	bne	r2,r18,834c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700834c>
    836c:	9005883a 	mov	r2,r18
    8370:	a8000215 	stw	zero,8(r21)
    8374:	a8000115 	stw	zero,4(r21)
    8378:	dfc00917 	ldw	ra,36(sp)
    837c:	df000817 	ldw	fp,32(sp)
    8380:	ddc00717 	ldw	r23,28(sp)
    8384:	dd800617 	ldw	r22,24(sp)
    8388:	dd400517 	ldw	r21,20(sp)
    838c:	dd000417 	ldw	r20,16(sp)
    8390:	dcc00317 	ldw	r19,12(sp)
    8394:	dc800217 	ldw	r18,8(sp)
    8398:	dc400117 	ldw	r17,4(sp)
    839c:	dc000017 	ldw	r16,0(sp)
    83a0:	dec00a04 	addi	sp,sp,40
    83a4:	f800283a 	ret
    83a8:	a8800217 	ldw	r2,8(r21)
    83ac:	8c63883a 	add	r17,r17,r17
    83b0:	8c63883a 	add	r17,r17,r17
    83b4:	1445c83a 	sub	r2,r2,r17
    83b8:	a8800215 	stw	r2,8(r21)
    83bc:	b5800204 	addi	r22,r22,8
    83c0:	bdc00204 	addi	r23,r23,8
    83c4:	103fdb1e 	bne	r2,zero,8334 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008334>
    83c8:	0005883a 	mov	r2,zero
    83cc:	003fe806 	br	8370 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008370>
    83d0:	00055040 	call	5504 <__sfvwrite_r>
    83d4:	003fe606 	br	8370 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008370>

000083d8 <__sprint_r>:
    83d8:	30c00217 	ldw	r3,8(r6)
    83dc:	18000126 	beq	r3,zero,83e4 <__sprint_r+0xc>
    83e0:	00082dc1 	jmpi	82dc <__sprint_r.part.0>
    83e4:	30000115 	stw	zero,4(r6)
    83e8:	0005883a 	mov	r2,zero
    83ec:	f800283a 	ret

000083f0 <___vfiprintf_internal_r>:
    83f0:	deffc904 	addi	sp,sp,-220
    83f4:	df003515 	stw	fp,212(sp)
    83f8:	dd003115 	stw	r20,196(sp)
    83fc:	dfc03615 	stw	ra,216(sp)
    8400:	ddc03415 	stw	r23,208(sp)
    8404:	dd803315 	stw	r22,204(sp)
    8408:	dd403215 	stw	r21,200(sp)
    840c:	dcc03015 	stw	r19,192(sp)
    8410:	dc802f15 	stw	r18,188(sp)
    8414:	dc402e15 	stw	r17,184(sp)
    8418:	dc002d15 	stw	r16,180(sp)
    841c:	d9002015 	stw	r4,128(sp)
    8420:	d9c02215 	stw	r7,136(sp)
    8424:	2829883a 	mov	r20,r5
    8428:	3039883a 	mov	fp,r6
    842c:	20000226 	beq	r4,zero,8438 <___vfiprintf_internal_r+0x48>
    8430:	20800e17 	ldw	r2,56(r4)
    8434:	1000cf26 	beq	r2,zero,8774 <___vfiprintf_internal_r+0x384>
    8438:	a080030b 	ldhu	r2,12(r20)
    843c:	10c8000c 	andi	r3,r2,8192
    8440:	1800061e 	bne	r3,zero,845c <___vfiprintf_internal_r+0x6c>
    8444:	a1001917 	ldw	r4,100(r20)
    8448:	00f7ffc4 	movi	r3,-8193
    844c:	10880014 	ori	r2,r2,8192
    8450:	20c6703a 	and	r3,r4,r3
    8454:	a080030d 	sth	r2,12(r20)
    8458:	a0c01915 	stw	r3,100(r20)
    845c:	10c0020c 	andi	r3,r2,8
    8460:	1800a926 	beq	r3,zero,8708 <___vfiprintf_internal_r+0x318>
    8464:	a0c00417 	ldw	r3,16(r20)
    8468:	1800a726 	beq	r3,zero,8708 <___vfiprintf_internal_r+0x318>
    846c:	1080068c 	andi	r2,r2,26
    8470:	00c00284 	movi	r3,10
    8474:	10c0ac26 	beq	r2,r3,8728 <___vfiprintf_internal_r+0x338>
    8478:	da801a04 	addi	r10,sp,104
    847c:	da801e15 	stw	r10,120(sp)
    8480:	d8801e17 	ldw	r2,120(sp)
    8484:	da8019c4 	addi	r10,sp,103
    8488:	058000b4 	movhi	r22,2
    848c:	05c000b4 	movhi	r23,2
    8490:	da801f15 	stw	r10,124(sp)
    8494:	1295c83a 	sub	r10,r2,r10
    8498:	b5a7f504 	addi	r22,r22,-24620
    849c:	bde7f104 	addi	r23,r23,-24636
    84a0:	dec01a15 	stw	sp,104(sp)
    84a4:	d8001c15 	stw	zero,112(sp)
    84a8:	d8001b15 	stw	zero,108(sp)
    84ac:	d8002615 	stw	zero,152(sp)
    84b0:	d8002315 	stw	zero,140(sp)
    84b4:	da802715 	stw	r10,156(sp)
    84b8:	d811883a 	mov	r8,sp
    84bc:	dd002115 	stw	r20,132(sp)
    84c0:	e021883a 	mov	r16,fp
    84c4:	80800007 	ldb	r2,0(r16)
    84c8:	1003ea26 	beq	r2,zero,9474 <___vfiprintf_internal_r+0x1084>
    84cc:	00c00944 	movi	r3,37
    84d0:	8025883a 	mov	r18,r16
    84d4:	10c0021e 	bne	r2,r3,84e0 <___vfiprintf_internal_r+0xf0>
    84d8:	00001606 	br	8534 <___vfiprintf_internal_r+0x144>
    84dc:	10c00326 	beq	r2,r3,84ec <___vfiprintf_internal_r+0xfc>
    84e0:	94800044 	addi	r18,r18,1
    84e4:	90800007 	ldb	r2,0(r18)
    84e8:	103ffc1e 	bne	r2,zero,84dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70084dc>
    84ec:	9423c83a 	sub	r17,r18,r16
    84f0:	88001026 	beq	r17,zero,8534 <___vfiprintf_internal_r+0x144>
    84f4:	d8c01c17 	ldw	r3,112(sp)
    84f8:	d8801b17 	ldw	r2,108(sp)
    84fc:	44000015 	stw	r16,0(r8)
    8500:	88c7883a 	add	r3,r17,r3
    8504:	10800044 	addi	r2,r2,1
    8508:	44400115 	stw	r17,4(r8)
    850c:	d8c01c15 	stw	r3,112(sp)
    8510:	d8801b15 	stw	r2,108(sp)
    8514:	010001c4 	movi	r4,7
    8518:	2080760e 	bge	r4,r2,86f4 <___vfiprintf_internal_r+0x304>
    851c:	1803821e 	bne	r3,zero,9328 <___vfiprintf_internal_r+0xf38>
    8520:	da802317 	ldw	r10,140(sp)
    8524:	d8001b15 	stw	zero,108(sp)
    8528:	d811883a 	mov	r8,sp
    852c:	5455883a 	add	r10,r10,r17
    8530:	da802315 	stw	r10,140(sp)
    8534:	90800007 	ldb	r2,0(r18)
    8538:	10044626 	beq	r2,zero,9654 <___vfiprintf_internal_r+0x1264>
    853c:	90c00047 	ldb	r3,1(r18)
    8540:	94000044 	addi	r16,r18,1
    8544:	d8001d85 	stb	zero,118(sp)
    8548:	0009883a 	mov	r4,zero
    854c:	000f883a 	mov	r7,zero
    8550:	027fffc4 	movi	r9,-1
    8554:	0023883a 	mov	r17,zero
    8558:	0029883a 	mov	r20,zero
    855c:	01401604 	movi	r5,88
    8560:	01800244 	movi	r6,9
    8564:	03400a84 	movi	r13,42
    8568:	03001b04 	movi	r12,108
    856c:	84000044 	addi	r16,r16,1
    8570:	18bff804 	addi	r2,r3,-32
    8574:	28827336 	bltu	r5,r2,8f44 <___vfiprintf_internal_r+0xb54>
    8578:	100490ba 	slli	r2,r2,2
    857c:	02800074 	movhi	r10,1
    8580:	52a16404 	addi	r10,r10,-31344
    8584:	1285883a 	add	r2,r2,r10
    8588:	10800017 	ldw	r2,0(r2)
    858c:	1000683a 	jmp	r2
    8590:	00008c78 	rdprs	zero,zero,561
    8594:	00008f44 	movi	zero,573
    8598:	00008f44 	movi	zero,573
    859c:	00008c98 	cmpnei	zero,zero,562
    85a0:	00008f44 	movi	zero,573
    85a4:	00008f44 	movi	zero,573
    85a8:	00008f44 	movi	zero,573
    85ac:	00008f44 	movi	zero,573
    85b0:	00008f44 	movi	zero,573
    85b4:	00008f44 	movi	zero,573
    85b8:	00008e80 	call	8e8 <Task_read_PS2+0x40c>
    85bc:	00008e9c 	xori	zero,zero,570
    85c0:	00008f44 	movi	zero,573
    85c4:	00008784 	movi	zero,542
    85c8:	00008eac 	andhi	zero,zero,570
    85cc:	00008f44 	movi	zero,573
    85d0:	00008ca4 	muli	zero,zero,562
    85d4:	00008cb0 	cmpltui	zero,zero,562
    85d8:	00008cb0 	cmpltui	zero,zero,562
    85dc:	00008cb0 	cmpltui	zero,zero,562
    85e0:	00008cb0 	cmpltui	zero,zero,562
    85e4:	00008cb0 	cmpltui	zero,zero,562
    85e8:	00008cb0 	cmpltui	zero,zero,562
    85ec:	00008cb0 	cmpltui	zero,zero,562
    85f0:	00008cb0 	cmpltui	zero,zero,562
    85f4:	00008cb0 	cmpltui	zero,zero,562
    85f8:	00008f44 	movi	zero,573
    85fc:	00008f44 	movi	zero,573
    8600:	00008f44 	movi	zero,573
    8604:	00008f44 	movi	zero,573
    8608:	00008f44 	movi	zero,573
    860c:	00008f44 	movi	zero,573
    8610:	00008f44 	movi	zero,573
    8614:	00008f44 	movi	zero,573
    8618:	00008f44 	movi	zero,573
    861c:	00008f44 	movi	zero,573
    8620:	00008cdc 	xori	zero,zero,563
    8624:	00008f44 	movi	zero,573
    8628:	00008f44 	movi	zero,573
    862c:	00008f44 	movi	zero,573
    8630:	00008f44 	movi	zero,573
    8634:	00008f44 	movi	zero,573
    8638:	00008f44 	movi	zero,573
    863c:	00008f44 	movi	zero,573
    8640:	00008f44 	movi	zero,573
    8644:	00008f44 	movi	zero,573
    8648:	00008f44 	movi	zero,573
    864c:	00008d14 	movui	zero,564
    8650:	00008f44 	movi	zero,573
    8654:	00008f44 	movi	zero,573
    8658:	00008f44 	movi	zero,573
    865c:	00008f44 	movi	zero,573
    8660:	00008f44 	movi	zero,573
    8664:	00008d6c 	andhi	zero,zero,565
    8668:	00008f44 	movi	zero,573
    866c:	00008f44 	movi	zero,573
    8670:	00008ddc 	xori	zero,zero,567
    8674:	00008f44 	movi	zero,573
    8678:	00008f44 	movi	zero,573
    867c:	00008f44 	movi	zero,573
    8680:	00008f44 	movi	zero,573
    8684:	00008f44 	movi	zero,573
    8688:	00008f44 	movi	zero,573
    868c:	00008f44 	movi	zero,573
    8690:	00008f44 	movi	zero,573
    8694:	00008f44 	movi	zero,573
    8698:	00008f44 	movi	zero,573
    869c:	00008b88 	cmpgei	zero,zero,558
    86a0:	00008bb4 	movhi	zero,558
    86a4:	00008f44 	movi	zero,573
    86a8:	00008f44 	movi	zero,573
    86ac:	00008f44 	movi	zero,573
    86b0:	00008eec 	andhi	zero,zero,571
    86b4:	00008bb4 	movhi	zero,558
    86b8:	00008f44 	movi	zero,573
    86bc:	00008f44 	movi	zero,573
    86c0:	00008a48 	cmpgei	zero,zero,553
    86c4:	00008f44 	movi	zero,573
    86c8:	00008a58 	cmpnei	zero,zero,553
    86cc:	00008a94 	movui	zero,554
    86d0:	00008790 	cmplti	zero,zero,542
    86d4:	00008a3c 	xorhi	zero,zero,552
    86d8:	00008f44 	movi	zero,573
    86dc:	00008e18 	cmpnei	zero,zero,568
    86e0:	00008f44 	movi	zero,573
    86e4:	00008e70 	cmpltui	zero,zero,569
    86e8:	00008f44 	movi	zero,573
    86ec:	00008f44 	movi	zero,573
    86f0:	00008b34 	movhi	zero,556
    86f4:	42000204 	addi	r8,r8,8
    86f8:	da802317 	ldw	r10,140(sp)
    86fc:	5455883a 	add	r10,r10,r17
    8700:	da802315 	stw	r10,140(sp)
    8704:	003f8b06 	br	8534 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008534>
    8708:	d9002017 	ldw	r4,128(sp)
    870c:	a00b883a 	mov	r5,r20
    8710:	00030ac0 	call	30ac <__swsetup_r>
    8714:	1003b11e 	bne	r2,zero,95dc <___vfiprintf_internal_r+0x11ec>
    8718:	a080030b 	ldhu	r2,12(r20)
    871c:	00c00284 	movi	r3,10
    8720:	1080068c 	andi	r2,r2,26
    8724:	10ff541e 	bne	r2,r3,8478 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008478>
    8728:	a080038f 	ldh	r2,14(r20)
    872c:	103f5216 	blt	r2,zero,8478 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008478>
    8730:	d9c02217 	ldw	r7,136(sp)
    8734:	d9002017 	ldw	r4,128(sp)
    8738:	e00d883a 	mov	r6,fp
    873c:	a00b883a 	mov	r5,r20
    8740:	00098680 	call	9868 <__sbprintf>
    8744:	dfc03617 	ldw	ra,216(sp)
    8748:	df003517 	ldw	fp,212(sp)
    874c:	ddc03417 	ldw	r23,208(sp)
    8750:	dd803317 	ldw	r22,204(sp)
    8754:	dd403217 	ldw	r21,200(sp)
    8758:	dd003117 	ldw	r20,196(sp)
    875c:	dcc03017 	ldw	r19,192(sp)
    8760:	dc802f17 	ldw	r18,188(sp)
    8764:	dc402e17 	ldw	r17,184(sp)
    8768:	dc002d17 	ldw	r16,180(sp)
    876c:	dec03704 	addi	sp,sp,220
    8770:	f800283a 	ret
    8774:	00050800 	call	5080 <__sinit>
    8778:	003f2f06 	br	8438 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008438>
    877c:	0463c83a 	sub	r17,zero,r17
    8780:	d8802215 	stw	r2,136(sp)
    8784:	a5000114 	ori	r20,r20,4
    8788:	80c00007 	ldb	r3,0(r16)
    878c:	003f7706 	br	856c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700856c>
    8790:	00800c04 	movi	r2,48
    8794:	da802217 	ldw	r10,136(sp)
    8798:	d8801d05 	stb	r2,116(sp)
    879c:	00801e04 	movi	r2,120
    87a0:	d8801d45 	stb	r2,117(sp)
    87a4:	d8001d85 	stb	zero,118(sp)
    87a8:	50c00104 	addi	r3,r10,4
    87ac:	54800017 	ldw	r18,0(r10)
    87b0:	0027883a 	mov	r19,zero
    87b4:	a0800094 	ori	r2,r20,2
    87b8:	48030b16 	blt	r9,zero,93e8 <___vfiprintf_internal_r+0xff8>
    87bc:	00bfdfc4 	movi	r2,-129
    87c0:	a096703a 	and	r11,r20,r2
    87c4:	d8c02215 	stw	r3,136(sp)
    87c8:	5d000094 	ori	r20,r11,2
    87cc:	90032b1e 	bne	r18,zero,947c <___vfiprintf_internal_r+0x108c>
    87d0:	008000b4 	movhi	r2,2
    87d4:	10a79104 	addi	r2,r2,-25020
    87d8:	d8802615 	stw	r2,152(sp)
    87dc:	0039883a 	mov	fp,zero
    87e0:	48017b1e 	bne	r9,zero,8dd0 <___vfiprintf_internal_r+0x9e0>
    87e4:	0013883a 	mov	r9,zero
    87e8:	0027883a 	mov	r19,zero
    87ec:	dd401a04 	addi	r21,sp,104
    87f0:	4825883a 	mov	r18,r9
    87f4:	4cc0010e 	bge	r9,r19,87fc <___vfiprintf_internal_r+0x40c>
    87f8:	9825883a 	mov	r18,r19
    87fc:	e7003fcc 	andi	fp,fp,255
    8800:	e700201c 	xori	fp,fp,128
    8804:	e73fe004 	addi	fp,fp,-128
    8808:	e0000126 	beq	fp,zero,8810 <___vfiprintf_internal_r+0x420>
    880c:	94800044 	addi	r18,r18,1
    8810:	a380008c 	andi	r14,r20,2
    8814:	70000126 	beq	r14,zero,881c <___vfiprintf_internal_r+0x42c>
    8818:	94800084 	addi	r18,r18,2
    881c:	a700210c 	andi	fp,r20,132
    8820:	e001df1e 	bne	fp,zero,8fa0 <___vfiprintf_internal_r+0xbb0>
    8824:	8c87c83a 	sub	r3,r17,r18
    8828:	00c1dd0e 	bge	zero,r3,8fa0 <___vfiprintf_internal_r+0xbb0>
    882c:	01c00404 	movi	r7,16
    8830:	d8801c17 	ldw	r2,112(sp)
    8834:	38c3ad0e 	bge	r7,r3,96ec <___vfiprintf_internal_r+0x12fc>
    8838:	028000b4 	movhi	r10,2
    883c:	52a7f504 	addi	r10,r10,-24620
    8840:	dc002915 	stw	r16,164(sp)
    8844:	d9801b17 	ldw	r6,108(sp)
    8848:	da802415 	stw	r10,144(sp)
    884c:	03c001c4 	movi	r15,7
    8850:	da402515 	stw	r9,148(sp)
    8854:	db802815 	stw	r14,160(sp)
    8858:	1821883a 	mov	r16,r3
    885c:	00000506 	br	8874 <___vfiprintf_internal_r+0x484>
    8860:	31400084 	addi	r5,r6,2
    8864:	42000204 	addi	r8,r8,8
    8868:	200d883a 	mov	r6,r4
    886c:	843ffc04 	addi	r16,r16,-16
    8870:	3c000d0e 	bge	r7,r16,88a8 <___vfiprintf_internal_r+0x4b8>
    8874:	10800404 	addi	r2,r2,16
    8878:	31000044 	addi	r4,r6,1
    887c:	45800015 	stw	r22,0(r8)
    8880:	41c00115 	stw	r7,4(r8)
    8884:	d8801c15 	stw	r2,112(sp)
    8888:	d9001b15 	stw	r4,108(sp)
    888c:	793ff40e 	bge	r15,r4,8860 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008860>
    8890:	1001b51e 	bne	r2,zero,8f68 <___vfiprintf_internal_r+0xb78>
    8894:	843ffc04 	addi	r16,r16,-16
    8898:	000d883a 	mov	r6,zero
    889c:	01400044 	movi	r5,1
    88a0:	d811883a 	mov	r8,sp
    88a4:	3c3ff316 	blt	r7,r16,8874 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008874>
    88a8:	8007883a 	mov	r3,r16
    88ac:	da402517 	ldw	r9,148(sp)
    88b0:	db802817 	ldw	r14,160(sp)
    88b4:	dc002917 	ldw	r16,164(sp)
    88b8:	da802417 	ldw	r10,144(sp)
    88bc:	1885883a 	add	r2,r3,r2
    88c0:	40c00115 	stw	r3,4(r8)
    88c4:	42800015 	stw	r10,0(r8)
    88c8:	d8801c15 	stw	r2,112(sp)
    88cc:	d9401b15 	stw	r5,108(sp)
    88d0:	00c001c4 	movi	r3,7
    88d4:	19426016 	blt	r3,r5,9258 <___vfiprintf_internal_r+0xe68>
    88d8:	d8c01d87 	ldb	r3,118(sp)
    88dc:	42000204 	addi	r8,r8,8
    88e0:	29000044 	addi	r4,r5,1
    88e4:	1801b31e 	bne	r3,zero,8fb4 <___vfiprintf_internal_r+0xbc4>
    88e8:	7001c026 	beq	r14,zero,8fec <___vfiprintf_internal_r+0xbfc>
    88ec:	d8c01d04 	addi	r3,sp,116
    88f0:	10800084 	addi	r2,r2,2
    88f4:	40c00015 	stw	r3,0(r8)
    88f8:	00c00084 	movi	r3,2
    88fc:	40c00115 	stw	r3,4(r8)
    8900:	d8801c15 	stw	r2,112(sp)
    8904:	d9001b15 	stw	r4,108(sp)
    8908:	00c001c4 	movi	r3,7
    890c:	1902650e 	bge	r3,r4,92a4 <___vfiprintf_internal_r+0xeb4>
    8910:	10029a1e 	bne	r2,zero,937c <___vfiprintf_internal_r+0xf8c>
    8914:	00c02004 	movi	r3,128
    8918:	01000044 	movi	r4,1
    891c:	000b883a 	mov	r5,zero
    8920:	d811883a 	mov	r8,sp
    8924:	e0c1b31e 	bne	fp,r3,8ff4 <___vfiprintf_internal_r+0xc04>
    8928:	8cb9c83a 	sub	fp,r17,r18
    892c:	0701b10e 	bge	zero,fp,8ff4 <___vfiprintf_internal_r+0xc04>
    8930:	01c00404 	movi	r7,16
    8934:	3f03890e 	bge	r7,fp,975c <___vfiprintf_internal_r+0x136c>
    8938:	00c000b4 	movhi	r3,2
    893c:	18e7f104 	addi	r3,r3,-24636
    8940:	d8c02415 	stw	r3,144(sp)
    8944:	8007883a 	mov	r3,r16
    8948:	034001c4 	movi	r13,7
    894c:	e021883a 	mov	r16,fp
    8950:	da402515 	stw	r9,148(sp)
    8954:	1839883a 	mov	fp,r3
    8958:	00000506 	br	8970 <___vfiprintf_internal_r+0x580>
    895c:	29800084 	addi	r6,r5,2
    8960:	42000204 	addi	r8,r8,8
    8964:	180b883a 	mov	r5,r3
    8968:	843ffc04 	addi	r16,r16,-16
    896c:	3c000d0e 	bge	r7,r16,89a4 <___vfiprintf_internal_r+0x5b4>
    8970:	10800404 	addi	r2,r2,16
    8974:	28c00044 	addi	r3,r5,1
    8978:	45c00015 	stw	r23,0(r8)
    897c:	41c00115 	stw	r7,4(r8)
    8980:	d8801c15 	stw	r2,112(sp)
    8984:	d8c01b15 	stw	r3,108(sp)
    8988:	68fff40e 	bge	r13,r3,895c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700895c>
    898c:	1002241e 	bne	r2,zero,9220 <___vfiprintf_internal_r+0xe30>
    8990:	843ffc04 	addi	r16,r16,-16
    8994:	01800044 	movi	r6,1
    8998:	000b883a 	mov	r5,zero
    899c:	d811883a 	mov	r8,sp
    89a0:	3c3ff316 	blt	r7,r16,8970 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008970>
    89a4:	da402517 	ldw	r9,148(sp)
    89a8:	e007883a 	mov	r3,fp
    89ac:	8039883a 	mov	fp,r16
    89b0:	1821883a 	mov	r16,r3
    89b4:	d8c02417 	ldw	r3,144(sp)
    89b8:	1705883a 	add	r2,r2,fp
    89bc:	47000115 	stw	fp,4(r8)
    89c0:	40c00015 	stw	r3,0(r8)
    89c4:	d8801c15 	stw	r2,112(sp)
    89c8:	d9801b15 	stw	r6,108(sp)
    89cc:	00c001c4 	movi	r3,7
    89d0:	19827616 	blt	r3,r6,93ac <___vfiprintf_internal_r+0xfbc>
    89d4:	4cf9c83a 	sub	fp,r9,r19
    89d8:	42000204 	addi	r8,r8,8
    89dc:	31000044 	addi	r4,r6,1
    89e0:	300b883a 	mov	r5,r6
    89e4:	07018516 	blt	zero,fp,8ffc <___vfiprintf_internal_r+0xc0c>
    89e8:	9885883a 	add	r2,r19,r2
    89ec:	45400015 	stw	r21,0(r8)
    89f0:	44c00115 	stw	r19,4(r8)
    89f4:	d8801c15 	stw	r2,112(sp)
    89f8:	d9001b15 	stw	r4,108(sp)
    89fc:	00c001c4 	movi	r3,7
    8a00:	1901dd0e 	bge	r3,r4,9178 <___vfiprintf_internal_r+0xd88>
    8a04:	1002401e 	bne	r2,zero,9308 <___vfiprintf_internal_r+0xf18>
    8a08:	d8001b15 	stw	zero,108(sp)
    8a0c:	a2c0010c 	andi	r11,r20,4
    8a10:	58000226 	beq	r11,zero,8a1c <___vfiprintf_internal_r+0x62c>
    8a14:	8ca7c83a 	sub	r19,r17,r18
    8a18:	04c2f216 	blt	zero,r19,95e4 <___vfiprintf_internal_r+0x11f4>
    8a1c:	8c80010e 	bge	r17,r18,8a24 <___vfiprintf_internal_r+0x634>
    8a20:	9023883a 	mov	r17,r18
    8a24:	da802317 	ldw	r10,140(sp)
    8a28:	5455883a 	add	r10,r10,r17
    8a2c:	da802315 	stw	r10,140(sp)
    8a30:	d8001b15 	stw	zero,108(sp)
    8a34:	d811883a 	mov	r8,sp
    8a38:	003ea206 	br	84c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70084c4>
    8a3c:	a5000814 	ori	r20,r20,32
    8a40:	80c00007 	ldb	r3,0(r16)
    8a44:	003ec906 	br	856c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700856c>
    8a48:	80c00007 	ldb	r3,0(r16)
    8a4c:	1b030926 	beq	r3,r12,9674 <___vfiprintf_internal_r+0x1284>
    8a50:	a5000414 	ori	r20,r20,16
    8a54:	003ec506 	br	856c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700856c>
    8a58:	21003fcc 	andi	r4,r4,255
    8a5c:	20035e1e 	bne	r4,zero,97d8 <___vfiprintf_internal_r+0x13e8>
    8a60:	a080080c 	andi	r2,r20,32
    8a64:	1002a526 	beq	r2,zero,94fc <___vfiprintf_internal_r+0x110c>
    8a68:	da802217 	ldw	r10,136(sp)
    8a6c:	50800017 	ldw	r2,0(r10)
    8a70:	da802317 	ldw	r10,140(sp)
    8a74:	5007d7fa 	srai	r3,r10,31
    8a78:	da802217 	ldw	r10,136(sp)
    8a7c:	10c00115 	stw	r3,4(r2)
    8a80:	52800104 	addi	r10,r10,4
    8a84:	da802215 	stw	r10,136(sp)
    8a88:	da802317 	ldw	r10,140(sp)
    8a8c:	12800015 	stw	r10,0(r2)
    8a90:	003e8c06 	br	84c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70084c4>
    8a94:	21003fcc 	andi	r4,r4,255
    8a98:	2003511e 	bne	r4,zero,97e0 <___vfiprintf_internal_r+0x13f0>
    8a9c:	a080080c 	andi	r2,r20,32
    8aa0:	1000a126 	beq	r2,zero,8d28 <___vfiprintf_internal_r+0x938>
    8aa4:	da802217 	ldw	r10,136(sp)
    8aa8:	d8001d85 	stb	zero,118(sp)
    8aac:	50800204 	addi	r2,r10,8
    8ab0:	54800017 	ldw	r18,0(r10)
    8ab4:	54c00117 	ldw	r19,4(r10)
    8ab8:	4802b416 	blt	r9,zero,958c <___vfiprintf_internal_r+0x119c>
    8abc:	013fdfc4 	movi	r4,-129
    8ac0:	94c6b03a 	or	r3,r18,r19
    8ac4:	d8802215 	stw	r2,136(sp)
    8ac8:	a128703a 	and	r20,r20,r4
    8acc:	1800a226 	beq	r3,zero,8d58 <___vfiprintf_internal_r+0x968>
    8ad0:	0039883a 	mov	fp,zero
    8ad4:	dd401a04 	addi	r21,sp,104
    8ad8:	9006d0fa 	srli	r3,r18,3
    8adc:	9808977a 	slli	r4,r19,29
    8ae0:	9826d0fa 	srli	r19,r19,3
    8ae4:	948001cc 	andi	r18,r18,7
    8ae8:	90800c04 	addi	r2,r18,48
    8aec:	ad7fffc4 	addi	r21,r21,-1
    8af0:	20e4b03a 	or	r18,r4,r3
    8af4:	a8800005 	stb	r2,0(r21)
    8af8:	94c6b03a 	or	r3,r18,r19
    8afc:	183ff61e 	bne	r3,zero,8ad8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008ad8>
    8b00:	a0c0004c 	andi	r3,r20,1
    8b04:	18005926 	beq	r3,zero,8c6c <___vfiprintf_internal_r+0x87c>
    8b08:	10803fcc 	andi	r2,r2,255
    8b0c:	1080201c 	xori	r2,r2,128
    8b10:	10bfe004 	addi	r2,r2,-128
    8b14:	00c00c04 	movi	r3,48
    8b18:	10c05426 	beq	r2,r3,8c6c <___vfiprintf_internal_r+0x87c>
    8b1c:	da801e17 	ldw	r10,120(sp)
    8b20:	a8bfffc4 	addi	r2,r21,-1
    8b24:	a8ffffc5 	stb	r3,-1(r21)
    8b28:	50a7c83a 	sub	r19,r10,r2
    8b2c:	102b883a 	mov	r21,r2
    8b30:	003f2f06 	br	87f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70087f0>
    8b34:	21003fcc 	andi	r4,r4,255
    8b38:	2003421e 	bne	r4,zero,9844 <___vfiprintf_internal_r+0x1454>
    8b3c:	008000b4 	movhi	r2,2
    8b40:	10a79104 	addi	r2,r2,-25020
    8b44:	d8802615 	stw	r2,152(sp)
    8b48:	a080080c 	andi	r2,r20,32
    8b4c:	1000aa26 	beq	r2,zero,8df8 <___vfiprintf_internal_r+0xa08>
    8b50:	da802217 	ldw	r10,136(sp)
    8b54:	54800017 	ldw	r18,0(r10)
    8b58:	54c00117 	ldw	r19,4(r10)
    8b5c:	52800204 	addi	r10,r10,8
    8b60:	da802215 	stw	r10,136(sp)
    8b64:	a080004c 	andi	r2,r20,1
    8b68:	1001d226 	beq	r2,zero,92b4 <___vfiprintf_internal_r+0xec4>
    8b6c:	94c4b03a 	or	r2,r18,r19
    8b70:	1002351e 	bne	r2,zero,9448 <___vfiprintf_internal_r+0x1058>
    8b74:	d8001d85 	stb	zero,118(sp)
    8b78:	48022216 	blt	r9,zero,9404 <___vfiprintf_internal_r+0x1014>
    8b7c:	00bfdfc4 	movi	r2,-129
    8b80:	a0a8703a 	and	r20,r20,r2
    8b84:	003f1506 	br	87dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70087dc>
    8b88:	da802217 	ldw	r10,136(sp)
    8b8c:	04800044 	movi	r18,1
    8b90:	d8001d85 	stb	zero,118(sp)
    8b94:	50800017 	ldw	r2,0(r10)
    8b98:	52800104 	addi	r10,r10,4
    8b9c:	da802215 	stw	r10,136(sp)
    8ba0:	d8801005 	stb	r2,64(sp)
    8ba4:	9027883a 	mov	r19,r18
    8ba8:	dd401004 	addi	r21,sp,64
    8bac:	0013883a 	mov	r9,zero
    8bb0:	003f1706 	br	8810 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008810>
    8bb4:	21003fcc 	andi	r4,r4,255
    8bb8:	2003201e 	bne	r4,zero,983c <___vfiprintf_internal_r+0x144c>
    8bbc:	a080080c 	andi	r2,r20,32
    8bc0:	10004b26 	beq	r2,zero,8cf0 <___vfiprintf_internal_r+0x900>
    8bc4:	da802217 	ldw	r10,136(sp)
    8bc8:	50800117 	ldw	r2,4(r10)
    8bcc:	54800017 	ldw	r18,0(r10)
    8bd0:	52800204 	addi	r10,r10,8
    8bd4:	da802215 	stw	r10,136(sp)
    8bd8:	1027883a 	mov	r19,r2
    8bdc:	10022c16 	blt	r2,zero,9490 <___vfiprintf_internal_r+0x10a0>
    8be0:	df001d83 	ldbu	fp,118(sp)
    8be4:	48007216 	blt	r9,zero,8db0 <___vfiprintf_internal_r+0x9c0>
    8be8:	00ffdfc4 	movi	r3,-129
    8bec:	94c4b03a 	or	r2,r18,r19
    8bf0:	a0e8703a 	and	r20,r20,r3
    8bf4:	1000cc26 	beq	r2,zero,8f28 <___vfiprintf_internal_r+0xb38>
    8bf8:	98021026 	beq	r19,zero,943c <___vfiprintf_internal_r+0x104c>
    8bfc:	dc402415 	stw	r17,144(sp)
    8c00:	dc002515 	stw	r16,148(sp)
    8c04:	9823883a 	mov	r17,r19
    8c08:	9021883a 	mov	r16,r18
    8c0c:	dd401a04 	addi	r21,sp,104
    8c10:	4825883a 	mov	r18,r9
    8c14:	4027883a 	mov	r19,r8
    8c18:	8009883a 	mov	r4,r16
    8c1c:	880b883a 	mov	r5,r17
    8c20:	01800284 	movi	r6,10
    8c24:	000f883a 	mov	r7,zero
    8c28:	000a7d00 	call	a7d0 <__umoddi3>
    8c2c:	10800c04 	addi	r2,r2,48
    8c30:	ad7fffc4 	addi	r21,r21,-1
    8c34:	8009883a 	mov	r4,r16
    8c38:	880b883a 	mov	r5,r17
    8c3c:	a8800005 	stb	r2,0(r21)
    8c40:	01800284 	movi	r6,10
    8c44:	000f883a 	mov	r7,zero
    8c48:	000a2580 	call	a258 <__udivdi3>
    8c4c:	1021883a 	mov	r16,r2
    8c50:	10c4b03a 	or	r2,r2,r3
    8c54:	1823883a 	mov	r17,r3
    8c58:	103fef1e 	bne	r2,zero,8c18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008c18>
    8c5c:	dc402417 	ldw	r17,144(sp)
    8c60:	dc002517 	ldw	r16,148(sp)
    8c64:	9013883a 	mov	r9,r18
    8c68:	9811883a 	mov	r8,r19
    8c6c:	da801e17 	ldw	r10,120(sp)
    8c70:	5567c83a 	sub	r19,r10,r21
    8c74:	003ede06 	br	87f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70087f0>
    8c78:	38803fcc 	andi	r2,r7,255
    8c7c:	1080201c 	xori	r2,r2,128
    8c80:	10bfe004 	addi	r2,r2,-128
    8c84:	1002371e 	bne	r2,zero,9564 <___vfiprintf_internal_r+0x1174>
    8c88:	01000044 	movi	r4,1
    8c8c:	01c00804 	movi	r7,32
    8c90:	80c00007 	ldb	r3,0(r16)
    8c94:	003e3506 	br	856c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700856c>
    8c98:	a5000054 	ori	r20,r20,1
    8c9c:	80c00007 	ldb	r3,0(r16)
    8ca0:	003e3206 	br	856c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700856c>
    8ca4:	a5002014 	ori	r20,r20,128
    8ca8:	80c00007 	ldb	r3,0(r16)
    8cac:	003e2f06 	br	856c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700856c>
    8cb0:	8015883a 	mov	r10,r16
    8cb4:	0023883a 	mov	r17,zero
    8cb8:	18bff404 	addi	r2,r3,-48
    8cbc:	50c00007 	ldb	r3,0(r10)
    8cc0:	8c4002a4 	muli	r17,r17,10
    8cc4:	84000044 	addi	r16,r16,1
    8cc8:	8015883a 	mov	r10,r16
    8ccc:	1463883a 	add	r17,r2,r17
    8cd0:	18bff404 	addi	r2,r3,-48
    8cd4:	30bff92e 	bgeu	r6,r2,8cbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008cbc>
    8cd8:	003e2506 	br	8570 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008570>
    8cdc:	21003fcc 	andi	r4,r4,255
    8ce0:	2002d41e 	bne	r4,zero,9834 <___vfiprintf_internal_r+0x1444>
    8ce4:	a5000414 	ori	r20,r20,16
    8ce8:	a080080c 	andi	r2,r20,32
    8cec:	103fb51e 	bne	r2,zero,8bc4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008bc4>
    8cf0:	a080040c 	andi	r2,r20,16
    8cf4:	1001f826 	beq	r2,zero,94d8 <___vfiprintf_internal_r+0x10e8>
    8cf8:	da802217 	ldw	r10,136(sp)
    8cfc:	54800017 	ldw	r18,0(r10)
    8d00:	52800104 	addi	r10,r10,4
    8d04:	da802215 	stw	r10,136(sp)
    8d08:	9027d7fa 	srai	r19,r18,31
    8d0c:	9805883a 	mov	r2,r19
    8d10:	003fb206 	br	8bdc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008bdc>
    8d14:	21003fcc 	andi	r4,r4,255
    8d18:	2002c41e 	bne	r4,zero,982c <___vfiprintf_internal_r+0x143c>
    8d1c:	a5000414 	ori	r20,r20,16
    8d20:	a080080c 	andi	r2,r20,32
    8d24:	103f5f1e 	bne	r2,zero,8aa4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008aa4>
    8d28:	a080040c 	andi	r2,r20,16
    8d2c:	10020f26 	beq	r2,zero,956c <___vfiprintf_internal_r+0x117c>
    8d30:	da802217 	ldw	r10,136(sp)
    8d34:	d8001d85 	stb	zero,118(sp)
    8d38:	0027883a 	mov	r19,zero
    8d3c:	50800104 	addi	r2,r10,4
    8d40:	54800017 	ldw	r18,0(r10)
    8d44:	48021116 	blt	r9,zero,958c <___vfiprintf_internal_r+0x119c>
    8d48:	00ffdfc4 	movi	r3,-129
    8d4c:	d8802215 	stw	r2,136(sp)
    8d50:	a0e8703a 	and	r20,r20,r3
    8d54:	903f5e1e 	bne	r18,zero,8ad0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008ad0>
    8d58:	0039883a 	mov	fp,zero
    8d5c:	4802a626 	beq	r9,zero,97f8 <___vfiprintf_internal_r+0x1408>
    8d60:	0025883a 	mov	r18,zero
    8d64:	0027883a 	mov	r19,zero
    8d68:	003f5a06 	br	8ad4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008ad4>
    8d6c:	21003fcc 	andi	r4,r4,255
    8d70:	20029f1e 	bne	r4,zero,97f0 <___vfiprintf_internal_r+0x1400>
    8d74:	a5000414 	ori	r20,r20,16
    8d78:	a080080c 	andi	r2,r20,32
    8d7c:	10005e1e 	bne	r2,zero,8ef8 <___vfiprintf_internal_r+0xb08>
    8d80:	a080040c 	andi	r2,r20,16
    8d84:	1001a21e 	bne	r2,zero,9410 <___vfiprintf_internal_r+0x1020>
    8d88:	a080100c 	andi	r2,r20,64
    8d8c:	d8001d85 	stb	zero,118(sp)
    8d90:	da802217 	ldw	r10,136(sp)
    8d94:	1002231e 	bne	r2,zero,9624 <___vfiprintf_internal_r+0x1234>
    8d98:	50800104 	addi	r2,r10,4
    8d9c:	54800017 	ldw	r18,0(r10)
    8da0:	0027883a 	mov	r19,zero
    8da4:	4801a00e 	bge	r9,zero,9428 <___vfiprintf_internal_r+0x1038>
    8da8:	d8802215 	stw	r2,136(sp)
    8dac:	0039883a 	mov	fp,zero
    8db0:	94c4b03a 	or	r2,r18,r19
    8db4:	103f901e 	bne	r2,zero,8bf8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008bf8>
    8db8:	00800044 	movi	r2,1
    8dbc:	10803fcc 	andi	r2,r2,255
    8dc0:	00c00044 	movi	r3,1
    8dc4:	10c05926 	beq	r2,r3,8f2c <___vfiprintf_internal_r+0xb3c>
    8dc8:	00c00084 	movi	r3,2
    8dcc:	10ffe41e 	bne	r2,r3,8d60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008d60>
    8dd0:	0025883a 	mov	r18,zero
    8dd4:	0027883a 	mov	r19,zero
    8dd8:	00013d06 	br	92d0 <___vfiprintf_internal_r+0xee0>
    8ddc:	21003fcc 	andi	r4,r4,255
    8de0:	2002811e 	bne	r4,zero,97e8 <___vfiprintf_internal_r+0x13f8>
    8de4:	008000b4 	movhi	r2,2
    8de8:	10a78c04 	addi	r2,r2,-25040
    8dec:	d8802615 	stw	r2,152(sp)
    8df0:	a080080c 	andi	r2,r20,32
    8df4:	103f561e 	bne	r2,zero,8b50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008b50>
    8df8:	a080040c 	andi	r2,r20,16
    8dfc:	1001d126 	beq	r2,zero,9544 <___vfiprintf_internal_r+0x1154>
    8e00:	da802217 	ldw	r10,136(sp)
    8e04:	0027883a 	mov	r19,zero
    8e08:	54800017 	ldw	r18,0(r10)
    8e0c:	52800104 	addi	r10,r10,4
    8e10:	da802215 	stw	r10,136(sp)
    8e14:	003f5306 	br	8b64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008b64>
    8e18:	da802217 	ldw	r10,136(sp)
    8e1c:	d8001d85 	stb	zero,118(sp)
    8e20:	55400017 	ldw	r21,0(r10)
    8e24:	50c00104 	addi	r3,r10,4
    8e28:	a8024226 	beq	r21,zero,9734 <___vfiprintf_internal_r+0x1344>
    8e2c:	48021816 	blt	r9,zero,9690 <___vfiprintf_internal_r+0x12a0>
    8e30:	480d883a 	mov	r6,r9
    8e34:	000b883a 	mov	r5,zero
    8e38:	a809883a 	mov	r4,r21
    8e3c:	d8c02a15 	stw	r3,168(sp)
    8e40:	da002b15 	stw	r8,172(sp)
    8e44:	da402c15 	stw	r9,176(sp)
    8e48:	00065ec0 	call	65ec <memchr>
    8e4c:	d8c02a17 	ldw	r3,168(sp)
    8e50:	da002b17 	ldw	r8,172(sp)
    8e54:	da402c17 	ldw	r9,176(sp)
    8e58:	10024826 	beq	r2,zero,977c <___vfiprintf_internal_r+0x138c>
    8e5c:	1567c83a 	sub	r19,r2,r21
    8e60:	df001d83 	ldbu	fp,118(sp)
    8e64:	d8c02215 	stw	r3,136(sp)
    8e68:	0013883a 	mov	r9,zero
    8e6c:	003e6006 	br	87f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70087f0>
    8e70:	21003fcc 	andi	r4,r4,255
    8e74:	203fc026 	beq	r4,zero,8d78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008d78>
    8e78:	d9c01d85 	stb	r7,118(sp)
    8e7c:	003fbe06 	br	8d78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008d78>
    8e80:	da802217 	ldw	r10,136(sp)
    8e84:	54400017 	ldw	r17,0(r10)
    8e88:	50800104 	addi	r2,r10,4
    8e8c:	883e3b16 	blt	r17,zero,877c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700877c>
    8e90:	d8802215 	stw	r2,136(sp)
    8e94:	80c00007 	ldb	r3,0(r16)
    8e98:	003db406 	br	856c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700856c>
    8e9c:	01000044 	movi	r4,1
    8ea0:	01c00ac4 	movi	r7,43
    8ea4:	80c00007 	ldb	r3,0(r16)
    8ea8:	003db006 	br	856c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700856c>
    8eac:	80c00007 	ldb	r3,0(r16)
    8eb0:	82800044 	addi	r10,r16,1
    8eb4:	1b423c26 	beq	r3,r13,97a8 <___vfiprintf_internal_r+0x13b8>
    8eb8:	18bff404 	addi	r2,r3,-48
    8ebc:	0013883a 	mov	r9,zero
    8ec0:	30822b36 	bltu	r6,r2,9770 <___vfiprintf_internal_r+0x1380>
    8ec4:	50c00007 	ldb	r3,0(r10)
    8ec8:	4a4002a4 	muli	r9,r9,10
    8ecc:	54000044 	addi	r16,r10,1
    8ed0:	8015883a 	mov	r10,r16
    8ed4:	4893883a 	add	r9,r9,r2
    8ed8:	18bff404 	addi	r2,r3,-48
    8edc:	30bff92e 	bgeu	r6,r2,8ec4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008ec4>
    8ee0:	483da30e 	bge	r9,zero,8570 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008570>
    8ee4:	027fffc4 	movi	r9,-1
    8ee8:	003da106 	br	8570 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008570>
    8eec:	a5001014 	ori	r20,r20,64
    8ef0:	80c00007 	ldb	r3,0(r16)
    8ef4:	003d9d06 	br	856c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700856c>
    8ef8:	da802217 	ldw	r10,136(sp)
    8efc:	d8001d85 	stb	zero,118(sp)
    8f00:	50c00204 	addi	r3,r10,8
    8f04:	54800017 	ldw	r18,0(r10)
    8f08:	54c00117 	ldw	r19,4(r10)
    8f0c:	4801ca16 	blt	r9,zero,9638 <___vfiprintf_internal_r+0x1248>
    8f10:	013fdfc4 	movi	r4,-129
    8f14:	94c4b03a 	or	r2,r18,r19
    8f18:	d8c02215 	stw	r3,136(sp)
    8f1c:	a128703a 	and	r20,r20,r4
    8f20:	0039883a 	mov	fp,zero
    8f24:	103f341e 	bne	r2,zero,8bf8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008bf8>
    8f28:	483e2e26 	beq	r9,zero,87e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70087e4>
    8f2c:	0025883a 	mov	r18,zero
    8f30:	94800c04 	addi	r18,r18,48
    8f34:	dc8019c5 	stb	r18,103(sp)
    8f38:	dcc02717 	ldw	r19,156(sp)
    8f3c:	dd4019c4 	addi	r21,sp,103
    8f40:	003e2b06 	br	87f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70087f0>
    8f44:	21003fcc 	andi	r4,r4,255
    8f48:	2002361e 	bne	r4,zero,9824 <___vfiprintf_internal_r+0x1434>
    8f4c:	1801c126 	beq	r3,zero,9654 <___vfiprintf_internal_r+0x1264>
    8f50:	04800044 	movi	r18,1
    8f54:	d8c01005 	stb	r3,64(sp)
    8f58:	d8001d85 	stb	zero,118(sp)
    8f5c:	9027883a 	mov	r19,r18
    8f60:	dd401004 	addi	r21,sp,64
    8f64:	003f1106 	br	8bac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008bac>
    8f68:	d9402117 	ldw	r5,132(sp)
    8f6c:	d9002017 	ldw	r4,128(sp)
    8f70:	d9801a04 	addi	r6,sp,104
    8f74:	d9c02b15 	stw	r7,172(sp)
    8f78:	dbc02a15 	stw	r15,168(sp)
    8f7c:	00082dc0 	call	82dc <__sprint_r.part.0>
    8f80:	d9c02b17 	ldw	r7,172(sp)
    8f84:	dbc02a17 	ldw	r15,168(sp)
    8f88:	10006d1e 	bne	r2,zero,9140 <___vfiprintf_internal_r+0xd50>
    8f8c:	d9801b17 	ldw	r6,108(sp)
    8f90:	d8801c17 	ldw	r2,112(sp)
    8f94:	d811883a 	mov	r8,sp
    8f98:	31400044 	addi	r5,r6,1
    8f9c:	003e3306 	br	886c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700886c>
    8fa0:	d9401b17 	ldw	r5,108(sp)
    8fa4:	d8801c17 	ldw	r2,112(sp)
    8fa8:	29000044 	addi	r4,r5,1
    8fac:	d8c01d87 	ldb	r3,118(sp)
    8fb0:	183e4d26 	beq	r3,zero,88e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70088e8>
    8fb4:	00c00044 	movi	r3,1
    8fb8:	d9401d84 	addi	r5,sp,118
    8fbc:	10c5883a 	add	r2,r2,r3
    8fc0:	41400015 	stw	r5,0(r8)
    8fc4:	40c00115 	stw	r3,4(r8)
    8fc8:	d8801c15 	stw	r2,112(sp)
    8fcc:	d9001b15 	stw	r4,108(sp)
    8fd0:	014001c4 	movi	r5,7
    8fd4:	2900a90e 	bge	r5,r4,927c <___vfiprintf_internal_r+0xe8c>
    8fd8:	1000da1e 	bne	r2,zero,9344 <___vfiprintf_internal_r+0xf54>
    8fdc:	7000ab1e 	bne	r14,zero,928c <___vfiprintf_internal_r+0xe9c>
    8fe0:	000b883a 	mov	r5,zero
    8fe4:	1809883a 	mov	r4,r3
    8fe8:	d811883a 	mov	r8,sp
    8fec:	00c02004 	movi	r3,128
    8ff0:	e0fe4d26 	beq	fp,r3,8928 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008928>
    8ff4:	4cf9c83a 	sub	fp,r9,r19
    8ff8:	073e7b0e 	bge	zero,fp,89e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70089e8>
    8ffc:	01c00404 	movi	r7,16
    9000:	3f01900e 	bge	r7,fp,9644 <___vfiprintf_internal_r+0x1254>
    9004:	00c000b4 	movhi	r3,2
    9008:	18e7f104 	addi	r3,r3,-24636
    900c:	d8c02415 	stw	r3,144(sp)
    9010:	034001c4 	movi	r13,7
    9014:	00000506 	br	902c <___vfiprintf_internal_r+0xc3c>
    9018:	29000084 	addi	r4,r5,2
    901c:	42000204 	addi	r8,r8,8
    9020:	180b883a 	mov	r5,r3
    9024:	e73ffc04 	addi	fp,fp,-16
    9028:	3f000d0e 	bge	r7,fp,9060 <___vfiprintf_internal_r+0xc70>
    902c:	10800404 	addi	r2,r2,16
    9030:	28c00044 	addi	r3,r5,1
    9034:	45c00015 	stw	r23,0(r8)
    9038:	41c00115 	stw	r7,4(r8)
    903c:	d8801c15 	stw	r2,112(sp)
    9040:	d8c01b15 	stw	r3,108(sp)
    9044:	68fff40e 	bge	r13,r3,9018 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009018>
    9048:	1000101e 	bne	r2,zero,908c <___vfiprintf_internal_r+0xc9c>
    904c:	e73ffc04 	addi	fp,fp,-16
    9050:	01000044 	movi	r4,1
    9054:	000b883a 	mov	r5,zero
    9058:	d811883a 	mov	r8,sp
    905c:	3f3ff316 	blt	r7,fp,902c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700902c>
    9060:	da802417 	ldw	r10,144(sp)
    9064:	1705883a 	add	r2,r2,fp
    9068:	47000115 	stw	fp,4(r8)
    906c:	42800015 	stw	r10,0(r8)
    9070:	d8801c15 	stw	r2,112(sp)
    9074:	d9001b15 	stw	r4,108(sp)
    9078:	00c001c4 	movi	r3,7
    907c:	19003616 	blt	r3,r4,9158 <___vfiprintf_internal_r+0xd68>
    9080:	42000204 	addi	r8,r8,8
    9084:	21000044 	addi	r4,r4,1
    9088:	003e5706 	br	89e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70089e8>
    908c:	d9402117 	ldw	r5,132(sp)
    9090:	d9002017 	ldw	r4,128(sp)
    9094:	d9801a04 	addi	r6,sp,104
    9098:	d9c02b15 	stw	r7,172(sp)
    909c:	db402a15 	stw	r13,168(sp)
    90a0:	00082dc0 	call	82dc <__sprint_r.part.0>
    90a4:	d9c02b17 	ldw	r7,172(sp)
    90a8:	db402a17 	ldw	r13,168(sp)
    90ac:	1000241e 	bne	r2,zero,9140 <___vfiprintf_internal_r+0xd50>
    90b0:	d9401b17 	ldw	r5,108(sp)
    90b4:	d8801c17 	ldw	r2,112(sp)
    90b8:	d811883a 	mov	r8,sp
    90bc:	29000044 	addi	r4,r5,1
    90c0:	003fd806 	br	9024 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009024>
    90c4:	d9401b17 	ldw	r5,108(sp)
    90c8:	00c000b4 	movhi	r3,2
    90cc:	18e7f504 	addi	r3,r3,-24620
    90d0:	d8c02415 	stw	r3,144(sp)
    90d4:	29400044 	addi	r5,r5,1
    90d8:	d8c02417 	ldw	r3,144(sp)
    90dc:	14c5883a 	add	r2,r2,r19
    90e0:	44c00115 	stw	r19,4(r8)
    90e4:	40c00015 	stw	r3,0(r8)
    90e8:	d8801c15 	stw	r2,112(sp)
    90ec:	d9401b15 	stw	r5,108(sp)
    90f0:	00c001c4 	movi	r3,7
    90f4:	1940070e 	bge	r3,r5,9114 <___vfiprintf_internal_r+0xd24>
    90f8:	103e4826 	beq	r2,zero,8a1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008a1c>
    90fc:	d9402117 	ldw	r5,132(sp)
    9100:	d9002017 	ldw	r4,128(sp)
    9104:	d9801a04 	addi	r6,sp,104
    9108:	00082dc0 	call	82dc <__sprint_r.part.0>
    910c:	10000c1e 	bne	r2,zero,9140 <___vfiprintf_internal_r+0xd50>
    9110:	d8801c17 	ldw	r2,112(sp)
    9114:	8c80010e 	bge	r17,r18,911c <___vfiprintf_internal_r+0xd2c>
    9118:	9023883a 	mov	r17,r18
    911c:	da802317 	ldw	r10,140(sp)
    9120:	5455883a 	add	r10,r10,r17
    9124:	da802315 	stw	r10,140(sp)
    9128:	103e4126 	beq	r2,zero,8a30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008a30>
    912c:	d9402117 	ldw	r5,132(sp)
    9130:	d9002017 	ldw	r4,128(sp)
    9134:	d9801a04 	addi	r6,sp,104
    9138:	00082dc0 	call	82dc <__sprint_r.part.0>
    913c:	103e3c26 	beq	r2,zero,8a30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008a30>
    9140:	dd002117 	ldw	r20,132(sp)
    9144:	a080030b 	ldhu	r2,12(r20)
    9148:	1080100c 	andi	r2,r2,64
    914c:	1001231e 	bne	r2,zero,95dc <___vfiprintf_internal_r+0x11ec>
    9150:	d8802317 	ldw	r2,140(sp)
    9154:	003d7b06 	br	8744 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008744>
    9158:	1000991e 	bne	r2,zero,93c0 <___vfiprintf_internal_r+0xfd0>
    915c:	00c00044 	movi	r3,1
    9160:	9805883a 	mov	r2,r19
    9164:	dd400015 	stw	r21,0(sp)
    9168:	dcc00115 	stw	r19,4(sp)
    916c:	dcc01c15 	stw	r19,112(sp)
    9170:	d8c01b15 	stw	r3,108(sp)
    9174:	d811883a 	mov	r8,sp
    9178:	42000204 	addi	r8,r8,8
    917c:	a2c0010c 	andi	r11,r20,4
    9180:	583fe426 	beq	r11,zero,9114 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009114>
    9184:	8ca7c83a 	sub	r19,r17,r18
    9188:	04ffe20e 	bge	zero,r19,9114 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009114>
    918c:	01c00404 	movi	r7,16
    9190:	3cffcc0e 	bge	r7,r19,90c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70090c4>
    9194:	028000b4 	movhi	r10,2
    9198:	52a7f504 	addi	r10,r10,-24620
    919c:	d9001b17 	ldw	r4,108(sp)
    91a0:	da802415 	stw	r10,144(sp)
    91a4:	382b883a 	mov	r21,r7
    91a8:	050001c4 	movi	r20,7
    91ac:	df002017 	ldw	fp,128(sp)
    91b0:	00000506 	br	91c8 <___vfiprintf_internal_r+0xdd8>
    91b4:	21400084 	addi	r5,r4,2
    91b8:	42000204 	addi	r8,r8,8
    91bc:	1809883a 	mov	r4,r3
    91c0:	9cfffc04 	addi	r19,r19,-16
    91c4:	acffc40e 	bge	r21,r19,90d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70090d8>
    91c8:	10800404 	addi	r2,r2,16
    91cc:	20c00044 	addi	r3,r4,1
    91d0:	45800015 	stw	r22,0(r8)
    91d4:	45400115 	stw	r21,4(r8)
    91d8:	d8801c15 	stw	r2,112(sp)
    91dc:	d8c01b15 	stw	r3,108(sp)
    91e0:	a0fff40e 	bge	r20,r3,91b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70091b4>
    91e4:	1000041e 	bne	r2,zero,91f8 <___vfiprintf_internal_r+0xe08>
    91e8:	01400044 	movi	r5,1
    91ec:	0009883a 	mov	r4,zero
    91f0:	d811883a 	mov	r8,sp
    91f4:	003ff206 	br	91c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70091c0>
    91f8:	d9402117 	ldw	r5,132(sp)
    91fc:	d9801a04 	addi	r6,sp,104
    9200:	e009883a 	mov	r4,fp
    9204:	00082dc0 	call	82dc <__sprint_r.part.0>
    9208:	103fcd1e 	bne	r2,zero,9140 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009140>
    920c:	d9001b17 	ldw	r4,108(sp)
    9210:	d8801c17 	ldw	r2,112(sp)
    9214:	d811883a 	mov	r8,sp
    9218:	21400044 	addi	r5,r4,1
    921c:	003fe806 	br	91c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70091c0>
    9220:	d9402117 	ldw	r5,132(sp)
    9224:	d9002017 	ldw	r4,128(sp)
    9228:	d9801a04 	addi	r6,sp,104
    922c:	d9c02b15 	stw	r7,172(sp)
    9230:	db402a15 	stw	r13,168(sp)
    9234:	00082dc0 	call	82dc <__sprint_r.part.0>
    9238:	d9c02b17 	ldw	r7,172(sp)
    923c:	db402a17 	ldw	r13,168(sp)
    9240:	103fbf1e 	bne	r2,zero,9140 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009140>
    9244:	d9401b17 	ldw	r5,108(sp)
    9248:	d8801c17 	ldw	r2,112(sp)
    924c:	d811883a 	mov	r8,sp
    9250:	29800044 	addi	r6,r5,1
    9254:	003dc406 	br	8968 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008968>
    9258:	1000d21e 	bne	r2,zero,95a4 <___vfiprintf_internal_r+0x11b4>
    925c:	d8c01d87 	ldb	r3,118(sp)
    9260:	18009526 	beq	r3,zero,94b8 <___vfiprintf_internal_r+0x10c8>
    9264:	00800044 	movi	r2,1
    9268:	d8c01d84 	addi	r3,sp,118
    926c:	1009883a 	mov	r4,r2
    9270:	d8c00015 	stw	r3,0(sp)
    9274:	d8800115 	stw	r2,4(sp)
    9278:	d811883a 	mov	r8,sp
    927c:	200b883a 	mov	r5,r4
    9280:	42000204 	addi	r8,r8,8
    9284:	21000044 	addi	r4,r4,1
    9288:	003d9706 	br	88e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70088e8>
    928c:	d9001d04 	addi	r4,sp,116
    9290:	00800084 	movi	r2,2
    9294:	d9000015 	stw	r4,0(sp)
    9298:	d8800115 	stw	r2,4(sp)
    929c:	1809883a 	mov	r4,r3
    92a0:	d811883a 	mov	r8,sp
    92a4:	200b883a 	mov	r5,r4
    92a8:	42000204 	addi	r8,r8,8
    92ac:	21000044 	addi	r4,r4,1
    92b0:	003f4e06 	br	8fec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008fec>
    92b4:	d8001d85 	stb	zero,118(sp)
    92b8:	48005016 	blt	r9,zero,93fc <___vfiprintf_internal_r+0x100c>
    92bc:	00ffdfc4 	movi	r3,-129
    92c0:	94c4b03a 	or	r2,r18,r19
    92c4:	a0e8703a 	and	r20,r20,r3
    92c8:	103d4426 	beq	r2,zero,87dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70087dc>
    92cc:	0039883a 	mov	fp,zero
    92d0:	d9002617 	ldw	r4,152(sp)
    92d4:	dd401a04 	addi	r21,sp,104
    92d8:	908003cc 	andi	r2,r18,15
    92dc:	9806973a 	slli	r3,r19,28
    92e0:	2085883a 	add	r2,r4,r2
    92e4:	9024d13a 	srli	r18,r18,4
    92e8:	10800003 	ldbu	r2,0(r2)
    92ec:	9826d13a 	srli	r19,r19,4
    92f0:	ad7fffc4 	addi	r21,r21,-1
    92f4:	1ca4b03a 	or	r18,r3,r18
    92f8:	a8800005 	stb	r2,0(r21)
    92fc:	94c4b03a 	or	r2,r18,r19
    9300:	103ff51e 	bne	r2,zero,92d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70092d8>
    9304:	003e5906 	br	8c6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008c6c>
    9308:	d9402117 	ldw	r5,132(sp)
    930c:	d9002017 	ldw	r4,128(sp)
    9310:	d9801a04 	addi	r6,sp,104
    9314:	00082dc0 	call	82dc <__sprint_r.part.0>
    9318:	103f891e 	bne	r2,zero,9140 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009140>
    931c:	d8801c17 	ldw	r2,112(sp)
    9320:	d811883a 	mov	r8,sp
    9324:	003f9506 	br	917c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700917c>
    9328:	d9402117 	ldw	r5,132(sp)
    932c:	d9002017 	ldw	r4,128(sp)
    9330:	d9801a04 	addi	r6,sp,104
    9334:	00082dc0 	call	82dc <__sprint_r.part.0>
    9338:	103f811e 	bne	r2,zero,9140 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009140>
    933c:	d811883a 	mov	r8,sp
    9340:	003ced06 	br	86f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70086f8>
    9344:	d9402117 	ldw	r5,132(sp)
    9348:	d9002017 	ldw	r4,128(sp)
    934c:	d9801a04 	addi	r6,sp,104
    9350:	da402c15 	stw	r9,176(sp)
    9354:	db802a15 	stw	r14,168(sp)
    9358:	00082dc0 	call	82dc <__sprint_r.part.0>
    935c:	da402c17 	ldw	r9,176(sp)
    9360:	db802a17 	ldw	r14,168(sp)
    9364:	103f761e 	bne	r2,zero,9140 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009140>
    9368:	d9401b17 	ldw	r5,108(sp)
    936c:	d8801c17 	ldw	r2,112(sp)
    9370:	d811883a 	mov	r8,sp
    9374:	29000044 	addi	r4,r5,1
    9378:	003d5b06 	br	88e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70088e8>
    937c:	d9402117 	ldw	r5,132(sp)
    9380:	d9002017 	ldw	r4,128(sp)
    9384:	d9801a04 	addi	r6,sp,104
    9388:	da402c15 	stw	r9,176(sp)
    938c:	00082dc0 	call	82dc <__sprint_r.part.0>
    9390:	da402c17 	ldw	r9,176(sp)
    9394:	103f6a1e 	bne	r2,zero,9140 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009140>
    9398:	d9401b17 	ldw	r5,108(sp)
    939c:	d8801c17 	ldw	r2,112(sp)
    93a0:	d811883a 	mov	r8,sp
    93a4:	29000044 	addi	r4,r5,1
    93a8:	003f1006 	br	8fec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008fec>
    93ac:	1000c31e 	bne	r2,zero,96bc <___vfiprintf_internal_r+0x12cc>
    93b0:	01000044 	movi	r4,1
    93b4:	000b883a 	mov	r5,zero
    93b8:	d811883a 	mov	r8,sp
    93bc:	003f0d06 	br	8ff4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008ff4>
    93c0:	d9402117 	ldw	r5,132(sp)
    93c4:	d9002017 	ldw	r4,128(sp)
    93c8:	d9801a04 	addi	r6,sp,104
    93cc:	00082dc0 	call	82dc <__sprint_r.part.0>
    93d0:	103f5b1e 	bne	r2,zero,9140 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009140>
    93d4:	d9001b17 	ldw	r4,108(sp)
    93d8:	d8801c17 	ldw	r2,112(sp)
    93dc:	d811883a 	mov	r8,sp
    93e0:	21000044 	addi	r4,r4,1
    93e4:	003d8006 	br	89e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70089e8>
    93e8:	010000b4 	movhi	r4,2
    93ec:	21279104 	addi	r4,r4,-25020
    93f0:	d9002615 	stw	r4,152(sp)
    93f4:	d8c02215 	stw	r3,136(sp)
    93f8:	1029883a 	mov	r20,r2
    93fc:	94c4b03a 	or	r2,r18,r19
    9400:	103fb21e 	bne	r2,zero,92cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70092cc>
    9404:	0039883a 	mov	fp,zero
    9408:	00800084 	movi	r2,2
    940c:	003e6b06 	br	8dbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008dbc>
    9410:	da802217 	ldw	r10,136(sp)
    9414:	d8001d85 	stb	zero,118(sp)
    9418:	0027883a 	mov	r19,zero
    941c:	50800104 	addi	r2,r10,4
    9420:	54800017 	ldw	r18,0(r10)
    9424:	483e6016 	blt	r9,zero,8da8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008da8>
    9428:	00ffdfc4 	movi	r3,-129
    942c:	d8802215 	stw	r2,136(sp)
    9430:	a0e8703a 	and	r20,r20,r3
    9434:	0039883a 	mov	fp,zero
    9438:	903ebb26 	beq	r18,zero,8f28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008f28>
    943c:	00800244 	movi	r2,9
    9440:	14bdee36 	bltu	r2,r18,8bfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008bfc>
    9444:	003eba06 	br	8f30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008f30>
    9448:	00800c04 	movi	r2,48
    944c:	d8c01d45 	stb	r3,117(sp)
    9450:	d8801d05 	stb	r2,116(sp)
    9454:	d8001d85 	stb	zero,118(sp)
    9458:	a0c00094 	ori	r3,r20,2
    945c:	4800a916 	blt	r9,zero,9704 <___vfiprintf_internal_r+0x1314>
    9460:	00bfdfc4 	movi	r2,-129
    9464:	a096703a 	and	r11,r20,r2
    9468:	5d000094 	ori	r20,r11,2
    946c:	0039883a 	mov	fp,zero
    9470:	003f9706 	br	92d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70092d0>
    9474:	8025883a 	mov	r18,r16
    9478:	003c2e06 	br	8534 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008534>
    947c:	008000b4 	movhi	r2,2
    9480:	10a79104 	addi	r2,r2,-25020
    9484:	0039883a 	mov	fp,zero
    9488:	d8802615 	stw	r2,152(sp)
    948c:	003f9006 	br	92d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70092d0>
    9490:	04a5c83a 	sub	r18,zero,r18
    9494:	07000b44 	movi	fp,45
    9498:	9004c03a 	cmpne	r2,r18,zero
    949c:	04e7c83a 	sub	r19,zero,r19
    94a0:	df001d85 	stb	fp,118(sp)
    94a4:	98a7c83a 	sub	r19,r19,r2
    94a8:	48009f16 	blt	r9,zero,9728 <___vfiprintf_internal_r+0x1338>
    94ac:	00bfdfc4 	movi	r2,-129
    94b0:	a0a8703a 	and	r20,r20,r2
    94b4:	003dd006 	br	8bf8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008bf8>
    94b8:	70004c26 	beq	r14,zero,95ec <___vfiprintf_internal_r+0x11fc>
    94bc:	00800084 	movi	r2,2
    94c0:	d8c01d04 	addi	r3,sp,116
    94c4:	d8c00015 	stw	r3,0(sp)
    94c8:	d8800115 	stw	r2,4(sp)
    94cc:	01000044 	movi	r4,1
    94d0:	d811883a 	mov	r8,sp
    94d4:	003f7306 	br	92a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70092a4>
    94d8:	a080100c 	andi	r2,r20,64
    94dc:	da802217 	ldw	r10,136(sp)
    94e0:	103e0626 	beq	r2,zero,8cfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008cfc>
    94e4:	5480000f 	ldh	r18,0(r10)
    94e8:	52800104 	addi	r10,r10,4
    94ec:	da802215 	stw	r10,136(sp)
    94f0:	9027d7fa 	srai	r19,r18,31
    94f4:	9805883a 	mov	r2,r19
    94f8:	003db806 	br	8bdc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008bdc>
    94fc:	a080040c 	andi	r2,r20,16
    9500:	1000091e 	bne	r2,zero,9528 <___vfiprintf_internal_r+0x1138>
    9504:	a2c0100c 	andi	r11,r20,64
    9508:	58000726 	beq	r11,zero,9528 <___vfiprintf_internal_r+0x1138>
    950c:	da802217 	ldw	r10,136(sp)
    9510:	50800017 	ldw	r2,0(r10)
    9514:	52800104 	addi	r10,r10,4
    9518:	da802215 	stw	r10,136(sp)
    951c:	da802317 	ldw	r10,140(sp)
    9520:	1280000d 	sth	r10,0(r2)
    9524:	003be706 	br	84c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70084c4>
    9528:	da802217 	ldw	r10,136(sp)
    952c:	50800017 	ldw	r2,0(r10)
    9530:	52800104 	addi	r10,r10,4
    9534:	da802215 	stw	r10,136(sp)
    9538:	da802317 	ldw	r10,140(sp)
    953c:	12800015 	stw	r10,0(r2)
    9540:	003be006 	br	84c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70084c4>
    9544:	a080100c 	andi	r2,r20,64
    9548:	da802217 	ldw	r10,136(sp)
    954c:	10003026 	beq	r2,zero,9610 <___vfiprintf_internal_r+0x1220>
    9550:	5480000b 	ldhu	r18,0(r10)
    9554:	52800104 	addi	r10,r10,4
    9558:	0027883a 	mov	r19,zero
    955c:	da802215 	stw	r10,136(sp)
    9560:	003d8006 	br	8b64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008b64>
    9564:	80c00007 	ldb	r3,0(r16)
    9568:	003c0006 	br	856c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700856c>
    956c:	a080100c 	andi	r2,r20,64
    9570:	d8001d85 	stb	zero,118(sp)
    9574:	da802217 	ldw	r10,136(sp)
    9578:	1000201e 	bne	r2,zero,95fc <___vfiprintf_internal_r+0x120c>
    957c:	50800104 	addi	r2,r10,4
    9580:	54800017 	ldw	r18,0(r10)
    9584:	0027883a 	mov	r19,zero
    9588:	483def0e 	bge	r9,zero,8d48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008d48>
    958c:	94c6b03a 	or	r3,r18,r19
    9590:	d8802215 	stw	r2,136(sp)
    9594:	183d4e1e 	bne	r3,zero,8ad0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008ad0>
    9598:	0039883a 	mov	fp,zero
    959c:	0005883a 	mov	r2,zero
    95a0:	003e0606 	br	8dbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008dbc>
    95a4:	d9402117 	ldw	r5,132(sp)
    95a8:	d9002017 	ldw	r4,128(sp)
    95ac:	d9801a04 	addi	r6,sp,104
    95b0:	da402c15 	stw	r9,176(sp)
    95b4:	db802a15 	stw	r14,168(sp)
    95b8:	00082dc0 	call	82dc <__sprint_r.part.0>
    95bc:	da402c17 	ldw	r9,176(sp)
    95c0:	db802a17 	ldw	r14,168(sp)
    95c4:	103ede1e 	bne	r2,zero,9140 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009140>
    95c8:	d9401b17 	ldw	r5,108(sp)
    95cc:	d8801c17 	ldw	r2,112(sp)
    95d0:	d811883a 	mov	r8,sp
    95d4:	29000044 	addi	r4,r5,1
    95d8:	003e7406 	br	8fac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008fac>
    95dc:	00bfffc4 	movi	r2,-1
    95e0:	003c5806 	br	8744 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008744>
    95e4:	d811883a 	mov	r8,sp
    95e8:	003ee806 	br	918c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700918c>
    95ec:	000b883a 	mov	r5,zero
    95f0:	01000044 	movi	r4,1
    95f4:	d811883a 	mov	r8,sp
    95f8:	003e7c06 	br	8fec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008fec>
    95fc:	50800104 	addi	r2,r10,4
    9600:	5480000b 	ldhu	r18,0(r10)
    9604:	0027883a 	mov	r19,zero
    9608:	483dcf0e 	bge	r9,zero,8d48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008d48>
    960c:	003fdf06 	br	958c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700958c>
    9610:	54800017 	ldw	r18,0(r10)
    9614:	52800104 	addi	r10,r10,4
    9618:	0027883a 	mov	r19,zero
    961c:	da802215 	stw	r10,136(sp)
    9620:	003d5006 	br	8b64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008b64>
    9624:	50800104 	addi	r2,r10,4
    9628:	5480000b 	ldhu	r18,0(r10)
    962c:	0027883a 	mov	r19,zero
    9630:	483f7d0e 	bge	r9,zero,9428 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009428>
    9634:	003ddc06 	br	8da8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008da8>
    9638:	d8c02215 	stw	r3,136(sp)
    963c:	0039883a 	mov	fp,zero
    9640:	003ddb06 	br	8db0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008db0>
    9644:	028000b4 	movhi	r10,2
    9648:	52a7f104 	addi	r10,r10,-24636
    964c:	da802415 	stw	r10,144(sp)
    9650:	003e8306 	br	9060 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009060>
    9654:	d8801c17 	ldw	r2,112(sp)
    9658:	dd002117 	ldw	r20,132(sp)
    965c:	103eb926 	beq	r2,zero,9144 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009144>
    9660:	d9002017 	ldw	r4,128(sp)
    9664:	d9801a04 	addi	r6,sp,104
    9668:	a00b883a 	mov	r5,r20
    966c:	00082dc0 	call	82dc <__sprint_r.part.0>
    9670:	003eb406 	br	9144 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009144>
    9674:	80c00043 	ldbu	r3,1(r16)
    9678:	a5000814 	ori	r20,r20,32
    967c:	84000044 	addi	r16,r16,1
    9680:	18c03fcc 	andi	r3,r3,255
    9684:	18c0201c 	xori	r3,r3,128
    9688:	18ffe004 	addi	r3,r3,-128
    968c:	003bb706 	br	856c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700856c>
    9690:	a809883a 	mov	r4,r21
    9694:	d8c02a15 	stw	r3,168(sp)
    9698:	da002b15 	stw	r8,172(sp)
    969c:	0000d440 	call	d44 <strlen>
    96a0:	d8c02a17 	ldw	r3,168(sp)
    96a4:	1027883a 	mov	r19,r2
    96a8:	df001d83 	ldbu	fp,118(sp)
    96ac:	d8c02215 	stw	r3,136(sp)
    96b0:	0013883a 	mov	r9,zero
    96b4:	da002b17 	ldw	r8,172(sp)
    96b8:	003c4d06 	br	87f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70087f0>
    96bc:	d9402117 	ldw	r5,132(sp)
    96c0:	d9002017 	ldw	r4,128(sp)
    96c4:	d9801a04 	addi	r6,sp,104
    96c8:	da402c15 	stw	r9,176(sp)
    96cc:	00082dc0 	call	82dc <__sprint_r.part.0>
    96d0:	da402c17 	ldw	r9,176(sp)
    96d4:	103e9a1e 	bne	r2,zero,9140 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009140>
    96d8:	d9401b17 	ldw	r5,108(sp)
    96dc:	d8801c17 	ldw	r2,112(sp)
    96e0:	d811883a 	mov	r8,sp
    96e4:	29000044 	addi	r4,r5,1
    96e8:	003e4206 	br	8ff4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008ff4>
    96ec:	d9401b17 	ldw	r5,108(sp)
    96f0:	010000b4 	movhi	r4,2
    96f4:	2127f504 	addi	r4,r4,-24620
    96f8:	d9002415 	stw	r4,144(sp)
    96fc:	29400044 	addi	r5,r5,1
    9700:	003c6d06 	br	88b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70088b8>
    9704:	0039883a 	mov	fp,zero
    9708:	00800084 	movi	r2,2
    970c:	10803fcc 	andi	r2,r2,255
    9710:	01000044 	movi	r4,1
    9714:	11001e26 	beq	r2,r4,9790 <___vfiprintf_internal_r+0x13a0>
    9718:	01000084 	movi	r4,2
    971c:	11001e1e 	bne	r2,r4,9798 <___vfiprintf_internal_r+0x13a8>
    9720:	1829883a 	mov	r20,r3
    9724:	003eea06 	br	92d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70092d0>
    9728:	a007883a 	mov	r3,r20
    972c:	00800044 	movi	r2,1
    9730:	003ff606 	br	970c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700970c>
    9734:	00800184 	movi	r2,6
    9738:	1240012e 	bgeu	r2,r9,9740 <___vfiprintf_internal_r+0x1350>
    973c:	1013883a 	mov	r9,r2
    9740:	4827883a 	mov	r19,r9
    9744:	4825883a 	mov	r18,r9
    9748:	48001516 	blt	r9,zero,97a0 <___vfiprintf_internal_r+0x13b0>
    974c:	054000b4 	movhi	r21,2
    9750:	d8c02215 	stw	r3,136(sp)
    9754:	ad679604 	addi	r21,r21,-25000
    9758:	003d1406 	br	8bac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008bac>
    975c:	028000b4 	movhi	r10,2
    9760:	52a7f104 	addi	r10,r10,-24636
    9764:	da802415 	stw	r10,144(sp)
    9768:	200d883a 	mov	r6,r4
    976c:	003c9106 	br	89b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70089b4>
    9770:	5021883a 	mov	r16,r10
    9774:	0013883a 	mov	r9,zero
    9778:	003b7d06 	br	8570 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008570>
    977c:	4827883a 	mov	r19,r9
    9780:	df001d83 	ldbu	fp,118(sp)
    9784:	d8c02215 	stw	r3,136(sp)
    9788:	0013883a 	mov	r9,zero
    978c:	003c1806 	br	87f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70087f0>
    9790:	1829883a 	mov	r20,r3
    9794:	003d1806 	br	8bf8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008bf8>
    9798:	1829883a 	mov	r20,r3
    979c:	003ccd06 	br	8ad4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008ad4>
    97a0:	0025883a 	mov	r18,zero
    97a4:	003fe906 	br	974c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700974c>
    97a8:	d8802217 	ldw	r2,136(sp)
    97ac:	80c00043 	ldbu	r3,1(r16)
    97b0:	5021883a 	mov	r16,r10
    97b4:	12400017 	ldw	r9,0(r2)
    97b8:	10800104 	addi	r2,r2,4
    97bc:	d8802215 	stw	r2,136(sp)
    97c0:	483faf0e 	bge	r9,zero,9680 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009680>
    97c4:	18c03fcc 	andi	r3,r3,255
    97c8:	18c0201c 	xori	r3,r3,128
    97cc:	027fffc4 	movi	r9,-1
    97d0:	18ffe004 	addi	r3,r3,-128
    97d4:	003b6506 	br	856c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700856c>
    97d8:	d9c01d85 	stb	r7,118(sp)
    97dc:	003ca006 	br	8a60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008a60>
    97e0:	d9c01d85 	stb	r7,118(sp)
    97e4:	003cad06 	br	8a9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008a9c>
    97e8:	d9c01d85 	stb	r7,118(sp)
    97ec:	003d7d06 	br	8de4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008de4>
    97f0:	d9c01d85 	stb	r7,118(sp)
    97f4:	003d5f06 	br	8d74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008d74>
    97f8:	a080004c 	andi	r2,r20,1
    97fc:	0039883a 	mov	fp,zero
    9800:	10000526 	beq	r2,zero,9818 <___vfiprintf_internal_r+0x1428>
    9804:	00800c04 	movi	r2,48
    9808:	d88019c5 	stb	r2,103(sp)
    980c:	dcc02717 	ldw	r19,156(sp)
    9810:	dd4019c4 	addi	r21,sp,103
    9814:	003bf606 	br	87f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70087f0>
    9818:	0027883a 	mov	r19,zero
    981c:	dd401a04 	addi	r21,sp,104
    9820:	003bf306 	br	87f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70087f0>
    9824:	d9c01d85 	stb	r7,118(sp)
    9828:	003dc806 	br	8f4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008f4c>
    982c:	d9c01d85 	stb	r7,118(sp)
    9830:	003d3a06 	br	8d1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008d1c>
    9834:	d9c01d85 	stb	r7,118(sp)
    9838:	003d2a06 	br	8ce4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008ce4>
    983c:	d9c01d85 	stb	r7,118(sp)
    9840:	003cde06 	br	8bbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008bbc>
    9844:	d9c01d85 	stb	r7,118(sp)
    9848:	003cbc06 	br	8b3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008b3c>

0000984c <__vfiprintf_internal>:
    984c:	008000b4 	movhi	r2,2
    9850:	10b05204 	addi	r2,r2,-16056
    9854:	300f883a 	mov	r7,r6
    9858:	280d883a 	mov	r6,r5
    985c:	200b883a 	mov	r5,r4
    9860:	11000017 	ldw	r4,0(r2)
    9864:	00083f01 	jmpi	83f0 <___vfiprintf_internal_r>

00009868 <__sbprintf>:
    9868:	2880030b 	ldhu	r2,12(r5)
    986c:	2ac01917 	ldw	r11,100(r5)
    9870:	2a80038b 	ldhu	r10,14(r5)
    9874:	2a400717 	ldw	r9,28(r5)
    9878:	2a000917 	ldw	r8,36(r5)
    987c:	defee204 	addi	sp,sp,-1144
    9880:	00c10004 	movi	r3,1024
    9884:	dc011a15 	stw	r16,1128(sp)
    9888:	10bfff4c 	andi	r2,r2,65533
    988c:	2821883a 	mov	r16,r5
    9890:	d8cb883a 	add	r5,sp,r3
    9894:	dc811c15 	stw	r18,1136(sp)
    9898:	dc411b15 	stw	r17,1132(sp)
    989c:	dfc11d15 	stw	ra,1140(sp)
    98a0:	2025883a 	mov	r18,r4
    98a4:	d881030d 	sth	r2,1036(sp)
    98a8:	dac11915 	stw	r11,1124(sp)
    98ac:	da81038d 	sth	r10,1038(sp)
    98b0:	da410715 	stw	r9,1052(sp)
    98b4:	da010915 	stw	r8,1060(sp)
    98b8:	dec10015 	stw	sp,1024(sp)
    98bc:	dec10415 	stw	sp,1040(sp)
    98c0:	d8c10215 	stw	r3,1032(sp)
    98c4:	d8c10515 	stw	r3,1044(sp)
    98c8:	d8010615 	stw	zero,1048(sp)
    98cc:	00083f00 	call	83f0 <___vfiprintf_internal_r>
    98d0:	1023883a 	mov	r17,r2
    98d4:	10000416 	blt	r2,zero,98e8 <__sbprintf+0x80>
    98d8:	d9410004 	addi	r5,sp,1024
    98dc:	9009883a 	mov	r4,r18
    98e0:	0004ca40 	call	4ca4 <_fflush_r>
    98e4:	10000d1e 	bne	r2,zero,991c <__sbprintf+0xb4>
    98e8:	d881030b 	ldhu	r2,1036(sp)
    98ec:	1080100c 	andi	r2,r2,64
    98f0:	10000326 	beq	r2,zero,9900 <__sbprintf+0x98>
    98f4:	8080030b 	ldhu	r2,12(r16)
    98f8:	10801014 	ori	r2,r2,64
    98fc:	8080030d 	sth	r2,12(r16)
    9900:	8805883a 	mov	r2,r17
    9904:	dfc11d17 	ldw	ra,1140(sp)
    9908:	dc811c17 	ldw	r18,1136(sp)
    990c:	dc411b17 	ldw	r17,1132(sp)
    9910:	dc011a17 	ldw	r16,1128(sp)
    9914:	dec11e04 	addi	sp,sp,1144
    9918:	f800283a 	ret
    991c:	047fffc4 	movi	r17,-1
    9920:	003ff106 	br	98e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70098e8>

00009924 <_write_r>:
    9924:	defffd04 	addi	sp,sp,-12
    9928:	2805883a 	mov	r2,r5
    992c:	dc000015 	stw	r16,0(sp)
    9930:	040000b4 	movhi	r16,2
    9934:	dc400115 	stw	r17,4(sp)
    9938:	300b883a 	mov	r5,r6
    993c:	84383104 	addi	r16,r16,-7996
    9940:	2023883a 	mov	r17,r4
    9944:	380d883a 	mov	r6,r7
    9948:	1009883a 	mov	r4,r2
    994c:	dfc00215 	stw	ra,8(sp)
    9950:	80000015 	stw	zero,0(r16)
    9954:	000dd680 	call	dd68 <write>
    9958:	00ffffc4 	movi	r3,-1
    995c:	10c00526 	beq	r2,r3,9974 <_write_r+0x50>
    9960:	dfc00217 	ldw	ra,8(sp)
    9964:	dc400117 	ldw	r17,4(sp)
    9968:	dc000017 	ldw	r16,0(sp)
    996c:	dec00304 	addi	sp,sp,12
    9970:	f800283a 	ret
    9974:	80c00017 	ldw	r3,0(r16)
    9978:	183ff926 	beq	r3,zero,9960 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009960>
    997c:	88c00015 	stw	r3,0(r17)
    9980:	003ff706 	br	9960 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009960>

00009984 <_close_r>:
    9984:	defffd04 	addi	sp,sp,-12
    9988:	dc000015 	stw	r16,0(sp)
    998c:	040000b4 	movhi	r16,2
    9990:	dc400115 	stw	r17,4(sp)
    9994:	84383104 	addi	r16,r16,-7996
    9998:	2023883a 	mov	r17,r4
    999c:	2809883a 	mov	r4,r5
    99a0:	dfc00215 	stw	ra,8(sp)
    99a4:	80000015 	stw	zero,0(r16)
    99a8:	000d5600 	call	d560 <close>
    99ac:	00ffffc4 	movi	r3,-1
    99b0:	10c00526 	beq	r2,r3,99c8 <_close_r+0x44>
    99b4:	dfc00217 	ldw	ra,8(sp)
    99b8:	dc400117 	ldw	r17,4(sp)
    99bc:	dc000017 	ldw	r16,0(sp)
    99c0:	dec00304 	addi	sp,sp,12
    99c4:	f800283a 	ret
    99c8:	80c00017 	ldw	r3,0(r16)
    99cc:	183ff926 	beq	r3,zero,99b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70099b4>
    99d0:	88c00015 	stw	r3,0(r17)
    99d4:	003ff706 	br	99b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70099b4>

000099d8 <_calloc_r>:
    99d8:	298b383a 	mul	r5,r5,r6
    99dc:	defffe04 	addi	sp,sp,-8
    99e0:	dfc00115 	stw	ra,4(sp)
    99e4:	dc000015 	stw	r16,0(sp)
    99e8:	0005de00 	call	5de0 <_malloc_r>
    99ec:	10002926 	beq	r2,zero,9a94 <_calloc_r+0xbc>
    99f0:	11bfff17 	ldw	r6,-4(r2)
    99f4:	1021883a 	mov	r16,r2
    99f8:	00bfff04 	movi	r2,-4
    99fc:	308c703a 	and	r6,r6,r2
    9a00:	00c00904 	movi	r3,36
    9a04:	308d883a 	add	r6,r6,r2
    9a08:	19801636 	bltu	r3,r6,9a64 <_calloc_r+0x8c>
    9a0c:	008004c4 	movi	r2,19
    9a10:	11800b2e 	bgeu	r2,r6,9a40 <_calloc_r+0x68>
    9a14:	80000015 	stw	zero,0(r16)
    9a18:	80000115 	stw	zero,4(r16)
    9a1c:	008006c4 	movi	r2,27
    9a20:	11801a2e 	bgeu	r2,r6,9a8c <_calloc_r+0xb4>
    9a24:	80000215 	stw	zero,8(r16)
    9a28:	80000315 	stw	zero,12(r16)
    9a2c:	30c0151e 	bne	r6,r3,9a84 <_calloc_r+0xac>
    9a30:	80000415 	stw	zero,16(r16)
    9a34:	80800604 	addi	r2,r16,24
    9a38:	80000515 	stw	zero,20(r16)
    9a3c:	00000106 	br	9a44 <_calloc_r+0x6c>
    9a40:	8005883a 	mov	r2,r16
    9a44:	10000015 	stw	zero,0(r2)
    9a48:	10000115 	stw	zero,4(r2)
    9a4c:	10000215 	stw	zero,8(r2)
    9a50:	8005883a 	mov	r2,r16
    9a54:	dfc00117 	ldw	ra,4(sp)
    9a58:	dc000017 	ldw	r16,0(sp)
    9a5c:	dec00204 	addi	sp,sp,8
    9a60:	f800283a 	ret
    9a64:	000b883a 	mov	r5,zero
    9a68:	8009883a 	mov	r4,r16
    9a6c:	00069740 	call	6974 <memset>
    9a70:	8005883a 	mov	r2,r16
    9a74:	dfc00117 	ldw	ra,4(sp)
    9a78:	dc000017 	ldw	r16,0(sp)
    9a7c:	dec00204 	addi	sp,sp,8
    9a80:	f800283a 	ret
    9a84:	80800404 	addi	r2,r16,16
    9a88:	003fee06 	br	9a44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009a44>
    9a8c:	80800204 	addi	r2,r16,8
    9a90:	003fec06 	br	9a44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009a44>
    9a94:	0005883a 	mov	r2,zero
    9a98:	003fee06 	br	9a54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009a54>

00009a9c <_fclose_r>:
    9a9c:	28003926 	beq	r5,zero,9b84 <_fclose_r+0xe8>
    9aa0:	defffc04 	addi	sp,sp,-16
    9aa4:	dc400115 	stw	r17,4(sp)
    9aa8:	dc000015 	stw	r16,0(sp)
    9aac:	dfc00315 	stw	ra,12(sp)
    9ab0:	dc800215 	stw	r18,8(sp)
    9ab4:	2023883a 	mov	r17,r4
    9ab8:	2821883a 	mov	r16,r5
    9abc:	20000226 	beq	r4,zero,9ac8 <_fclose_r+0x2c>
    9ac0:	20800e17 	ldw	r2,56(r4)
    9ac4:	10002726 	beq	r2,zero,9b64 <_fclose_r+0xc8>
    9ac8:	8080030f 	ldh	r2,12(r16)
    9acc:	1000071e 	bne	r2,zero,9aec <_fclose_r+0x50>
    9ad0:	0005883a 	mov	r2,zero
    9ad4:	dfc00317 	ldw	ra,12(sp)
    9ad8:	dc800217 	ldw	r18,8(sp)
    9adc:	dc400117 	ldw	r17,4(sp)
    9ae0:	dc000017 	ldw	r16,0(sp)
    9ae4:	dec00404 	addi	sp,sp,16
    9ae8:	f800283a 	ret
    9aec:	800b883a 	mov	r5,r16
    9af0:	8809883a 	mov	r4,r17
    9af4:	0004a880 	call	4a88 <__sflush_r>
    9af8:	1025883a 	mov	r18,r2
    9afc:	80800b17 	ldw	r2,44(r16)
    9b00:	10000426 	beq	r2,zero,9b14 <_fclose_r+0x78>
    9b04:	81400717 	ldw	r5,28(r16)
    9b08:	8809883a 	mov	r4,r17
    9b0c:	103ee83a 	callr	r2
    9b10:	10001616 	blt	r2,zero,9b6c <_fclose_r+0xd0>
    9b14:	8080030b 	ldhu	r2,12(r16)
    9b18:	1080200c 	andi	r2,r2,128
    9b1c:	1000151e 	bne	r2,zero,9b74 <_fclose_r+0xd8>
    9b20:	81400c17 	ldw	r5,48(r16)
    9b24:	28000526 	beq	r5,zero,9b3c <_fclose_r+0xa0>
    9b28:	80801004 	addi	r2,r16,64
    9b2c:	28800226 	beq	r5,r2,9b38 <_fclose_r+0x9c>
    9b30:	8809883a 	mov	r4,r17
    9b34:	00051f40 	call	51f4 <_free_r>
    9b38:	80000c15 	stw	zero,48(r16)
    9b3c:	81401117 	ldw	r5,68(r16)
    9b40:	28000326 	beq	r5,zero,9b50 <_fclose_r+0xb4>
    9b44:	8809883a 	mov	r4,r17
    9b48:	00051f40 	call	51f4 <_free_r>
    9b4c:	80001115 	stw	zero,68(r16)
    9b50:	00050900 	call	5090 <__sfp_lock_acquire>
    9b54:	8000030d 	sth	zero,12(r16)
    9b58:	00050940 	call	5094 <__sfp_lock_release>
    9b5c:	9005883a 	mov	r2,r18
    9b60:	003fdc06 	br	9ad4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009ad4>
    9b64:	00050800 	call	5080 <__sinit>
    9b68:	003fd706 	br	9ac8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009ac8>
    9b6c:	04bfffc4 	movi	r18,-1
    9b70:	003fe806 	br	9b14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009b14>
    9b74:	81400417 	ldw	r5,16(r16)
    9b78:	8809883a 	mov	r4,r17
    9b7c:	00051f40 	call	51f4 <_free_r>
    9b80:	003fe706 	br	9b20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009b20>
    9b84:	0005883a 	mov	r2,zero
    9b88:	f800283a 	ret

00009b8c <fclose>:
    9b8c:	008000b4 	movhi	r2,2
    9b90:	10b05204 	addi	r2,r2,-16056
    9b94:	200b883a 	mov	r5,r4
    9b98:	11000017 	ldw	r4,0(r2)
    9b9c:	0009a9c1 	jmpi	9a9c <_fclose_r>

00009ba0 <__fputwc>:
    9ba0:	defff804 	addi	sp,sp,-32
    9ba4:	dcc00415 	stw	r19,16(sp)
    9ba8:	dc800315 	stw	r18,12(sp)
    9bac:	dc000115 	stw	r16,4(sp)
    9bb0:	dfc00715 	stw	ra,28(sp)
    9bb4:	dd400615 	stw	r21,24(sp)
    9bb8:	dd000515 	stw	r20,20(sp)
    9bbc:	dc400215 	stw	r17,8(sp)
    9bc0:	2027883a 	mov	r19,r4
    9bc4:	2825883a 	mov	r18,r5
    9bc8:	3021883a 	mov	r16,r6
    9bcc:	0005bd00 	call	5bd0 <__locale_mb_cur_max>
    9bd0:	00c00044 	movi	r3,1
    9bd4:	10c03e26 	beq	r2,r3,9cd0 <__fputwc+0x130>
    9bd8:	81c01704 	addi	r7,r16,92
    9bdc:	900d883a 	mov	r6,r18
    9be0:	d80b883a 	mov	r5,sp
    9be4:	9809883a 	mov	r4,r19
    9be8:	000a0700 	call	a070 <_wcrtomb_r>
    9bec:	1029883a 	mov	r20,r2
    9bf0:	00bfffc4 	movi	r2,-1
    9bf4:	a0802026 	beq	r20,r2,9c78 <__fputwc+0xd8>
    9bf8:	d9400003 	ldbu	r5,0(sp)
    9bfc:	a0001c26 	beq	r20,zero,9c70 <__fputwc+0xd0>
    9c00:	0023883a 	mov	r17,zero
    9c04:	05400284 	movi	r21,10
    9c08:	00000906 	br	9c30 <__fputwc+0x90>
    9c0c:	80800017 	ldw	r2,0(r16)
    9c10:	11400005 	stb	r5,0(r2)
    9c14:	80c00017 	ldw	r3,0(r16)
    9c18:	18c00044 	addi	r3,r3,1
    9c1c:	80c00015 	stw	r3,0(r16)
    9c20:	8c400044 	addi	r17,r17,1
    9c24:	dc45883a 	add	r2,sp,r17
    9c28:	8d00112e 	bgeu	r17,r20,9c70 <__fputwc+0xd0>
    9c2c:	11400003 	ldbu	r5,0(r2)
    9c30:	80c00217 	ldw	r3,8(r16)
    9c34:	18ffffc4 	addi	r3,r3,-1
    9c38:	80c00215 	stw	r3,8(r16)
    9c3c:	183ff30e 	bge	r3,zero,9c0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009c0c>
    9c40:	80800617 	ldw	r2,24(r16)
    9c44:	18801916 	blt	r3,r2,9cac <__fputwc+0x10c>
    9c48:	80800017 	ldw	r2,0(r16)
    9c4c:	11400005 	stb	r5,0(r2)
    9c50:	80800017 	ldw	r2,0(r16)
    9c54:	10c00003 	ldbu	r3,0(r2)
    9c58:	10800044 	addi	r2,r2,1
    9c5c:	1d402326 	beq	r3,r21,9cec <__fputwc+0x14c>
    9c60:	80800015 	stw	r2,0(r16)
    9c64:	8c400044 	addi	r17,r17,1
    9c68:	dc45883a 	add	r2,sp,r17
    9c6c:	8d3fef36 	bltu	r17,r20,9c2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009c2c>
    9c70:	9005883a 	mov	r2,r18
    9c74:	00000406 	br	9c88 <__fputwc+0xe8>
    9c78:	80c0030b 	ldhu	r3,12(r16)
    9c7c:	a005883a 	mov	r2,r20
    9c80:	18c01014 	ori	r3,r3,64
    9c84:	80c0030d 	sth	r3,12(r16)
    9c88:	dfc00717 	ldw	ra,28(sp)
    9c8c:	dd400617 	ldw	r21,24(sp)
    9c90:	dd000517 	ldw	r20,20(sp)
    9c94:	dcc00417 	ldw	r19,16(sp)
    9c98:	dc800317 	ldw	r18,12(sp)
    9c9c:	dc400217 	ldw	r17,8(sp)
    9ca0:	dc000117 	ldw	r16,4(sp)
    9ca4:	dec00804 	addi	sp,sp,32
    9ca8:	f800283a 	ret
    9cac:	800d883a 	mov	r6,r16
    9cb0:	29403fcc 	andi	r5,r5,255
    9cb4:	9809883a 	mov	r4,r19
    9cb8:	0009f180 	call	9f18 <__swbuf_r>
    9cbc:	10bfffe0 	cmpeqi	r2,r2,-1
    9cc0:	10803fcc 	andi	r2,r2,255
    9cc4:	103fd626 	beq	r2,zero,9c20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009c20>
    9cc8:	00bfffc4 	movi	r2,-1
    9ccc:	003fee06 	br	9c88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009c88>
    9cd0:	90ffffc4 	addi	r3,r18,-1
    9cd4:	01003f84 	movi	r4,254
    9cd8:	20ffbf36 	bltu	r4,r3,9bd8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009bd8>
    9cdc:	900b883a 	mov	r5,r18
    9ce0:	dc800005 	stb	r18,0(sp)
    9ce4:	1029883a 	mov	r20,r2
    9ce8:	003fc506 	br	9c00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009c00>
    9cec:	800d883a 	mov	r6,r16
    9cf0:	a80b883a 	mov	r5,r21
    9cf4:	9809883a 	mov	r4,r19
    9cf8:	0009f180 	call	9f18 <__swbuf_r>
    9cfc:	10bfffe0 	cmpeqi	r2,r2,-1
    9d00:	003fef06 	br	9cc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009cc0>

00009d04 <_fputwc_r>:
    9d04:	3080030b 	ldhu	r2,12(r6)
    9d08:	10c8000c 	andi	r3,r2,8192
    9d0c:	1800051e 	bne	r3,zero,9d24 <_fputwc_r+0x20>
    9d10:	30c01917 	ldw	r3,100(r6)
    9d14:	10880014 	ori	r2,r2,8192
    9d18:	3080030d 	sth	r2,12(r6)
    9d1c:	18880014 	ori	r2,r3,8192
    9d20:	30801915 	stw	r2,100(r6)
    9d24:	0009ba01 	jmpi	9ba0 <__fputwc>

00009d28 <fputwc>:
    9d28:	008000b4 	movhi	r2,2
    9d2c:	defffc04 	addi	sp,sp,-16
    9d30:	10b05204 	addi	r2,r2,-16056
    9d34:	dc000115 	stw	r16,4(sp)
    9d38:	14000017 	ldw	r16,0(r2)
    9d3c:	dc400215 	stw	r17,8(sp)
    9d40:	dfc00315 	stw	ra,12(sp)
    9d44:	2023883a 	mov	r17,r4
    9d48:	80000226 	beq	r16,zero,9d54 <fputwc+0x2c>
    9d4c:	80800e17 	ldw	r2,56(r16)
    9d50:	10001026 	beq	r2,zero,9d94 <fputwc+0x6c>
    9d54:	2880030b 	ldhu	r2,12(r5)
    9d58:	10c8000c 	andi	r3,r2,8192
    9d5c:	1800051e 	bne	r3,zero,9d74 <fputwc+0x4c>
    9d60:	28c01917 	ldw	r3,100(r5)
    9d64:	10880014 	ori	r2,r2,8192
    9d68:	2880030d 	sth	r2,12(r5)
    9d6c:	18880014 	ori	r2,r3,8192
    9d70:	28801915 	stw	r2,100(r5)
    9d74:	280d883a 	mov	r6,r5
    9d78:	8009883a 	mov	r4,r16
    9d7c:	880b883a 	mov	r5,r17
    9d80:	dfc00317 	ldw	ra,12(sp)
    9d84:	dc400217 	ldw	r17,8(sp)
    9d88:	dc000117 	ldw	r16,4(sp)
    9d8c:	dec00404 	addi	sp,sp,16
    9d90:	0009ba01 	jmpi	9ba0 <__fputwc>
    9d94:	8009883a 	mov	r4,r16
    9d98:	d9400015 	stw	r5,0(sp)
    9d9c:	00050800 	call	5080 <__sinit>
    9da0:	d9400017 	ldw	r5,0(sp)
    9da4:	003feb06 	br	9d54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009d54>

00009da8 <_fstat_r>:
    9da8:	defffd04 	addi	sp,sp,-12
    9dac:	2805883a 	mov	r2,r5
    9db0:	dc000015 	stw	r16,0(sp)
    9db4:	040000b4 	movhi	r16,2
    9db8:	dc400115 	stw	r17,4(sp)
    9dbc:	84383104 	addi	r16,r16,-7996
    9dc0:	2023883a 	mov	r17,r4
    9dc4:	300b883a 	mov	r5,r6
    9dc8:	1009883a 	mov	r4,r2
    9dcc:	dfc00215 	stw	ra,8(sp)
    9dd0:	80000015 	stw	zero,0(r16)
    9dd4:	000d6980 	call	d698 <fstat>
    9dd8:	00ffffc4 	movi	r3,-1
    9ddc:	10c00526 	beq	r2,r3,9df4 <_fstat_r+0x4c>
    9de0:	dfc00217 	ldw	ra,8(sp)
    9de4:	dc400117 	ldw	r17,4(sp)
    9de8:	dc000017 	ldw	r16,0(sp)
    9dec:	dec00304 	addi	sp,sp,12
    9df0:	f800283a 	ret
    9df4:	80c00017 	ldw	r3,0(r16)
    9df8:	183ff926 	beq	r3,zero,9de0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009de0>
    9dfc:	88c00015 	stw	r3,0(r17)
    9e00:	003ff706 	br	9de0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009de0>

00009e04 <_isatty_r>:
    9e04:	defffd04 	addi	sp,sp,-12
    9e08:	dc000015 	stw	r16,0(sp)
    9e0c:	040000b4 	movhi	r16,2
    9e10:	dc400115 	stw	r17,4(sp)
    9e14:	84383104 	addi	r16,r16,-7996
    9e18:	2023883a 	mov	r17,r4
    9e1c:	2809883a 	mov	r4,r5
    9e20:	dfc00215 	stw	ra,8(sp)
    9e24:	80000015 	stw	zero,0(r16)
    9e28:	000d7840 	call	d784 <isatty>
    9e2c:	00ffffc4 	movi	r3,-1
    9e30:	10c00526 	beq	r2,r3,9e48 <_isatty_r+0x44>
    9e34:	dfc00217 	ldw	ra,8(sp)
    9e38:	dc400117 	ldw	r17,4(sp)
    9e3c:	dc000017 	ldw	r16,0(sp)
    9e40:	dec00304 	addi	sp,sp,12
    9e44:	f800283a 	ret
    9e48:	80c00017 	ldw	r3,0(r16)
    9e4c:	183ff926 	beq	r3,zero,9e34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009e34>
    9e50:	88c00015 	stw	r3,0(r17)
    9e54:	003ff706 	br	9e34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009e34>

00009e58 <_lseek_r>:
    9e58:	defffd04 	addi	sp,sp,-12
    9e5c:	2805883a 	mov	r2,r5
    9e60:	dc000015 	stw	r16,0(sp)
    9e64:	040000b4 	movhi	r16,2
    9e68:	dc400115 	stw	r17,4(sp)
    9e6c:	300b883a 	mov	r5,r6
    9e70:	84383104 	addi	r16,r16,-7996
    9e74:	2023883a 	mov	r17,r4
    9e78:	380d883a 	mov	r6,r7
    9e7c:	1009883a 	mov	r4,r2
    9e80:	dfc00215 	stw	ra,8(sp)
    9e84:	80000015 	stw	zero,0(r16)
    9e88:	000d9500 	call	d950 <lseek>
    9e8c:	00ffffc4 	movi	r3,-1
    9e90:	10c00526 	beq	r2,r3,9ea8 <_lseek_r+0x50>
    9e94:	dfc00217 	ldw	ra,8(sp)
    9e98:	dc400117 	ldw	r17,4(sp)
    9e9c:	dc000017 	ldw	r16,0(sp)
    9ea0:	dec00304 	addi	sp,sp,12
    9ea4:	f800283a 	ret
    9ea8:	80c00017 	ldw	r3,0(r16)
    9eac:	183ff926 	beq	r3,zero,9e94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009e94>
    9eb0:	88c00015 	stw	r3,0(r17)
    9eb4:	003ff706 	br	9e94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009e94>

00009eb8 <_read_r>:
    9eb8:	defffd04 	addi	sp,sp,-12
    9ebc:	2805883a 	mov	r2,r5
    9ec0:	dc000015 	stw	r16,0(sp)
    9ec4:	040000b4 	movhi	r16,2
    9ec8:	dc400115 	stw	r17,4(sp)
    9ecc:	300b883a 	mov	r5,r6
    9ed0:	84383104 	addi	r16,r16,-7996
    9ed4:	2023883a 	mov	r17,r4
    9ed8:	380d883a 	mov	r6,r7
    9edc:	1009883a 	mov	r4,r2
    9ee0:	dfc00215 	stw	ra,8(sp)
    9ee4:	80000015 	stw	zero,0(r16)
    9ee8:	000db1c0 	call	db1c <read>
    9eec:	00ffffc4 	movi	r3,-1
    9ef0:	10c00526 	beq	r2,r3,9f08 <_read_r+0x50>
    9ef4:	dfc00217 	ldw	ra,8(sp)
    9ef8:	dc400117 	ldw	r17,4(sp)
    9efc:	dc000017 	ldw	r16,0(sp)
    9f00:	dec00304 	addi	sp,sp,12
    9f04:	f800283a 	ret
    9f08:	80c00017 	ldw	r3,0(r16)
    9f0c:	183ff926 	beq	r3,zero,9ef4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009ef4>
    9f10:	88c00015 	stw	r3,0(r17)
    9f14:	003ff706 	br	9ef4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009ef4>

00009f18 <__swbuf_r>:
    9f18:	defffb04 	addi	sp,sp,-20
    9f1c:	dcc00315 	stw	r19,12(sp)
    9f20:	dc800215 	stw	r18,8(sp)
    9f24:	dc000015 	stw	r16,0(sp)
    9f28:	dfc00415 	stw	ra,16(sp)
    9f2c:	dc400115 	stw	r17,4(sp)
    9f30:	2025883a 	mov	r18,r4
    9f34:	2827883a 	mov	r19,r5
    9f38:	3021883a 	mov	r16,r6
    9f3c:	20000226 	beq	r4,zero,9f48 <__swbuf_r+0x30>
    9f40:	20800e17 	ldw	r2,56(r4)
    9f44:	10004226 	beq	r2,zero,a050 <__swbuf_r+0x138>
    9f48:	80800617 	ldw	r2,24(r16)
    9f4c:	8100030b 	ldhu	r4,12(r16)
    9f50:	80800215 	stw	r2,8(r16)
    9f54:	2080020c 	andi	r2,r4,8
    9f58:	10003626 	beq	r2,zero,a034 <__swbuf_r+0x11c>
    9f5c:	80c00417 	ldw	r3,16(r16)
    9f60:	18003426 	beq	r3,zero,a034 <__swbuf_r+0x11c>
    9f64:	2088000c 	andi	r2,r4,8192
    9f68:	9c403fcc 	andi	r17,r19,255
    9f6c:	10001a26 	beq	r2,zero,9fd8 <__swbuf_r+0xc0>
    9f70:	80800017 	ldw	r2,0(r16)
    9f74:	81000517 	ldw	r4,20(r16)
    9f78:	10c7c83a 	sub	r3,r2,r3
    9f7c:	1900200e 	bge	r3,r4,a000 <__swbuf_r+0xe8>
    9f80:	18c00044 	addi	r3,r3,1
    9f84:	81000217 	ldw	r4,8(r16)
    9f88:	11400044 	addi	r5,r2,1
    9f8c:	81400015 	stw	r5,0(r16)
    9f90:	213fffc4 	addi	r4,r4,-1
    9f94:	81000215 	stw	r4,8(r16)
    9f98:	14c00005 	stb	r19,0(r2)
    9f9c:	80800517 	ldw	r2,20(r16)
    9fa0:	10c01e26 	beq	r2,r3,a01c <__swbuf_r+0x104>
    9fa4:	8080030b 	ldhu	r2,12(r16)
    9fa8:	1080004c 	andi	r2,r2,1
    9fac:	10000226 	beq	r2,zero,9fb8 <__swbuf_r+0xa0>
    9fb0:	00800284 	movi	r2,10
    9fb4:	88801926 	beq	r17,r2,a01c <__swbuf_r+0x104>
    9fb8:	8805883a 	mov	r2,r17
    9fbc:	dfc00417 	ldw	ra,16(sp)
    9fc0:	dcc00317 	ldw	r19,12(sp)
    9fc4:	dc800217 	ldw	r18,8(sp)
    9fc8:	dc400117 	ldw	r17,4(sp)
    9fcc:	dc000017 	ldw	r16,0(sp)
    9fd0:	dec00504 	addi	sp,sp,20
    9fd4:	f800283a 	ret
    9fd8:	81401917 	ldw	r5,100(r16)
    9fdc:	00b7ffc4 	movi	r2,-8193
    9fe0:	21080014 	ori	r4,r4,8192
    9fe4:	2884703a 	and	r2,r5,r2
    9fe8:	80801915 	stw	r2,100(r16)
    9fec:	80800017 	ldw	r2,0(r16)
    9ff0:	8100030d 	sth	r4,12(r16)
    9ff4:	81000517 	ldw	r4,20(r16)
    9ff8:	10c7c83a 	sub	r3,r2,r3
    9ffc:	193fe016 	blt	r3,r4,9f80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009f80>
    a000:	800b883a 	mov	r5,r16
    a004:	9009883a 	mov	r4,r18
    a008:	0004ca40 	call	4ca4 <_fflush_r>
    a00c:	1000071e 	bne	r2,zero,a02c <__swbuf_r+0x114>
    a010:	80800017 	ldw	r2,0(r16)
    a014:	00c00044 	movi	r3,1
    a018:	003fda06 	br	9f84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009f84>
    a01c:	800b883a 	mov	r5,r16
    a020:	9009883a 	mov	r4,r18
    a024:	0004ca40 	call	4ca4 <_fflush_r>
    a028:	103fe326 	beq	r2,zero,9fb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009fb8>
    a02c:	00bfffc4 	movi	r2,-1
    a030:	003fe206 	br	9fbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009fbc>
    a034:	800b883a 	mov	r5,r16
    a038:	9009883a 	mov	r4,r18
    a03c:	00030ac0 	call	30ac <__swsetup_r>
    a040:	103ffa1e 	bne	r2,zero,a02c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a02c>
    a044:	8100030b 	ldhu	r4,12(r16)
    a048:	80c00417 	ldw	r3,16(r16)
    a04c:	003fc506 	br	9f64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009f64>
    a050:	00050800 	call	5080 <__sinit>
    a054:	003fbc06 	br	9f48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009f48>

0000a058 <__swbuf>:
    a058:	008000b4 	movhi	r2,2
    a05c:	10b05204 	addi	r2,r2,-16056
    a060:	280d883a 	mov	r6,r5
    a064:	200b883a 	mov	r5,r4
    a068:	11000017 	ldw	r4,0(r2)
    a06c:	0009f181 	jmpi	9f18 <__swbuf_r>

0000a070 <_wcrtomb_r>:
    a070:	defff604 	addi	sp,sp,-40
    a074:	008000b4 	movhi	r2,2
    a078:	dc800815 	stw	r18,32(sp)
    a07c:	dc400715 	stw	r17,28(sp)
    a080:	dc000615 	stw	r16,24(sp)
    a084:	10b05604 	addi	r2,r2,-16040
    a088:	dfc00915 	stw	ra,36(sp)
    a08c:	2021883a 	mov	r16,r4
    a090:	3823883a 	mov	r17,r7
    a094:	14800017 	ldw	r18,0(r2)
    a098:	28001426 	beq	r5,zero,a0ec <_wcrtomb_r+0x7c>
    a09c:	d9400415 	stw	r5,16(sp)
    a0a0:	d9800515 	stw	r6,20(sp)
    a0a4:	0005bc40 	call	5bc4 <__locale_charset>
    a0a8:	d9800517 	ldw	r6,20(sp)
    a0ac:	d9400417 	ldw	r5,16(sp)
    a0b0:	100f883a 	mov	r7,r2
    a0b4:	dc400015 	stw	r17,0(sp)
    a0b8:	8009883a 	mov	r4,r16
    a0bc:	903ee83a 	callr	r18
    a0c0:	00ffffc4 	movi	r3,-1
    a0c4:	10c0031e 	bne	r2,r3,a0d4 <_wcrtomb_r+0x64>
    a0c8:	88000015 	stw	zero,0(r17)
    a0cc:	00c02284 	movi	r3,138
    a0d0:	80c00015 	stw	r3,0(r16)
    a0d4:	dfc00917 	ldw	ra,36(sp)
    a0d8:	dc800817 	ldw	r18,32(sp)
    a0dc:	dc400717 	ldw	r17,28(sp)
    a0e0:	dc000617 	ldw	r16,24(sp)
    a0e4:	dec00a04 	addi	sp,sp,40
    a0e8:	f800283a 	ret
    a0ec:	0005bc40 	call	5bc4 <__locale_charset>
    a0f0:	100f883a 	mov	r7,r2
    a0f4:	dc400015 	stw	r17,0(sp)
    a0f8:	000d883a 	mov	r6,zero
    a0fc:	d9400104 	addi	r5,sp,4
    a100:	8009883a 	mov	r4,r16
    a104:	903ee83a 	callr	r18
    a108:	003fed06 	br	a0c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a0c0>

0000a10c <wcrtomb>:
    a10c:	defff604 	addi	sp,sp,-40
    a110:	008000b4 	movhi	r2,2
    a114:	dc800615 	stw	r18,24(sp)
    a118:	dc400515 	stw	r17,20(sp)
    a11c:	10b05204 	addi	r2,r2,-16056
    a120:	dfc00915 	stw	ra,36(sp)
    a124:	dd000815 	stw	r20,32(sp)
    a128:	dcc00715 	stw	r19,28(sp)
    a12c:	dc000415 	stw	r16,16(sp)
    a130:	3025883a 	mov	r18,r6
    a134:	14400017 	ldw	r17,0(r2)
    a138:	20001926 	beq	r4,zero,a1a0 <wcrtomb+0x94>
    a13c:	008000b4 	movhi	r2,2
    a140:	10b05604 	addi	r2,r2,-16040
    a144:	15000017 	ldw	r20,0(r2)
    a148:	2021883a 	mov	r16,r4
    a14c:	2827883a 	mov	r19,r5
    a150:	0005bc40 	call	5bc4 <__locale_charset>
    a154:	100f883a 	mov	r7,r2
    a158:	dc800015 	stw	r18,0(sp)
    a15c:	980d883a 	mov	r6,r19
    a160:	800b883a 	mov	r5,r16
    a164:	8809883a 	mov	r4,r17
    a168:	a03ee83a 	callr	r20
    a16c:	00ffffc4 	movi	r3,-1
    a170:	10c0031e 	bne	r2,r3,a180 <wcrtomb+0x74>
    a174:	90000015 	stw	zero,0(r18)
    a178:	00c02284 	movi	r3,138
    a17c:	88c00015 	stw	r3,0(r17)
    a180:	dfc00917 	ldw	ra,36(sp)
    a184:	dd000817 	ldw	r20,32(sp)
    a188:	dcc00717 	ldw	r19,28(sp)
    a18c:	dc800617 	ldw	r18,24(sp)
    a190:	dc400517 	ldw	r17,20(sp)
    a194:	dc000417 	ldw	r16,16(sp)
    a198:	dec00a04 	addi	sp,sp,40
    a19c:	f800283a 	ret
    a1a0:	008000b4 	movhi	r2,2
    a1a4:	10b05604 	addi	r2,r2,-16040
    a1a8:	14000017 	ldw	r16,0(r2)
    a1ac:	0005bc40 	call	5bc4 <__locale_charset>
    a1b0:	100f883a 	mov	r7,r2
    a1b4:	dc800015 	stw	r18,0(sp)
    a1b8:	000d883a 	mov	r6,zero
    a1bc:	d9400104 	addi	r5,sp,4
    a1c0:	8809883a 	mov	r4,r17
    a1c4:	803ee83a 	callr	r16
    a1c8:	003fe806 	br	a16c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a16c>

0000a1cc <__ascii_wctomb>:
    a1cc:	28000526 	beq	r5,zero,a1e4 <__ascii_wctomb+0x18>
    a1d0:	00803fc4 	movi	r2,255
    a1d4:	11800536 	bltu	r2,r6,a1ec <__ascii_wctomb+0x20>
    a1d8:	29800005 	stb	r6,0(r5)
    a1dc:	00800044 	movi	r2,1
    a1e0:	f800283a 	ret
    a1e4:	0005883a 	mov	r2,zero
    a1e8:	f800283a 	ret
    a1ec:	00802284 	movi	r2,138
    a1f0:	20800015 	stw	r2,0(r4)
    a1f4:	00bfffc4 	movi	r2,-1
    a1f8:	f800283a 	ret

0000a1fc <_wctomb_r>:
    a1fc:	008000b4 	movhi	r2,2
    a200:	defff904 	addi	sp,sp,-28
    a204:	10b05604 	addi	r2,r2,-16040
    a208:	dfc00615 	stw	ra,24(sp)
    a20c:	dc400515 	stw	r17,20(sp)
    a210:	dc000415 	stw	r16,16(sp)
    a214:	3823883a 	mov	r17,r7
    a218:	14000017 	ldw	r16,0(r2)
    a21c:	d9000115 	stw	r4,4(sp)
    a220:	d9400215 	stw	r5,8(sp)
    a224:	d9800315 	stw	r6,12(sp)
    a228:	0005bc40 	call	5bc4 <__locale_charset>
    a22c:	d9800317 	ldw	r6,12(sp)
    a230:	d9400217 	ldw	r5,8(sp)
    a234:	d9000117 	ldw	r4,4(sp)
    a238:	100f883a 	mov	r7,r2
    a23c:	dc400015 	stw	r17,0(sp)
    a240:	803ee83a 	callr	r16
    a244:	dfc00617 	ldw	ra,24(sp)
    a248:	dc400517 	ldw	r17,20(sp)
    a24c:	dc000417 	ldw	r16,16(sp)
    a250:	dec00704 	addi	sp,sp,28
    a254:	f800283a 	ret

0000a258 <__udivdi3>:
    a258:	defff504 	addi	sp,sp,-44
    a25c:	dcc00415 	stw	r19,16(sp)
    a260:	dc000115 	stw	r16,4(sp)
    a264:	dfc00a15 	stw	ra,40(sp)
    a268:	df000915 	stw	fp,36(sp)
    a26c:	ddc00815 	stw	r23,32(sp)
    a270:	dd800715 	stw	r22,28(sp)
    a274:	dd400615 	stw	r21,24(sp)
    a278:	dd000515 	stw	r20,20(sp)
    a27c:	dc800315 	stw	r18,12(sp)
    a280:	dc400215 	stw	r17,8(sp)
    a284:	2027883a 	mov	r19,r4
    a288:	2821883a 	mov	r16,r5
    a28c:	3800411e 	bne	r7,zero,a394 <__udivdi3+0x13c>
    a290:	3023883a 	mov	r17,r6
    a294:	2025883a 	mov	r18,r4
    a298:	2980522e 	bgeu	r5,r6,a3e4 <__udivdi3+0x18c>
    a29c:	00bfffd4 	movui	r2,65535
    a2a0:	282d883a 	mov	r22,r5
    a2a4:	1180a836 	bltu	r2,r6,a548 <__udivdi3+0x2f0>
    a2a8:	00803fc4 	movi	r2,255
    a2ac:	1185803a 	cmpltu	r2,r2,r6
    a2b0:	100490fa 	slli	r2,r2,3
    a2b4:	3086d83a 	srl	r3,r6,r2
    a2b8:	010000b4 	movhi	r4,2
    a2bc:	2127f904 	addi	r4,r4,-24604
    a2c0:	20c7883a 	add	r3,r4,r3
    a2c4:	18c00003 	ldbu	r3,0(r3)
    a2c8:	1885883a 	add	r2,r3,r2
    a2cc:	00c00804 	movi	r3,32
    a2d0:	1887c83a 	sub	r3,r3,r2
    a2d4:	18000526 	beq	r3,zero,a2ec <__udivdi3+0x94>
    a2d8:	80e0983a 	sll	r16,r16,r3
    a2dc:	9884d83a 	srl	r2,r19,r2
    a2e0:	30e2983a 	sll	r17,r6,r3
    a2e4:	98e4983a 	sll	r18,r19,r3
    a2e8:	142cb03a 	or	r22,r2,r16
    a2ec:	882ad43a 	srli	r21,r17,16
    a2f0:	b009883a 	mov	r4,r22
    a2f4:	8d3fffcc 	andi	r20,r17,65535
    a2f8:	a80b883a 	mov	r5,r21
    a2fc:	000ae640 	call	ae64 <__umodsi3>
    a300:	b009883a 	mov	r4,r22
    a304:	a80b883a 	mov	r5,r21
    a308:	1027883a 	mov	r19,r2
    a30c:	000ae000 	call	ae00 <__udivsi3>
    a310:	102d883a 	mov	r22,r2
    a314:	9826943a 	slli	r19,r19,16
    a318:	9004d43a 	srli	r2,r18,16
    a31c:	a5a1383a 	mul	r16,r20,r22
    a320:	14c4b03a 	or	r2,r2,r19
    a324:	1400052e 	bgeu	r2,r16,a33c <__udivdi3+0xe4>
    a328:	1445883a 	add	r2,r2,r17
    a32c:	b0ffffc4 	addi	r3,r22,-1
    a330:	14400136 	bltu	r2,r17,a338 <__udivdi3+0xe0>
    a334:	14012336 	bltu	r2,r16,a7c4 <__udivdi3+0x56c>
    a338:	182d883a 	mov	r22,r3
    a33c:	1421c83a 	sub	r16,r2,r16
    a340:	a80b883a 	mov	r5,r21
    a344:	8009883a 	mov	r4,r16
    a348:	000ae640 	call	ae64 <__umodsi3>
    a34c:	1027883a 	mov	r19,r2
    a350:	a80b883a 	mov	r5,r21
    a354:	8009883a 	mov	r4,r16
    a358:	000ae000 	call	ae00 <__udivsi3>
    a35c:	9826943a 	slli	r19,r19,16
    a360:	a0a9383a 	mul	r20,r20,r2
    a364:	94bfffcc 	andi	r18,r18,65535
    a368:	94e4b03a 	or	r18,r18,r19
    a36c:	9500052e 	bgeu	r18,r20,a384 <__udivdi3+0x12c>
    a370:	8ca5883a 	add	r18,r17,r18
    a374:	10ffffc4 	addi	r3,r2,-1
    a378:	9440f136 	bltu	r18,r17,a740 <__udivdi3+0x4e8>
    a37c:	9500f02e 	bgeu	r18,r20,a740 <__udivdi3+0x4e8>
    a380:	10bfff84 	addi	r2,r2,-2
    a384:	b00c943a 	slli	r6,r22,16
    a388:	0007883a 	mov	r3,zero
    a38c:	3084b03a 	or	r2,r6,r2
    a390:	00005906 	br	a4f8 <__udivdi3+0x2a0>
    a394:	29c05636 	bltu	r5,r7,a4f0 <__udivdi3+0x298>
    a398:	00bfffd4 	movui	r2,65535
    a39c:	11c0622e 	bgeu	r2,r7,a528 <__udivdi3+0x2d0>
    a3a0:	00804034 	movhi	r2,256
    a3a4:	10bfffc4 	addi	r2,r2,-1
    a3a8:	11c0ee36 	bltu	r2,r7,a764 <__udivdi3+0x50c>
    a3ac:	00800404 	movi	r2,16
    a3b0:	3886d83a 	srl	r3,r7,r2
    a3b4:	010000b4 	movhi	r4,2
    a3b8:	2127f904 	addi	r4,r4,-24604
    a3bc:	20c7883a 	add	r3,r4,r3
    a3c0:	18c00003 	ldbu	r3,0(r3)
    a3c4:	05400804 	movi	r21,32
    a3c8:	1885883a 	add	r2,r3,r2
    a3cc:	a8abc83a 	sub	r21,r21,r2
    a3d0:	a800621e 	bne	r21,zero,a55c <__udivdi3+0x304>
    a3d4:	3c00e936 	bltu	r7,r16,a77c <__udivdi3+0x524>
    a3d8:	9985403a 	cmpgeu	r2,r19,r6
    a3dc:	0007883a 	mov	r3,zero
    a3e0:	00004506 	br	a4f8 <__udivdi3+0x2a0>
    a3e4:	3000041e 	bne	r6,zero,a3f8 <__udivdi3+0x1a0>
    a3e8:	000b883a 	mov	r5,zero
    a3ec:	01000044 	movi	r4,1
    a3f0:	000ae000 	call	ae00 <__udivsi3>
    a3f4:	1023883a 	mov	r17,r2
    a3f8:	00bfffd4 	movui	r2,65535
    a3fc:	14404e2e 	bgeu	r2,r17,a538 <__udivdi3+0x2e0>
    a400:	00804034 	movhi	r2,256
    a404:	10bfffc4 	addi	r2,r2,-1
    a408:	1440d836 	bltu	r2,r17,a76c <__udivdi3+0x514>
    a40c:	00800404 	movi	r2,16
    a410:	8886d83a 	srl	r3,r17,r2
    a414:	010000b4 	movhi	r4,2
    a418:	2127f904 	addi	r4,r4,-24604
    a41c:	20c7883a 	add	r3,r4,r3
    a420:	18c00003 	ldbu	r3,0(r3)
    a424:	1885883a 	add	r2,r3,r2
    a428:	00c00804 	movi	r3,32
    a42c:	1887c83a 	sub	r3,r3,r2
    a430:	18008f1e 	bne	r3,zero,a670 <__udivdi3+0x418>
    a434:	882ad43a 	srli	r21,r17,16
    a438:	8461c83a 	sub	r16,r16,r17
    a43c:	8d3fffcc 	andi	r20,r17,65535
    a440:	00c00044 	movi	r3,1
    a444:	8009883a 	mov	r4,r16
    a448:	a80b883a 	mov	r5,r21
    a44c:	d8c00015 	stw	r3,0(sp)
    a450:	000ae640 	call	ae64 <__umodsi3>
    a454:	8009883a 	mov	r4,r16
    a458:	a80b883a 	mov	r5,r21
    a45c:	1027883a 	mov	r19,r2
    a460:	000ae000 	call	ae00 <__udivsi3>
    a464:	9826943a 	slli	r19,r19,16
    a468:	9008d43a 	srli	r4,r18,16
    a46c:	1521383a 	mul	r16,r2,r20
    a470:	102d883a 	mov	r22,r2
    a474:	24c8b03a 	or	r4,r4,r19
    a478:	d8c00017 	ldw	r3,0(sp)
    a47c:	2400052e 	bgeu	r4,r16,a494 <__udivdi3+0x23c>
    a480:	2449883a 	add	r4,r4,r17
    a484:	b0bfffc4 	addi	r2,r22,-1
    a488:	24400136 	bltu	r4,r17,a490 <__udivdi3+0x238>
    a48c:	2400ca36 	bltu	r4,r16,a7b8 <__udivdi3+0x560>
    a490:	102d883a 	mov	r22,r2
    a494:	2421c83a 	sub	r16,r4,r16
    a498:	a80b883a 	mov	r5,r21
    a49c:	8009883a 	mov	r4,r16
    a4a0:	d8c00015 	stw	r3,0(sp)
    a4a4:	000ae640 	call	ae64 <__umodsi3>
    a4a8:	1027883a 	mov	r19,r2
    a4ac:	a80b883a 	mov	r5,r21
    a4b0:	8009883a 	mov	r4,r16
    a4b4:	000ae000 	call	ae00 <__udivsi3>
    a4b8:	9826943a 	slli	r19,r19,16
    a4bc:	1529383a 	mul	r20,r2,r20
    a4c0:	94bfffcc 	andi	r18,r18,65535
    a4c4:	94e4b03a 	or	r18,r18,r19
    a4c8:	d8c00017 	ldw	r3,0(sp)
    a4cc:	9500052e 	bgeu	r18,r20,a4e4 <__udivdi3+0x28c>
    a4d0:	8ca5883a 	add	r18,r17,r18
    a4d4:	113fffc4 	addi	r4,r2,-1
    a4d8:	94409736 	bltu	r18,r17,a738 <__udivdi3+0x4e0>
    a4dc:	9500962e 	bgeu	r18,r20,a738 <__udivdi3+0x4e0>
    a4e0:	10bfff84 	addi	r2,r2,-2
    a4e4:	b00c943a 	slli	r6,r22,16
    a4e8:	3084b03a 	or	r2,r6,r2
    a4ec:	00000206 	br	a4f8 <__udivdi3+0x2a0>
    a4f0:	0007883a 	mov	r3,zero
    a4f4:	0005883a 	mov	r2,zero
    a4f8:	dfc00a17 	ldw	ra,40(sp)
    a4fc:	df000917 	ldw	fp,36(sp)
    a500:	ddc00817 	ldw	r23,32(sp)
    a504:	dd800717 	ldw	r22,28(sp)
    a508:	dd400617 	ldw	r21,24(sp)
    a50c:	dd000517 	ldw	r20,20(sp)
    a510:	dcc00417 	ldw	r19,16(sp)
    a514:	dc800317 	ldw	r18,12(sp)
    a518:	dc400217 	ldw	r17,8(sp)
    a51c:	dc000117 	ldw	r16,4(sp)
    a520:	dec00b04 	addi	sp,sp,44
    a524:	f800283a 	ret
    a528:	00803fc4 	movi	r2,255
    a52c:	11c5803a 	cmpltu	r2,r2,r7
    a530:	100490fa 	slli	r2,r2,3
    a534:	003f9e06 	br	a3b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a3b0>
    a538:	00803fc4 	movi	r2,255
    a53c:	1445803a 	cmpltu	r2,r2,r17
    a540:	100490fa 	slli	r2,r2,3
    a544:	003fb206 	br	a410 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a410>
    a548:	00804034 	movhi	r2,256
    a54c:	10bfffc4 	addi	r2,r2,-1
    a550:	11808836 	bltu	r2,r6,a774 <__udivdi3+0x51c>
    a554:	00800404 	movi	r2,16
    a558:	003f5606 	br	a2b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a2b4>
    a55c:	30aed83a 	srl	r23,r6,r2
    a560:	3d4e983a 	sll	r7,r7,r21
    a564:	80acd83a 	srl	r22,r16,r2
    a568:	9884d83a 	srl	r2,r19,r2
    a56c:	3deeb03a 	or	r23,r7,r23
    a570:	b824d43a 	srli	r18,r23,16
    a574:	8560983a 	sll	r16,r16,r21
    a578:	b009883a 	mov	r4,r22
    a57c:	900b883a 	mov	r5,r18
    a580:	3568983a 	sll	r20,r6,r21
    a584:	1420b03a 	or	r16,r2,r16
    a588:	000ae640 	call	ae64 <__umodsi3>
    a58c:	b009883a 	mov	r4,r22
    a590:	900b883a 	mov	r5,r18
    a594:	1023883a 	mov	r17,r2
    a598:	000ae000 	call	ae00 <__udivsi3>
    a59c:	8808943a 	slli	r4,r17,16
    a5a0:	bf3fffcc 	andi	fp,r23,65535
    a5a4:	8006d43a 	srli	r3,r16,16
    a5a8:	e0a3383a 	mul	r17,fp,r2
    a5ac:	100d883a 	mov	r6,r2
    a5b0:	1906b03a 	or	r3,r3,r4
    a5b4:	1c40042e 	bgeu	r3,r17,a5c8 <__udivdi3+0x370>
    a5b8:	1dc7883a 	add	r3,r3,r23
    a5bc:	10bfffc4 	addi	r2,r2,-1
    a5c0:	1dc0752e 	bgeu	r3,r23,a798 <__udivdi3+0x540>
    a5c4:	100d883a 	mov	r6,r2
    a5c8:	1c63c83a 	sub	r17,r3,r17
    a5cc:	900b883a 	mov	r5,r18
    a5d0:	8809883a 	mov	r4,r17
    a5d4:	d9800015 	stw	r6,0(sp)
    a5d8:	000ae640 	call	ae64 <__umodsi3>
    a5dc:	102d883a 	mov	r22,r2
    a5e0:	8809883a 	mov	r4,r17
    a5e4:	900b883a 	mov	r5,r18
    a5e8:	000ae000 	call	ae00 <__udivsi3>
    a5ec:	b02c943a 	slli	r22,r22,16
    a5f0:	e089383a 	mul	r4,fp,r2
    a5f4:	843fffcc 	andi	r16,r16,65535
    a5f8:	85a0b03a 	or	r16,r16,r22
    a5fc:	d9800017 	ldw	r6,0(sp)
    a600:	8100042e 	bgeu	r16,r4,a614 <__udivdi3+0x3bc>
    a604:	85e1883a 	add	r16,r16,r23
    a608:	10ffffc4 	addi	r3,r2,-1
    a60c:	85c05e2e 	bgeu	r16,r23,a788 <__udivdi3+0x530>
    a610:	1805883a 	mov	r2,r3
    a614:	300c943a 	slli	r6,r6,16
    a618:	a17fffcc 	andi	r5,r20,65535
    a61c:	a028d43a 	srli	r20,r20,16
    a620:	3084b03a 	or	r2,r6,r2
    a624:	10ffffcc 	andi	r3,r2,65535
    a628:	100cd43a 	srli	r6,r2,16
    a62c:	194f383a 	mul	r7,r3,r5
    a630:	1d07383a 	mul	r3,r3,r20
    a634:	314b383a 	mul	r5,r6,r5
    a638:	3810d43a 	srli	r8,r7,16
    a63c:	8121c83a 	sub	r16,r16,r4
    a640:	1947883a 	add	r3,r3,r5
    a644:	40c7883a 	add	r3,r8,r3
    a648:	350d383a 	mul	r6,r6,r20
    a64c:	1940022e 	bgeu	r3,r5,a658 <__udivdi3+0x400>
    a650:	01000074 	movhi	r4,1
    a654:	310d883a 	add	r6,r6,r4
    a658:	1828d43a 	srli	r20,r3,16
    a65c:	a18d883a 	add	r6,r20,r6
    a660:	81803e36 	bltu	r16,r6,a75c <__udivdi3+0x504>
    a664:	81803826 	beq	r16,r6,a748 <__udivdi3+0x4f0>
    a668:	0007883a 	mov	r3,zero
    a66c:	003fa206 	br	a4f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a4f8>
    a670:	88e2983a 	sll	r17,r17,r3
    a674:	80a8d83a 	srl	r20,r16,r2
    a678:	80e0983a 	sll	r16,r16,r3
    a67c:	882ad43a 	srli	r21,r17,16
    a680:	9884d83a 	srl	r2,r19,r2
    a684:	a009883a 	mov	r4,r20
    a688:	a80b883a 	mov	r5,r21
    a68c:	142eb03a 	or	r23,r2,r16
    a690:	98e4983a 	sll	r18,r19,r3
    a694:	000ae640 	call	ae64 <__umodsi3>
    a698:	a009883a 	mov	r4,r20
    a69c:	a80b883a 	mov	r5,r21
    a6a0:	1021883a 	mov	r16,r2
    a6a4:	000ae000 	call	ae00 <__udivsi3>
    a6a8:	1039883a 	mov	fp,r2
    a6ac:	8d3fffcc 	andi	r20,r17,65535
    a6b0:	8020943a 	slli	r16,r16,16
    a6b4:	b804d43a 	srli	r2,r23,16
    a6b8:	a72d383a 	mul	r22,r20,fp
    a6bc:	1404b03a 	or	r2,r2,r16
    a6c0:	1580062e 	bgeu	r2,r22,a6dc <__udivdi3+0x484>
    a6c4:	1445883a 	add	r2,r2,r17
    a6c8:	e0ffffc4 	addi	r3,fp,-1
    a6cc:	14403836 	bltu	r2,r17,a7b0 <__udivdi3+0x558>
    a6d0:	1580372e 	bgeu	r2,r22,a7b0 <__udivdi3+0x558>
    a6d4:	e73fff84 	addi	fp,fp,-2
    a6d8:	1445883a 	add	r2,r2,r17
    a6dc:	15adc83a 	sub	r22,r2,r22
    a6e0:	a80b883a 	mov	r5,r21
    a6e4:	b009883a 	mov	r4,r22
    a6e8:	000ae640 	call	ae64 <__umodsi3>
    a6ec:	1027883a 	mov	r19,r2
    a6f0:	b009883a 	mov	r4,r22
    a6f4:	a80b883a 	mov	r5,r21
    a6f8:	000ae000 	call	ae00 <__udivsi3>
    a6fc:	9826943a 	slli	r19,r19,16
    a700:	a0a1383a 	mul	r16,r20,r2
    a704:	b93fffcc 	andi	r4,r23,65535
    a708:	24c8b03a 	or	r4,r4,r19
    a70c:	2400062e 	bgeu	r4,r16,a728 <__udivdi3+0x4d0>
    a710:	2449883a 	add	r4,r4,r17
    a714:	10ffffc4 	addi	r3,r2,-1
    a718:	24402336 	bltu	r4,r17,a7a8 <__udivdi3+0x550>
    a71c:	2400222e 	bgeu	r4,r16,a7a8 <__udivdi3+0x550>
    a720:	10bfff84 	addi	r2,r2,-2
    a724:	2449883a 	add	r4,r4,r17
    a728:	e038943a 	slli	fp,fp,16
    a72c:	2421c83a 	sub	r16,r4,r16
    a730:	e086b03a 	or	r3,fp,r2
    a734:	003f4306 	br	a444 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a444>
    a738:	2005883a 	mov	r2,r4
    a73c:	003f6906 	br	a4e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a4e4>
    a740:	1805883a 	mov	r2,r3
    a744:	003f0f06 	br	a384 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a384>
    a748:	1806943a 	slli	r3,r3,16
    a74c:	9d66983a 	sll	r19,r19,r21
    a750:	39ffffcc 	andi	r7,r7,65535
    a754:	19c7883a 	add	r3,r3,r7
    a758:	98ffc32e 	bgeu	r19,r3,a668 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a668>
    a75c:	10bfffc4 	addi	r2,r2,-1
    a760:	003fc106 	br	a668 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a668>
    a764:	00800604 	movi	r2,24
    a768:	003f1106 	br	a3b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a3b0>
    a76c:	00800604 	movi	r2,24
    a770:	003f2706 	br	a410 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a410>
    a774:	00800604 	movi	r2,24
    a778:	003ece06 	br	a2b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a2b4>
    a77c:	0007883a 	mov	r3,zero
    a780:	00800044 	movi	r2,1
    a784:	003f5c06 	br	a4f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a4f8>
    a788:	813fa12e 	bgeu	r16,r4,a610 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a610>
    a78c:	10bfff84 	addi	r2,r2,-2
    a790:	85e1883a 	add	r16,r16,r23
    a794:	003f9f06 	br	a614 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a614>
    a798:	1c7f8a2e 	bgeu	r3,r17,a5c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a5c4>
    a79c:	31bfff84 	addi	r6,r6,-2
    a7a0:	1dc7883a 	add	r3,r3,r23
    a7a4:	003f8806 	br	a5c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a5c8>
    a7a8:	1805883a 	mov	r2,r3
    a7ac:	003fde06 	br	a728 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a728>
    a7b0:	1839883a 	mov	fp,r3
    a7b4:	003fc906 	br	a6dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a6dc>
    a7b8:	b5bfff84 	addi	r22,r22,-2
    a7bc:	2449883a 	add	r4,r4,r17
    a7c0:	003f3406 	br	a494 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a494>
    a7c4:	b5bfff84 	addi	r22,r22,-2
    a7c8:	1445883a 	add	r2,r2,r17
    a7cc:	003edb06 	br	a33c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a33c>

0000a7d0 <__umoddi3>:
    a7d0:	defff404 	addi	sp,sp,-48
    a7d4:	df000a15 	stw	fp,40(sp)
    a7d8:	dc400315 	stw	r17,12(sp)
    a7dc:	dc000215 	stw	r16,8(sp)
    a7e0:	dfc00b15 	stw	ra,44(sp)
    a7e4:	ddc00915 	stw	r23,36(sp)
    a7e8:	dd800815 	stw	r22,32(sp)
    a7ec:	dd400715 	stw	r21,28(sp)
    a7f0:	dd000615 	stw	r20,24(sp)
    a7f4:	dcc00515 	stw	r19,20(sp)
    a7f8:	dc800415 	stw	r18,16(sp)
    a7fc:	2021883a 	mov	r16,r4
    a800:	2823883a 	mov	r17,r5
    a804:	2839883a 	mov	fp,r5
    a808:	38003c1e 	bne	r7,zero,a8fc <__umoddi3+0x12c>
    a80c:	3027883a 	mov	r19,r6
    a810:	2029883a 	mov	r20,r4
    a814:	2980512e 	bgeu	r5,r6,a95c <__umoddi3+0x18c>
    a818:	00bfffd4 	movui	r2,65535
    a81c:	11809a36 	bltu	r2,r6,aa88 <__umoddi3+0x2b8>
    a820:	01003fc4 	movi	r4,255
    a824:	2189803a 	cmpltu	r4,r4,r6
    a828:	200890fa 	slli	r4,r4,3
    a82c:	3104d83a 	srl	r2,r6,r4
    a830:	00c000b4 	movhi	r3,2
    a834:	18e7f904 	addi	r3,r3,-24604
    a838:	1885883a 	add	r2,r3,r2
    a83c:	10c00003 	ldbu	r3,0(r2)
    a840:	00800804 	movi	r2,32
    a844:	1909883a 	add	r4,r3,r4
    a848:	1125c83a 	sub	r18,r2,r4
    a84c:	90000526 	beq	r18,zero,a864 <__umoddi3+0x94>
    a850:	8ca2983a 	sll	r17,r17,r18
    a854:	8108d83a 	srl	r4,r16,r4
    a858:	34a6983a 	sll	r19,r6,r18
    a85c:	84a8983a 	sll	r20,r16,r18
    a860:	2478b03a 	or	fp,r4,r17
    a864:	982ed43a 	srli	r23,r19,16
    a868:	e009883a 	mov	r4,fp
    a86c:	9dbfffcc 	andi	r22,r19,65535
    a870:	b80b883a 	mov	r5,r23
    a874:	000ae640 	call	ae64 <__umodsi3>
    a878:	e009883a 	mov	r4,fp
    a87c:	b80b883a 	mov	r5,r23
    a880:	102b883a 	mov	r21,r2
    a884:	000ae000 	call	ae00 <__udivsi3>
    a888:	a806943a 	slli	r3,r21,16
    a88c:	a008d43a 	srli	r4,r20,16
    a890:	b085383a 	mul	r2,r22,r2
    a894:	20c8b03a 	or	r4,r4,r3
    a898:	2080032e 	bgeu	r4,r2,a8a8 <__umoddi3+0xd8>
    a89c:	24c9883a 	add	r4,r4,r19
    a8a0:	24c00136 	bltu	r4,r19,a8a8 <__umoddi3+0xd8>
    a8a4:	20811036 	bltu	r4,r2,ace8 <__umoddi3+0x518>
    a8a8:	20abc83a 	sub	r21,r4,r2
    a8ac:	b80b883a 	mov	r5,r23
    a8b0:	a809883a 	mov	r4,r21
    a8b4:	000ae640 	call	ae64 <__umodsi3>
    a8b8:	1023883a 	mov	r17,r2
    a8bc:	b80b883a 	mov	r5,r23
    a8c0:	a809883a 	mov	r4,r21
    a8c4:	000ae000 	call	ae00 <__udivsi3>
    a8c8:	8822943a 	slli	r17,r17,16
    a8cc:	b085383a 	mul	r2,r22,r2
    a8d0:	a0ffffcc 	andi	r3,r20,65535
    a8d4:	1c46b03a 	or	r3,r3,r17
    a8d8:	1880042e 	bgeu	r3,r2,a8ec <__umoddi3+0x11c>
    a8dc:	1cc7883a 	add	r3,r3,r19
    a8e0:	1cc00236 	bltu	r3,r19,a8ec <__umoddi3+0x11c>
    a8e4:	1880012e 	bgeu	r3,r2,a8ec <__umoddi3+0x11c>
    a8e8:	1cc7883a 	add	r3,r3,r19
    a8ec:	1885c83a 	sub	r2,r3,r2
    a8f0:	1484d83a 	srl	r2,r2,r18
    a8f4:	0007883a 	mov	r3,zero
    a8f8:	00004f06 	br	aa38 <__umoddi3+0x268>
    a8fc:	29c04c36 	bltu	r5,r7,aa30 <__umoddi3+0x260>
    a900:	00bfffd4 	movui	r2,65535
    a904:	11c0582e 	bgeu	r2,r7,aa68 <__umoddi3+0x298>
    a908:	00804034 	movhi	r2,256
    a90c:	10bfffc4 	addi	r2,r2,-1
    a910:	11c0e736 	bltu	r2,r7,acb0 <__umoddi3+0x4e0>
    a914:	01000404 	movi	r4,16
    a918:	3904d83a 	srl	r2,r7,r4
    a91c:	00c000b4 	movhi	r3,2
    a920:	18e7f904 	addi	r3,r3,-24604
    a924:	1885883a 	add	r2,r3,r2
    a928:	14c00003 	ldbu	r19,0(r2)
    a92c:	00c00804 	movi	r3,32
    a930:	9927883a 	add	r19,r19,r4
    a934:	1ce9c83a 	sub	r20,r3,r19
    a938:	a000581e 	bne	r20,zero,aa9c <__umoddi3+0x2cc>
    a93c:	3c400136 	bltu	r7,r17,a944 <__umoddi3+0x174>
    a940:	8180eb36 	bltu	r16,r6,acf0 <__umoddi3+0x520>
    a944:	8185c83a 	sub	r2,r16,r6
    a948:	89e3c83a 	sub	r17,r17,r7
    a94c:	8089803a 	cmpltu	r4,r16,r2
    a950:	8939c83a 	sub	fp,r17,r4
    a954:	e007883a 	mov	r3,fp
    a958:	00003706 	br	aa38 <__umoddi3+0x268>
    a95c:	3000041e 	bne	r6,zero,a970 <__umoddi3+0x1a0>
    a960:	000b883a 	mov	r5,zero
    a964:	01000044 	movi	r4,1
    a968:	000ae000 	call	ae00 <__udivsi3>
    a96c:	1027883a 	mov	r19,r2
    a970:	00bfffd4 	movui	r2,65535
    a974:	14c0402e 	bgeu	r2,r19,aa78 <__umoddi3+0x2a8>
    a978:	00804034 	movhi	r2,256
    a97c:	10bfffc4 	addi	r2,r2,-1
    a980:	14c0cd36 	bltu	r2,r19,acb8 <__umoddi3+0x4e8>
    a984:	00800404 	movi	r2,16
    a988:	9886d83a 	srl	r3,r19,r2
    a98c:	010000b4 	movhi	r4,2
    a990:	2127f904 	addi	r4,r4,-24604
    a994:	20c7883a 	add	r3,r4,r3
    a998:	18c00003 	ldbu	r3,0(r3)
    a99c:	1887883a 	add	r3,r3,r2
    a9a0:	00800804 	movi	r2,32
    a9a4:	10e5c83a 	sub	r18,r2,r3
    a9a8:	9000901e 	bne	r18,zero,abec <__umoddi3+0x41c>
    a9ac:	982cd43a 	srli	r22,r19,16
    a9b0:	8ce3c83a 	sub	r17,r17,r19
    a9b4:	9d7fffcc 	andi	r21,r19,65535
    a9b8:	b00b883a 	mov	r5,r22
    a9bc:	8809883a 	mov	r4,r17
    a9c0:	000ae640 	call	ae64 <__umodsi3>
    a9c4:	8809883a 	mov	r4,r17
    a9c8:	b00b883a 	mov	r5,r22
    a9cc:	1021883a 	mov	r16,r2
    a9d0:	000ae000 	call	ae00 <__udivsi3>
    a9d4:	8006943a 	slli	r3,r16,16
    a9d8:	a008d43a 	srli	r4,r20,16
    a9dc:	1545383a 	mul	r2,r2,r21
    a9e0:	20c8b03a 	or	r4,r4,r3
    a9e4:	2080042e 	bgeu	r4,r2,a9f8 <__umoddi3+0x228>
    a9e8:	24c9883a 	add	r4,r4,r19
    a9ec:	24c00236 	bltu	r4,r19,a9f8 <__umoddi3+0x228>
    a9f0:	2080012e 	bgeu	r4,r2,a9f8 <__umoddi3+0x228>
    a9f4:	24c9883a 	add	r4,r4,r19
    a9f8:	20a1c83a 	sub	r16,r4,r2
    a9fc:	b00b883a 	mov	r5,r22
    aa00:	8009883a 	mov	r4,r16
    aa04:	000ae640 	call	ae64 <__umodsi3>
    aa08:	1023883a 	mov	r17,r2
    aa0c:	b00b883a 	mov	r5,r22
    aa10:	8009883a 	mov	r4,r16
    aa14:	000ae000 	call	ae00 <__udivsi3>
    aa18:	8822943a 	slli	r17,r17,16
    aa1c:	1545383a 	mul	r2,r2,r21
    aa20:	a53fffcc 	andi	r20,r20,65535
    aa24:	a446b03a 	or	r3,r20,r17
    aa28:	18bfb02e 	bgeu	r3,r2,a8ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a8ec>
    aa2c:	003fab06 	br	a8dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a8dc>
    aa30:	2005883a 	mov	r2,r4
    aa34:	2807883a 	mov	r3,r5
    aa38:	dfc00b17 	ldw	ra,44(sp)
    aa3c:	df000a17 	ldw	fp,40(sp)
    aa40:	ddc00917 	ldw	r23,36(sp)
    aa44:	dd800817 	ldw	r22,32(sp)
    aa48:	dd400717 	ldw	r21,28(sp)
    aa4c:	dd000617 	ldw	r20,24(sp)
    aa50:	dcc00517 	ldw	r19,20(sp)
    aa54:	dc800417 	ldw	r18,16(sp)
    aa58:	dc400317 	ldw	r17,12(sp)
    aa5c:	dc000217 	ldw	r16,8(sp)
    aa60:	dec00c04 	addi	sp,sp,48
    aa64:	f800283a 	ret
    aa68:	04c03fc4 	movi	r19,255
    aa6c:	99c9803a 	cmpltu	r4,r19,r7
    aa70:	200890fa 	slli	r4,r4,3
    aa74:	003fa806 	br	a918 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a918>
    aa78:	00803fc4 	movi	r2,255
    aa7c:	14c5803a 	cmpltu	r2,r2,r19
    aa80:	100490fa 	slli	r2,r2,3
    aa84:	003fc006 	br	a988 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a988>
    aa88:	00804034 	movhi	r2,256
    aa8c:	10bfffc4 	addi	r2,r2,-1
    aa90:	11808b36 	bltu	r2,r6,acc0 <__umoddi3+0x4f0>
    aa94:	01000404 	movi	r4,16
    aa98:	003f6406 	br	a82c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a82c>
    aa9c:	34c4d83a 	srl	r2,r6,r19
    aaa0:	3d0e983a 	sll	r7,r7,r20
    aaa4:	8cf8d83a 	srl	fp,r17,r19
    aaa8:	8d10983a 	sll	r8,r17,r20
    aaac:	38aab03a 	or	r21,r7,r2
    aab0:	a82cd43a 	srli	r22,r21,16
    aab4:	84e2d83a 	srl	r17,r16,r19
    aab8:	e009883a 	mov	r4,fp
    aabc:	b00b883a 	mov	r5,r22
    aac0:	8a22b03a 	or	r17,r17,r8
    aac4:	3524983a 	sll	r18,r6,r20
    aac8:	000ae640 	call	ae64 <__umodsi3>
    aacc:	e009883a 	mov	r4,fp
    aad0:	b00b883a 	mov	r5,r22
    aad4:	102f883a 	mov	r23,r2
    aad8:	000ae000 	call	ae00 <__udivsi3>
    aadc:	100d883a 	mov	r6,r2
    aae0:	b808943a 	slli	r4,r23,16
    aae4:	aa3fffcc 	andi	r8,r21,65535
    aae8:	8804d43a 	srli	r2,r17,16
    aaec:	41af383a 	mul	r23,r8,r6
    aaf0:	8520983a 	sll	r16,r16,r20
    aaf4:	1104b03a 	or	r2,r2,r4
    aaf8:	15c0042e 	bgeu	r2,r23,ab0c <__umoddi3+0x33c>
    aafc:	1545883a 	add	r2,r2,r21
    ab00:	30ffffc4 	addi	r3,r6,-1
    ab04:	1540742e 	bgeu	r2,r21,acd8 <__umoddi3+0x508>
    ab08:	180d883a 	mov	r6,r3
    ab0c:	15efc83a 	sub	r23,r2,r23
    ab10:	b00b883a 	mov	r5,r22
    ab14:	b809883a 	mov	r4,r23
    ab18:	d9800115 	stw	r6,4(sp)
    ab1c:	da000015 	stw	r8,0(sp)
    ab20:	000ae640 	call	ae64 <__umodsi3>
    ab24:	b00b883a 	mov	r5,r22
    ab28:	b809883a 	mov	r4,r23
    ab2c:	1039883a 	mov	fp,r2
    ab30:	000ae000 	call	ae00 <__udivsi3>
    ab34:	da000017 	ldw	r8,0(sp)
    ab38:	e038943a 	slli	fp,fp,16
    ab3c:	100b883a 	mov	r5,r2
    ab40:	4089383a 	mul	r4,r8,r2
    ab44:	8a3fffcc 	andi	r8,r17,65535
    ab48:	4710b03a 	or	r8,r8,fp
    ab4c:	d9800117 	ldw	r6,4(sp)
    ab50:	4100042e 	bgeu	r8,r4,ab64 <__umoddi3+0x394>
    ab54:	4551883a 	add	r8,r8,r21
    ab58:	10bfffc4 	addi	r2,r2,-1
    ab5c:	45405a2e 	bgeu	r8,r21,acc8 <__umoddi3+0x4f8>
    ab60:	100b883a 	mov	r5,r2
    ab64:	300c943a 	slli	r6,r6,16
    ab68:	91ffffcc 	andi	r7,r18,65535
    ab6c:	9004d43a 	srli	r2,r18,16
    ab70:	314cb03a 	or	r6,r6,r5
    ab74:	317fffcc 	andi	r5,r6,65535
    ab78:	300cd43a 	srli	r6,r6,16
    ab7c:	29d3383a 	mul	r9,r5,r7
    ab80:	288b383a 	mul	r5,r5,r2
    ab84:	31cf383a 	mul	r7,r6,r7
    ab88:	4806d43a 	srli	r3,r9,16
    ab8c:	4111c83a 	sub	r8,r8,r4
    ab90:	29cb883a 	add	r5,r5,r7
    ab94:	194b883a 	add	r5,r3,r5
    ab98:	3085383a 	mul	r2,r6,r2
    ab9c:	29c0022e 	bgeu	r5,r7,aba8 <__umoddi3+0x3d8>
    aba0:	00c00074 	movhi	r3,1
    aba4:	10c5883a 	add	r2,r2,r3
    aba8:	2808d43a 	srli	r4,r5,16
    abac:	280a943a 	slli	r5,r5,16
    abb0:	4a7fffcc 	andi	r9,r9,65535
    abb4:	2085883a 	add	r2,r4,r2
    abb8:	2a4b883a 	add	r5,r5,r9
    abbc:	40803636 	bltu	r8,r2,ac98 <__umoddi3+0x4c8>
    abc0:	40804d26 	beq	r8,r2,acf8 <__umoddi3+0x528>
    abc4:	4089c83a 	sub	r4,r8,r2
    abc8:	280f883a 	mov	r7,r5
    abcc:	81cfc83a 	sub	r7,r16,r7
    abd0:	81c7803a 	cmpltu	r3,r16,r7
    abd4:	20c7c83a 	sub	r3,r4,r3
    abd8:	1cc4983a 	sll	r2,r3,r19
    abdc:	3d0ed83a 	srl	r7,r7,r20
    abe0:	1d06d83a 	srl	r3,r3,r20
    abe4:	11c4b03a 	or	r2,r2,r7
    abe8:	003f9306 	br	aa38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700aa38>
    abec:	9ca6983a 	sll	r19,r19,r18
    abf0:	88e8d83a 	srl	r20,r17,r3
    abf4:	80c4d83a 	srl	r2,r16,r3
    abf8:	982cd43a 	srli	r22,r19,16
    abfc:	8ca2983a 	sll	r17,r17,r18
    ac00:	a009883a 	mov	r4,r20
    ac04:	b00b883a 	mov	r5,r22
    ac08:	1478b03a 	or	fp,r2,r17
    ac0c:	000ae640 	call	ae64 <__umodsi3>
    ac10:	a009883a 	mov	r4,r20
    ac14:	b00b883a 	mov	r5,r22
    ac18:	1023883a 	mov	r17,r2
    ac1c:	000ae000 	call	ae00 <__udivsi3>
    ac20:	9d7fffcc 	andi	r21,r19,65535
    ac24:	880a943a 	slli	r5,r17,16
    ac28:	e008d43a 	srli	r4,fp,16
    ac2c:	a885383a 	mul	r2,r21,r2
    ac30:	84a8983a 	sll	r20,r16,r18
    ac34:	2148b03a 	or	r4,r4,r5
    ac38:	2080042e 	bgeu	r4,r2,ac4c <__umoddi3+0x47c>
    ac3c:	24c9883a 	add	r4,r4,r19
    ac40:	24c00236 	bltu	r4,r19,ac4c <__umoddi3+0x47c>
    ac44:	2080012e 	bgeu	r4,r2,ac4c <__umoddi3+0x47c>
    ac48:	24c9883a 	add	r4,r4,r19
    ac4c:	20a3c83a 	sub	r17,r4,r2
    ac50:	b00b883a 	mov	r5,r22
    ac54:	8809883a 	mov	r4,r17
    ac58:	000ae640 	call	ae64 <__umodsi3>
    ac5c:	102f883a 	mov	r23,r2
    ac60:	8809883a 	mov	r4,r17
    ac64:	b00b883a 	mov	r5,r22
    ac68:	000ae000 	call	ae00 <__udivsi3>
    ac6c:	b82e943a 	slli	r23,r23,16
    ac70:	a885383a 	mul	r2,r21,r2
    ac74:	e13fffcc 	andi	r4,fp,65535
    ac78:	25c8b03a 	or	r4,r4,r23
    ac7c:	2080042e 	bgeu	r4,r2,ac90 <__umoddi3+0x4c0>
    ac80:	24c9883a 	add	r4,r4,r19
    ac84:	24c00236 	bltu	r4,r19,ac90 <__umoddi3+0x4c0>
    ac88:	2080012e 	bgeu	r4,r2,ac90 <__umoddi3+0x4c0>
    ac8c:	24c9883a 	add	r4,r4,r19
    ac90:	20a3c83a 	sub	r17,r4,r2
    ac94:	003f4806 	br	a9b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a9b8>
    ac98:	2c8fc83a 	sub	r7,r5,r18
    ac9c:	1545c83a 	sub	r2,r2,r21
    aca0:	29cb803a 	cmpltu	r5,r5,r7
    aca4:	1145c83a 	sub	r2,r2,r5
    aca8:	4089c83a 	sub	r4,r8,r2
    acac:	003fc706 	br	abcc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700abcc>
    acb0:	01000604 	movi	r4,24
    acb4:	003f1806 	br	a918 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a918>
    acb8:	00800604 	movi	r2,24
    acbc:	003f3206 	br	a988 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a988>
    acc0:	01000604 	movi	r4,24
    acc4:	003ed906 	br	a82c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a82c>
    acc8:	413fa52e 	bgeu	r8,r4,ab60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ab60>
    accc:	297fff84 	addi	r5,r5,-2
    acd0:	4551883a 	add	r8,r8,r21
    acd4:	003fa306 	br	ab64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ab64>
    acd8:	15ff8b2e 	bgeu	r2,r23,ab08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ab08>
    acdc:	31bfff84 	addi	r6,r6,-2
    ace0:	1545883a 	add	r2,r2,r21
    ace4:	003f8906 	br	ab0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ab0c>
    ace8:	24c9883a 	add	r4,r4,r19
    acec:	003eee06 	br	a8a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a8a8>
    acf0:	8005883a 	mov	r2,r16
    acf4:	003f1706 	br	a954 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a954>
    acf8:	817fe736 	bltu	r16,r5,ac98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ac98>
    acfc:	280f883a 	mov	r7,r5
    ad00:	0009883a 	mov	r4,zero
    ad04:	003fb106 	br	abcc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700abcc>

0000ad08 <__divsi3>:
    ad08:	20001b16 	blt	r4,zero,ad78 <__divsi3+0x70>
    ad0c:	000f883a 	mov	r7,zero
    ad10:	28001616 	blt	r5,zero,ad6c <__divsi3+0x64>
    ad14:	200d883a 	mov	r6,r4
    ad18:	29001a2e 	bgeu	r5,r4,ad84 <__divsi3+0x7c>
    ad1c:	00800804 	movi	r2,32
    ad20:	00c00044 	movi	r3,1
    ad24:	00000106 	br	ad2c <__divsi3+0x24>
    ad28:	10000d26 	beq	r2,zero,ad60 <__divsi3+0x58>
    ad2c:	294b883a 	add	r5,r5,r5
    ad30:	10bfffc4 	addi	r2,r2,-1
    ad34:	18c7883a 	add	r3,r3,r3
    ad38:	293ffb36 	bltu	r5,r4,ad28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ad28>
    ad3c:	0005883a 	mov	r2,zero
    ad40:	18000726 	beq	r3,zero,ad60 <__divsi3+0x58>
    ad44:	0005883a 	mov	r2,zero
    ad48:	31400236 	bltu	r6,r5,ad54 <__divsi3+0x4c>
    ad4c:	314dc83a 	sub	r6,r6,r5
    ad50:	10c4b03a 	or	r2,r2,r3
    ad54:	1806d07a 	srli	r3,r3,1
    ad58:	280ad07a 	srli	r5,r5,1
    ad5c:	183ffa1e 	bne	r3,zero,ad48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ad48>
    ad60:	38000126 	beq	r7,zero,ad68 <__divsi3+0x60>
    ad64:	0085c83a 	sub	r2,zero,r2
    ad68:	f800283a 	ret
    ad6c:	014bc83a 	sub	r5,zero,r5
    ad70:	39c0005c 	xori	r7,r7,1
    ad74:	003fe706 	br	ad14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ad14>
    ad78:	0109c83a 	sub	r4,zero,r4
    ad7c:	01c00044 	movi	r7,1
    ad80:	003fe306 	br	ad10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ad10>
    ad84:	00c00044 	movi	r3,1
    ad88:	003fee06 	br	ad44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ad44>

0000ad8c <__modsi3>:
    ad8c:	20001716 	blt	r4,zero,adec <__modsi3+0x60>
    ad90:	000f883a 	mov	r7,zero
    ad94:	2005883a 	mov	r2,r4
    ad98:	28001216 	blt	r5,zero,ade4 <__modsi3+0x58>
    ad9c:	2900162e 	bgeu	r5,r4,adf8 <__modsi3+0x6c>
    ada0:	01800804 	movi	r6,32
    ada4:	00c00044 	movi	r3,1
    ada8:	00000106 	br	adb0 <__modsi3+0x24>
    adac:	30000a26 	beq	r6,zero,add8 <__modsi3+0x4c>
    adb0:	294b883a 	add	r5,r5,r5
    adb4:	31bfffc4 	addi	r6,r6,-1
    adb8:	18c7883a 	add	r3,r3,r3
    adbc:	293ffb36 	bltu	r5,r4,adac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700adac>
    adc0:	18000526 	beq	r3,zero,add8 <__modsi3+0x4c>
    adc4:	1806d07a 	srli	r3,r3,1
    adc8:	11400136 	bltu	r2,r5,add0 <__modsi3+0x44>
    adcc:	1145c83a 	sub	r2,r2,r5
    add0:	280ad07a 	srli	r5,r5,1
    add4:	183ffb1e 	bne	r3,zero,adc4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700adc4>
    add8:	38000126 	beq	r7,zero,ade0 <__modsi3+0x54>
    addc:	0085c83a 	sub	r2,zero,r2
    ade0:	f800283a 	ret
    ade4:	014bc83a 	sub	r5,zero,r5
    ade8:	003fec06 	br	ad9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ad9c>
    adec:	0109c83a 	sub	r4,zero,r4
    adf0:	01c00044 	movi	r7,1
    adf4:	003fe706 	br	ad94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ad94>
    adf8:	00c00044 	movi	r3,1
    adfc:	003ff106 	br	adc4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700adc4>

0000ae00 <__udivsi3>:
    ae00:	200d883a 	mov	r6,r4
    ae04:	2900152e 	bgeu	r5,r4,ae5c <__udivsi3+0x5c>
    ae08:	28001416 	blt	r5,zero,ae5c <__udivsi3+0x5c>
    ae0c:	00800804 	movi	r2,32
    ae10:	00c00044 	movi	r3,1
    ae14:	00000206 	br	ae20 <__udivsi3+0x20>
    ae18:	10000e26 	beq	r2,zero,ae54 <__udivsi3+0x54>
    ae1c:	28000516 	blt	r5,zero,ae34 <__udivsi3+0x34>
    ae20:	294b883a 	add	r5,r5,r5
    ae24:	10bfffc4 	addi	r2,r2,-1
    ae28:	18c7883a 	add	r3,r3,r3
    ae2c:	293ffa36 	bltu	r5,r4,ae18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ae18>
    ae30:	18000826 	beq	r3,zero,ae54 <__udivsi3+0x54>
    ae34:	0005883a 	mov	r2,zero
    ae38:	31400236 	bltu	r6,r5,ae44 <__udivsi3+0x44>
    ae3c:	314dc83a 	sub	r6,r6,r5
    ae40:	10c4b03a 	or	r2,r2,r3
    ae44:	1806d07a 	srli	r3,r3,1
    ae48:	280ad07a 	srli	r5,r5,1
    ae4c:	183ffa1e 	bne	r3,zero,ae38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ae38>
    ae50:	f800283a 	ret
    ae54:	0005883a 	mov	r2,zero
    ae58:	f800283a 	ret
    ae5c:	00c00044 	movi	r3,1
    ae60:	003ff406 	br	ae34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ae34>

0000ae64 <__umodsi3>:
    ae64:	2005883a 	mov	r2,r4
    ae68:	2900122e 	bgeu	r5,r4,aeb4 <__umodsi3+0x50>
    ae6c:	28001116 	blt	r5,zero,aeb4 <__umodsi3+0x50>
    ae70:	01800804 	movi	r6,32
    ae74:	00c00044 	movi	r3,1
    ae78:	00000206 	br	ae84 <__umodsi3+0x20>
    ae7c:	30000c26 	beq	r6,zero,aeb0 <__umodsi3+0x4c>
    ae80:	28000516 	blt	r5,zero,ae98 <__umodsi3+0x34>
    ae84:	294b883a 	add	r5,r5,r5
    ae88:	31bfffc4 	addi	r6,r6,-1
    ae8c:	18c7883a 	add	r3,r3,r3
    ae90:	293ffa36 	bltu	r5,r4,ae7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ae7c>
    ae94:	18000626 	beq	r3,zero,aeb0 <__umodsi3+0x4c>
    ae98:	1806d07a 	srli	r3,r3,1
    ae9c:	11400136 	bltu	r2,r5,aea4 <__umodsi3+0x40>
    aea0:	1145c83a 	sub	r2,r2,r5
    aea4:	280ad07a 	srli	r5,r5,1
    aea8:	183ffb1e 	bne	r3,zero,ae98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ae98>
    aeac:	f800283a 	ret
    aeb0:	f800283a 	ret
    aeb4:	00c00044 	movi	r3,1
    aeb8:	003ff706 	br	ae98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ae98>

0000aebc <__adddf3>:
    aebc:	02c00434 	movhi	r11,16
    aec0:	5affffc4 	addi	r11,r11,-1
    aec4:	2806d7fa 	srli	r3,r5,31
    aec8:	2ad4703a 	and	r10,r5,r11
    aecc:	3ad2703a 	and	r9,r7,r11
    aed0:	3804d53a 	srli	r2,r7,20
    aed4:	3018d77a 	srli	r12,r6,29
    aed8:	280ad53a 	srli	r5,r5,20
    aedc:	501490fa 	slli	r10,r10,3
    aee0:	2010d77a 	srli	r8,r4,29
    aee4:	481290fa 	slli	r9,r9,3
    aee8:	380ed7fa 	srli	r7,r7,31
    aeec:	defffb04 	addi	sp,sp,-20
    aef0:	dc800215 	stw	r18,8(sp)
    aef4:	dc400115 	stw	r17,4(sp)
    aef8:	dc000015 	stw	r16,0(sp)
    aefc:	dfc00415 	stw	ra,16(sp)
    af00:	dcc00315 	stw	r19,12(sp)
    af04:	1c803fcc 	andi	r18,r3,255
    af08:	2c01ffcc 	andi	r16,r5,2047
    af0c:	5210b03a 	or	r8,r10,r8
    af10:	202290fa 	slli	r17,r4,3
    af14:	1081ffcc 	andi	r2,r2,2047
    af18:	4b12b03a 	or	r9,r9,r12
    af1c:	300c90fa 	slli	r6,r6,3
    af20:	91c07526 	beq	r18,r7,b0f8 <__adddf3+0x23c>
    af24:	8087c83a 	sub	r3,r16,r2
    af28:	00c0ab0e 	bge	zero,r3,b1d8 <__adddf3+0x31c>
    af2c:	10002a1e 	bne	r2,zero,afd8 <__adddf3+0x11c>
    af30:	4984b03a 	or	r2,r9,r6
    af34:	1000961e 	bne	r2,zero,b190 <__adddf3+0x2d4>
    af38:	888001cc 	andi	r2,r17,7
    af3c:	10000726 	beq	r2,zero,af5c <__adddf3+0xa0>
    af40:	888003cc 	andi	r2,r17,15
    af44:	00c00104 	movi	r3,4
    af48:	10c00426 	beq	r2,r3,af5c <__adddf3+0xa0>
    af4c:	88c7883a 	add	r3,r17,r3
    af50:	1c63803a 	cmpltu	r17,r3,r17
    af54:	4451883a 	add	r8,r8,r17
    af58:	1823883a 	mov	r17,r3
    af5c:	4080202c 	andhi	r2,r8,128
    af60:	10005926 	beq	r2,zero,b0c8 <__adddf3+0x20c>
    af64:	84000044 	addi	r16,r16,1
    af68:	0081ffc4 	movi	r2,2047
    af6c:	8080ba26 	beq	r16,r2,b258 <__adddf3+0x39c>
    af70:	00bfe034 	movhi	r2,65408
    af74:	10bfffc4 	addi	r2,r2,-1
    af78:	4090703a 	and	r8,r8,r2
    af7c:	4004977a 	slli	r2,r8,29
    af80:	4010927a 	slli	r8,r8,9
    af84:	8822d0fa 	srli	r17,r17,3
    af88:	8401ffcc 	andi	r16,r16,2047
    af8c:	4010d33a 	srli	r8,r8,12
    af90:	9007883a 	mov	r3,r18
    af94:	1444b03a 	or	r2,r2,r17
    af98:	8401ffcc 	andi	r16,r16,2047
    af9c:	8020953a 	slli	r16,r16,20
    afa0:	18c03fcc 	andi	r3,r3,255
    afa4:	01000434 	movhi	r4,16
    afa8:	213fffc4 	addi	r4,r4,-1
    afac:	180697fa 	slli	r3,r3,31
    afb0:	4110703a 	and	r8,r8,r4
    afb4:	4410b03a 	or	r8,r8,r16
    afb8:	40c6b03a 	or	r3,r8,r3
    afbc:	dfc00417 	ldw	ra,16(sp)
    afc0:	dcc00317 	ldw	r19,12(sp)
    afc4:	dc800217 	ldw	r18,8(sp)
    afc8:	dc400117 	ldw	r17,4(sp)
    afcc:	dc000017 	ldw	r16,0(sp)
    afd0:	dec00504 	addi	sp,sp,20
    afd4:	f800283a 	ret
    afd8:	0081ffc4 	movi	r2,2047
    afdc:	80bfd626 	beq	r16,r2,af38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700af38>
    afe0:	4a402034 	orhi	r9,r9,128
    afe4:	00800e04 	movi	r2,56
    afe8:	10c09f16 	blt	r2,r3,b268 <__adddf3+0x3ac>
    afec:	008007c4 	movi	r2,31
    aff0:	10c0c216 	blt	r2,r3,b2fc <__adddf3+0x440>
    aff4:	00800804 	movi	r2,32
    aff8:	10c5c83a 	sub	r2,r2,r3
    affc:	488a983a 	sll	r5,r9,r2
    b000:	30c8d83a 	srl	r4,r6,r3
    b004:	3084983a 	sll	r2,r6,r2
    b008:	48c6d83a 	srl	r3,r9,r3
    b00c:	290cb03a 	or	r6,r5,r4
    b010:	1004c03a 	cmpne	r2,r2,zero
    b014:	308cb03a 	or	r6,r6,r2
    b018:	898dc83a 	sub	r6,r17,r6
    b01c:	89a3803a 	cmpltu	r17,r17,r6
    b020:	40d1c83a 	sub	r8,r8,r3
    b024:	4451c83a 	sub	r8,r8,r17
    b028:	3023883a 	mov	r17,r6
    b02c:	4080202c 	andhi	r2,r8,128
    b030:	10002326 	beq	r2,zero,b0c0 <__adddf3+0x204>
    b034:	04c02034 	movhi	r19,128
    b038:	9cffffc4 	addi	r19,r19,-1
    b03c:	44e6703a 	and	r19,r8,r19
    b040:	98007626 	beq	r19,zero,b21c <__adddf3+0x360>
    b044:	9809883a 	mov	r4,r19
    b048:	000d4c00 	call	d4c0 <__clzsi2>
    b04c:	10fffe04 	addi	r3,r2,-8
    b050:	010007c4 	movi	r4,31
    b054:	20c07716 	blt	r4,r3,b234 <__adddf3+0x378>
    b058:	00800804 	movi	r2,32
    b05c:	10c5c83a 	sub	r2,r2,r3
    b060:	8884d83a 	srl	r2,r17,r2
    b064:	98d0983a 	sll	r8,r19,r3
    b068:	88e2983a 	sll	r17,r17,r3
    b06c:	1204b03a 	or	r2,r2,r8
    b070:	1c007416 	blt	r3,r16,b244 <__adddf3+0x388>
    b074:	1c21c83a 	sub	r16,r3,r16
    b078:	82000044 	addi	r8,r16,1
    b07c:	00c007c4 	movi	r3,31
    b080:	1a009116 	blt	r3,r8,b2c8 <__adddf3+0x40c>
    b084:	00c00804 	movi	r3,32
    b088:	1a07c83a 	sub	r3,r3,r8
    b08c:	8a08d83a 	srl	r4,r17,r8
    b090:	88e2983a 	sll	r17,r17,r3
    b094:	10c6983a 	sll	r3,r2,r3
    b098:	1210d83a 	srl	r8,r2,r8
    b09c:	8804c03a 	cmpne	r2,r17,zero
    b0a0:	1906b03a 	or	r3,r3,r4
    b0a4:	18a2b03a 	or	r17,r3,r2
    b0a8:	0021883a 	mov	r16,zero
    b0ac:	003fa206 	br	af38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700af38>
    b0b0:	1890b03a 	or	r8,r3,r2
    b0b4:	40017d26 	beq	r8,zero,b6ac <__adddf3+0x7f0>
    b0b8:	1011883a 	mov	r8,r2
    b0bc:	1823883a 	mov	r17,r3
    b0c0:	888001cc 	andi	r2,r17,7
    b0c4:	103f9e1e 	bne	r2,zero,af40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700af40>
    b0c8:	4004977a 	slli	r2,r8,29
    b0cc:	8822d0fa 	srli	r17,r17,3
    b0d0:	4010d0fa 	srli	r8,r8,3
    b0d4:	9007883a 	mov	r3,r18
    b0d8:	1444b03a 	or	r2,r2,r17
    b0dc:	0101ffc4 	movi	r4,2047
    b0e0:	81002426 	beq	r16,r4,b174 <__adddf3+0x2b8>
    b0e4:	8120703a 	and	r16,r16,r4
    b0e8:	01000434 	movhi	r4,16
    b0ec:	213fffc4 	addi	r4,r4,-1
    b0f0:	4110703a 	and	r8,r8,r4
    b0f4:	003fa806 	br	af98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700af98>
    b0f8:	8089c83a 	sub	r4,r16,r2
    b0fc:	01005e0e 	bge	zero,r4,b278 <__adddf3+0x3bc>
    b100:	10002b26 	beq	r2,zero,b1b0 <__adddf3+0x2f4>
    b104:	0081ffc4 	movi	r2,2047
    b108:	80bf8b26 	beq	r16,r2,af38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700af38>
    b10c:	4a402034 	orhi	r9,r9,128
    b110:	00800e04 	movi	r2,56
    b114:	1100a40e 	bge	r2,r4,b3a8 <__adddf3+0x4ec>
    b118:	498cb03a 	or	r6,r9,r6
    b11c:	300ac03a 	cmpne	r5,r6,zero
    b120:	0013883a 	mov	r9,zero
    b124:	2c4b883a 	add	r5,r5,r17
    b128:	2c63803a 	cmpltu	r17,r5,r17
    b12c:	4a11883a 	add	r8,r9,r8
    b130:	8a11883a 	add	r8,r17,r8
    b134:	2823883a 	mov	r17,r5
    b138:	4080202c 	andhi	r2,r8,128
    b13c:	103fe026 	beq	r2,zero,b0c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b0c0>
    b140:	84000044 	addi	r16,r16,1
    b144:	0081ffc4 	movi	r2,2047
    b148:	8080d226 	beq	r16,r2,b494 <__adddf3+0x5d8>
    b14c:	00bfe034 	movhi	r2,65408
    b150:	10bfffc4 	addi	r2,r2,-1
    b154:	4090703a 	and	r8,r8,r2
    b158:	880ad07a 	srli	r5,r17,1
    b15c:	400897fa 	slli	r4,r8,31
    b160:	88c0004c 	andi	r3,r17,1
    b164:	28e2b03a 	or	r17,r5,r3
    b168:	4010d07a 	srli	r8,r8,1
    b16c:	2462b03a 	or	r17,r4,r17
    b170:	003f7106 	br	af38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700af38>
    b174:	4088b03a 	or	r4,r8,r2
    b178:	20014526 	beq	r4,zero,b690 <__adddf3+0x7d4>
    b17c:	01000434 	movhi	r4,16
    b180:	42000234 	orhi	r8,r8,8
    b184:	213fffc4 	addi	r4,r4,-1
    b188:	4110703a 	and	r8,r8,r4
    b18c:	003f8206 	br	af98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700af98>
    b190:	18ffffc4 	addi	r3,r3,-1
    b194:	1800491e 	bne	r3,zero,b2bc <__adddf3+0x400>
    b198:	898bc83a 	sub	r5,r17,r6
    b19c:	8963803a 	cmpltu	r17,r17,r5
    b1a0:	4251c83a 	sub	r8,r8,r9
    b1a4:	4451c83a 	sub	r8,r8,r17
    b1a8:	2823883a 	mov	r17,r5
    b1ac:	003f9f06 	br	b02c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b02c>
    b1b0:	4984b03a 	or	r2,r9,r6
    b1b4:	103f6026 	beq	r2,zero,af38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700af38>
    b1b8:	213fffc4 	addi	r4,r4,-1
    b1bc:	2000931e 	bne	r4,zero,b40c <__adddf3+0x550>
    b1c0:	898d883a 	add	r6,r17,r6
    b1c4:	3463803a 	cmpltu	r17,r6,r17
    b1c8:	4251883a 	add	r8,r8,r9
    b1cc:	8a11883a 	add	r8,r17,r8
    b1d0:	3023883a 	mov	r17,r6
    b1d4:	003fd806 	br	b138 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b138>
    b1d8:	1800541e 	bne	r3,zero,b32c <__adddf3+0x470>
    b1dc:	80800044 	addi	r2,r16,1
    b1e0:	1081ffcc 	andi	r2,r2,2047
    b1e4:	00c00044 	movi	r3,1
    b1e8:	1880a00e 	bge	r3,r2,b46c <__adddf3+0x5b0>
    b1ec:	8989c83a 	sub	r4,r17,r6
    b1f0:	8905803a 	cmpltu	r2,r17,r4
    b1f4:	4267c83a 	sub	r19,r8,r9
    b1f8:	98a7c83a 	sub	r19,r19,r2
    b1fc:	9880202c 	andhi	r2,r19,128
    b200:	10006326 	beq	r2,zero,b390 <__adddf3+0x4d4>
    b204:	3463c83a 	sub	r17,r6,r17
    b208:	4a07c83a 	sub	r3,r9,r8
    b20c:	344d803a 	cmpltu	r6,r6,r17
    b210:	19a7c83a 	sub	r19,r3,r6
    b214:	3825883a 	mov	r18,r7
    b218:	983f8a1e 	bne	r19,zero,b044 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b044>
    b21c:	8809883a 	mov	r4,r17
    b220:	000d4c00 	call	d4c0 <__clzsi2>
    b224:	10800804 	addi	r2,r2,32
    b228:	10fffe04 	addi	r3,r2,-8
    b22c:	010007c4 	movi	r4,31
    b230:	20ff890e 	bge	r4,r3,b058 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b058>
    b234:	10bff604 	addi	r2,r2,-40
    b238:	8884983a 	sll	r2,r17,r2
    b23c:	0023883a 	mov	r17,zero
    b240:	1c3f8c0e 	bge	r3,r16,b074 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b074>
    b244:	023fe034 	movhi	r8,65408
    b248:	423fffc4 	addi	r8,r8,-1
    b24c:	80e1c83a 	sub	r16,r16,r3
    b250:	1210703a 	and	r8,r2,r8
    b254:	003f3806 	br	af38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700af38>
    b258:	9007883a 	mov	r3,r18
    b25c:	0011883a 	mov	r8,zero
    b260:	0005883a 	mov	r2,zero
    b264:	003f4c06 	br	af98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700af98>
    b268:	498cb03a 	or	r6,r9,r6
    b26c:	300cc03a 	cmpne	r6,r6,zero
    b270:	0007883a 	mov	r3,zero
    b274:	003f6806 	br	b018 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b018>
    b278:	20009c1e 	bne	r4,zero,b4ec <__adddf3+0x630>
    b27c:	80800044 	addi	r2,r16,1
    b280:	1141ffcc 	andi	r5,r2,2047
    b284:	01000044 	movi	r4,1
    b288:	2140670e 	bge	r4,r5,b428 <__adddf3+0x56c>
    b28c:	0101ffc4 	movi	r4,2047
    b290:	11007f26 	beq	r2,r4,b490 <__adddf3+0x5d4>
    b294:	898d883a 	add	r6,r17,r6
    b298:	4247883a 	add	r3,r8,r9
    b29c:	3451803a 	cmpltu	r8,r6,r17
    b2a0:	40d1883a 	add	r8,r8,r3
    b2a4:	402297fa 	slli	r17,r8,31
    b2a8:	300cd07a 	srli	r6,r6,1
    b2ac:	4010d07a 	srli	r8,r8,1
    b2b0:	1021883a 	mov	r16,r2
    b2b4:	89a2b03a 	or	r17,r17,r6
    b2b8:	003f1f06 	br	af38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700af38>
    b2bc:	0081ffc4 	movi	r2,2047
    b2c0:	80bf481e 	bne	r16,r2,afe4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700afe4>
    b2c4:	003f1c06 	br	af38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700af38>
    b2c8:	843ff844 	addi	r16,r16,-31
    b2cc:	01000804 	movi	r4,32
    b2d0:	1406d83a 	srl	r3,r2,r16
    b2d4:	41005026 	beq	r8,r4,b418 <__adddf3+0x55c>
    b2d8:	01001004 	movi	r4,64
    b2dc:	2211c83a 	sub	r8,r4,r8
    b2e0:	1204983a 	sll	r2,r2,r8
    b2e4:	88a2b03a 	or	r17,r17,r2
    b2e8:	8822c03a 	cmpne	r17,r17,zero
    b2ec:	1c62b03a 	or	r17,r3,r17
    b2f0:	0011883a 	mov	r8,zero
    b2f4:	0021883a 	mov	r16,zero
    b2f8:	003f7106 	br	b0c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b0c0>
    b2fc:	193ff804 	addi	r4,r3,-32
    b300:	00800804 	movi	r2,32
    b304:	4908d83a 	srl	r4,r9,r4
    b308:	18804526 	beq	r3,r2,b420 <__adddf3+0x564>
    b30c:	00801004 	movi	r2,64
    b310:	10c5c83a 	sub	r2,r2,r3
    b314:	4886983a 	sll	r3,r9,r2
    b318:	198cb03a 	or	r6,r3,r6
    b31c:	300cc03a 	cmpne	r6,r6,zero
    b320:	218cb03a 	or	r6,r4,r6
    b324:	0007883a 	mov	r3,zero
    b328:	003f3b06 	br	b018 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b018>
    b32c:	80002a26 	beq	r16,zero,b3d8 <__adddf3+0x51c>
    b330:	0101ffc4 	movi	r4,2047
    b334:	11006826 	beq	r2,r4,b4d8 <__adddf3+0x61c>
    b338:	00c7c83a 	sub	r3,zero,r3
    b33c:	42002034 	orhi	r8,r8,128
    b340:	01000e04 	movi	r4,56
    b344:	20c07c16 	blt	r4,r3,b538 <__adddf3+0x67c>
    b348:	010007c4 	movi	r4,31
    b34c:	20c0da16 	blt	r4,r3,b6b8 <__adddf3+0x7fc>
    b350:	01000804 	movi	r4,32
    b354:	20c9c83a 	sub	r4,r4,r3
    b358:	4114983a 	sll	r10,r8,r4
    b35c:	88cad83a 	srl	r5,r17,r3
    b360:	8908983a 	sll	r4,r17,r4
    b364:	40c6d83a 	srl	r3,r8,r3
    b368:	5162b03a 	or	r17,r10,r5
    b36c:	2008c03a 	cmpne	r4,r4,zero
    b370:	8922b03a 	or	r17,r17,r4
    b374:	3463c83a 	sub	r17,r6,r17
    b378:	48c7c83a 	sub	r3,r9,r3
    b37c:	344d803a 	cmpltu	r6,r6,r17
    b380:	1991c83a 	sub	r8,r3,r6
    b384:	1021883a 	mov	r16,r2
    b388:	3825883a 	mov	r18,r7
    b38c:	003f2706 	br	b02c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b02c>
    b390:	24d0b03a 	or	r8,r4,r19
    b394:	40001b1e 	bne	r8,zero,b404 <__adddf3+0x548>
    b398:	0005883a 	mov	r2,zero
    b39c:	0007883a 	mov	r3,zero
    b3a0:	0021883a 	mov	r16,zero
    b3a4:	003f4d06 	br	b0dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b0dc>
    b3a8:	008007c4 	movi	r2,31
    b3ac:	11003c16 	blt	r2,r4,b4a0 <__adddf3+0x5e4>
    b3b0:	00800804 	movi	r2,32
    b3b4:	1105c83a 	sub	r2,r2,r4
    b3b8:	488e983a 	sll	r7,r9,r2
    b3bc:	310ad83a 	srl	r5,r6,r4
    b3c0:	3084983a 	sll	r2,r6,r2
    b3c4:	4912d83a 	srl	r9,r9,r4
    b3c8:	394ab03a 	or	r5,r7,r5
    b3cc:	1004c03a 	cmpne	r2,r2,zero
    b3d0:	288ab03a 	or	r5,r5,r2
    b3d4:	003f5306 	br	b124 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b124>
    b3d8:	4448b03a 	or	r4,r8,r17
    b3dc:	20003e26 	beq	r4,zero,b4d8 <__adddf3+0x61c>
    b3e0:	00c6303a 	nor	r3,zero,r3
    b3e4:	18003a1e 	bne	r3,zero,b4d0 <__adddf3+0x614>
    b3e8:	3463c83a 	sub	r17,r6,r17
    b3ec:	4a07c83a 	sub	r3,r9,r8
    b3f0:	344d803a 	cmpltu	r6,r6,r17
    b3f4:	1991c83a 	sub	r8,r3,r6
    b3f8:	1021883a 	mov	r16,r2
    b3fc:	3825883a 	mov	r18,r7
    b400:	003f0a06 	br	b02c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b02c>
    b404:	2023883a 	mov	r17,r4
    b408:	003f0d06 	br	b040 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b040>
    b40c:	0081ffc4 	movi	r2,2047
    b410:	80bf3f1e 	bne	r16,r2,b110 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b110>
    b414:	003ec806 	br	af38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700af38>
    b418:	0005883a 	mov	r2,zero
    b41c:	003fb106 	br	b2e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b2e4>
    b420:	0007883a 	mov	r3,zero
    b424:	003fbc06 	br	b318 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b318>
    b428:	4444b03a 	or	r2,r8,r17
    b42c:	8000871e 	bne	r16,zero,b64c <__adddf3+0x790>
    b430:	1000ba26 	beq	r2,zero,b71c <__adddf3+0x860>
    b434:	4984b03a 	or	r2,r9,r6
    b438:	103ebf26 	beq	r2,zero,af38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700af38>
    b43c:	8985883a 	add	r2,r17,r6
    b440:	4247883a 	add	r3,r8,r9
    b444:	1451803a 	cmpltu	r8,r2,r17
    b448:	40d1883a 	add	r8,r8,r3
    b44c:	40c0202c 	andhi	r3,r8,128
    b450:	1023883a 	mov	r17,r2
    b454:	183f1a26 	beq	r3,zero,b0c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b0c0>
    b458:	00bfe034 	movhi	r2,65408
    b45c:	10bfffc4 	addi	r2,r2,-1
    b460:	2021883a 	mov	r16,r4
    b464:	4090703a 	and	r8,r8,r2
    b468:	003eb306 	br	af38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700af38>
    b46c:	4444b03a 	or	r2,r8,r17
    b470:	8000291e 	bne	r16,zero,b518 <__adddf3+0x65c>
    b474:	10004b1e 	bne	r2,zero,b5a4 <__adddf3+0x6e8>
    b478:	4990b03a 	or	r8,r9,r6
    b47c:	40008b26 	beq	r8,zero,b6ac <__adddf3+0x7f0>
    b480:	4811883a 	mov	r8,r9
    b484:	3023883a 	mov	r17,r6
    b488:	3825883a 	mov	r18,r7
    b48c:	003eaa06 	br	af38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700af38>
    b490:	1021883a 	mov	r16,r2
    b494:	0011883a 	mov	r8,zero
    b498:	0005883a 	mov	r2,zero
    b49c:	003f0f06 	br	b0dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b0dc>
    b4a0:	217ff804 	addi	r5,r4,-32
    b4a4:	00800804 	movi	r2,32
    b4a8:	494ad83a 	srl	r5,r9,r5
    b4ac:	20807d26 	beq	r4,r2,b6a4 <__adddf3+0x7e8>
    b4b0:	00801004 	movi	r2,64
    b4b4:	1109c83a 	sub	r4,r2,r4
    b4b8:	4912983a 	sll	r9,r9,r4
    b4bc:	498cb03a 	or	r6,r9,r6
    b4c0:	300cc03a 	cmpne	r6,r6,zero
    b4c4:	298ab03a 	or	r5,r5,r6
    b4c8:	0013883a 	mov	r9,zero
    b4cc:	003f1506 	br	b124 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b124>
    b4d0:	0101ffc4 	movi	r4,2047
    b4d4:	113f9a1e 	bne	r2,r4,b340 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b340>
    b4d8:	4811883a 	mov	r8,r9
    b4dc:	3023883a 	mov	r17,r6
    b4e0:	1021883a 	mov	r16,r2
    b4e4:	3825883a 	mov	r18,r7
    b4e8:	003e9306 	br	af38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700af38>
    b4ec:	8000161e 	bne	r16,zero,b548 <__adddf3+0x68c>
    b4f0:	444ab03a 	or	r5,r8,r17
    b4f4:	28005126 	beq	r5,zero,b63c <__adddf3+0x780>
    b4f8:	0108303a 	nor	r4,zero,r4
    b4fc:	20004d1e 	bne	r4,zero,b634 <__adddf3+0x778>
    b500:	89a3883a 	add	r17,r17,r6
    b504:	4253883a 	add	r9,r8,r9
    b508:	898d803a 	cmpltu	r6,r17,r6
    b50c:	3251883a 	add	r8,r6,r9
    b510:	1021883a 	mov	r16,r2
    b514:	003f0806 	br	b138 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b138>
    b518:	1000301e 	bne	r2,zero,b5dc <__adddf3+0x720>
    b51c:	4984b03a 	or	r2,r9,r6
    b520:	10007126 	beq	r2,zero,b6e8 <__adddf3+0x82c>
    b524:	4811883a 	mov	r8,r9
    b528:	3023883a 	mov	r17,r6
    b52c:	3825883a 	mov	r18,r7
    b530:	0401ffc4 	movi	r16,2047
    b534:	003e8006 	br	af38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700af38>
    b538:	4462b03a 	or	r17,r8,r17
    b53c:	8822c03a 	cmpne	r17,r17,zero
    b540:	0007883a 	mov	r3,zero
    b544:	003f8b06 	br	b374 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b374>
    b548:	0141ffc4 	movi	r5,2047
    b54c:	11403b26 	beq	r2,r5,b63c <__adddf3+0x780>
    b550:	0109c83a 	sub	r4,zero,r4
    b554:	42002034 	orhi	r8,r8,128
    b558:	01400e04 	movi	r5,56
    b55c:	29006716 	blt	r5,r4,b6fc <__adddf3+0x840>
    b560:	014007c4 	movi	r5,31
    b564:	29007016 	blt	r5,r4,b728 <__adddf3+0x86c>
    b568:	01400804 	movi	r5,32
    b56c:	290bc83a 	sub	r5,r5,r4
    b570:	4154983a 	sll	r10,r8,r5
    b574:	890ed83a 	srl	r7,r17,r4
    b578:	894a983a 	sll	r5,r17,r5
    b57c:	4108d83a 	srl	r4,r8,r4
    b580:	51e2b03a 	or	r17,r10,r7
    b584:	280ac03a 	cmpne	r5,r5,zero
    b588:	8962b03a 	or	r17,r17,r5
    b58c:	89a3883a 	add	r17,r17,r6
    b590:	2253883a 	add	r9,r4,r9
    b594:	898d803a 	cmpltu	r6,r17,r6
    b598:	3251883a 	add	r8,r6,r9
    b59c:	1021883a 	mov	r16,r2
    b5a0:	003ee506 	br	b138 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b138>
    b5a4:	4984b03a 	or	r2,r9,r6
    b5a8:	103e6326 	beq	r2,zero,af38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700af38>
    b5ac:	8987c83a 	sub	r3,r17,r6
    b5b0:	88c9803a 	cmpltu	r4,r17,r3
    b5b4:	4245c83a 	sub	r2,r8,r9
    b5b8:	1105c83a 	sub	r2,r2,r4
    b5bc:	1100202c 	andhi	r4,r2,128
    b5c0:	203ebb26 	beq	r4,zero,b0b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b0b0>
    b5c4:	3463c83a 	sub	r17,r6,r17
    b5c8:	4a07c83a 	sub	r3,r9,r8
    b5cc:	344d803a 	cmpltu	r6,r6,r17
    b5d0:	1991c83a 	sub	r8,r3,r6
    b5d4:	3825883a 	mov	r18,r7
    b5d8:	003e5706 	br	af38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700af38>
    b5dc:	4984b03a 	or	r2,r9,r6
    b5e0:	10002e26 	beq	r2,zero,b69c <__adddf3+0x7e0>
    b5e4:	4004d0fa 	srli	r2,r8,3
    b5e8:	8822d0fa 	srli	r17,r17,3
    b5ec:	4010977a 	slli	r8,r8,29
    b5f0:	10c0022c 	andhi	r3,r2,8
    b5f4:	4462b03a 	or	r17,r8,r17
    b5f8:	18000826 	beq	r3,zero,b61c <__adddf3+0x760>
    b5fc:	4808d0fa 	srli	r4,r9,3
    b600:	20c0022c 	andhi	r3,r4,8
    b604:	1800051e 	bne	r3,zero,b61c <__adddf3+0x760>
    b608:	300cd0fa 	srli	r6,r6,3
    b60c:	4806977a 	slli	r3,r9,29
    b610:	2005883a 	mov	r2,r4
    b614:	3825883a 	mov	r18,r7
    b618:	19a2b03a 	or	r17,r3,r6
    b61c:	8810d77a 	srli	r8,r17,29
    b620:	100490fa 	slli	r2,r2,3
    b624:	882290fa 	slli	r17,r17,3
    b628:	0401ffc4 	movi	r16,2047
    b62c:	4090b03a 	or	r8,r8,r2
    b630:	003e4106 	br	af38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700af38>
    b634:	0141ffc4 	movi	r5,2047
    b638:	117fc71e 	bne	r2,r5,b558 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b558>
    b63c:	4811883a 	mov	r8,r9
    b640:	3023883a 	mov	r17,r6
    b644:	1021883a 	mov	r16,r2
    b648:	003e3b06 	br	af38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700af38>
    b64c:	10002f26 	beq	r2,zero,b70c <__adddf3+0x850>
    b650:	4984b03a 	or	r2,r9,r6
    b654:	10001126 	beq	r2,zero,b69c <__adddf3+0x7e0>
    b658:	4004d0fa 	srli	r2,r8,3
    b65c:	8822d0fa 	srli	r17,r17,3
    b660:	4010977a 	slli	r8,r8,29
    b664:	10c0022c 	andhi	r3,r2,8
    b668:	4462b03a 	or	r17,r8,r17
    b66c:	183feb26 	beq	r3,zero,b61c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b61c>
    b670:	4808d0fa 	srli	r4,r9,3
    b674:	20c0022c 	andhi	r3,r4,8
    b678:	183fe81e 	bne	r3,zero,b61c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b61c>
    b67c:	300cd0fa 	srli	r6,r6,3
    b680:	4806977a 	slli	r3,r9,29
    b684:	2005883a 	mov	r2,r4
    b688:	19a2b03a 	or	r17,r3,r6
    b68c:	003fe306 	br	b61c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b61c>
    b690:	0011883a 	mov	r8,zero
    b694:	0005883a 	mov	r2,zero
    b698:	003e3f06 	br	af98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700af98>
    b69c:	0401ffc4 	movi	r16,2047
    b6a0:	003e2506 	br	af38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700af38>
    b6a4:	0013883a 	mov	r9,zero
    b6a8:	003f8406 	br	b4bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b4bc>
    b6ac:	0005883a 	mov	r2,zero
    b6b0:	0007883a 	mov	r3,zero
    b6b4:	003e8906 	br	b0dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b0dc>
    b6b8:	197ff804 	addi	r5,r3,-32
    b6bc:	01000804 	movi	r4,32
    b6c0:	414ad83a 	srl	r5,r8,r5
    b6c4:	19002426 	beq	r3,r4,b758 <__adddf3+0x89c>
    b6c8:	01001004 	movi	r4,64
    b6cc:	20c7c83a 	sub	r3,r4,r3
    b6d0:	40c6983a 	sll	r3,r8,r3
    b6d4:	1c46b03a 	or	r3,r3,r17
    b6d8:	1806c03a 	cmpne	r3,r3,zero
    b6dc:	28e2b03a 	or	r17,r5,r3
    b6e0:	0007883a 	mov	r3,zero
    b6e4:	003f2306 	br	b374 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b374>
    b6e8:	0007883a 	mov	r3,zero
    b6ec:	5811883a 	mov	r8,r11
    b6f0:	00bfffc4 	movi	r2,-1
    b6f4:	0401ffc4 	movi	r16,2047
    b6f8:	003e7806 	br	b0dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b0dc>
    b6fc:	4462b03a 	or	r17,r8,r17
    b700:	8822c03a 	cmpne	r17,r17,zero
    b704:	0009883a 	mov	r4,zero
    b708:	003fa006 	br	b58c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b58c>
    b70c:	4811883a 	mov	r8,r9
    b710:	3023883a 	mov	r17,r6
    b714:	0401ffc4 	movi	r16,2047
    b718:	003e0706 	br	af38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700af38>
    b71c:	4811883a 	mov	r8,r9
    b720:	3023883a 	mov	r17,r6
    b724:	003e0406 	br	af38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700af38>
    b728:	21fff804 	addi	r7,r4,-32
    b72c:	01400804 	movi	r5,32
    b730:	41ced83a 	srl	r7,r8,r7
    b734:	21400a26 	beq	r4,r5,b760 <__adddf3+0x8a4>
    b738:	01401004 	movi	r5,64
    b73c:	2909c83a 	sub	r4,r5,r4
    b740:	4108983a 	sll	r4,r8,r4
    b744:	2448b03a 	or	r4,r4,r17
    b748:	2008c03a 	cmpne	r4,r4,zero
    b74c:	3922b03a 	or	r17,r7,r4
    b750:	0009883a 	mov	r4,zero
    b754:	003f8d06 	br	b58c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b58c>
    b758:	0007883a 	mov	r3,zero
    b75c:	003fdd06 	br	b6d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b6d4>
    b760:	0009883a 	mov	r4,zero
    b764:	003ff706 	br	b744 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b744>

0000b768 <__divdf3>:
    b768:	defff204 	addi	sp,sp,-56
    b76c:	dd400915 	stw	r21,36(sp)
    b770:	282ad53a 	srli	r21,r5,20
    b774:	dd000815 	stw	r20,32(sp)
    b778:	2828d7fa 	srli	r20,r5,31
    b77c:	dc000415 	stw	r16,16(sp)
    b780:	04000434 	movhi	r16,16
    b784:	df000c15 	stw	fp,48(sp)
    b788:	843fffc4 	addi	r16,r16,-1
    b78c:	dfc00d15 	stw	ra,52(sp)
    b790:	ddc00b15 	stw	r23,44(sp)
    b794:	dd800a15 	stw	r22,40(sp)
    b798:	dcc00715 	stw	r19,28(sp)
    b79c:	dc800615 	stw	r18,24(sp)
    b7a0:	dc400515 	stw	r17,20(sp)
    b7a4:	ad41ffcc 	andi	r21,r21,2047
    b7a8:	2c20703a 	and	r16,r5,r16
    b7ac:	a7003fcc 	andi	fp,r20,255
    b7b0:	a8006126 	beq	r21,zero,b938 <__divdf3+0x1d0>
    b7b4:	0081ffc4 	movi	r2,2047
    b7b8:	2025883a 	mov	r18,r4
    b7bc:	a8803726 	beq	r21,r2,b89c <__divdf3+0x134>
    b7c0:	80800434 	orhi	r2,r16,16
    b7c4:	100490fa 	slli	r2,r2,3
    b7c8:	2020d77a 	srli	r16,r4,29
    b7cc:	202490fa 	slli	r18,r4,3
    b7d0:	ad7f0044 	addi	r21,r21,-1023
    b7d4:	80a0b03a 	or	r16,r16,r2
    b7d8:	0027883a 	mov	r19,zero
    b7dc:	0013883a 	mov	r9,zero
    b7e0:	3804d53a 	srli	r2,r7,20
    b7e4:	382cd7fa 	srli	r22,r7,31
    b7e8:	04400434 	movhi	r17,16
    b7ec:	8c7fffc4 	addi	r17,r17,-1
    b7f0:	1081ffcc 	andi	r2,r2,2047
    b7f4:	3011883a 	mov	r8,r6
    b7f8:	3c62703a 	and	r17,r7,r17
    b7fc:	b5c03fcc 	andi	r23,r22,255
    b800:	10006c26 	beq	r2,zero,b9b4 <__divdf3+0x24c>
    b804:	00c1ffc4 	movi	r3,2047
    b808:	10c06426 	beq	r2,r3,b99c <__divdf3+0x234>
    b80c:	88c00434 	orhi	r3,r17,16
    b810:	180690fa 	slli	r3,r3,3
    b814:	3022d77a 	srli	r17,r6,29
    b818:	301090fa 	slli	r8,r6,3
    b81c:	10bf0044 	addi	r2,r2,-1023
    b820:	88e2b03a 	or	r17,r17,r3
    b824:	000f883a 	mov	r7,zero
    b828:	a58cf03a 	xor	r6,r20,r22
    b82c:	3cc8b03a 	or	r4,r7,r19
    b830:	a8abc83a 	sub	r21,r21,r2
    b834:	008003c4 	movi	r2,15
    b838:	3007883a 	mov	r3,r6
    b83c:	34c03fcc 	andi	r19,r6,255
    b840:	11009036 	bltu	r2,r4,ba84 <__divdf3+0x31c>
    b844:	200890ba 	slli	r4,r4,2
    b848:	00800074 	movhi	r2,1
    b84c:	10ae1704 	addi	r2,r2,-18340
    b850:	2089883a 	add	r4,r4,r2
    b854:	20800017 	ldw	r2,0(r4)
    b858:	1000683a 	jmp	r2
    b85c:	0000ba84 	movi	zero,746
    b860:	0000b8d4 	movui	zero,739
    b864:	0000ba74 	movhi	zero,745
    b868:	0000b8c8 	cmpgei	zero,zero,739
    b86c:	0000ba74 	movhi	zero,745
    b870:	0000ba48 	cmpgei	zero,zero,745
    b874:	0000ba74 	movhi	zero,745
    b878:	0000b8c8 	cmpgei	zero,zero,739
    b87c:	0000b8d4 	movui	zero,739
    b880:	0000b8d4 	movui	zero,739
    b884:	0000ba48 	cmpgei	zero,zero,745
    b888:	0000b8c8 	cmpgei	zero,zero,739
    b88c:	0000b8b8 	rdprs	zero,zero,738
    b890:	0000b8b8 	rdprs	zero,zero,738
    b894:	0000b8b8 	rdprs	zero,zero,738
    b898:	0000bd68 	cmpgeui	zero,zero,757
    b89c:	2404b03a 	or	r2,r4,r16
    b8a0:	1000661e 	bne	r2,zero,ba3c <__divdf3+0x2d4>
    b8a4:	04c00204 	movi	r19,8
    b8a8:	0021883a 	mov	r16,zero
    b8ac:	0025883a 	mov	r18,zero
    b8b0:	02400084 	movi	r9,2
    b8b4:	003fca06 	br	b7e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b7e0>
    b8b8:	8023883a 	mov	r17,r16
    b8bc:	9011883a 	mov	r8,r18
    b8c0:	e02f883a 	mov	r23,fp
    b8c4:	480f883a 	mov	r7,r9
    b8c8:	00800084 	movi	r2,2
    b8cc:	3881311e 	bne	r7,r2,bd94 <__divdf3+0x62c>
    b8d0:	b827883a 	mov	r19,r23
    b8d4:	98c0004c 	andi	r3,r19,1
    b8d8:	0081ffc4 	movi	r2,2047
    b8dc:	000b883a 	mov	r5,zero
    b8e0:	0025883a 	mov	r18,zero
    b8e4:	1004953a 	slli	r2,r2,20
    b8e8:	18c03fcc 	andi	r3,r3,255
    b8ec:	04400434 	movhi	r17,16
    b8f0:	8c7fffc4 	addi	r17,r17,-1
    b8f4:	180697fa 	slli	r3,r3,31
    b8f8:	2c4a703a 	and	r5,r5,r17
    b8fc:	288ab03a 	or	r5,r5,r2
    b900:	28c6b03a 	or	r3,r5,r3
    b904:	9005883a 	mov	r2,r18
    b908:	dfc00d17 	ldw	ra,52(sp)
    b90c:	df000c17 	ldw	fp,48(sp)
    b910:	ddc00b17 	ldw	r23,44(sp)
    b914:	dd800a17 	ldw	r22,40(sp)
    b918:	dd400917 	ldw	r21,36(sp)
    b91c:	dd000817 	ldw	r20,32(sp)
    b920:	dcc00717 	ldw	r19,28(sp)
    b924:	dc800617 	ldw	r18,24(sp)
    b928:	dc400517 	ldw	r17,20(sp)
    b92c:	dc000417 	ldw	r16,16(sp)
    b930:	dec00e04 	addi	sp,sp,56
    b934:	f800283a 	ret
    b938:	2404b03a 	or	r2,r4,r16
    b93c:	2027883a 	mov	r19,r4
    b940:	10003926 	beq	r2,zero,ba28 <__divdf3+0x2c0>
    b944:	80012e26 	beq	r16,zero,be00 <__divdf3+0x698>
    b948:	8009883a 	mov	r4,r16
    b94c:	d9800315 	stw	r6,12(sp)
    b950:	d9c00215 	stw	r7,8(sp)
    b954:	000d4c00 	call	d4c0 <__clzsi2>
    b958:	d9800317 	ldw	r6,12(sp)
    b95c:	d9c00217 	ldw	r7,8(sp)
    b960:	113ffd44 	addi	r4,r2,-11
    b964:	00c00704 	movi	r3,28
    b968:	19012116 	blt	r3,r4,bdf0 <__divdf3+0x688>
    b96c:	00c00744 	movi	r3,29
    b970:	147ffe04 	addi	r17,r2,-8
    b974:	1907c83a 	sub	r3,r3,r4
    b978:	8460983a 	sll	r16,r16,r17
    b97c:	98c6d83a 	srl	r3,r19,r3
    b980:	9c64983a 	sll	r18,r19,r17
    b984:	1c20b03a 	or	r16,r3,r16
    b988:	1080fcc4 	addi	r2,r2,1011
    b98c:	00abc83a 	sub	r21,zero,r2
    b990:	0027883a 	mov	r19,zero
    b994:	0013883a 	mov	r9,zero
    b998:	003f9106 	br	b7e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b7e0>
    b99c:	3446b03a 	or	r3,r6,r17
    b9a0:	18001f1e 	bne	r3,zero,ba20 <__divdf3+0x2b8>
    b9a4:	0023883a 	mov	r17,zero
    b9a8:	0011883a 	mov	r8,zero
    b9ac:	01c00084 	movi	r7,2
    b9b0:	003f9d06 	br	b828 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b828>
    b9b4:	3446b03a 	or	r3,r6,r17
    b9b8:	18001526 	beq	r3,zero,ba10 <__divdf3+0x2a8>
    b9bc:	88011b26 	beq	r17,zero,be2c <__divdf3+0x6c4>
    b9c0:	8809883a 	mov	r4,r17
    b9c4:	d9800315 	stw	r6,12(sp)
    b9c8:	da400115 	stw	r9,4(sp)
    b9cc:	000d4c00 	call	d4c0 <__clzsi2>
    b9d0:	d9800317 	ldw	r6,12(sp)
    b9d4:	da400117 	ldw	r9,4(sp)
    b9d8:	113ffd44 	addi	r4,r2,-11
    b9dc:	00c00704 	movi	r3,28
    b9e0:	19010e16 	blt	r3,r4,be1c <__divdf3+0x6b4>
    b9e4:	00c00744 	movi	r3,29
    b9e8:	123ffe04 	addi	r8,r2,-8
    b9ec:	1907c83a 	sub	r3,r3,r4
    b9f0:	8a22983a 	sll	r17,r17,r8
    b9f4:	30c6d83a 	srl	r3,r6,r3
    b9f8:	3210983a 	sll	r8,r6,r8
    b9fc:	1c62b03a 	or	r17,r3,r17
    ba00:	1080fcc4 	addi	r2,r2,1011
    ba04:	0085c83a 	sub	r2,zero,r2
    ba08:	000f883a 	mov	r7,zero
    ba0c:	003f8606 	br	b828 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b828>
    ba10:	0023883a 	mov	r17,zero
    ba14:	0011883a 	mov	r8,zero
    ba18:	01c00044 	movi	r7,1
    ba1c:	003f8206 	br	b828 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b828>
    ba20:	01c000c4 	movi	r7,3
    ba24:	003f8006 	br	b828 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b828>
    ba28:	04c00104 	movi	r19,4
    ba2c:	0021883a 	mov	r16,zero
    ba30:	0025883a 	mov	r18,zero
    ba34:	02400044 	movi	r9,1
    ba38:	003f6906 	br	b7e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b7e0>
    ba3c:	04c00304 	movi	r19,12
    ba40:	024000c4 	movi	r9,3
    ba44:	003f6606 	br	b7e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b7e0>
    ba48:	01400434 	movhi	r5,16
    ba4c:	0007883a 	mov	r3,zero
    ba50:	297fffc4 	addi	r5,r5,-1
    ba54:	04bfffc4 	movi	r18,-1
    ba58:	0081ffc4 	movi	r2,2047
    ba5c:	003fa106 	br	b8e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b8e4>
    ba60:	00c00044 	movi	r3,1
    ba64:	1887c83a 	sub	r3,r3,r2
    ba68:	01000e04 	movi	r4,56
    ba6c:	20c1210e 	bge	r4,r3,bef4 <__divdf3+0x78c>
    ba70:	98c0004c 	andi	r3,r19,1
    ba74:	0005883a 	mov	r2,zero
    ba78:	000b883a 	mov	r5,zero
    ba7c:	0025883a 	mov	r18,zero
    ba80:	003f9806 	br	b8e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b8e4>
    ba84:	8c00fd36 	bltu	r17,r16,be7c <__divdf3+0x714>
    ba88:	8440fb26 	beq	r16,r17,be78 <__divdf3+0x710>
    ba8c:	8007883a 	mov	r3,r16
    ba90:	ad7fffc4 	addi	r21,r21,-1
    ba94:	0021883a 	mov	r16,zero
    ba98:	4004d63a 	srli	r2,r8,24
    ba9c:	8822923a 	slli	r17,r17,8
    baa0:	1809883a 	mov	r4,r3
    baa4:	402c923a 	slli	r22,r8,8
    baa8:	88b8b03a 	or	fp,r17,r2
    baac:	e028d43a 	srli	r20,fp,16
    bab0:	d8c00015 	stw	r3,0(sp)
    bab4:	e5ffffcc 	andi	r23,fp,65535
    bab8:	a00b883a 	mov	r5,r20
    babc:	000ae000 	call	ae00 <__udivsi3>
    bac0:	d8c00017 	ldw	r3,0(sp)
    bac4:	a00b883a 	mov	r5,r20
    bac8:	d8800315 	stw	r2,12(sp)
    bacc:	1809883a 	mov	r4,r3
    bad0:	000ae640 	call	ae64 <__umodsi3>
    bad4:	d9800317 	ldw	r6,12(sp)
    bad8:	1006943a 	slli	r3,r2,16
    badc:	9004d43a 	srli	r2,r18,16
    bae0:	b9a3383a 	mul	r17,r23,r6
    bae4:	10c4b03a 	or	r2,r2,r3
    bae8:	1440062e 	bgeu	r2,r17,bb04 <__divdf3+0x39c>
    baec:	1705883a 	add	r2,r2,fp
    baf0:	30ffffc4 	addi	r3,r6,-1
    baf4:	1700ee36 	bltu	r2,fp,beb0 <__divdf3+0x748>
    baf8:	1440ed2e 	bgeu	r2,r17,beb0 <__divdf3+0x748>
    bafc:	31bfff84 	addi	r6,r6,-2
    bb00:	1705883a 	add	r2,r2,fp
    bb04:	1463c83a 	sub	r17,r2,r17
    bb08:	a00b883a 	mov	r5,r20
    bb0c:	8809883a 	mov	r4,r17
    bb10:	d9800315 	stw	r6,12(sp)
    bb14:	000ae000 	call	ae00 <__udivsi3>
    bb18:	a00b883a 	mov	r5,r20
    bb1c:	8809883a 	mov	r4,r17
    bb20:	d8800215 	stw	r2,8(sp)
    bb24:	000ae640 	call	ae64 <__umodsi3>
    bb28:	d9c00217 	ldw	r7,8(sp)
    bb2c:	1004943a 	slli	r2,r2,16
    bb30:	94bfffcc 	andi	r18,r18,65535
    bb34:	b9d1383a 	mul	r8,r23,r7
    bb38:	90a4b03a 	or	r18,r18,r2
    bb3c:	d9800317 	ldw	r6,12(sp)
    bb40:	9200062e 	bgeu	r18,r8,bb5c <__divdf3+0x3f4>
    bb44:	9725883a 	add	r18,r18,fp
    bb48:	38bfffc4 	addi	r2,r7,-1
    bb4c:	9700d636 	bltu	r18,fp,bea8 <__divdf3+0x740>
    bb50:	9200d52e 	bgeu	r18,r8,bea8 <__divdf3+0x740>
    bb54:	39ffff84 	addi	r7,r7,-2
    bb58:	9725883a 	add	r18,r18,fp
    bb5c:	3004943a 	slli	r2,r6,16
    bb60:	b012d43a 	srli	r9,r22,16
    bb64:	b1bfffcc 	andi	r6,r22,65535
    bb68:	11e2b03a 	or	r17,r2,r7
    bb6c:	8806d43a 	srli	r3,r17,16
    bb70:	893fffcc 	andi	r4,r17,65535
    bb74:	218b383a 	mul	r5,r4,r6
    bb78:	30c5383a 	mul	r2,r6,r3
    bb7c:	2249383a 	mul	r4,r4,r9
    bb80:	280ed43a 	srli	r7,r5,16
    bb84:	9225c83a 	sub	r18,r18,r8
    bb88:	2089883a 	add	r4,r4,r2
    bb8c:	3909883a 	add	r4,r7,r4
    bb90:	1a47383a 	mul	r3,r3,r9
    bb94:	2080022e 	bgeu	r4,r2,bba0 <__divdf3+0x438>
    bb98:	00800074 	movhi	r2,1
    bb9c:	1887883a 	add	r3,r3,r2
    bba0:	2004d43a 	srli	r2,r4,16
    bba4:	2008943a 	slli	r4,r4,16
    bba8:	297fffcc 	andi	r5,r5,65535
    bbac:	10c7883a 	add	r3,r2,r3
    bbb0:	2149883a 	add	r4,r4,r5
    bbb4:	90c0a536 	bltu	r18,r3,be4c <__divdf3+0x6e4>
    bbb8:	90c0bf26 	beq	r18,r3,beb8 <__divdf3+0x750>
    bbbc:	90c7c83a 	sub	r3,r18,r3
    bbc0:	810fc83a 	sub	r7,r16,r4
    bbc4:	81e5803a 	cmpltu	r18,r16,r7
    bbc8:	1ca5c83a 	sub	r18,r3,r18
    bbcc:	e480c126 	beq	fp,r18,bed4 <__divdf3+0x76c>
    bbd0:	a00b883a 	mov	r5,r20
    bbd4:	9009883a 	mov	r4,r18
    bbd8:	d9800315 	stw	r6,12(sp)
    bbdc:	d9c00215 	stw	r7,8(sp)
    bbe0:	da400115 	stw	r9,4(sp)
    bbe4:	000ae000 	call	ae00 <__udivsi3>
    bbe8:	a00b883a 	mov	r5,r20
    bbec:	9009883a 	mov	r4,r18
    bbf0:	d8800015 	stw	r2,0(sp)
    bbf4:	000ae640 	call	ae64 <__umodsi3>
    bbf8:	d9c00217 	ldw	r7,8(sp)
    bbfc:	da000017 	ldw	r8,0(sp)
    bc00:	1006943a 	slli	r3,r2,16
    bc04:	3804d43a 	srli	r2,r7,16
    bc08:	ba21383a 	mul	r16,r23,r8
    bc0c:	d9800317 	ldw	r6,12(sp)
    bc10:	10c4b03a 	or	r2,r2,r3
    bc14:	da400117 	ldw	r9,4(sp)
    bc18:	1400062e 	bgeu	r2,r16,bc34 <__divdf3+0x4cc>
    bc1c:	1705883a 	add	r2,r2,fp
    bc20:	40ffffc4 	addi	r3,r8,-1
    bc24:	1700ad36 	bltu	r2,fp,bedc <__divdf3+0x774>
    bc28:	1400ac2e 	bgeu	r2,r16,bedc <__divdf3+0x774>
    bc2c:	423fff84 	addi	r8,r8,-2
    bc30:	1705883a 	add	r2,r2,fp
    bc34:	1421c83a 	sub	r16,r2,r16
    bc38:	a00b883a 	mov	r5,r20
    bc3c:	8009883a 	mov	r4,r16
    bc40:	d9800315 	stw	r6,12(sp)
    bc44:	d9c00215 	stw	r7,8(sp)
    bc48:	da000015 	stw	r8,0(sp)
    bc4c:	da400115 	stw	r9,4(sp)
    bc50:	000ae000 	call	ae00 <__udivsi3>
    bc54:	8009883a 	mov	r4,r16
    bc58:	a00b883a 	mov	r5,r20
    bc5c:	1025883a 	mov	r18,r2
    bc60:	000ae640 	call	ae64 <__umodsi3>
    bc64:	d9c00217 	ldw	r7,8(sp)
    bc68:	1004943a 	slli	r2,r2,16
    bc6c:	bcaf383a 	mul	r23,r23,r18
    bc70:	393fffcc 	andi	r4,r7,65535
    bc74:	2088b03a 	or	r4,r4,r2
    bc78:	d9800317 	ldw	r6,12(sp)
    bc7c:	da000017 	ldw	r8,0(sp)
    bc80:	da400117 	ldw	r9,4(sp)
    bc84:	25c0062e 	bgeu	r4,r23,bca0 <__divdf3+0x538>
    bc88:	2709883a 	add	r4,r4,fp
    bc8c:	90bfffc4 	addi	r2,r18,-1
    bc90:	27009436 	bltu	r4,fp,bee4 <__divdf3+0x77c>
    bc94:	25c0932e 	bgeu	r4,r23,bee4 <__divdf3+0x77c>
    bc98:	94bfff84 	addi	r18,r18,-2
    bc9c:	2709883a 	add	r4,r4,fp
    bca0:	4004943a 	slli	r2,r8,16
    bca4:	25efc83a 	sub	r23,r4,r23
    bca8:	1490b03a 	or	r8,r2,r18
    bcac:	4008d43a 	srli	r4,r8,16
    bcb0:	40ffffcc 	andi	r3,r8,65535
    bcb4:	30c5383a 	mul	r2,r6,r3
    bcb8:	1a47383a 	mul	r3,r3,r9
    bcbc:	310d383a 	mul	r6,r6,r4
    bcc0:	100ad43a 	srli	r5,r2,16
    bcc4:	4913383a 	mul	r9,r9,r4
    bcc8:	1987883a 	add	r3,r3,r6
    bccc:	28c7883a 	add	r3,r5,r3
    bcd0:	1980022e 	bgeu	r3,r6,bcdc <__divdf3+0x574>
    bcd4:	01000074 	movhi	r4,1
    bcd8:	4913883a 	add	r9,r9,r4
    bcdc:	1808d43a 	srli	r4,r3,16
    bce0:	1806943a 	slli	r3,r3,16
    bce4:	10bfffcc 	andi	r2,r2,65535
    bce8:	2253883a 	add	r9,r4,r9
    bcec:	1887883a 	add	r3,r3,r2
    bcf0:	ba403836 	bltu	r23,r9,bdd4 <__divdf3+0x66c>
    bcf4:	ba403626 	beq	r23,r9,bdd0 <__divdf3+0x668>
    bcf8:	42000054 	ori	r8,r8,1
    bcfc:	a880ffc4 	addi	r2,r21,1023
    bd00:	00bf570e 	bge	zero,r2,ba60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ba60>
    bd04:	40c001cc 	andi	r3,r8,7
    bd08:	18000726 	beq	r3,zero,bd28 <__divdf3+0x5c0>
    bd0c:	40c003cc 	andi	r3,r8,15
    bd10:	01000104 	movi	r4,4
    bd14:	19000426 	beq	r3,r4,bd28 <__divdf3+0x5c0>
    bd18:	4107883a 	add	r3,r8,r4
    bd1c:	1a11803a 	cmpltu	r8,r3,r8
    bd20:	8a23883a 	add	r17,r17,r8
    bd24:	1811883a 	mov	r8,r3
    bd28:	88c0402c 	andhi	r3,r17,256
    bd2c:	18000426 	beq	r3,zero,bd40 <__divdf3+0x5d8>
    bd30:	00ffc034 	movhi	r3,65280
    bd34:	18ffffc4 	addi	r3,r3,-1
    bd38:	a8810004 	addi	r2,r21,1024
    bd3c:	88e2703a 	and	r17,r17,r3
    bd40:	00c1ff84 	movi	r3,2046
    bd44:	18bee316 	blt	r3,r2,b8d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b8d4>
    bd48:	8824977a 	slli	r18,r17,29
    bd4c:	4010d0fa 	srli	r8,r8,3
    bd50:	8822927a 	slli	r17,r17,9
    bd54:	1081ffcc 	andi	r2,r2,2047
    bd58:	9224b03a 	or	r18,r18,r8
    bd5c:	880ad33a 	srli	r5,r17,12
    bd60:	98c0004c 	andi	r3,r19,1
    bd64:	003edf06 	br	b8e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b8e4>
    bd68:	8080022c 	andhi	r2,r16,8
    bd6c:	10001226 	beq	r2,zero,bdb8 <__divdf3+0x650>
    bd70:	8880022c 	andhi	r2,r17,8
    bd74:	1000101e 	bne	r2,zero,bdb8 <__divdf3+0x650>
    bd78:	00800434 	movhi	r2,16
    bd7c:	89400234 	orhi	r5,r17,8
    bd80:	10bfffc4 	addi	r2,r2,-1
    bd84:	b007883a 	mov	r3,r22
    bd88:	288a703a 	and	r5,r5,r2
    bd8c:	4025883a 	mov	r18,r8
    bd90:	003f3106 	br	ba58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ba58>
    bd94:	008000c4 	movi	r2,3
    bd98:	3880a626 	beq	r7,r2,c034 <__divdf3+0x8cc>
    bd9c:	00800044 	movi	r2,1
    bda0:	3880521e 	bne	r7,r2,beec <__divdf3+0x784>
    bda4:	b807883a 	mov	r3,r23
    bda8:	0005883a 	mov	r2,zero
    bdac:	000b883a 	mov	r5,zero
    bdb0:	0025883a 	mov	r18,zero
    bdb4:	003ecb06 	br	b8e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b8e4>
    bdb8:	00800434 	movhi	r2,16
    bdbc:	81400234 	orhi	r5,r16,8
    bdc0:	10bfffc4 	addi	r2,r2,-1
    bdc4:	a007883a 	mov	r3,r20
    bdc8:	288a703a 	and	r5,r5,r2
    bdcc:	003f2206 	br	ba58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ba58>
    bdd0:	183fca26 	beq	r3,zero,bcfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bcfc>
    bdd4:	e5ef883a 	add	r23,fp,r23
    bdd8:	40bfffc4 	addi	r2,r8,-1
    bddc:	bf00392e 	bgeu	r23,fp,bec4 <__divdf3+0x75c>
    bde0:	1011883a 	mov	r8,r2
    bde4:	ba7fc41e 	bne	r23,r9,bcf8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bcf8>
    bde8:	b0ffc31e 	bne	r22,r3,bcf8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bcf8>
    bdec:	003fc306 	br	bcfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bcfc>
    bdf0:	143ff604 	addi	r16,r2,-40
    bdf4:	9c20983a 	sll	r16,r19,r16
    bdf8:	0025883a 	mov	r18,zero
    bdfc:	003ee206 	br	b988 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b988>
    be00:	d9800315 	stw	r6,12(sp)
    be04:	d9c00215 	stw	r7,8(sp)
    be08:	000d4c00 	call	d4c0 <__clzsi2>
    be0c:	10800804 	addi	r2,r2,32
    be10:	d9c00217 	ldw	r7,8(sp)
    be14:	d9800317 	ldw	r6,12(sp)
    be18:	003ed106 	br	b960 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b960>
    be1c:	147ff604 	addi	r17,r2,-40
    be20:	3462983a 	sll	r17,r6,r17
    be24:	0011883a 	mov	r8,zero
    be28:	003ef506 	br	ba00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ba00>
    be2c:	3009883a 	mov	r4,r6
    be30:	d9800315 	stw	r6,12(sp)
    be34:	da400115 	stw	r9,4(sp)
    be38:	000d4c00 	call	d4c0 <__clzsi2>
    be3c:	10800804 	addi	r2,r2,32
    be40:	da400117 	ldw	r9,4(sp)
    be44:	d9800317 	ldw	r6,12(sp)
    be48:	003ee306 	br	b9d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b9d8>
    be4c:	85a1883a 	add	r16,r16,r22
    be50:	8585803a 	cmpltu	r2,r16,r22
    be54:	1705883a 	add	r2,r2,fp
    be58:	14a5883a 	add	r18,r2,r18
    be5c:	88bfffc4 	addi	r2,r17,-1
    be60:	e4800c2e 	bgeu	fp,r18,be94 <__divdf3+0x72c>
    be64:	90c03e36 	bltu	r18,r3,bf60 <__divdf3+0x7f8>
    be68:	1c806926 	beq	r3,r18,c010 <__divdf3+0x8a8>
    be6c:	90c7c83a 	sub	r3,r18,r3
    be70:	1023883a 	mov	r17,r2
    be74:	003f5206 	br	bbc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bbc0>
    be78:	923f0436 	bltu	r18,r8,ba8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ba8c>
    be7c:	800897fa 	slli	r4,r16,31
    be80:	9004d07a 	srli	r2,r18,1
    be84:	8006d07a 	srli	r3,r16,1
    be88:	902097fa 	slli	r16,r18,31
    be8c:	20a4b03a 	or	r18,r4,r2
    be90:	003f0106 	br	ba98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ba98>
    be94:	e4bff51e 	bne	fp,r18,be6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700be6c>
    be98:	85bff22e 	bgeu	r16,r22,be64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700be64>
    be9c:	e0c7c83a 	sub	r3,fp,r3
    bea0:	1023883a 	mov	r17,r2
    bea4:	003f4606 	br	bbc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bbc0>
    bea8:	100f883a 	mov	r7,r2
    beac:	003f2b06 	br	bb5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bb5c>
    beb0:	180d883a 	mov	r6,r3
    beb4:	003f1306 	br	bb04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bb04>
    beb8:	813fe436 	bltu	r16,r4,be4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700be4c>
    bebc:	0007883a 	mov	r3,zero
    bec0:	003f3f06 	br	bbc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bbc0>
    bec4:	ba402c36 	bltu	r23,r9,bf78 <__divdf3+0x810>
    bec8:	4dc05426 	beq	r9,r23,c01c <__divdf3+0x8b4>
    becc:	1011883a 	mov	r8,r2
    bed0:	003f8906 	br	bcf8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bcf8>
    bed4:	023fffc4 	movi	r8,-1
    bed8:	003f8806 	br	bcfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bcfc>
    bedc:	1811883a 	mov	r8,r3
    bee0:	003f5406 	br	bc34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bc34>
    bee4:	1025883a 	mov	r18,r2
    bee8:	003f6d06 	br	bca0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bca0>
    beec:	b827883a 	mov	r19,r23
    bef0:	003f8206 	br	bcfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bcfc>
    bef4:	010007c4 	movi	r4,31
    bef8:	20c02616 	blt	r4,r3,bf94 <__divdf3+0x82c>
    befc:	00800804 	movi	r2,32
    bf00:	10c5c83a 	sub	r2,r2,r3
    bf04:	888a983a 	sll	r5,r17,r2
    bf08:	40c8d83a 	srl	r4,r8,r3
    bf0c:	4084983a 	sll	r2,r8,r2
    bf10:	88e2d83a 	srl	r17,r17,r3
    bf14:	2906b03a 	or	r3,r5,r4
    bf18:	1004c03a 	cmpne	r2,r2,zero
    bf1c:	1886b03a 	or	r3,r3,r2
    bf20:	188001cc 	andi	r2,r3,7
    bf24:	10000726 	beq	r2,zero,bf44 <__divdf3+0x7dc>
    bf28:	188003cc 	andi	r2,r3,15
    bf2c:	01000104 	movi	r4,4
    bf30:	11000426 	beq	r2,r4,bf44 <__divdf3+0x7dc>
    bf34:	1805883a 	mov	r2,r3
    bf38:	10c00104 	addi	r3,r2,4
    bf3c:	1885803a 	cmpltu	r2,r3,r2
    bf40:	88a3883a 	add	r17,r17,r2
    bf44:	8880202c 	andhi	r2,r17,128
    bf48:	10002726 	beq	r2,zero,bfe8 <__divdf3+0x880>
    bf4c:	98c0004c 	andi	r3,r19,1
    bf50:	00800044 	movi	r2,1
    bf54:	000b883a 	mov	r5,zero
    bf58:	0025883a 	mov	r18,zero
    bf5c:	003e6106 	br	b8e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b8e4>
    bf60:	85a1883a 	add	r16,r16,r22
    bf64:	8585803a 	cmpltu	r2,r16,r22
    bf68:	1705883a 	add	r2,r2,fp
    bf6c:	14a5883a 	add	r18,r2,r18
    bf70:	8c7fff84 	addi	r17,r17,-2
    bf74:	003f1106 	br	bbbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bbbc>
    bf78:	b589883a 	add	r4,r22,r22
    bf7c:	25ad803a 	cmpltu	r22,r4,r22
    bf80:	b739883a 	add	fp,r22,fp
    bf84:	40bfff84 	addi	r2,r8,-2
    bf88:	bf2f883a 	add	r23,r23,fp
    bf8c:	202d883a 	mov	r22,r4
    bf90:	003f9306 	br	bde0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bde0>
    bf94:	013ff844 	movi	r4,-31
    bf98:	2085c83a 	sub	r2,r4,r2
    bf9c:	8888d83a 	srl	r4,r17,r2
    bfa0:	00800804 	movi	r2,32
    bfa4:	18802126 	beq	r3,r2,c02c <__divdf3+0x8c4>
    bfa8:	00801004 	movi	r2,64
    bfac:	10c5c83a 	sub	r2,r2,r3
    bfb0:	8884983a 	sll	r2,r17,r2
    bfb4:	1204b03a 	or	r2,r2,r8
    bfb8:	1004c03a 	cmpne	r2,r2,zero
    bfbc:	2084b03a 	or	r2,r4,r2
    bfc0:	144001cc 	andi	r17,r2,7
    bfc4:	88000d1e 	bne	r17,zero,bffc <__divdf3+0x894>
    bfc8:	000b883a 	mov	r5,zero
    bfcc:	1024d0fa 	srli	r18,r2,3
    bfd0:	98c0004c 	andi	r3,r19,1
    bfd4:	0005883a 	mov	r2,zero
    bfd8:	9464b03a 	or	r18,r18,r17
    bfdc:	003e4106 	br	b8e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b8e4>
    bfe0:	1007883a 	mov	r3,r2
    bfe4:	0023883a 	mov	r17,zero
    bfe8:	880a927a 	slli	r5,r17,9
    bfec:	1805883a 	mov	r2,r3
    bff0:	8822977a 	slli	r17,r17,29
    bff4:	280ad33a 	srli	r5,r5,12
    bff8:	003ff406 	br	bfcc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bfcc>
    bffc:	10c003cc 	andi	r3,r2,15
    c000:	01000104 	movi	r4,4
    c004:	193ff626 	beq	r3,r4,bfe0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bfe0>
    c008:	0023883a 	mov	r17,zero
    c00c:	003fca06 	br	bf38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bf38>
    c010:	813fd336 	bltu	r16,r4,bf60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bf60>
    c014:	1023883a 	mov	r17,r2
    c018:	003fa806 	br	bebc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bebc>
    c01c:	b0ffd636 	bltu	r22,r3,bf78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bf78>
    c020:	1011883a 	mov	r8,r2
    c024:	b0ff341e 	bne	r22,r3,bcf8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bcf8>
    c028:	003f3406 	br	bcfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bcfc>
    c02c:	0005883a 	mov	r2,zero
    c030:	003fe006 	br	bfb4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bfb4>
    c034:	00800434 	movhi	r2,16
    c038:	89400234 	orhi	r5,r17,8
    c03c:	10bfffc4 	addi	r2,r2,-1
    c040:	b807883a 	mov	r3,r23
    c044:	288a703a 	and	r5,r5,r2
    c048:	4025883a 	mov	r18,r8
    c04c:	003e8206 	br	ba58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ba58>

0000c050 <__eqdf2>:
    c050:	2804d53a 	srli	r2,r5,20
    c054:	3806d53a 	srli	r3,r7,20
    c058:	02000434 	movhi	r8,16
    c05c:	423fffc4 	addi	r8,r8,-1
    c060:	1081ffcc 	andi	r2,r2,2047
    c064:	0281ffc4 	movi	r10,2047
    c068:	2a12703a 	and	r9,r5,r8
    c06c:	18c1ffcc 	andi	r3,r3,2047
    c070:	3a10703a 	and	r8,r7,r8
    c074:	280ad7fa 	srli	r5,r5,31
    c078:	380ed7fa 	srli	r7,r7,31
    c07c:	12801026 	beq	r2,r10,c0c0 <__eqdf2+0x70>
    c080:	0281ffc4 	movi	r10,2047
    c084:	1a800a26 	beq	r3,r10,c0b0 <__eqdf2+0x60>
    c088:	10c00226 	beq	r2,r3,c094 <__eqdf2+0x44>
    c08c:	00800044 	movi	r2,1
    c090:	f800283a 	ret
    c094:	4a3ffd1e 	bne	r9,r8,c08c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c08c>
    c098:	21bffc1e 	bne	r4,r6,c08c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c08c>
    c09c:	29c00c26 	beq	r5,r7,c0d0 <__eqdf2+0x80>
    c0a0:	103ffa1e 	bne	r2,zero,c08c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c08c>
    c0a4:	2244b03a 	or	r2,r4,r9
    c0a8:	1004c03a 	cmpne	r2,r2,zero
    c0ac:	f800283a 	ret
    c0b0:	3214b03a 	or	r10,r6,r8
    c0b4:	503ff426 	beq	r10,zero,c088 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c088>
    c0b8:	00800044 	movi	r2,1
    c0bc:	f800283a 	ret
    c0c0:	2254b03a 	or	r10,r4,r9
    c0c4:	503fee26 	beq	r10,zero,c080 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c080>
    c0c8:	00800044 	movi	r2,1
    c0cc:	f800283a 	ret
    c0d0:	0005883a 	mov	r2,zero
    c0d4:	f800283a 	ret

0000c0d8 <__gedf2>:
    c0d8:	2804d53a 	srli	r2,r5,20
    c0dc:	3806d53a 	srli	r3,r7,20
    c0e0:	02000434 	movhi	r8,16
    c0e4:	423fffc4 	addi	r8,r8,-1
    c0e8:	1081ffcc 	andi	r2,r2,2047
    c0ec:	0241ffc4 	movi	r9,2047
    c0f0:	2a14703a 	and	r10,r5,r8
    c0f4:	18c1ffcc 	andi	r3,r3,2047
    c0f8:	3a10703a 	and	r8,r7,r8
    c0fc:	280ad7fa 	srli	r5,r5,31
    c100:	380ed7fa 	srli	r7,r7,31
    c104:	12401d26 	beq	r2,r9,c17c <__gedf2+0xa4>
    c108:	0241ffc4 	movi	r9,2047
    c10c:	1a401226 	beq	r3,r9,c158 <__gedf2+0x80>
    c110:	1000081e 	bne	r2,zero,c134 <__gedf2+0x5c>
    c114:	2296b03a 	or	r11,r4,r10
    c118:	5813003a 	cmpeq	r9,r11,zero
    c11c:	1800091e 	bne	r3,zero,c144 <__gedf2+0x6c>
    c120:	3218b03a 	or	r12,r6,r8
    c124:	6000071e 	bne	r12,zero,c144 <__gedf2+0x6c>
    c128:	0005883a 	mov	r2,zero
    c12c:	5800101e 	bne	r11,zero,c170 <__gedf2+0x98>
    c130:	f800283a 	ret
    c134:	18000c1e 	bne	r3,zero,c168 <__gedf2+0x90>
    c138:	3212b03a 	or	r9,r6,r8
    c13c:	48000c26 	beq	r9,zero,c170 <__gedf2+0x98>
    c140:	0013883a 	mov	r9,zero
    c144:	39c03fcc 	andi	r7,r7,255
    c148:	48000826 	beq	r9,zero,c16c <__gedf2+0x94>
    c14c:	38000926 	beq	r7,zero,c174 <__gedf2+0x9c>
    c150:	00800044 	movi	r2,1
    c154:	f800283a 	ret
    c158:	3212b03a 	or	r9,r6,r8
    c15c:	483fec26 	beq	r9,zero,c110 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c110>
    c160:	00bfff84 	movi	r2,-2
    c164:	f800283a 	ret
    c168:	39c03fcc 	andi	r7,r7,255
    c16c:	29c00626 	beq	r5,r7,c188 <__gedf2+0xb0>
    c170:	283ff726 	beq	r5,zero,c150 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c150>
    c174:	00bfffc4 	movi	r2,-1
    c178:	f800283a 	ret
    c17c:	2292b03a 	or	r9,r4,r10
    c180:	483fe126 	beq	r9,zero,c108 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c108>
    c184:	003ff606 	br	c160 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c160>
    c188:	18bff916 	blt	r3,r2,c170 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c170>
    c18c:	10c00316 	blt	r2,r3,c19c <__gedf2+0xc4>
    c190:	42bff736 	bltu	r8,r10,c170 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c170>
    c194:	52000326 	beq	r10,r8,c1a4 <__gedf2+0xcc>
    c198:	5200042e 	bgeu	r10,r8,c1ac <__gedf2+0xd4>
    c19c:	283fec1e 	bne	r5,zero,c150 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c150>
    c1a0:	003ff406 	br	c174 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c174>
    c1a4:	313ff236 	bltu	r6,r4,c170 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c170>
    c1a8:	21bffc36 	bltu	r4,r6,c19c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c19c>
    c1ac:	0005883a 	mov	r2,zero
    c1b0:	f800283a 	ret

0000c1b4 <__ledf2>:
    c1b4:	2804d53a 	srli	r2,r5,20
    c1b8:	3810d53a 	srli	r8,r7,20
    c1bc:	00c00434 	movhi	r3,16
    c1c0:	18ffffc4 	addi	r3,r3,-1
    c1c4:	1081ffcc 	andi	r2,r2,2047
    c1c8:	0241ffc4 	movi	r9,2047
    c1cc:	28d4703a 	and	r10,r5,r3
    c1d0:	4201ffcc 	andi	r8,r8,2047
    c1d4:	38c6703a 	and	r3,r7,r3
    c1d8:	280ad7fa 	srli	r5,r5,31
    c1dc:	380ed7fa 	srli	r7,r7,31
    c1e0:	12401f26 	beq	r2,r9,c260 <__ledf2+0xac>
    c1e4:	0241ffc4 	movi	r9,2047
    c1e8:	42401426 	beq	r8,r9,c23c <__ledf2+0x88>
    c1ec:	1000091e 	bne	r2,zero,c214 <__ledf2+0x60>
    c1f0:	2296b03a 	or	r11,r4,r10
    c1f4:	5813003a 	cmpeq	r9,r11,zero
    c1f8:	29403fcc 	andi	r5,r5,255
    c1fc:	40000a1e 	bne	r8,zero,c228 <__ledf2+0x74>
    c200:	30d8b03a 	or	r12,r6,r3
    c204:	6000081e 	bne	r12,zero,c228 <__ledf2+0x74>
    c208:	0005883a 	mov	r2,zero
    c20c:	5800111e 	bne	r11,zero,c254 <__ledf2+0xa0>
    c210:	f800283a 	ret
    c214:	29403fcc 	andi	r5,r5,255
    c218:	40000c1e 	bne	r8,zero,c24c <__ledf2+0x98>
    c21c:	30d2b03a 	or	r9,r6,r3
    c220:	48000c26 	beq	r9,zero,c254 <__ledf2+0xa0>
    c224:	0013883a 	mov	r9,zero
    c228:	39c03fcc 	andi	r7,r7,255
    c22c:	48000826 	beq	r9,zero,c250 <__ledf2+0x9c>
    c230:	38001126 	beq	r7,zero,c278 <__ledf2+0xc4>
    c234:	00800044 	movi	r2,1
    c238:	f800283a 	ret
    c23c:	30d2b03a 	or	r9,r6,r3
    c240:	483fea26 	beq	r9,zero,c1ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c1ec>
    c244:	00800084 	movi	r2,2
    c248:	f800283a 	ret
    c24c:	39c03fcc 	andi	r7,r7,255
    c250:	39400726 	beq	r7,r5,c270 <__ledf2+0xbc>
    c254:	2800081e 	bne	r5,zero,c278 <__ledf2+0xc4>
    c258:	00800044 	movi	r2,1
    c25c:	f800283a 	ret
    c260:	2292b03a 	or	r9,r4,r10
    c264:	483fdf26 	beq	r9,zero,c1e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c1e4>
    c268:	00800084 	movi	r2,2
    c26c:	f800283a 	ret
    c270:	4080030e 	bge	r8,r2,c280 <__ledf2+0xcc>
    c274:	383fef26 	beq	r7,zero,c234 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c234>
    c278:	00bfffc4 	movi	r2,-1
    c27c:	f800283a 	ret
    c280:	123feb16 	blt	r2,r8,c230 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c230>
    c284:	1abff336 	bltu	r3,r10,c254 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c254>
    c288:	50c00326 	beq	r10,r3,c298 <__ledf2+0xe4>
    c28c:	50c0042e 	bgeu	r10,r3,c2a0 <__ledf2+0xec>
    c290:	283fe81e 	bne	r5,zero,c234 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c234>
    c294:	003ff806 	br	c278 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c278>
    c298:	313fee36 	bltu	r6,r4,c254 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c254>
    c29c:	21bffc36 	bltu	r4,r6,c290 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c290>
    c2a0:	0005883a 	mov	r2,zero
    c2a4:	f800283a 	ret

0000c2a8 <__muldf3>:
    c2a8:	defff304 	addi	sp,sp,-52
    c2ac:	2804d53a 	srli	r2,r5,20
    c2b0:	dd800915 	stw	r22,36(sp)
    c2b4:	282cd7fa 	srli	r22,r5,31
    c2b8:	dc000315 	stw	r16,12(sp)
    c2bc:	04000434 	movhi	r16,16
    c2c0:	dd400815 	stw	r21,32(sp)
    c2c4:	dc800515 	stw	r18,20(sp)
    c2c8:	843fffc4 	addi	r16,r16,-1
    c2cc:	dfc00c15 	stw	ra,48(sp)
    c2d0:	df000b15 	stw	fp,44(sp)
    c2d4:	ddc00a15 	stw	r23,40(sp)
    c2d8:	dd000715 	stw	r20,28(sp)
    c2dc:	dcc00615 	stw	r19,24(sp)
    c2e0:	dc400415 	stw	r17,16(sp)
    c2e4:	1481ffcc 	andi	r18,r2,2047
    c2e8:	2c20703a 	and	r16,r5,r16
    c2ec:	b02b883a 	mov	r21,r22
    c2f0:	b2403fcc 	andi	r9,r22,255
    c2f4:	90006026 	beq	r18,zero,c478 <__muldf3+0x1d0>
    c2f8:	0081ffc4 	movi	r2,2047
    c2fc:	2029883a 	mov	r20,r4
    c300:	90803626 	beq	r18,r2,c3dc <__muldf3+0x134>
    c304:	80800434 	orhi	r2,r16,16
    c308:	100490fa 	slli	r2,r2,3
    c30c:	2020d77a 	srli	r16,r4,29
    c310:	202890fa 	slli	r20,r4,3
    c314:	94bf0044 	addi	r18,r18,-1023
    c318:	80a0b03a 	or	r16,r16,r2
    c31c:	0027883a 	mov	r19,zero
    c320:	0039883a 	mov	fp,zero
    c324:	3804d53a 	srli	r2,r7,20
    c328:	382ed7fa 	srli	r23,r7,31
    c32c:	04400434 	movhi	r17,16
    c330:	8c7fffc4 	addi	r17,r17,-1
    c334:	1081ffcc 	andi	r2,r2,2047
    c338:	3011883a 	mov	r8,r6
    c33c:	3c62703a 	and	r17,r7,r17
    c340:	ba803fcc 	andi	r10,r23,255
    c344:	10006d26 	beq	r2,zero,c4fc <__muldf3+0x254>
    c348:	00c1ffc4 	movi	r3,2047
    c34c:	10c06526 	beq	r2,r3,c4e4 <__muldf3+0x23c>
    c350:	88c00434 	orhi	r3,r17,16
    c354:	180690fa 	slli	r3,r3,3
    c358:	3022d77a 	srli	r17,r6,29
    c35c:	301090fa 	slli	r8,r6,3
    c360:	10bf0044 	addi	r2,r2,-1023
    c364:	88e2b03a 	or	r17,r17,r3
    c368:	000b883a 	mov	r5,zero
    c36c:	9085883a 	add	r2,r18,r2
    c370:	2cc8b03a 	or	r4,r5,r19
    c374:	00c003c4 	movi	r3,15
    c378:	bdacf03a 	xor	r22,r23,r22
    c37c:	12c00044 	addi	r11,r2,1
    c380:	19009936 	bltu	r3,r4,c5e8 <__muldf3+0x340>
    c384:	200890ba 	slli	r4,r4,2
    c388:	00c00074 	movhi	r3,1
    c38c:	18f0e704 	addi	r3,r3,-15460
    c390:	20c9883a 	add	r4,r4,r3
    c394:	20c00017 	ldw	r3,0(r4)
    c398:	1800683a 	jmp	r3
    c39c:	0000c5e8 	cmpgeui	zero,zero,791
    c3a0:	0000c3fc 	xorhi	zero,zero,783
    c3a4:	0000c3fc 	xorhi	zero,zero,783
    c3a8:	0000c3f8 	rdprs	zero,zero,783
    c3ac:	0000c5c4 	movi	zero,791
    c3b0:	0000c5c4 	movi	zero,791
    c3b4:	0000c5ac 	andhi	zero,zero,790
    c3b8:	0000c3f8 	rdprs	zero,zero,783
    c3bc:	0000c5c4 	movi	zero,791
    c3c0:	0000c5ac 	andhi	zero,zero,790
    c3c4:	0000c5c4 	movi	zero,791
    c3c8:	0000c3f8 	rdprs	zero,zero,783
    c3cc:	0000c5d4 	movui	zero,791
    c3d0:	0000c5d4 	movui	zero,791
    c3d4:	0000c5d4 	movui	zero,791
    c3d8:	0000c7f0 	cmpltui	zero,zero,799
    c3dc:	2404b03a 	or	r2,r4,r16
    c3e0:	10006f1e 	bne	r2,zero,c5a0 <__muldf3+0x2f8>
    c3e4:	04c00204 	movi	r19,8
    c3e8:	0021883a 	mov	r16,zero
    c3ec:	0029883a 	mov	r20,zero
    c3f0:	07000084 	movi	fp,2
    c3f4:	003fcb06 	br	c324 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c324>
    c3f8:	502d883a 	mov	r22,r10
    c3fc:	00800084 	movi	r2,2
    c400:	28805726 	beq	r5,r2,c560 <__muldf3+0x2b8>
    c404:	008000c4 	movi	r2,3
    c408:	28816626 	beq	r5,r2,c9a4 <__muldf3+0x6fc>
    c40c:	00800044 	movi	r2,1
    c410:	2881411e 	bne	r5,r2,c918 <__muldf3+0x670>
    c414:	b02b883a 	mov	r21,r22
    c418:	0005883a 	mov	r2,zero
    c41c:	000b883a 	mov	r5,zero
    c420:	0029883a 	mov	r20,zero
    c424:	1004953a 	slli	r2,r2,20
    c428:	a8c03fcc 	andi	r3,r21,255
    c42c:	04400434 	movhi	r17,16
    c430:	8c7fffc4 	addi	r17,r17,-1
    c434:	180697fa 	slli	r3,r3,31
    c438:	2c4a703a 	and	r5,r5,r17
    c43c:	288ab03a 	or	r5,r5,r2
    c440:	28c6b03a 	or	r3,r5,r3
    c444:	a005883a 	mov	r2,r20
    c448:	dfc00c17 	ldw	ra,48(sp)
    c44c:	df000b17 	ldw	fp,44(sp)
    c450:	ddc00a17 	ldw	r23,40(sp)
    c454:	dd800917 	ldw	r22,36(sp)
    c458:	dd400817 	ldw	r21,32(sp)
    c45c:	dd000717 	ldw	r20,28(sp)
    c460:	dcc00617 	ldw	r19,24(sp)
    c464:	dc800517 	ldw	r18,20(sp)
    c468:	dc400417 	ldw	r17,16(sp)
    c46c:	dc000317 	ldw	r16,12(sp)
    c470:	dec00d04 	addi	sp,sp,52
    c474:	f800283a 	ret
    c478:	2404b03a 	or	r2,r4,r16
    c47c:	2027883a 	mov	r19,r4
    c480:	10004226 	beq	r2,zero,c58c <__muldf3+0x2e4>
    c484:	8000fc26 	beq	r16,zero,c878 <__muldf3+0x5d0>
    c488:	8009883a 	mov	r4,r16
    c48c:	d9800215 	stw	r6,8(sp)
    c490:	d9c00015 	stw	r7,0(sp)
    c494:	da400115 	stw	r9,4(sp)
    c498:	000d4c00 	call	d4c0 <__clzsi2>
    c49c:	d9800217 	ldw	r6,8(sp)
    c4a0:	d9c00017 	ldw	r7,0(sp)
    c4a4:	da400117 	ldw	r9,4(sp)
    c4a8:	113ffd44 	addi	r4,r2,-11
    c4ac:	00c00704 	movi	r3,28
    c4b0:	1900ed16 	blt	r3,r4,c868 <__muldf3+0x5c0>
    c4b4:	00c00744 	movi	r3,29
    c4b8:	147ffe04 	addi	r17,r2,-8
    c4bc:	1907c83a 	sub	r3,r3,r4
    c4c0:	8460983a 	sll	r16,r16,r17
    c4c4:	98c6d83a 	srl	r3,r19,r3
    c4c8:	9c68983a 	sll	r20,r19,r17
    c4cc:	1c20b03a 	or	r16,r3,r16
    c4d0:	1080fcc4 	addi	r2,r2,1011
    c4d4:	00a5c83a 	sub	r18,zero,r2
    c4d8:	0027883a 	mov	r19,zero
    c4dc:	0039883a 	mov	fp,zero
    c4e0:	003f9006 	br	c324 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c324>
    c4e4:	3446b03a 	or	r3,r6,r17
    c4e8:	1800261e 	bne	r3,zero,c584 <__muldf3+0x2dc>
    c4ec:	0023883a 	mov	r17,zero
    c4f0:	0011883a 	mov	r8,zero
    c4f4:	01400084 	movi	r5,2
    c4f8:	003f9c06 	br	c36c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c36c>
    c4fc:	3446b03a 	or	r3,r6,r17
    c500:	18001c26 	beq	r3,zero,c574 <__muldf3+0x2cc>
    c504:	8800ce26 	beq	r17,zero,c840 <__muldf3+0x598>
    c508:	8809883a 	mov	r4,r17
    c50c:	d9800215 	stw	r6,8(sp)
    c510:	da400115 	stw	r9,4(sp)
    c514:	da800015 	stw	r10,0(sp)
    c518:	000d4c00 	call	d4c0 <__clzsi2>
    c51c:	d9800217 	ldw	r6,8(sp)
    c520:	da400117 	ldw	r9,4(sp)
    c524:	da800017 	ldw	r10,0(sp)
    c528:	113ffd44 	addi	r4,r2,-11
    c52c:	00c00704 	movi	r3,28
    c530:	1900bf16 	blt	r3,r4,c830 <__muldf3+0x588>
    c534:	00c00744 	movi	r3,29
    c538:	123ffe04 	addi	r8,r2,-8
    c53c:	1907c83a 	sub	r3,r3,r4
    c540:	8a22983a 	sll	r17,r17,r8
    c544:	30c6d83a 	srl	r3,r6,r3
    c548:	3210983a 	sll	r8,r6,r8
    c54c:	1c62b03a 	or	r17,r3,r17
    c550:	1080fcc4 	addi	r2,r2,1011
    c554:	0085c83a 	sub	r2,zero,r2
    c558:	000b883a 	mov	r5,zero
    c55c:	003f8306 	br	c36c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c36c>
    c560:	b02b883a 	mov	r21,r22
    c564:	0081ffc4 	movi	r2,2047
    c568:	000b883a 	mov	r5,zero
    c56c:	0029883a 	mov	r20,zero
    c570:	003fac06 	br	c424 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c424>
    c574:	0023883a 	mov	r17,zero
    c578:	0011883a 	mov	r8,zero
    c57c:	01400044 	movi	r5,1
    c580:	003f7a06 	br	c36c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c36c>
    c584:	014000c4 	movi	r5,3
    c588:	003f7806 	br	c36c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c36c>
    c58c:	04c00104 	movi	r19,4
    c590:	0021883a 	mov	r16,zero
    c594:	0029883a 	mov	r20,zero
    c598:	07000044 	movi	fp,1
    c59c:	003f6106 	br	c324 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c324>
    c5a0:	04c00304 	movi	r19,12
    c5a4:	070000c4 	movi	fp,3
    c5a8:	003f5e06 	br	c324 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c324>
    c5ac:	01400434 	movhi	r5,16
    c5b0:	002b883a 	mov	r21,zero
    c5b4:	297fffc4 	addi	r5,r5,-1
    c5b8:	053fffc4 	movi	r20,-1
    c5bc:	0081ffc4 	movi	r2,2047
    c5c0:	003f9806 	br	c424 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c424>
    c5c4:	8023883a 	mov	r17,r16
    c5c8:	a011883a 	mov	r8,r20
    c5cc:	e00b883a 	mov	r5,fp
    c5d0:	003f8a06 	br	c3fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c3fc>
    c5d4:	8023883a 	mov	r17,r16
    c5d8:	a011883a 	mov	r8,r20
    c5dc:	482d883a 	mov	r22,r9
    c5e0:	e00b883a 	mov	r5,fp
    c5e4:	003f8506 	br	c3fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c3fc>
    c5e8:	a00ad43a 	srli	r5,r20,16
    c5ec:	401ad43a 	srli	r13,r8,16
    c5f0:	a53fffcc 	andi	r20,r20,65535
    c5f4:	423fffcc 	andi	r8,r8,65535
    c5f8:	4519383a 	mul	r12,r8,r20
    c5fc:	4147383a 	mul	r3,r8,r5
    c600:	6d09383a 	mul	r4,r13,r20
    c604:	600cd43a 	srli	r6,r12,16
    c608:	2b5d383a 	mul	r14,r5,r13
    c60c:	20c9883a 	add	r4,r4,r3
    c610:	310d883a 	add	r6,r6,r4
    c614:	30c0022e 	bgeu	r6,r3,c620 <__muldf3+0x378>
    c618:	00c00074 	movhi	r3,1
    c61c:	70dd883a 	add	r14,r14,r3
    c620:	8826d43a 	srli	r19,r17,16
    c624:	8bffffcc 	andi	r15,r17,65535
    c628:	7d23383a 	mul	r17,r15,r20
    c62c:	7949383a 	mul	r4,r15,r5
    c630:	9d29383a 	mul	r20,r19,r20
    c634:	8814d43a 	srli	r10,r17,16
    c638:	3012943a 	slli	r9,r6,16
    c63c:	a129883a 	add	r20,r20,r4
    c640:	633fffcc 	andi	r12,r12,65535
    c644:	5515883a 	add	r10,r10,r20
    c648:	3006d43a 	srli	r3,r6,16
    c64c:	4b13883a 	add	r9,r9,r12
    c650:	2ccb383a 	mul	r5,r5,r19
    c654:	5100022e 	bgeu	r10,r4,c660 <__muldf3+0x3b8>
    c658:	01000074 	movhi	r4,1
    c65c:	290b883a 	add	r5,r5,r4
    c660:	802ad43a 	srli	r21,r16,16
    c664:	843fffcc 	andi	r16,r16,65535
    c668:	440d383a 	mul	r6,r8,r16
    c66c:	4565383a 	mul	r18,r8,r21
    c670:	8349383a 	mul	r4,r16,r13
    c674:	500e943a 	slli	r7,r10,16
    c678:	3010d43a 	srli	r8,r6,16
    c67c:	5028d43a 	srli	r20,r10,16
    c680:	2489883a 	add	r4,r4,r18
    c684:	8abfffcc 	andi	r10,r17,65535
    c688:	3a95883a 	add	r10,r7,r10
    c68c:	4119883a 	add	r12,r8,r4
    c690:	a169883a 	add	r20,r20,r5
    c694:	1a87883a 	add	r3,r3,r10
    c698:	6d5b383a 	mul	r13,r13,r21
    c69c:	6480022e 	bgeu	r12,r18,c6a8 <__muldf3+0x400>
    c6a0:	01000074 	movhi	r4,1
    c6a4:	691b883a 	add	r13,r13,r4
    c6a8:	7c25383a 	mul	r18,r15,r16
    c6ac:	7d4b383a 	mul	r5,r15,r21
    c6b0:	84cf383a 	mul	r7,r16,r19
    c6b4:	901ed43a 	srli	r15,r18,16
    c6b8:	6008d43a 	srli	r4,r12,16
    c6bc:	6010943a 	slli	r8,r12,16
    c6c0:	394f883a 	add	r7,r7,r5
    c6c4:	333fffcc 	andi	r12,r6,65535
    c6c8:	79df883a 	add	r15,r15,r7
    c6cc:	235b883a 	add	r13,r4,r13
    c6d0:	9d63383a 	mul	r17,r19,r21
    c6d4:	4309883a 	add	r4,r8,r12
    c6d8:	7940022e 	bgeu	r15,r5,c6e4 <__muldf3+0x43c>
    c6dc:	01400074 	movhi	r5,1
    c6e0:	8963883a 	add	r17,r17,r5
    c6e4:	780a943a 	slli	r5,r15,16
    c6e8:	91bfffcc 	andi	r6,r18,65535
    c6ec:	70c7883a 	add	r3,r14,r3
    c6f0:	298d883a 	add	r6,r5,r6
    c6f4:	1a8f803a 	cmpltu	r7,r3,r10
    c6f8:	350b883a 	add	r5,r6,r20
    c6fc:	20c7883a 	add	r3,r4,r3
    c700:	3955883a 	add	r10,r7,r5
    c704:	1909803a 	cmpltu	r4,r3,r4
    c708:	6a91883a 	add	r8,r13,r10
    c70c:	780cd43a 	srli	r6,r15,16
    c710:	2219883a 	add	r12,r4,r8
    c714:	2d0b803a 	cmpltu	r5,r5,r20
    c718:	51cf803a 	cmpltu	r7,r10,r7
    c71c:	29ceb03a 	or	r7,r5,r7
    c720:	4351803a 	cmpltu	r8,r8,r13
    c724:	610b803a 	cmpltu	r5,r12,r4
    c728:	4148b03a 	or	r4,r8,r5
    c72c:	398f883a 	add	r7,r7,r6
    c730:	3909883a 	add	r4,r7,r4
    c734:	1810927a 	slli	r8,r3,9
    c738:	2449883a 	add	r4,r4,r17
    c73c:	2008927a 	slli	r4,r4,9
    c740:	6022d5fa 	srli	r17,r12,23
    c744:	1806d5fa 	srli	r3,r3,23
    c748:	4252b03a 	or	r9,r8,r9
    c74c:	600a927a 	slli	r5,r12,9
    c750:	4810c03a 	cmpne	r8,r9,zero
    c754:	2462b03a 	or	r17,r4,r17
    c758:	40c6b03a 	or	r3,r8,r3
    c75c:	8900402c 	andhi	r4,r17,256
    c760:	1950b03a 	or	r8,r3,r5
    c764:	20000726 	beq	r4,zero,c784 <__muldf3+0x4dc>
    c768:	4006d07a 	srli	r3,r8,1
    c76c:	880497fa 	slli	r2,r17,31
    c770:	4200004c 	andi	r8,r8,1
    c774:	8822d07a 	srli	r17,r17,1
    c778:	1a10b03a 	or	r8,r3,r8
    c77c:	1210b03a 	or	r8,r2,r8
    c780:	5805883a 	mov	r2,r11
    c784:	1140ffc4 	addi	r5,r2,1023
    c788:	0140440e 	bge	zero,r5,c89c <__muldf3+0x5f4>
    c78c:	40c001cc 	andi	r3,r8,7
    c790:	18000726 	beq	r3,zero,c7b0 <__muldf3+0x508>
    c794:	40c003cc 	andi	r3,r8,15
    c798:	01000104 	movi	r4,4
    c79c:	19000426 	beq	r3,r4,c7b0 <__muldf3+0x508>
    c7a0:	4107883a 	add	r3,r8,r4
    c7a4:	1a11803a 	cmpltu	r8,r3,r8
    c7a8:	8a23883a 	add	r17,r17,r8
    c7ac:	1811883a 	mov	r8,r3
    c7b0:	88c0402c 	andhi	r3,r17,256
    c7b4:	18000426 	beq	r3,zero,c7c8 <__muldf3+0x520>
    c7b8:	11410004 	addi	r5,r2,1024
    c7bc:	00bfc034 	movhi	r2,65280
    c7c0:	10bfffc4 	addi	r2,r2,-1
    c7c4:	88a2703a 	and	r17,r17,r2
    c7c8:	0081ff84 	movi	r2,2046
    c7cc:	117f6416 	blt	r2,r5,c560 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c560>
    c7d0:	8828977a 	slli	r20,r17,29
    c7d4:	4010d0fa 	srli	r8,r8,3
    c7d8:	8822927a 	slli	r17,r17,9
    c7dc:	2881ffcc 	andi	r2,r5,2047
    c7e0:	a228b03a 	or	r20,r20,r8
    c7e4:	880ad33a 	srli	r5,r17,12
    c7e8:	b02b883a 	mov	r21,r22
    c7ec:	003f0d06 	br	c424 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c424>
    c7f0:	8080022c 	andhi	r2,r16,8
    c7f4:	10000926 	beq	r2,zero,c81c <__muldf3+0x574>
    c7f8:	8880022c 	andhi	r2,r17,8
    c7fc:	1000071e 	bne	r2,zero,c81c <__muldf3+0x574>
    c800:	00800434 	movhi	r2,16
    c804:	89400234 	orhi	r5,r17,8
    c808:	10bfffc4 	addi	r2,r2,-1
    c80c:	b82b883a 	mov	r21,r23
    c810:	288a703a 	and	r5,r5,r2
    c814:	4029883a 	mov	r20,r8
    c818:	003f6806 	br	c5bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c5bc>
    c81c:	00800434 	movhi	r2,16
    c820:	81400234 	orhi	r5,r16,8
    c824:	10bfffc4 	addi	r2,r2,-1
    c828:	288a703a 	and	r5,r5,r2
    c82c:	003f6306 	br	c5bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c5bc>
    c830:	147ff604 	addi	r17,r2,-40
    c834:	3462983a 	sll	r17,r6,r17
    c838:	0011883a 	mov	r8,zero
    c83c:	003f4406 	br	c550 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c550>
    c840:	3009883a 	mov	r4,r6
    c844:	d9800215 	stw	r6,8(sp)
    c848:	da400115 	stw	r9,4(sp)
    c84c:	da800015 	stw	r10,0(sp)
    c850:	000d4c00 	call	d4c0 <__clzsi2>
    c854:	10800804 	addi	r2,r2,32
    c858:	da800017 	ldw	r10,0(sp)
    c85c:	da400117 	ldw	r9,4(sp)
    c860:	d9800217 	ldw	r6,8(sp)
    c864:	003f3006 	br	c528 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c528>
    c868:	143ff604 	addi	r16,r2,-40
    c86c:	9c20983a 	sll	r16,r19,r16
    c870:	0029883a 	mov	r20,zero
    c874:	003f1606 	br	c4d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c4d0>
    c878:	d9800215 	stw	r6,8(sp)
    c87c:	d9c00015 	stw	r7,0(sp)
    c880:	da400115 	stw	r9,4(sp)
    c884:	000d4c00 	call	d4c0 <__clzsi2>
    c888:	10800804 	addi	r2,r2,32
    c88c:	da400117 	ldw	r9,4(sp)
    c890:	d9c00017 	ldw	r7,0(sp)
    c894:	d9800217 	ldw	r6,8(sp)
    c898:	003f0306 	br	c4a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c4a8>
    c89c:	00c00044 	movi	r3,1
    c8a0:	1947c83a 	sub	r3,r3,r5
    c8a4:	00800e04 	movi	r2,56
    c8a8:	10feda16 	blt	r2,r3,c414 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c414>
    c8ac:	008007c4 	movi	r2,31
    c8b0:	10c01b16 	blt	r2,r3,c920 <__muldf3+0x678>
    c8b4:	00800804 	movi	r2,32
    c8b8:	10c5c83a 	sub	r2,r2,r3
    c8bc:	888a983a 	sll	r5,r17,r2
    c8c0:	40c8d83a 	srl	r4,r8,r3
    c8c4:	4084983a 	sll	r2,r8,r2
    c8c8:	88e2d83a 	srl	r17,r17,r3
    c8cc:	2906b03a 	or	r3,r5,r4
    c8d0:	1004c03a 	cmpne	r2,r2,zero
    c8d4:	1886b03a 	or	r3,r3,r2
    c8d8:	188001cc 	andi	r2,r3,7
    c8dc:	10000726 	beq	r2,zero,c8fc <__muldf3+0x654>
    c8e0:	188003cc 	andi	r2,r3,15
    c8e4:	01000104 	movi	r4,4
    c8e8:	11000426 	beq	r2,r4,c8fc <__muldf3+0x654>
    c8ec:	1805883a 	mov	r2,r3
    c8f0:	10c00104 	addi	r3,r2,4
    c8f4:	1885803a 	cmpltu	r2,r3,r2
    c8f8:	88a3883a 	add	r17,r17,r2
    c8fc:	8880202c 	andhi	r2,r17,128
    c900:	10001c26 	beq	r2,zero,c974 <__muldf3+0x6cc>
    c904:	b02b883a 	mov	r21,r22
    c908:	00800044 	movi	r2,1
    c90c:	000b883a 	mov	r5,zero
    c910:	0029883a 	mov	r20,zero
    c914:	003ec306 	br	c424 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c424>
    c918:	5805883a 	mov	r2,r11
    c91c:	003f9906 	br	c784 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c784>
    c920:	00bff844 	movi	r2,-31
    c924:	1145c83a 	sub	r2,r2,r5
    c928:	8888d83a 	srl	r4,r17,r2
    c92c:	00800804 	movi	r2,32
    c930:	18801a26 	beq	r3,r2,c99c <__muldf3+0x6f4>
    c934:	00801004 	movi	r2,64
    c938:	10c5c83a 	sub	r2,r2,r3
    c93c:	8884983a 	sll	r2,r17,r2
    c940:	1204b03a 	or	r2,r2,r8
    c944:	1004c03a 	cmpne	r2,r2,zero
    c948:	2084b03a 	or	r2,r4,r2
    c94c:	144001cc 	andi	r17,r2,7
    c950:	88000d1e 	bne	r17,zero,c988 <__muldf3+0x6e0>
    c954:	000b883a 	mov	r5,zero
    c958:	1028d0fa 	srli	r20,r2,3
    c95c:	b02b883a 	mov	r21,r22
    c960:	0005883a 	mov	r2,zero
    c964:	a468b03a 	or	r20,r20,r17
    c968:	003eae06 	br	c424 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c424>
    c96c:	1007883a 	mov	r3,r2
    c970:	0023883a 	mov	r17,zero
    c974:	880a927a 	slli	r5,r17,9
    c978:	1805883a 	mov	r2,r3
    c97c:	8822977a 	slli	r17,r17,29
    c980:	280ad33a 	srli	r5,r5,12
    c984:	003ff406 	br	c958 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c958>
    c988:	10c003cc 	andi	r3,r2,15
    c98c:	01000104 	movi	r4,4
    c990:	193ff626 	beq	r3,r4,c96c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c96c>
    c994:	0023883a 	mov	r17,zero
    c998:	003fd506 	br	c8f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c8f0>
    c99c:	0005883a 	mov	r2,zero
    c9a0:	003fe706 	br	c940 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c940>
    c9a4:	00800434 	movhi	r2,16
    c9a8:	89400234 	orhi	r5,r17,8
    c9ac:	10bfffc4 	addi	r2,r2,-1
    c9b0:	b02b883a 	mov	r21,r22
    c9b4:	288a703a 	and	r5,r5,r2
    c9b8:	4029883a 	mov	r20,r8
    c9bc:	003eff06 	br	c5bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c5bc>

0000c9c0 <__subdf3>:
    c9c0:	02000434 	movhi	r8,16
    c9c4:	423fffc4 	addi	r8,r8,-1
    c9c8:	defffb04 	addi	sp,sp,-20
    c9cc:	2a14703a 	and	r10,r5,r8
    c9d0:	3812d53a 	srli	r9,r7,20
    c9d4:	3a10703a 	and	r8,r7,r8
    c9d8:	2006d77a 	srli	r3,r4,29
    c9dc:	3004d77a 	srli	r2,r6,29
    c9e0:	dc000015 	stw	r16,0(sp)
    c9e4:	501490fa 	slli	r10,r10,3
    c9e8:	2820d53a 	srli	r16,r5,20
    c9ec:	401090fa 	slli	r8,r8,3
    c9f0:	dc800215 	stw	r18,8(sp)
    c9f4:	dc400115 	stw	r17,4(sp)
    c9f8:	dfc00415 	stw	ra,16(sp)
    c9fc:	202290fa 	slli	r17,r4,3
    ca00:	dcc00315 	stw	r19,12(sp)
    ca04:	4a41ffcc 	andi	r9,r9,2047
    ca08:	0101ffc4 	movi	r4,2047
    ca0c:	2824d7fa 	srli	r18,r5,31
    ca10:	8401ffcc 	andi	r16,r16,2047
    ca14:	50c6b03a 	or	r3,r10,r3
    ca18:	380ed7fa 	srli	r7,r7,31
    ca1c:	408ab03a 	or	r5,r8,r2
    ca20:	300c90fa 	slli	r6,r6,3
    ca24:	49009626 	beq	r9,r4,cc80 <__subdf3+0x2c0>
    ca28:	39c0005c 	xori	r7,r7,1
    ca2c:	8245c83a 	sub	r2,r16,r9
    ca30:	3c807426 	beq	r7,r18,cc04 <__subdf3+0x244>
    ca34:	0080af0e 	bge	zero,r2,ccf4 <__subdf3+0x334>
    ca38:	48002a1e 	bne	r9,zero,cae4 <__subdf3+0x124>
    ca3c:	2988b03a 	or	r4,r5,r6
    ca40:	20009a1e 	bne	r4,zero,ccac <__subdf3+0x2ec>
    ca44:	888001cc 	andi	r2,r17,7
    ca48:	10000726 	beq	r2,zero,ca68 <__subdf3+0xa8>
    ca4c:	888003cc 	andi	r2,r17,15
    ca50:	01000104 	movi	r4,4
    ca54:	11000426 	beq	r2,r4,ca68 <__subdf3+0xa8>
    ca58:	890b883a 	add	r5,r17,r4
    ca5c:	2c63803a 	cmpltu	r17,r5,r17
    ca60:	1c47883a 	add	r3,r3,r17
    ca64:	2823883a 	mov	r17,r5
    ca68:	1880202c 	andhi	r2,r3,128
    ca6c:	10005926 	beq	r2,zero,cbd4 <__subdf3+0x214>
    ca70:	84000044 	addi	r16,r16,1
    ca74:	0081ffc4 	movi	r2,2047
    ca78:	8080be26 	beq	r16,r2,cd74 <__subdf3+0x3b4>
    ca7c:	017fe034 	movhi	r5,65408
    ca80:	297fffc4 	addi	r5,r5,-1
    ca84:	1946703a 	and	r3,r3,r5
    ca88:	1804977a 	slli	r2,r3,29
    ca8c:	1806927a 	slli	r3,r3,9
    ca90:	8822d0fa 	srli	r17,r17,3
    ca94:	8401ffcc 	andi	r16,r16,2047
    ca98:	180ad33a 	srli	r5,r3,12
    ca9c:	9100004c 	andi	r4,r18,1
    caa0:	1444b03a 	or	r2,r2,r17
    caa4:	80c1ffcc 	andi	r3,r16,2047
    caa8:	1820953a 	slli	r16,r3,20
    caac:	20c03fcc 	andi	r3,r4,255
    cab0:	180897fa 	slli	r4,r3,31
    cab4:	00c00434 	movhi	r3,16
    cab8:	18ffffc4 	addi	r3,r3,-1
    cabc:	28c6703a 	and	r3,r5,r3
    cac0:	1c06b03a 	or	r3,r3,r16
    cac4:	1906b03a 	or	r3,r3,r4
    cac8:	dfc00417 	ldw	ra,16(sp)
    cacc:	dcc00317 	ldw	r19,12(sp)
    cad0:	dc800217 	ldw	r18,8(sp)
    cad4:	dc400117 	ldw	r17,4(sp)
    cad8:	dc000017 	ldw	r16,0(sp)
    cadc:	dec00504 	addi	sp,sp,20
    cae0:	f800283a 	ret
    cae4:	0101ffc4 	movi	r4,2047
    cae8:	813fd626 	beq	r16,r4,ca44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca44>
    caec:	29402034 	orhi	r5,r5,128
    caf0:	01000e04 	movi	r4,56
    caf4:	2080a316 	blt	r4,r2,cd84 <__subdf3+0x3c4>
    caf8:	010007c4 	movi	r4,31
    cafc:	2080c616 	blt	r4,r2,ce18 <__subdf3+0x458>
    cb00:	01000804 	movi	r4,32
    cb04:	2089c83a 	sub	r4,r4,r2
    cb08:	2910983a 	sll	r8,r5,r4
    cb0c:	308ed83a 	srl	r7,r6,r2
    cb10:	3108983a 	sll	r4,r6,r4
    cb14:	2884d83a 	srl	r2,r5,r2
    cb18:	41ccb03a 	or	r6,r8,r7
    cb1c:	2008c03a 	cmpne	r4,r4,zero
    cb20:	310cb03a 	or	r6,r6,r4
    cb24:	898dc83a 	sub	r6,r17,r6
    cb28:	89a3803a 	cmpltu	r17,r17,r6
    cb2c:	1887c83a 	sub	r3,r3,r2
    cb30:	1c47c83a 	sub	r3,r3,r17
    cb34:	3023883a 	mov	r17,r6
    cb38:	1880202c 	andhi	r2,r3,128
    cb3c:	10002326 	beq	r2,zero,cbcc <__subdf3+0x20c>
    cb40:	04c02034 	movhi	r19,128
    cb44:	9cffffc4 	addi	r19,r19,-1
    cb48:	1ce6703a 	and	r19,r3,r19
    cb4c:	98007a26 	beq	r19,zero,cd38 <__subdf3+0x378>
    cb50:	9809883a 	mov	r4,r19
    cb54:	000d4c00 	call	d4c0 <__clzsi2>
    cb58:	113ffe04 	addi	r4,r2,-8
    cb5c:	00c007c4 	movi	r3,31
    cb60:	19007b16 	blt	r3,r4,cd50 <__subdf3+0x390>
    cb64:	00800804 	movi	r2,32
    cb68:	1105c83a 	sub	r2,r2,r4
    cb6c:	8884d83a 	srl	r2,r17,r2
    cb70:	9906983a 	sll	r3,r19,r4
    cb74:	8922983a 	sll	r17,r17,r4
    cb78:	10c4b03a 	or	r2,r2,r3
    cb7c:	24007816 	blt	r4,r16,cd60 <__subdf3+0x3a0>
    cb80:	2421c83a 	sub	r16,r4,r16
    cb84:	80c00044 	addi	r3,r16,1
    cb88:	010007c4 	movi	r4,31
    cb8c:	20c09516 	blt	r4,r3,cde4 <__subdf3+0x424>
    cb90:	01400804 	movi	r5,32
    cb94:	28cbc83a 	sub	r5,r5,r3
    cb98:	88c8d83a 	srl	r4,r17,r3
    cb9c:	8962983a 	sll	r17,r17,r5
    cba0:	114a983a 	sll	r5,r2,r5
    cba4:	10c6d83a 	srl	r3,r2,r3
    cba8:	8804c03a 	cmpne	r2,r17,zero
    cbac:	290ab03a 	or	r5,r5,r4
    cbb0:	28a2b03a 	or	r17,r5,r2
    cbb4:	0021883a 	mov	r16,zero
    cbb8:	003fa206 	br	ca44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca44>
    cbbc:	2090b03a 	or	r8,r4,r2
    cbc0:	40018e26 	beq	r8,zero,d1fc <__subdf3+0x83c>
    cbc4:	1007883a 	mov	r3,r2
    cbc8:	2023883a 	mov	r17,r4
    cbcc:	888001cc 	andi	r2,r17,7
    cbd0:	103f9e1e 	bne	r2,zero,ca4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca4c>
    cbd4:	1804977a 	slli	r2,r3,29
    cbd8:	8822d0fa 	srli	r17,r17,3
    cbdc:	1810d0fa 	srli	r8,r3,3
    cbe0:	9100004c 	andi	r4,r18,1
    cbe4:	1444b03a 	or	r2,r2,r17
    cbe8:	00c1ffc4 	movi	r3,2047
    cbec:	80c02826 	beq	r16,r3,cc90 <__subdf3+0x2d0>
    cbf0:	01400434 	movhi	r5,16
    cbf4:	297fffc4 	addi	r5,r5,-1
    cbf8:	80e0703a 	and	r16,r16,r3
    cbfc:	414a703a 	and	r5,r8,r5
    cc00:	003fa806 	br	caa4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700caa4>
    cc04:	0080630e 	bge	zero,r2,cd94 <__subdf3+0x3d4>
    cc08:	48003026 	beq	r9,zero,cccc <__subdf3+0x30c>
    cc0c:	0101ffc4 	movi	r4,2047
    cc10:	813f8c26 	beq	r16,r4,ca44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca44>
    cc14:	29402034 	orhi	r5,r5,128
    cc18:	01000e04 	movi	r4,56
    cc1c:	2080a90e 	bge	r4,r2,cec4 <__subdf3+0x504>
    cc20:	298cb03a 	or	r6,r5,r6
    cc24:	3012c03a 	cmpne	r9,r6,zero
    cc28:	0005883a 	mov	r2,zero
    cc2c:	4c53883a 	add	r9,r9,r17
    cc30:	4c63803a 	cmpltu	r17,r9,r17
    cc34:	10c7883a 	add	r3,r2,r3
    cc38:	88c7883a 	add	r3,r17,r3
    cc3c:	4823883a 	mov	r17,r9
    cc40:	1880202c 	andhi	r2,r3,128
    cc44:	1000d026 	beq	r2,zero,cf88 <__subdf3+0x5c8>
    cc48:	84000044 	addi	r16,r16,1
    cc4c:	0081ffc4 	movi	r2,2047
    cc50:	8080fe26 	beq	r16,r2,d04c <__subdf3+0x68c>
    cc54:	00bfe034 	movhi	r2,65408
    cc58:	10bfffc4 	addi	r2,r2,-1
    cc5c:	1886703a 	and	r3,r3,r2
    cc60:	880ad07a 	srli	r5,r17,1
    cc64:	180497fa 	slli	r2,r3,31
    cc68:	8900004c 	andi	r4,r17,1
    cc6c:	2922b03a 	or	r17,r5,r4
    cc70:	1806d07a 	srli	r3,r3,1
    cc74:	1462b03a 	or	r17,r2,r17
    cc78:	3825883a 	mov	r18,r7
    cc7c:	003f7106 	br	ca44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca44>
    cc80:	2984b03a 	or	r2,r5,r6
    cc84:	103f6826 	beq	r2,zero,ca28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca28>
    cc88:	39c03fcc 	andi	r7,r7,255
    cc8c:	003f6706 	br	ca2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca2c>
    cc90:	4086b03a 	or	r3,r8,r2
    cc94:	18015226 	beq	r3,zero,d1e0 <__subdf3+0x820>
    cc98:	00c00434 	movhi	r3,16
    cc9c:	41400234 	orhi	r5,r8,8
    cca0:	18ffffc4 	addi	r3,r3,-1
    cca4:	28ca703a 	and	r5,r5,r3
    cca8:	003f7e06 	br	caa4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700caa4>
    ccac:	10bfffc4 	addi	r2,r2,-1
    ccb0:	1000491e 	bne	r2,zero,cdd8 <__subdf3+0x418>
    ccb4:	898fc83a 	sub	r7,r17,r6
    ccb8:	89e3803a 	cmpltu	r17,r17,r7
    ccbc:	1947c83a 	sub	r3,r3,r5
    ccc0:	1c47c83a 	sub	r3,r3,r17
    ccc4:	3823883a 	mov	r17,r7
    ccc8:	003f9b06 	br	cb38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb38>
    cccc:	2988b03a 	or	r4,r5,r6
    ccd0:	203f5c26 	beq	r4,zero,ca44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca44>
    ccd4:	10bfffc4 	addi	r2,r2,-1
    ccd8:	1000931e 	bne	r2,zero,cf28 <__subdf3+0x568>
    ccdc:	898d883a 	add	r6,r17,r6
    cce0:	3463803a 	cmpltu	r17,r6,r17
    cce4:	1947883a 	add	r3,r3,r5
    cce8:	88c7883a 	add	r3,r17,r3
    ccec:	3023883a 	mov	r17,r6
    ccf0:	003fd306 	br	cc40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cc40>
    ccf4:	1000541e 	bne	r2,zero,ce48 <__subdf3+0x488>
    ccf8:	80800044 	addi	r2,r16,1
    ccfc:	1081ffcc 	andi	r2,r2,2047
    cd00:	01000044 	movi	r4,1
    cd04:	2080a20e 	bge	r4,r2,cf90 <__subdf3+0x5d0>
    cd08:	8989c83a 	sub	r4,r17,r6
    cd0c:	8905803a 	cmpltu	r2,r17,r4
    cd10:	1967c83a 	sub	r19,r3,r5
    cd14:	98a7c83a 	sub	r19,r19,r2
    cd18:	9880202c 	andhi	r2,r19,128
    cd1c:	10006326 	beq	r2,zero,ceac <__subdf3+0x4ec>
    cd20:	3463c83a 	sub	r17,r6,r17
    cd24:	28c7c83a 	sub	r3,r5,r3
    cd28:	344d803a 	cmpltu	r6,r6,r17
    cd2c:	19a7c83a 	sub	r19,r3,r6
    cd30:	3825883a 	mov	r18,r7
    cd34:	983f861e 	bne	r19,zero,cb50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb50>
    cd38:	8809883a 	mov	r4,r17
    cd3c:	000d4c00 	call	d4c0 <__clzsi2>
    cd40:	10800804 	addi	r2,r2,32
    cd44:	113ffe04 	addi	r4,r2,-8
    cd48:	00c007c4 	movi	r3,31
    cd4c:	193f850e 	bge	r3,r4,cb64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb64>
    cd50:	10bff604 	addi	r2,r2,-40
    cd54:	8884983a 	sll	r2,r17,r2
    cd58:	0023883a 	mov	r17,zero
    cd5c:	243f880e 	bge	r4,r16,cb80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb80>
    cd60:	00ffe034 	movhi	r3,65408
    cd64:	18ffffc4 	addi	r3,r3,-1
    cd68:	8121c83a 	sub	r16,r16,r4
    cd6c:	10c6703a 	and	r3,r2,r3
    cd70:	003f3406 	br	ca44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca44>
    cd74:	9100004c 	andi	r4,r18,1
    cd78:	000b883a 	mov	r5,zero
    cd7c:	0005883a 	mov	r2,zero
    cd80:	003f4806 	br	caa4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700caa4>
    cd84:	298cb03a 	or	r6,r5,r6
    cd88:	300cc03a 	cmpne	r6,r6,zero
    cd8c:	0005883a 	mov	r2,zero
    cd90:	003f6406 	br	cb24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb24>
    cd94:	10009a1e 	bne	r2,zero,d000 <__subdf3+0x640>
    cd98:	82400044 	addi	r9,r16,1
    cd9c:	4881ffcc 	andi	r2,r9,2047
    cda0:	02800044 	movi	r10,1
    cda4:	5080670e 	bge	r10,r2,cf44 <__subdf3+0x584>
    cda8:	0081ffc4 	movi	r2,2047
    cdac:	4880af26 	beq	r9,r2,d06c <__subdf3+0x6ac>
    cdb0:	898d883a 	add	r6,r17,r6
    cdb4:	1945883a 	add	r2,r3,r5
    cdb8:	3447803a 	cmpltu	r3,r6,r17
    cdbc:	1887883a 	add	r3,r3,r2
    cdc0:	182297fa 	slli	r17,r3,31
    cdc4:	300cd07a 	srli	r6,r6,1
    cdc8:	1806d07a 	srli	r3,r3,1
    cdcc:	4821883a 	mov	r16,r9
    cdd0:	89a2b03a 	or	r17,r17,r6
    cdd4:	003f1b06 	br	ca44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca44>
    cdd8:	0101ffc4 	movi	r4,2047
    cddc:	813f441e 	bne	r16,r4,caf0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700caf0>
    cde0:	003f1806 	br	ca44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca44>
    cde4:	843ff844 	addi	r16,r16,-31
    cde8:	01400804 	movi	r5,32
    cdec:	1408d83a 	srl	r4,r2,r16
    cdf0:	19405026 	beq	r3,r5,cf34 <__subdf3+0x574>
    cdf4:	01401004 	movi	r5,64
    cdf8:	28c7c83a 	sub	r3,r5,r3
    cdfc:	10c4983a 	sll	r2,r2,r3
    ce00:	88a2b03a 	or	r17,r17,r2
    ce04:	8822c03a 	cmpne	r17,r17,zero
    ce08:	2462b03a 	or	r17,r4,r17
    ce0c:	0007883a 	mov	r3,zero
    ce10:	0021883a 	mov	r16,zero
    ce14:	003f6d06 	br	cbcc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cbcc>
    ce18:	11fff804 	addi	r7,r2,-32
    ce1c:	01000804 	movi	r4,32
    ce20:	29ced83a 	srl	r7,r5,r7
    ce24:	11004526 	beq	r2,r4,cf3c <__subdf3+0x57c>
    ce28:	01001004 	movi	r4,64
    ce2c:	2089c83a 	sub	r4,r4,r2
    ce30:	2904983a 	sll	r2,r5,r4
    ce34:	118cb03a 	or	r6,r2,r6
    ce38:	300cc03a 	cmpne	r6,r6,zero
    ce3c:	398cb03a 	or	r6,r7,r6
    ce40:	0005883a 	mov	r2,zero
    ce44:	003f3706 	br	cb24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb24>
    ce48:	80002a26 	beq	r16,zero,cef4 <__subdf3+0x534>
    ce4c:	0101ffc4 	movi	r4,2047
    ce50:	49006626 	beq	r9,r4,cfec <__subdf3+0x62c>
    ce54:	0085c83a 	sub	r2,zero,r2
    ce58:	18c02034 	orhi	r3,r3,128
    ce5c:	01000e04 	movi	r4,56
    ce60:	20807e16 	blt	r4,r2,d05c <__subdf3+0x69c>
    ce64:	010007c4 	movi	r4,31
    ce68:	2080e716 	blt	r4,r2,d208 <__subdf3+0x848>
    ce6c:	01000804 	movi	r4,32
    ce70:	2089c83a 	sub	r4,r4,r2
    ce74:	1914983a 	sll	r10,r3,r4
    ce78:	8890d83a 	srl	r8,r17,r2
    ce7c:	8908983a 	sll	r4,r17,r4
    ce80:	1884d83a 	srl	r2,r3,r2
    ce84:	5222b03a 	or	r17,r10,r8
    ce88:	2006c03a 	cmpne	r3,r4,zero
    ce8c:	88e2b03a 	or	r17,r17,r3
    ce90:	3463c83a 	sub	r17,r6,r17
    ce94:	2885c83a 	sub	r2,r5,r2
    ce98:	344d803a 	cmpltu	r6,r6,r17
    ce9c:	1187c83a 	sub	r3,r2,r6
    cea0:	4821883a 	mov	r16,r9
    cea4:	3825883a 	mov	r18,r7
    cea8:	003f2306 	br	cb38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb38>
    ceac:	24d0b03a 	or	r8,r4,r19
    ceb0:	40001b1e 	bne	r8,zero,cf20 <__subdf3+0x560>
    ceb4:	0005883a 	mov	r2,zero
    ceb8:	0009883a 	mov	r4,zero
    cebc:	0021883a 	mov	r16,zero
    cec0:	003f4906 	br	cbe8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cbe8>
    cec4:	010007c4 	movi	r4,31
    cec8:	20803a16 	blt	r4,r2,cfb4 <__subdf3+0x5f4>
    cecc:	01000804 	movi	r4,32
    ced0:	2089c83a 	sub	r4,r4,r2
    ced4:	2912983a 	sll	r9,r5,r4
    ced8:	3090d83a 	srl	r8,r6,r2
    cedc:	3108983a 	sll	r4,r6,r4
    cee0:	2884d83a 	srl	r2,r5,r2
    cee4:	4a12b03a 	or	r9,r9,r8
    cee8:	2008c03a 	cmpne	r4,r4,zero
    ceec:	4912b03a 	or	r9,r9,r4
    cef0:	003f4e06 	br	cc2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cc2c>
    cef4:	1c48b03a 	or	r4,r3,r17
    cef8:	20003c26 	beq	r4,zero,cfec <__subdf3+0x62c>
    cefc:	0084303a 	nor	r2,zero,r2
    cf00:	1000381e 	bne	r2,zero,cfe4 <__subdf3+0x624>
    cf04:	3463c83a 	sub	r17,r6,r17
    cf08:	28c5c83a 	sub	r2,r5,r3
    cf0c:	344d803a 	cmpltu	r6,r6,r17
    cf10:	1187c83a 	sub	r3,r2,r6
    cf14:	4821883a 	mov	r16,r9
    cf18:	3825883a 	mov	r18,r7
    cf1c:	003f0606 	br	cb38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb38>
    cf20:	2023883a 	mov	r17,r4
    cf24:	003f0906 	br	cb4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb4c>
    cf28:	0101ffc4 	movi	r4,2047
    cf2c:	813f3a1e 	bne	r16,r4,cc18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cc18>
    cf30:	003ec406 	br	ca44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca44>
    cf34:	0005883a 	mov	r2,zero
    cf38:	003fb106 	br	ce00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ce00>
    cf3c:	0005883a 	mov	r2,zero
    cf40:	003fbc06 	br	ce34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ce34>
    cf44:	1c44b03a 	or	r2,r3,r17
    cf48:	80008e1e 	bne	r16,zero,d184 <__subdf3+0x7c4>
    cf4c:	1000c826 	beq	r2,zero,d270 <__subdf3+0x8b0>
    cf50:	2984b03a 	or	r2,r5,r6
    cf54:	103ebb26 	beq	r2,zero,ca44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca44>
    cf58:	8989883a 	add	r4,r17,r6
    cf5c:	1945883a 	add	r2,r3,r5
    cf60:	2447803a 	cmpltu	r3,r4,r17
    cf64:	1887883a 	add	r3,r3,r2
    cf68:	1880202c 	andhi	r2,r3,128
    cf6c:	2023883a 	mov	r17,r4
    cf70:	103f1626 	beq	r2,zero,cbcc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cbcc>
    cf74:	00bfe034 	movhi	r2,65408
    cf78:	10bfffc4 	addi	r2,r2,-1
    cf7c:	5021883a 	mov	r16,r10
    cf80:	1886703a 	and	r3,r3,r2
    cf84:	003eaf06 	br	ca44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca44>
    cf88:	3825883a 	mov	r18,r7
    cf8c:	003f0f06 	br	cbcc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cbcc>
    cf90:	1c44b03a 	or	r2,r3,r17
    cf94:	8000251e 	bne	r16,zero,d02c <__subdf3+0x66c>
    cf98:	1000661e 	bne	r2,zero,d134 <__subdf3+0x774>
    cf9c:	2990b03a 	or	r8,r5,r6
    cfa0:	40009626 	beq	r8,zero,d1fc <__subdf3+0x83c>
    cfa4:	2807883a 	mov	r3,r5
    cfa8:	3023883a 	mov	r17,r6
    cfac:	3825883a 	mov	r18,r7
    cfb0:	003ea406 	br	ca44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca44>
    cfb4:	127ff804 	addi	r9,r2,-32
    cfb8:	01000804 	movi	r4,32
    cfbc:	2a52d83a 	srl	r9,r5,r9
    cfc0:	11008c26 	beq	r2,r4,d1f4 <__subdf3+0x834>
    cfc4:	01001004 	movi	r4,64
    cfc8:	2085c83a 	sub	r2,r4,r2
    cfcc:	2884983a 	sll	r2,r5,r2
    cfd0:	118cb03a 	or	r6,r2,r6
    cfd4:	300cc03a 	cmpne	r6,r6,zero
    cfd8:	4992b03a 	or	r9,r9,r6
    cfdc:	0005883a 	mov	r2,zero
    cfe0:	003f1206 	br	cc2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cc2c>
    cfe4:	0101ffc4 	movi	r4,2047
    cfe8:	493f9c1e 	bne	r9,r4,ce5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ce5c>
    cfec:	2807883a 	mov	r3,r5
    cff0:	3023883a 	mov	r17,r6
    cff4:	4821883a 	mov	r16,r9
    cff8:	3825883a 	mov	r18,r7
    cffc:	003e9106 	br	ca44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca44>
    d000:	80001f1e 	bne	r16,zero,d080 <__subdf3+0x6c0>
    d004:	1c48b03a 	or	r4,r3,r17
    d008:	20005a26 	beq	r4,zero,d174 <__subdf3+0x7b4>
    d00c:	0084303a 	nor	r2,zero,r2
    d010:	1000561e 	bne	r2,zero,d16c <__subdf3+0x7ac>
    d014:	89a3883a 	add	r17,r17,r6
    d018:	1945883a 	add	r2,r3,r5
    d01c:	898d803a 	cmpltu	r6,r17,r6
    d020:	3087883a 	add	r3,r6,r2
    d024:	4821883a 	mov	r16,r9
    d028:	003f0506 	br	cc40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cc40>
    d02c:	10002b1e 	bne	r2,zero,d0dc <__subdf3+0x71c>
    d030:	2984b03a 	or	r2,r5,r6
    d034:	10008026 	beq	r2,zero,d238 <__subdf3+0x878>
    d038:	2807883a 	mov	r3,r5
    d03c:	3023883a 	mov	r17,r6
    d040:	3825883a 	mov	r18,r7
    d044:	0401ffc4 	movi	r16,2047
    d048:	003e7e06 	br	ca44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca44>
    d04c:	3809883a 	mov	r4,r7
    d050:	0011883a 	mov	r8,zero
    d054:	0005883a 	mov	r2,zero
    d058:	003ee306 	br	cbe8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cbe8>
    d05c:	1c62b03a 	or	r17,r3,r17
    d060:	8822c03a 	cmpne	r17,r17,zero
    d064:	0005883a 	mov	r2,zero
    d068:	003f8906 	br	ce90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ce90>
    d06c:	3809883a 	mov	r4,r7
    d070:	4821883a 	mov	r16,r9
    d074:	0011883a 	mov	r8,zero
    d078:	0005883a 	mov	r2,zero
    d07c:	003eda06 	br	cbe8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cbe8>
    d080:	0101ffc4 	movi	r4,2047
    d084:	49003b26 	beq	r9,r4,d174 <__subdf3+0x7b4>
    d088:	0085c83a 	sub	r2,zero,r2
    d08c:	18c02034 	orhi	r3,r3,128
    d090:	01000e04 	movi	r4,56
    d094:	20806e16 	blt	r4,r2,d250 <__subdf3+0x890>
    d098:	010007c4 	movi	r4,31
    d09c:	20807716 	blt	r4,r2,d27c <__subdf3+0x8bc>
    d0a0:	01000804 	movi	r4,32
    d0a4:	2089c83a 	sub	r4,r4,r2
    d0a8:	1914983a 	sll	r10,r3,r4
    d0ac:	8890d83a 	srl	r8,r17,r2
    d0b0:	8908983a 	sll	r4,r17,r4
    d0b4:	1884d83a 	srl	r2,r3,r2
    d0b8:	5222b03a 	or	r17,r10,r8
    d0bc:	2006c03a 	cmpne	r3,r4,zero
    d0c0:	88e2b03a 	or	r17,r17,r3
    d0c4:	89a3883a 	add	r17,r17,r6
    d0c8:	1145883a 	add	r2,r2,r5
    d0cc:	898d803a 	cmpltu	r6,r17,r6
    d0d0:	3087883a 	add	r3,r6,r2
    d0d4:	4821883a 	mov	r16,r9
    d0d8:	003ed906 	br	cc40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cc40>
    d0dc:	2984b03a 	or	r2,r5,r6
    d0e0:	10004226 	beq	r2,zero,d1ec <__subdf3+0x82c>
    d0e4:	1808d0fa 	srli	r4,r3,3
    d0e8:	8822d0fa 	srli	r17,r17,3
    d0ec:	1806977a 	slli	r3,r3,29
    d0f0:	2080022c 	andhi	r2,r4,8
    d0f4:	1c62b03a 	or	r17,r3,r17
    d0f8:	10000826 	beq	r2,zero,d11c <__subdf3+0x75c>
    d0fc:	2812d0fa 	srli	r9,r5,3
    d100:	4880022c 	andhi	r2,r9,8
    d104:	1000051e 	bne	r2,zero,d11c <__subdf3+0x75c>
    d108:	300cd0fa 	srli	r6,r6,3
    d10c:	2804977a 	slli	r2,r5,29
    d110:	4809883a 	mov	r4,r9
    d114:	3825883a 	mov	r18,r7
    d118:	11a2b03a 	or	r17,r2,r6
    d11c:	8806d77a 	srli	r3,r17,29
    d120:	200890fa 	slli	r4,r4,3
    d124:	882290fa 	slli	r17,r17,3
    d128:	0401ffc4 	movi	r16,2047
    d12c:	1906b03a 	or	r3,r3,r4
    d130:	003e4406 	br	ca44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca44>
    d134:	2984b03a 	or	r2,r5,r6
    d138:	103e4226 	beq	r2,zero,ca44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca44>
    d13c:	8989c83a 	sub	r4,r17,r6
    d140:	8911803a 	cmpltu	r8,r17,r4
    d144:	1945c83a 	sub	r2,r3,r5
    d148:	1205c83a 	sub	r2,r2,r8
    d14c:	1200202c 	andhi	r8,r2,128
    d150:	403e9a26 	beq	r8,zero,cbbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cbbc>
    d154:	3463c83a 	sub	r17,r6,r17
    d158:	28c5c83a 	sub	r2,r5,r3
    d15c:	344d803a 	cmpltu	r6,r6,r17
    d160:	1187c83a 	sub	r3,r2,r6
    d164:	3825883a 	mov	r18,r7
    d168:	003e3606 	br	ca44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca44>
    d16c:	0101ffc4 	movi	r4,2047
    d170:	493fc71e 	bne	r9,r4,d090 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d090>
    d174:	2807883a 	mov	r3,r5
    d178:	3023883a 	mov	r17,r6
    d17c:	4821883a 	mov	r16,r9
    d180:	003e3006 	br	ca44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca44>
    d184:	10003626 	beq	r2,zero,d260 <__subdf3+0x8a0>
    d188:	2984b03a 	or	r2,r5,r6
    d18c:	10001726 	beq	r2,zero,d1ec <__subdf3+0x82c>
    d190:	1808d0fa 	srli	r4,r3,3
    d194:	8822d0fa 	srli	r17,r17,3
    d198:	1806977a 	slli	r3,r3,29
    d19c:	2080022c 	andhi	r2,r4,8
    d1a0:	1c62b03a 	or	r17,r3,r17
    d1a4:	10000726 	beq	r2,zero,d1c4 <__subdf3+0x804>
    d1a8:	2812d0fa 	srli	r9,r5,3
    d1ac:	4880022c 	andhi	r2,r9,8
    d1b0:	1000041e 	bne	r2,zero,d1c4 <__subdf3+0x804>
    d1b4:	300cd0fa 	srli	r6,r6,3
    d1b8:	2804977a 	slli	r2,r5,29
    d1bc:	4809883a 	mov	r4,r9
    d1c0:	11a2b03a 	or	r17,r2,r6
    d1c4:	8806d77a 	srli	r3,r17,29
    d1c8:	200890fa 	slli	r4,r4,3
    d1cc:	882290fa 	slli	r17,r17,3
    d1d0:	3825883a 	mov	r18,r7
    d1d4:	1906b03a 	or	r3,r3,r4
    d1d8:	0401ffc4 	movi	r16,2047
    d1dc:	003e1906 	br	ca44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca44>
    d1e0:	000b883a 	mov	r5,zero
    d1e4:	0005883a 	mov	r2,zero
    d1e8:	003e2e06 	br	caa4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700caa4>
    d1ec:	0401ffc4 	movi	r16,2047
    d1f0:	003e1406 	br	ca44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca44>
    d1f4:	0005883a 	mov	r2,zero
    d1f8:	003f7506 	br	cfd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cfd0>
    d1fc:	0005883a 	mov	r2,zero
    d200:	0009883a 	mov	r4,zero
    d204:	003e7806 	br	cbe8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cbe8>
    d208:	123ff804 	addi	r8,r2,-32
    d20c:	01000804 	movi	r4,32
    d210:	1a10d83a 	srl	r8,r3,r8
    d214:	11002526 	beq	r2,r4,d2ac <__subdf3+0x8ec>
    d218:	01001004 	movi	r4,64
    d21c:	2085c83a 	sub	r2,r4,r2
    d220:	1884983a 	sll	r2,r3,r2
    d224:	1444b03a 	or	r2,r2,r17
    d228:	1004c03a 	cmpne	r2,r2,zero
    d22c:	40a2b03a 	or	r17,r8,r2
    d230:	0005883a 	mov	r2,zero
    d234:	003f1606 	br	ce90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ce90>
    d238:	02000434 	movhi	r8,16
    d23c:	0009883a 	mov	r4,zero
    d240:	423fffc4 	addi	r8,r8,-1
    d244:	00bfffc4 	movi	r2,-1
    d248:	0401ffc4 	movi	r16,2047
    d24c:	003e6606 	br	cbe8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cbe8>
    d250:	1c62b03a 	or	r17,r3,r17
    d254:	8822c03a 	cmpne	r17,r17,zero
    d258:	0005883a 	mov	r2,zero
    d25c:	003f9906 	br	d0c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d0c4>
    d260:	2807883a 	mov	r3,r5
    d264:	3023883a 	mov	r17,r6
    d268:	0401ffc4 	movi	r16,2047
    d26c:	003df506 	br	ca44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca44>
    d270:	2807883a 	mov	r3,r5
    d274:	3023883a 	mov	r17,r6
    d278:	003df206 	br	ca44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca44>
    d27c:	123ff804 	addi	r8,r2,-32
    d280:	01000804 	movi	r4,32
    d284:	1a10d83a 	srl	r8,r3,r8
    d288:	11000a26 	beq	r2,r4,d2b4 <__subdf3+0x8f4>
    d28c:	01001004 	movi	r4,64
    d290:	2085c83a 	sub	r2,r4,r2
    d294:	1884983a 	sll	r2,r3,r2
    d298:	1444b03a 	or	r2,r2,r17
    d29c:	1004c03a 	cmpne	r2,r2,zero
    d2a0:	40a2b03a 	or	r17,r8,r2
    d2a4:	0005883a 	mov	r2,zero
    d2a8:	003f8606 	br	d0c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d0c4>
    d2ac:	0005883a 	mov	r2,zero
    d2b0:	003fdc06 	br	d224 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d224>
    d2b4:	0005883a 	mov	r2,zero
    d2b8:	003ff706 	br	d298 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d298>

0000d2bc <__fixdfsi>:
    d2bc:	280cd53a 	srli	r6,r5,20
    d2c0:	00c00434 	movhi	r3,16
    d2c4:	18ffffc4 	addi	r3,r3,-1
    d2c8:	3181ffcc 	andi	r6,r6,2047
    d2cc:	01c0ff84 	movi	r7,1022
    d2d0:	28c6703a 	and	r3,r5,r3
    d2d4:	280ad7fa 	srli	r5,r5,31
    d2d8:	3980120e 	bge	r7,r6,d324 <__fixdfsi+0x68>
    d2dc:	00810744 	movi	r2,1053
    d2e0:	11800c16 	blt	r2,r6,d314 <__fixdfsi+0x58>
    d2e4:	00810cc4 	movi	r2,1075
    d2e8:	1185c83a 	sub	r2,r2,r6
    d2ec:	01c007c4 	movi	r7,31
    d2f0:	18c00434 	orhi	r3,r3,16
    d2f4:	38800d16 	blt	r7,r2,d32c <__fixdfsi+0x70>
    d2f8:	31befb44 	addi	r6,r6,-1043
    d2fc:	2084d83a 	srl	r2,r4,r2
    d300:	1986983a 	sll	r3,r3,r6
    d304:	1884b03a 	or	r2,r3,r2
    d308:	28000726 	beq	r5,zero,d328 <__fixdfsi+0x6c>
    d30c:	0085c83a 	sub	r2,zero,r2
    d310:	f800283a 	ret
    d314:	00a00034 	movhi	r2,32768
    d318:	10bfffc4 	addi	r2,r2,-1
    d31c:	2885883a 	add	r2,r5,r2
    d320:	f800283a 	ret
    d324:	0005883a 	mov	r2,zero
    d328:	f800283a 	ret
    d32c:	008104c4 	movi	r2,1043
    d330:	1185c83a 	sub	r2,r2,r6
    d334:	1884d83a 	srl	r2,r3,r2
    d338:	003ff306 	br	d308 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d308>

0000d33c <__floatsidf>:
    d33c:	defffd04 	addi	sp,sp,-12
    d340:	dfc00215 	stw	ra,8(sp)
    d344:	dc400115 	stw	r17,4(sp)
    d348:	dc000015 	stw	r16,0(sp)
    d34c:	20002b26 	beq	r4,zero,d3fc <__floatsidf+0xc0>
    d350:	2023883a 	mov	r17,r4
    d354:	2020d7fa 	srli	r16,r4,31
    d358:	20002d16 	blt	r4,zero,d410 <__floatsidf+0xd4>
    d35c:	8809883a 	mov	r4,r17
    d360:	000d4c00 	call	d4c0 <__clzsi2>
    d364:	01410784 	movi	r5,1054
    d368:	288bc83a 	sub	r5,r5,r2
    d36c:	01010cc4 	movi	r4,1075
    d370:	2149c83a 	sub	r4,r4,r5
    d374:	00c007c4 	movi	r3,31
    d378:	1900160e 	bge	r3,r4,d3d4 <__floatsidf+0x98>
    d37c:	00c104c4 	movi	r3,1043
    d380:	1947c83a 	sub	r3,r3,r5
    d384:	88c6983a 	sll	r3,r17,r3
    d388:	00800434 	movhi	r2,16
    d38c:	10bfffc4 	addi	r2,r2,-1
    d390:	1886703a 	and	r3,r3,r2
    d394:	2941ffcc 	andi	r5,r5,2047
    d398:	800d883a 	mov	r6,r16
    d39c:	0005883a 	mov	r2,zero
    d3a0:	280a953a 	slli	r5,r5,20
    d3a4:	31803fcc 	andi	r6,r6,255
    d3a8:	01000434 	movhi	r4,16
    d3ac:	300c97fa 	slli	r6,r6,31
    d3b0:	213fffc4 	addi	r4,r4,-1
    d3b4:	1906703a 	and	r3,r3,r4
    d3b8:	1946b03a 	or	r3,r3,r5
    d3bc:	1986b03a 	or	r3,r3,r6
    d3c0:	dfc00217 	ldw	ra,8(sp)
    d3c4:	dc400117 	ldw	r17,4(sp)
    d3c8:	dc000017 	ldw	r16,0(sp)
    d3cc:	dec00304 	addi	sp,sp,12
    d3d0:	f800283a 	ret
    d3d4:	00c002c4 	movi	r3,11
    d3d8:	1887c83a 	sub	r3,r3,r2
    d3dc:	88c6d83a 	srl	r3,r17,r3
    d3e0:	8904983a 	sll	r2,r17,r4
    d3e4:	01000434 	movhi	r4,16
    d3e8:	213fffc4 	addi	r4,r4,-1
    d3ec:	2941ffcc 	andi	r5,r5,2047
    d3f0:	1906703a 	and	r3,r3,r4
    d3f4:	800d883a 	mov	r6,r16
    d3f8:	003fe906 	br	d3a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d3a0>
    d3fc:	000d883a 	mov	r6,zero
    d400:	000b883a 	mov	r5,zero
    d404:	0007883a 	mov	r3,zero
    d408:	0005883a 	mov	r2,zero
    d40c:	003fe406 	br	d3a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d3a0>
    d410:	0123c83a 	sub	r17,zero,r4
    d414:	003fd106 	br	d35c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d35c>

0000d418 <__floatunsidf>:
    d418:	defffe04 	addi	sp,sp,-8
    d41c:	dc000015 	stw	r16,0(sp)
    d420:	dfc00115 	stw	ra,4(sp)
    d424:	2021883a 	mov	r16,r4
    d428:	20002226 	beq	r4,zero,d4b4 <__floatunsidf+0x9c>
    d42c:	000d4c00 	call	d4c0 <__clzsi2>
    d430:	01010784 	movi	r4,1054
    d434:	2089c83a 	sub	r4,r4,r2
    d438:	01810cc4 	movi	r6,1075
    d43c:	310dc83a 	sub	r6,r6,r4
    d440:	00c007c4 	movi	r3,31
    d444:	1980120e 	bge	r3,r6,d490 <__floatunsidf+0x78>
    d448:	00c104c4 	movi	r3,1043
    d44c:	1907c83a 	sub	r3,r3,r4
    d450:	80ca983a 	sll	r5,r16,r3
    d454:	00800434 	movhi	r2,16
    d458:	10bfffc4 	addi	r2,r2,-1
    d45c:	2101ffcc 	andi	r4,r4,2047
    d460:	0021883a 	mov	r16,zero
    d464:	288a703a 	and	r5,r5,r2
    d468:	2008953a 	slli	r4,r4,20
    d46c:	00c00434 	movhi	r3,16
    d470:	18ffffc4 	addi	r3,r3,-1
    d474:	28c6703a 	and	r3,r5,r3
    d478:	8005883a 	mov	r2,r16
    d47c:	1906b03a 	or	r3,r3,r4
    d480:	dfc00117 	ldw	ra,4(sp)
    d484:	dc000017 	ldw	r16,0(sp)
    d488:	dec00204 	addi	sp,sp,8
    d48c:	f800283a 	ret
    d490:	00c002c4 	movi	r3,11
    d494:	188bc83a 	sub	r5,r3,r2
    d498:	814ad83a 	srl	r5,r16,r5
    d49c:	00c00434 	movhi	r3,16
    d4a0:	18ffffc4 	addi	r3,r3,-1
    d4a4:	81a0983a 	sll	r16,r16,r6
    d4a8:	2101ffcc 	andi	r4,r4,2047
    d4ac:	28ca703a 	and	r5,r5,r3
    d4b0:	003fed06 	br	d468 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d468>
    d4b4:	0009883a 	mov	r4,zero
    d4b8:	000b883a 	mov	r5,zero
    d4bc:	003fea06 	br	d468 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d468>

0000d4c0 <__clzsi2>:
    d4c0:	00bfffd4 	movui	r2,65535
    d4c4:	11000536 	bltu	r2,r4,d4dc <__clzsi2+0x1c>
    d4c8:	00803fc4 	movi	r2,255
    d4cc:	11000f36 	bltu	r2,r4,d50c <__clzsi2+0x4c>
    d4d0:	00800804 	movi	r2,32
    d4d4:	0007883a 	mov	r3,zero
    d4d8:	00000506 	br	d4f0 <__clzsi2+0x30>
    d4dc:	00804034 	movhi	r2,256
    d4e0:	10bfffc4 	addi	r2,r2,-1
    d4e4:	11000c2e 	bgeu	r2,r4,d518 <__clzsi2+0x58>
    d4e8:	00800204 	movi	r2,8
    d4ec:	00c00604 	movi	r3,24
    d4f0:	20c8d83a 	srl	r4,r4,r3
    d4f4:	00c000b4 	movhi	r3,2
    d4f8:	18e7f904 	addi	r3,r3,-24604
    d4fc:	1909883a 	add	r4,r3,r4
    d500:	20c00003 	ldbu	r3,0(r4)
    d504:	10c5c83a 	sub	r2,r2,r3
    d508:	f800283a 	ret
    d50c:	00800604 	movi	r2,24
    d510:	00c00204 	movi	r3,8
    d514:	003ff606 	br	d4f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d4f0>
    d518:	00800404 	movi	r2,16
    d51c:	1007883a 	mov	r3,r2
    d520:	003ff306 	br	d4f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d4f0>

0000d524 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d524:	defffe04 	addi	sp,sp,-8
    d528:	dfc00115 	stw	ra,4(sp)
    d52c:	df000015 	stw	fp,0(sp)
    d530:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d534:	d0a00b17 	ldw	r2,-32724(gp)
    d538:	10000326 	beq	r2,zero,d548 <alt_get_errno+0x24>
    d53c:	d0a00b17 	ldw	r2,-32724(gp)
    d540:	103ee83a 	callr	r2
    d544:	00000106 	br	d54c <alt_get_errno+0x28>
    d548:	d0a7e004 	addi	r2,gp,-24704
}
    d54c:	e037883a 	mov	sp,fp
    d550:	dfc00117 	ldw	ra,4(sp)
    d554:	df000017 	ldw	fp,0(sp)
    d558:	dec00204 	addi	sp,sp,8
    d55c:	f800283a 	ret

0000d560 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    d560:	defffb04 	addi	sp,sp,-20
    d564:	dfc00415 	stw	ra,16(sp)
    d568:	df000315 	stw	fp,12(sp)
    d56c:	df000304 	addi	fp,sp,12
    d570:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    d574:	e0bfff17 	ldw	r2,-4(fp)
    d578:	10000616 	blt	r2,zero,d594 <close+0x34>
    d57c:	e0bfff17 	ldw	r2,-4(fp)
    d580:	10c00324 	muli	r3,r2,12
    d584:	008000b4 	movhi	r2,2
    d588:	10ab1304 	addi	r2,r2,-21428
    d58c:	1885883a 	add	r2,r3,r2
    d590:	00000106 	br	d598 <close+0x38>
    d594:	0005883a 	mov	r2,zero
    d598:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    d59c:	e0bffd17 	ldw	r2,-12(fp)
    d5a0:	10001926 	beq	r2,zero,d608 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    d5a4:	e0bffd17 	ldw	r2,-12(fp)
    d5a8:	10800017 	ldw	r2,0(r2)
    d5ac:	10800417 	ldw	r2,16(r2)
    d5b0:	10000626 	beq	r2,zero,d5cc <close+0x6c>
    d5b4:	e0bffd17 	ldw	r2,-12(fp)
    d5b8:	10800017 	ldw	r2,0(r2)
    d5bc:	10800417 	ldw	r2,16(r2)
    d5c0:	e13ffd17 	ldw	r4,-12(fp)
    d5c4:	103ee83a 	callr	r2
    d5c8:	00000106 	br	d5d0 <close+0x70>
    d5cc:	0005883a 	mov	r2,zero
    d5d0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    d5d4:	e13fff17 	ldw	r4,-4(fp)
    d5d8:	000dc180 	call	dc18 <alt_release_fd>
    if (rval < 0)
    d5dc:	e0bffe17 	ldw	r2,-8(fp)
    d5e0:	1000070e 	bge	r2,zero,d600 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    d5e4:	000d5240 	call	d524 <alt_get_errno>
    d5e8:	1007883a 	mov	r3,r2
    d5ec:	e0bffe17 	ldw	r2,-8(fp)
    d5f0:	0085c83a 	sub	r2,zero,r2
    d5f4:	18800015 	stw	r2,0(r3)
      return -1;
    d5f8:	00bfffc4 	movi	r2,-1
    d5fc:	00000706 	br	d61c <close+0xbc>
    }
    return 0;
    d600:	0005883a 	mov	r2,zero
    d604:	00000506 	br	d61c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d608:	000d5240 	call	d524 <alt_get_errno>
    d60c:	1007883a 	mov	r3,r2
    d610:	00801444 	movi	r2,81
    d614:	18800015 	stw	r2,0(r3)
    return -1;
    d618:	00bfffc4 	movi	r2,-1
  }
}
    d61c:	e037883a 	mov	sp,fp
    d620:	dfc00117 	ldw	ra,4(sp)
    d624:	df000017 	ldw	fp,0(sp)
    d628:	dec00204 	addi	sp,sp,8
    d62c:	f800283a 	ret

0000d630 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    d630:	defffc04 	addi	sp,sp,-16
    d634:	df000315 	stw	fp,12(sp)
    d638:	df000304 	addi	fp,sp,12
    d63c:	e13ffd15 	stw	r4,-12(fp)
    d640:	e17ffe15 	stw	r5,-8(fp)
    d644:	e1bfff15 	stw	r6,-4(fp)
  return len;
    d648:	e0bfff17 	ldw	r2,-4(fp)
}
    d64c:	e037883a 	mov	sp,fp
    d650:	df000017 	ldw	fp,0(sp)
    d654:	dec00104 	addi	sp,sp,4
    d658:	f800283a 	ret

0000d65c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d65c:	defffe04 	addi	sp,sp,-8
    d660:	dfc00115 	stw	ra,4(sp)
    d664:	df000015 	stw	fp,0(sp)
    d668:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d66c:	d0a00b17 	ldw	r2,-32724(gp)
    d670:	10000326 	beq	r2,zero,d680 <alt_get_errno+0x24>
    d674:	d0a00b17 	ldw	r2,-32724(gp)
    d678:	103ee83a 	callr	r2
    d67c:	00000106 	br	d684 <alt_get_errno+0x28>
    d680:	d0a7e004 	addi	r2,gp,-24704
}
    d684:	e037883a 	mov	sp,fp
    d688:	dfc00117 	ldw	ra,4(sp)
    d68c:	df000017 	ldw	fp,0(sp)
    d690:	dec00204 	addi	sp,sp,8
    d694:	f800283a 	ret

0000d698 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    d698:	defffb04 	addi	sp,sp,-20
    d69c:	dfc00415 	stw	ra,16(sp)
    d6a0:	df000315 	stw	fp,12(sp)
    d6a4:	df000304 	addi	fp,sp,12
    d6a8:	e13ffe15 	stw	r4,-8(fp)
    d6ac:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d6b0:	e0bffe17 	ldw	r2,-8(fp)
    d6b4:	10000616 	blt	r2,zero,d6d0 <fstat+0x38>
    d6b8:	e0bffe17 	ldw	r2,-8(fp)
    d6bc:	10c00324 	muli	r3,r2,12
    d6c0:	008000b4 	movhi	r2,2
    d6c4:	10ab1304 	addi	r2,r2,-21428
    d6c8:	1885883a 	add	r2,r3,r2
    d6cc:	00000106 	br	d6d4 <fstat+0x3c>
    d6d0:	0005883a 	mov	r2,zero
    d6d4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    d6d8:	e0bffd17 	ldw	r2,-12(fp)
    d6dc:	10001026 	beq	r2,zero,d720 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    d6e0:	e0bffd17 	ldw	r2,-12(fp)
    d6e4:	10800017 	ldw	r2,0(r2)
    d6e8:	10800817 	ldw	r2,32(r2)
    d6ec:	10000726 	beq	r2,zero,d70c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    d6f0:	e0bffd17 	ldw	r2,-12(fp)
    d6f4:	10800017 	ldw	r2,0(r2)
    d6f8:	10800817 	ldw	r2,32(r2)
    d6fc:	e17fff17 	ldw	r5,-4(fp)
    d700:	e13ffd17 	ldw	r4,-12(fp)
    d704:	103ee83a 	callr	r2
    d708:	00000a06 	br	d734 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    d70c:	e0bfff17 	ldw	r2,-4(fp)
    d710:	00c80004 	movi	r3,8192
    d714:	10c00115 	stw	r3,4(r2)
      return 0;
    d718:	0005883a 	mov	r2,zero
    d71c:	00000506 	br	d734 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d720:	000d65c0 	call	d65c <alt_get_errno>
    d724:	1007883a 	mov	r3,r2
    d728:	00801444 	movi	r2,81
    d72c:	18800015 	stw	r2,0(r3)
    return -1;
    d730:	00bfffc4 	movi	r2,-1
  }
}
    d734:	e037883a 	mov	sp,fp
    d738:	dfc00117 	ldw	ra,4(sp)
    d73c:	df000017 	ldw	fp,0(sp)
    d740:	dec00204 	addi	sp,sp,8
    d744:	f800283a 	ret

0000d748 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d748:	defffe04 	addi	sp,sp,-8
    d74c:	dfc00115 	stw	ra,4(sp)
    d750:	df000015 	stw	fp,0(sp)
    d754:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d758:	d0a00b17 	ldw	r2,-32724(gp)
    d75c:	10000326 	beq	r2,zero,d76c <alt_get_errno+0x24>
    d760:	d0a00b17 	ldw	r2,-32724(gp)
    d764:	103ee83a 	callr	r2
    d768:	00000106 	br	d770 <alt_get_errno+0x28>
    d76c:	d0a7e004 	addi	r2,gp,-24704
}
    d770:	e037883a 	mov	sp,fp
    d774:	dfc00117 	ldw	ra,4(sp)
    d778:	df000017 	ldw	fp,0(sp)
    d77c:	dec00204 	addi	sp,sp,8
    d780:	f800283a 	ret

0000d784 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    d784:	deffed04 	addi	sp,sp,-76
    d788:	dfc01215 	stw	ra,72(sp)
    d78c:	df001115 	stw	fp,68(sp)
    d790:	df001104 	addi	fp,sp,68
    d794:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d798:	e0bfff17 	ldw	r2,-4(fp)
    d79c:	10000616 	blt	r2,zero,d7b8 <isatty+0x34>
    d7a0:	e0bfff17 	ldw	r2,-4(fp)
    d7a4:	10c00324 	muli	r3,r2,12
    d7a8:	008000b4 	movhi	r2,2
    d7ac:	10ab1304 	addi	r2,r2,-21428
    d7b0:	1885883a 	add	r2,r3,r2
    d7b4:	00000106 	br	d7bc <isatty+0x38>
    d7b8:	0005883a 	mov	r2,zero
    d7bc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    d7c0:	e0bfef17 	ldw	r2,-68(fp)
    d7c4:	10000e26 	beq	r2,zero,d800 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    d7c8:	e0bfef17 	ldw	r2,-68(fp)
    d7cc:	10800017 	ldw	r2,0(r2)
    d7d0:	10800817 	ldw	r2,32(r2)
    d7d4:	1000021e 	bne	r2,zero,d7e0 <isatty+0x5c>
    {
      return 1;
    d7d8:	00800044 	movi	r2,1
    d7dc:	00000d06 	br	d814 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    d7e0:	e0bff004 	addi	r2,fp,-64
    d7e4:	100b883a 	mov	r5,r2
    d7e8:	e13fff17 	ldw	r4,-4(fp)
    d7ec:	000d6980 	call	d698 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    d7f0:	e0bff117 	ldw	r2,-60(fp)
    d7f4:	10880020 	cmpeqi	r2,r2,8192
    d7f8:	10803fcc 	andi	r2,r2,255
    d7fc:	00000506 	br	d814 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d800:	000d7480 	call	d748 <alt_get_errno>
    d804:	1007883a 	mov	r3,r2
    d808:	00801444 	movi	r2,81
    d80c:	18800015 	stw	r2,0(r3)
    return 0;
    d810:	0005883a 	mov	r2,zero
  }
}
    d814:	e037883a 	mov	sp,fp
    d818:	dfc00117 	ldw	ra,4(sp)
    d81c:	df000017 	ldw	fp,0(sp)
    d820:	dec00204 	addi	sp,sp,8
    d824:	f800283a 	ret

0000d828 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    d828:	defffc04 	addi	sp,sp,-16
    d82c:	df000315 	stw	fp,12(sp)
    d830:	df000304 	addi	fp,sp,12
    d834:	e13ffd15 	stw	r4,-12(fp)
    d838:	e17ffe15 	stw	r5,-8(fp)
    d83c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    d840:	e0fffe17 	ldw	r3,-8(fp)
    d844:	e0bffd17 	ldw	r2,-12(fp)
    d848:	18800c26 	beq	r3,r2,d87c <alt_load_section+0x54>
  {
    while( to != end )
    d84c:	00000806 	br	d870 <alt_load_section+0x48>
    {
      *to++ = *from++;
    d850:	e0bffe17 	ldw	r2,-8(fp)
    d854:	10c00104 	addi	r3,r2,4
    d858:	e0fffe15 	stw	r3,-8(fp)
    d85c:	e0fffd17 	ldw	r3,-12(fp)
    d860:	19000104 	addi	r4,r3,4
    d864:	e13ffd15 	stw	r4,-12(fp)
    d868:	18c00017 	ldw	r3,0(r3)
    d86c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    d870:	e0fffe17 	ldw	r3,-8(fp)
    d874:	e0bfff17 	ldw	r2,-4(fp)
    d878:	18bff51e 	bne	r3,r2,d850 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d850>
    {
      *to++ = *from++;
    }
  }
}
    d87c:	0001883a 	nop
    d880:	e037883a 	mov	sp,fp
    d884:	df000017 	ldw	fp,0(sp)
    d888:	dec00104 	addi	sp,sp,4
    d88c:	f800283a 	ret

0000d890 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    d890:	defffe04 	addi	sp,sp,-8
    d894:	dfc00115 	stw	ra,4(sp)
    d898:	df000015 	stw	fp,0(sp)
    d89c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    d8a0:	018000b4 	movhi	r6,2
    d8a4:	31b08004 	addi	r6,r6,-15872
    d8a8:	014000b4 	movhi	r5,2
    d8ac:	2968e004 	addi	r5,r5,-23680
    d8b0:	010000b4 	movhi	r4,2
    d8b4:	21308004 	addi	r4,r4,-15872
    d8b8:	000d8280 	call	d828 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    d8bc:	01800034 	movhi	r6,0
    d8c0:	31809204 	addi	r6,r6,584
    d8c4:	01400034 	movhi	r5,0
    d8c8:	29400804 	addi	r5,r5,32
    d8cc:	01000034 	movhi	r4,0
    d8d0:	21000804 	addi	r4,r4,32
    d8d4:	000d8280 	call	d828 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    d8d8:	018000b4 	movhi	r6,2
    d8dc:	31a8e004 	addi	r6,r6,-23680
    d8e0:	014000b4 	movhi	r5,2
    d8e4:	29662104 	addi	r5,r5,-26492
    d8e8:	010000b4 	movhi	r4,2
    d8ec:	21262104 	addi	r4,r4,-26492
    d8f0:	000d8280 	call	d828 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    d8f4:	00185280 	call	18528 <alt_dcache_flush_all>
  alt_icache_flush_all();
    d8f8:	00187780 	call	18778 <alt_icache_flush_all>
}
    d8fc:	0001883a 	nop
    d900:	e037883a 	mov	sp,fp
    d904:	dfc00117 	ldw	ra,4(sp)
    d908:	df000017 	ldw	fp,0(sp)
    d90c:	dec00204 	addi	sp,sp,8
    d910:	f800283a 	ret

0000d914 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d914:	defffe04 	addi	sp,sp,-8
    d918:	dfc00115 	stw	ra,4(sp)
    d91c:	df000015 	stw	fp,0(sp)
    d920:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d924:	d0a00b17 	ldw	r2,-32724(gp)
    d928:	10000326 	beq	r2,zero,d938 <alt_get_errno+0x24>
    d92c:	d0a00b17 	ldw	r2,-32724(gp)
    d930:	103ee83a 	callr	r2
    d934:	00000106 	br	d93c <alt_get_errno+0x28>
    d938:	d0a7e004 	addi	r2,gp,-24704
}
    d93c:	e037883a 	mov	sp,fp
    d940:	dfc00117 	ldw	ra,4(sp)
    d944:	df000017 	ldw	fp,0(sp)
    d948:	dec00204 	addi	sp,sp,8
    d94c:	f800283a 	ret

0000d950 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    d950:	defff904 	addi	sp,sp,-28
    d954:	dfc00615 	stw	ra,24(sp)
    d958:	df000515 	stw	fp,20(sp)
    d95c:	df000504 	addi	fp,sp,20
    d960:	e13ffd15 	stw	r4,-12(fp)
    d964:	e17ffe15 	stw	r5,-8(fp)
    d968:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    d96c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d970:	e0bffd17 	ldw	r2,-12(fp)
    d974:	10000616 	blt	r2,zero,d990 <lseek+0x40>
    d978:	e0bffd17 	ldw	r2,-12(fp)
    d97c:	10c00324 	muli	r3,r2,12
    d980:	008000b4 	movhi	r2,2
    d984:	10ab1304 	addi	r2,r2,-21428
    d988:	1885883a 	add	r2,r3,r2
    d98c:	00000106 	br	d994 <lseek+0x44>
    d990:	0005883a 	mov	r2,zero
    d994:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    d998:	e0bffc17 	ldw	r2,-16(fp)
    d99c:	10001026 	beq	r2,zero,d9e0 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    d9a0:	e0bffc17 	ldw	r2,-16(fp)
    d9a4:	10800017 	ldw	r2,0(r2)
    d9a8:	10800717 	ldw	r2,28(r2)
    d9ac:	10000926 	beq	r2,zero,d9d4 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    d9b0:	e0bffc17 	ldw	r2,-16(fp)
    d9b4:	10800017 	ldw	r2,0(r2)
    d9b8:	10800717 	ldw	r2,28(r2)
    d9bc:	e1bfff17 	ldw	r6,-4(fp)
    d9c0:	e17ffe17 	ldw	r5,-8(fp)
    d9c4:	e13ffc17 	ldw	r4,-16(fp)
    d9c8:	103ee83a 	callr	r2
    d9cc:	e0bffb15 	stw	r2,-20(fp)
    d9d0:	00000506 	br	d9e8 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    d9d4:	00bfde84 	movi	r2,-134
    d9d8:	e0bffb15 	stw	r2,-20(fp)
    d9dc:	00000206 	br	d9e8 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    d9e0:	00bfebc4 	movi	r2,-81
    d9e4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    d9e8:	e0bffb17 	ldw	r2,-20(fp)
    d9ec:	1000070e 	bge	r2,zero,da0c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    d9f0:	000d9140 	call	d914 <alt_get_errno>
    d9f4:	1007883a 	mov	r3,r2
    d9f8:	e0bffb17 	ldw	r2,-20(fp)
    d9fc:	0085c83a 	sub	r2,zero,r2
    da00:	18800015 	stw	r2,0(r3)
    rc = -1;
    da04:	00bfffc4 	movi	r2,-1
    da08:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    da0c:	e0bffb17 	ldw	r2,-20(fp)
}
    da10:	e037883a 	mov	sp,fp
    da14:	dfc00117 	ldw	ra,4(sp)
    da18:	df000017 	ldw	fp,0(sp)
    da1c:	dec00204 	addi	sp,sp,8
    da20:	f800283a 	ret

0000da24 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    da24:	defff904 	addi	sp,sp,-28
    da28:	dfc00615 	stw	ra,24(sp)
    da2c:	df000515 	stw	fp,20(sp)
    da30:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    da34:	0009883a 	mov	r4,zero
    da38:	00159840 	call	15984 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    da3c:	000e9e00 	call	e9e0 <OSInit>
    da40:	01000044 	movi	r4,1
    da44:	00133400 	call	13340 <OSSemCreate>
    da48:	d0a7e615 	stw	r2,-24680(gp)
    da4c:	01000044 	movi	r4,1
    da50:	00133400 	call	13340 <OSSemCreate>
    da54:	d0a7e815 	stw	r2,-24672(gp)
    da58:	d0a7e104 	addi	r2,gp,-24700
    da5c:	e0bffc15 	stw	r2,-16(fp)
    da60:	00800044 	movi	r2,1
    da64:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    da68:	e0bffd0b 	ldhu	r2,-12(fp)
    da6c:	1009883a 	mov	r4,r2
    da70:	00133400 	call	13340 <OSSemCreate>
    da74:	1007883a 	mov	r3,r2
    da78:	e0bffc17 	ldw	r2,-16(fp)
    da7c:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    da80:	00159bc0 	call	159bc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    da84:	018000b4 	movhi	r6,2
    da88:	31a83c04 	addi	r6,r6,-24336
    da8c:	014000b4 	movhi	r5,2
    da90:	29683c04 	addi	r5,r5,-24336
    da94:	010000b4 	movhi	r4,2
    da98:	21283c04 	addi	r4,r4,-24336
    da9c:	00188700 	call	18870 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    daa0:	00186280 	call	18628 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    daa4:	010000b4 	movhi	r4,2
    daa8:	2121a204 	addi	r4,r4,-31096
    daac:	00194f00 	call	194f0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    dab0:	d0a7e217 	ldw	r2,-24696(gp)
    dab4:	d0e7e317 	ldw	r3,-24692(gp)
    dab8:	d127e417 	ldw	r4,-24688(gp)
    dabc:	200d883a 	mov	r6,r4
    dac0:	180b883a 	mov	r5,r3
    dac4:	1009883a 	mov	r4,r2
    dac8:	0000a780 	call	a78 <main>
    dacc:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
    dad0:	01000044 	movi	r4,1
    dad4:	000d5600 	call	d560 <close>
  exit (result);
    dad8:	e13ffb17 	ldw	r4,-20(fp)
    dadc:	00195040 	call	19504 <exit>

0000dae0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    dae0:	defffe04 	addi	sp,sp,-8
    dae4:	dfc00115 	stw	ra,4(sp)
    dae8:	df000015 	stw	fp,0(sp)
    daec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    daf0:	d0a00b17 	ldw	r2,-32724(gp)
    daf4:	10000326 	beq	r2,zero,db04 <alt_get_errno+0x24>
    daf8:	d0a00b17 	ldw	r2,-32724(gp)
    dafc:	103ee83a 	callr	r2
    db00:	00000106 	br	db08 <alt_get_errno+0x28>
    db04:	d0a7e004 	addi	r2,gp,-24704
}
    db08:	e037883a 	mov	sp,fp
    db0c:	dfc00117 	ldw	ra,4(sp)
    db10:	df000017 	ldw	fp,0(sp)
    db14:	dec00204 	addi	sp,sp,8
    db18:	f800283a 	ret

0000db1c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    db1c:	defff904 	addi	sp,sp,-28
    db20:	dfc00615 	stw	ra,24(sp)
    db24:	df000515 	stw	fp,20(sp)
    db28:	df000504 	addi	fp,sp,20
    db2c:	e13ffd15 	stw	r4,-12(fp)
    db30:	e17ffe15 	stw	r5,-8(fp)
    db34:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    db38:	e0bffd17 	ldw	r2,-12(fp)
    db3c:	10000616 	blt	r2,zero,db58 <read+0x3c>
    db40:	e0bffd17 	ldw	r2,-12(fp)
    db44:	10c00324 	muli	r3,r2,12
    db48:	008000b4 	movhi	r2,2
    db4c:	10ab1304 	addi	r2,r2,-21428
    db50:	1885883a 	add	r2,r3,r2
    db54:	00000106 	br	db5c <read+0x40>
    db58:	0005883a 	mov	r2,zero
    db5c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    db60:	e0bffb17 	ldw	r2,-20(fp)
    db64:	10002226 	beq	r2,zero,dbf0 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    db68:	e0bffb17 	ldw	r2,-20(fp)
    db6c:	10800217 	ldw	r2,8(r2)
    db70:	108000cc 	andi	r2,r2,3
    db74:	10800060 	cmpeqi	r2,r2,1
    db78:	1000181e 	bne	r2,zero,dbdc <read+0xc0>
        (fd->dev->read))
    db7c:	e0bffb17 	ldw	r2,-20(fp)
    db80:	10800017 	ldw	r2,0(r2)
    db84:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    db88:	10001426 	beq	r2,zero,dbdc <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    db8c:	e0bffb17 	ldw	r2,-20(fp)
    db90:	10800017 	ldw	r2,0(r2)
    db94:	10800517 	ldw	r2,20(r2)
    db98:	e0ffff17 	ldw	r3,-4(fp)
    db9c:	180d883a 	mov	r6,r3
    dba0:	e17ffe17 	ldw	r5,-8(fp)
    dba4:	e13ffb17 	ldw	r4,-20(fp)
    dba8:	103ee83a 	callr	r2
    dbac:	e0bffc15 	stw	r2,-16(fp)
    dbb0:	e0bffc17 	ldw	r2,-16(fp)
    dbb4:	1000070e 	bge	r2,zero,dbd4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    dbb8:	000dae00 	call	dae0 <alt_get_errno>
    dbbc:	1007883a 	mov	r3,r2
    dbc0:	e0bffc17 	ldw	r2,-16(fp)
    dbc4:	0085c83a 	sub	r2,zero,r2
    dbc8:	18800015 	stw	r2,0(r3)
          return -1;
    dbcc:	00bfffc4 	movi	r2,-1
    dbd0:	00000c06 	br	dc04 <read+0xe8>
        }
        return rval;
    dbd4:	e0bffc17 	ldw	r2,-16(fp)
    dbd8:	00000a06 	br	dc04 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    dbdc:	000dae00 	call	dae0 <alt_get_errno>
    dbe0:	1007883a 	mov	r3,r2
    dbe4:	00800344 	movi	r2,13
    dbe8:	18800015 	stw	r2,0(r3)
    dbec:	00000406 	br	dc00 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    dbf0:	000dae00 	call	dae0 <alt_get_errno>
    dbf4:	1007883a 	mov	r3,r2
    dbf8:	00801444 	movi	r2,81
    dbfc:	18800015 	stw	r2,0(r3)
  }
  return -1;
    dc00:	00bfffc4 	movi	r2,-1
}
    dc04:	e037883a 	mov	sp,fp
    dc08:	dfc00117 	ldw	ra,4(sp)
    dc0c:	df000017 	ldw	fp,0(sp)
    dc10:	dec00204 	addi	sp,sp,8
    dc14:	f800283a 	ret

0000dc18 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    dc18:	defffe04 	addi	sp,sp,-8
    dc1c:	df000115 	stw	fp,4(sp)
    dc20:	df000104 	addi	fp,sp,4
    dc24:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    dc28:	e0bfff17 	ldw	r2,-4(fp)
    dc2c:	108000d0 	cmplti	r2,r2,3
    dc30:	10000d1e 	bne	r2,zero,dc68 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    dc34:	008000b4 	movhi	r2,2
    dc38:	10ab1304 	addi	r2,r2,-21428
    dc3c:	e0ffff17 	ldw	r3,-4(fp)
    dc40:	18c00324 	muli	r3,r3,12
    dc44:	10c5883a 	add	r2,r2,r3
    dc48:	10800204 	addi	r2,r2,8
    dc4c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    dc50:	008000b4 	movhi	r2,2
    dc54:	10ab1304 	addi	r2,r2,-21428
    dc58:	e0ffff17 	ldw	r3,-4(fp)
    dc5c:	18c00324 	muli	r3,r3,12
    dc60:	10c5883a 	add	r2,r2,r3
    dc64:	10000015 	stw	zero,0(r2)
  }
}
    dc68:	0001883a 	nop
    dc6c:	e037883a 	mov	sp,fp
    dc70:	df000017 	ldw	fp,0(sp)
    dc74:	dec00104 	addi	sp,sp,4
    dc78:	f800283a 	ret

0000dc7c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    dc7c:	defff904 	addi	sp,sp,-28
    dc80:	df000615 	stw	fp,24(sp)
    dc84:	df000604 	addi	fp,sp,24
    dc88:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dc8c:	0005303a 	rdctl	r2,status
    dc90:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dc94:	e0fffe17 	ldw	r3,-8(fp)
    dc98:	00bfff84 	movi	r2,-2
    dc9c:	1884703a 	and	r2,r3,r2
    dca0:	1001703a 	wrctl	status,r2
  
  return context;
    dca4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    dca8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    dcac:	d0a00c17 	ldw	r2,-32720(gp)
    dcb0:	10c000c4 	addi	r3,r2,3
    dcb4:	00bfff04 	movi	r2,-4
    dcb8:	1884703a 	and	r2,r3,r2
    dcbc:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    dcc0:	d0e00c17 	ldw	r3,-32720(gp)
    dcc4:	e0bfff17 	ldw	r2,-4(fp)
    dcc8:	1887883a 	add	r3,r3,r2
    dccc:	00810034 	movhi	r2,1024
    dcd0:	10800004 	addi	r2,r2,0
    dcd4:	10c0062e 	bgeu	r2,r3,dcf0 <sbrk+0x74>
    dcd8:	e0bffb17 	ldw	r2,-20(fp)
    dcdc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dce0:	e0bffa17 	ldw	r2,-24(fp)
    dce4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    dce8:	00bfffc4 	movi	r2,-1
    dcec:	00000b06 	br	dd1c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    dcf0:	d0a00c17 	ldw	r2,-32720(gp)
    dcf4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    dcf8:	d0e00c17 	ldw	r3,-32720(gp)
    dcfc:	e0bfff17 	ldw	r2,-4(fp)
    dd00:	1885883a 	add	r2,r3,r2
    dd04:	d0a00c15 	stw	r2,-32720(gp)
    dd08:	e0bffb17 	ldw	r2,-20(fp)
    dd0c:	e0bffc15 	stw	r2,-16(fp)
    dd10:	e0bffc17 	ldw	r2,-16(fp)
    dd14:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    dd18:	e0bffd17 	ldw	r2,-12(fp)
} 
    dd1c:	e037883a 	mov	sp,fp
    dd20:	df000017 	ldw	fp,0(sp)
    dd24:	dec00104 	addi	sp,sp,4
    dd28:	f800283a 	ret

0000dd2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    dd2c:	defffe04 	addi	sp,sp,-8
    dd30:	dfc00115 	stw	ra,4(sp)
    dd34:	df000015 	stw	fp,0(sp)
    dd38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    dd3c:	d0a00b17 	ldw	r2,-32724(gp)
    dd40:	10000326 	beq	r2,zero,dd50 <alt_get_errno+0x24>
    dd44:	d0a00b17 	ldw	r2,-32724(gp)
    dd48:	103ee83a 	callr	r2
    dd4c:	00000106 	br	dd54 <alt_get_errno+0x28>
    dd50:	d0a7e004 	addi	r2,gp,-24704
}
    dd54:	e037883a 	mov	sp,fp
    dd58:	dfc00117 	ldw	ra,4(sp)
    dd5c:	df000017 	ldw	fp,0(sp)
    dd60:	dec00204 	addi	sp,sp,8
    dd64:	f800283a 	ret

0000dd68 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    dd68:	defff904 	addi	sp,sp,-28
    dd6c:	dfc00615 	stw	ra,24(sp)
    dd70:	df000515 	stw	fp,20(sp)
    dd74:	df000504 	addi	fp,sp,20
    dd78:	e13ffd15 	stw	r4,-12(fp)
    dd7c:	e17ffe15 	stw	r5,-8(fp)
    dd80:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    dd84:	e0bffd17 	ldw	r2,-12(fp)
    dd88:	10000616 	blt	r2,zero,dda4 <write+0x3c>
    dd8c:	e0bffd17 	ldw	r2,-12(fp)
    dd90:	10c00324 	muli	r3,r2,12
    dd94:	008000b4 	movhi	r2,2
    dd98:	10ab1304 	addi	r2,r2,-21428
    dd9c:	1885883a 	add	r2,r3,r2
    dda0:	00000106 	br	dda8 <write+0x40>
    dda4:	0005883a 	mov	r2,zero
    dda8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    ddac:	e0bffb17 	ldw	r2,-20(fp)
    ddb0:	10002126 	beq	r2,zero,de38 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    ddb4:	e0bffb17 	ldw	r2,-20(fp)
    ddb8:	10800217 	ldw	r2,8(r2)
    ddbc:	108000cc 	andi	r2,r2,3
    ddc0:	10001826 	beq	r2,zero,de24 <write+0xbc>
    ddc4:	e0bffb17 	ldw	r2,-20(fp)
    ddc8:	10800017 	ldw	r2,0(r2)
    ddcc:	10800617 	ldw	r2,24(r2)
    ddd0:	10001426 	beq	r2,zero,de24 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    ddd4:	e0bffb17 	ldw	r2,-20(fp)
    ddd8:	10800017 	ldw	r2,0(r2)
    dddc:	10800617 	ldw	r2,24(r2)
    dde0:	e0ffff17 	ldw	r3,-4(fp)
    dde4:	180d883a 	mov	r6,r3
    dde8:	e17ffe17 	ldw	r5,-8(fp)
    ddec:	e13ffb17 	ldw	r4,-20(fp)
    ddf0:	103ee83a 	callr	r2
    ddf4:	e0bffc15 	stw	r2,-16(fp)
    ddf8:	e0bffc17 	ldw	r2,-16(fp)
    ddfc:	1000070e 	bge	r2,zero,de1c <write+0xb4>
      {
        ALT_ERRNO = -rval;
    de00:	000dd2c0 	call	dd2c <alt_get_errno>
    de04:	1007883a 	mov	r3,r2
    de08:	e0bffc17 	ldw	r2,-16(fp)
    de0c:	0085c83a 	sub	r2,zero,r2
    de10:	18800015 	stw	r2,0(r3)
        return -1;
    de14:	00bfffc4 	movi	r2,-1
    de18:	00000c06 	br	de4c <write+0xe4>
      }
      return rval;
    de1c:	e0bffc17 	ldw	r2,-16(fp)
    de20:	00000a06 	br	de4c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    de24:	000dd2c0 	call	dd2c <alt_get_errno>
    de28:	1007883a 	mov	r3,r2
    de2c:	00800344 	movi	r2,13
    de30:	18800015 	stw	r2,0(r3)
    de34:	00000406 	br	de48 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    de38:	000dd2c0 	call	dd2c <alt_get_errno>
    de3c:	1007883a 	mov	r3,r2
    de40:	00801444 	movi	r2,81
    de44:	18800015 	stw	r2,0(r3)
  }
  return -1;
    de48:	00bfffc4 	movi	r2,-1
}
    de4c:	e037883a 	mov	sp,fp
    de50:	dfc00117 	ldw	ra,4(sp)
    de54:	df000017 	ldw	fp,0(sp)
    de58:	dec00204 	addi	sp,sp,8
    de5c:	f800283a 	ret

0000de60 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
    de60:	deffdf04 	addi	sp,sp,-132
    de64:	dfc02015 	stw	ra,128(sp)
    de68:	df001f15 	stw	fp,124(sp)
    de6c:	df001f04 	addi	fp,sp,124
    de70:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    de74:	e0bfe204 	addi	r2,fp,-120
    de78:	100b883a 	mov	r5,r2
    de7c:	01003fc4 	movi	r4,255
    de80:	00152c80 	call	152c8 <OSTaskQuery>
    de84:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    de88:	e0bffe83 	ldbu	r2,-6(fp)
    de8c:	10803fcc 	andi	r2,r2,255
    de90:	10001e1e 	bne	r2,zero,df0c <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
    de94:	e0bfee83 	ldbu	r2,-70(fp)
    de98:	10803fcc 	andi	r2,r2,255
    de9c:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
    dea0:	d0a7e617 	ldw	r2,-24680(gp)
    dea4:	e0fffd04 	addi	r3,fp,-12
    dea8:	180b883a 	mov	r5,r3
    deac:	1009883a 	mov	r4,r2
    deb0:	0013ae00 	call	13ae0 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
    deb4:	e0bffe43 	ldbu	r2,-7(fp)
    deb8:	10803fcc 	andi	r2,r2,255
    debc:	10000726 	beq	r2,zero,dedc <__env_lock+0x7c>
    dec0:	d0a00d17 	ldw	r2,-32716(gp)
    dec4:	e0ffe117 	ldw	r3,-124(fp)
    dec8:	1880041e 	bne	r3,r2,dedc <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
    decc:	d0a7e517 	ldw	r2,-24684(gp)
    ded0:	10800044 	addi	r2,r2,1
    ded4:	d0a7e515 	stw	r2,-24684(gp)
    ded8:	00000a06 	br	df04 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
    dedc:	d0a7e617 	ldw	r2,-24680(gp)
    dee0:	e0fffe84 	addi	r3,fp,-6
    dee4:	180d883a 	mov	r6,r3
    dee8:	000b883a 	mov	r5,zero
    deec:	1009883a 	mov	r4,r2
    def0:	00136580 	call	13658 <OSSemPend>
    locks  = 1;
    def4:	00800044 	movi	r2,1
    def8:	d0a7e515 	stw	r2,-24684(gp)
    lockid = id;
    defc:	e0bfe117 	ldw	r2,-124(fp)
    df00:	d0a00d15 	stw	r2,-32716(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    df04:	0001883a 	nop
    df08:	00000106 	br	df10 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
    df0c:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
    df10:	e037883a 	mov	sp,fp
    df14:	dfc00117 	ldw	ra,4(sp)
    df18:	df000017 	ldw	fp,0(sp)
    df1c:	dec00204 	addi	sp,sp,8
    df20:	f800283a 	ret

0000df24 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
    df24:	defffd04 	addi	sp,sp,-12
    df28:	dfc00215 	stw	ra,8(sp)
    df2c:	df000115 	stw	fp,4(sp)
    df30:	df000104 	addi	fp,sp,4
    df34:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    df38:	d0a7e517 	ldw	r2,-24684(gp)
    df3c:	10000b26 	beq	r2,zero,df6c <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
    df40:	d0a7e517 	ldw	r2,-24684(gp)
    df44:	10bfffc4 	addi	r2,r2,-1
    df48:	d0a7e515 	stw	r2,-24684(gp)
    df4c:	d0a7e517 	ldw	r2,-24684(gp)
    df50:	1000071e 	bne	r2,zero,df70 <__env_unlock+0x4c>
  {
    lockid = -1;
    df54:	00bfffc4 	movi	r2,-1
    df58:	d0a00d15 	stw	r2,-32716(gp)
    OSSemPost( alt_envsem );
    df5c:	d0a7e617 	ldw	r2,-24680(gp)
    df60:	1009883a 	mov	r4,r2
    df64:	00139d00 	call	139d0 <OSSemPost>
    df68:	00000106 	br	df70 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
    df6c:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    df70:	e037883a 	mov	sp,fp
    df74:	dfc00117 	ldw	ra,4(sp)
    df78:	df000017 	ldw	fp,0(sp)
    df7c:	dec00204 	addi	sp,sp,8
    df80:	f800283a 	ret

0000df84 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
    df84:	deffdb04 	addi	sp,sp,-148
    df88:	dfc02415 	stw	ra,144(sp)
    df8c:	df002315 	stw	fp,140(sp)
    df90:	df002304 	addi	fp,sp,140
    df94:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    df98:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
    df9c:	d0a7e943 	ldbu	r2,-24667(gp)
    dfa0:	10803fcc 	andi	r2,r2,255
    dfa4:	10800060 	cmpeqi	r2,r2,1
    dfa8:	10003626 	beq	r2,zero,e084 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    dfac:	e0bfe204 	addi	r2,fp,-120
    dfb0:	100b883a 	mov	r5,r2
    dfb4:	01003fc4 	movi	r4,255
    dfb8:	00152c80 	call	152c8 <OSTaskQuery>
    dfbc:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    dfc0:	e0bffe83 	ldbu	r2,-6(fp)
    dfc4:	10803fcc 	andi	r2,r2,255
    dfc8:	1000301e 	bne	r2,zero,e08c <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
    dfcc:	e0bfee83 	ldbu	r2,-70(fp)
    dfd0:	10803fcc 	andi	r2,r2,255
    dfd4:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
    dfd8:	d0a7e817 	ldw	r2,-24672(gp)
    dfdc:	e0fffd04 	addi	r3,fp,-12
    dfe0:	180b883a 	mov	r5,r3
    dfe4:	1009883a 	mov	r4,r2
    dfe8:	0013ae00 	call	13ae0 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dfec:	0005303a 	rdctl	r2,status
    dff0:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dff4:	e0ffe117 	ldw	r3,-124(fp)
    dff8:	00bfff84 	movi	r2,-2
    dffc:	1884703a 	and	r2,r3,r2
    e000:	1001703a 	wrctl	status,r2
  
  return context;
    e004:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
    e008:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
    e00c:	e0bffd0b 	ldhu	r2,-12(fp)
    e010:	10bfffcc 	andi	r2,r2,65535
    e014:	10000b1e 	bne	r2,zero,e044 <__malloc_lock+0xc0>
    e018:	d0a00e17 	ldw	r2,-32712(gp)
    e01c:	e0ffde17 	ldw	r3,-136(fp)
    e020:	1880081e 	bne	r3,r2,e044 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
    e024:	d0a7e717 	ldw	r2,-24676(gp)
    e028:	10800044 	addi	r2,r2,1
    e02c:	d0a7e715 	stw	r2,-24676(gp)
    e030:	e0bfdd17 	ldw	r2,-140(fp)
    e034:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e038:	e0bfdf17 	ldw	r2,-132(fp)
    e03c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    e040:	00000e06 	br	e07c <__malloc_lock+0xf8>
    e044:	e0bfdd17 	ldw	r2,-140(fp)
    e048:	e0bfe015 	stw	r2,-128(fp)
    e04c:	e0bfe017 	ldw	r2,-128(fp)
    e050:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
    e054:	d0a7e817 	ldw	r2,-24672(gp)
    e058:	e0fffe84 	addi	r3,fp,-6
    e05c:	180d883a 	mov	r6,r3
    e060:	000b883a 	mov	r5,zero
    e064:	1009883a 	mov	r4,r2
    e068:	00136580 	call	13658 <OSSemPend>
    locks  = 1;
    e06c:	00800044 	movi	r2,1
    e070:	d0a7e715 	stw	r2,-24676(gp)
    lockid = id;
    e074:	e0bfde17 	ldw	r2,-136(fp)
    e078:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    e07c:	0001883a 	nop
    e080:	00000306 	br	e090 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
    e084:	0001883a 	nop
    e088:	00000106 	br	e090 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
    e08c:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
    e090:	e037883a 	mov	sp,fp
    e094:	dfc00117 	ldw	ra,4(sp)
    e098:	df000017 	ldw	fp,0(sp)
    e09c:	dec00204 	addi	sp,sp,8
    e0a0:	f800283a 	ret

0000e0a4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    e0a4:	defff804 	addi	sp,sp,-32
    e0a8:	dfc00715 	stw	ra,28(sp)
    e0ac:	df000615 	stw	fp,24(sp)
    e0b0:	df000604 	addi	fp,sp,24
    e0b4:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    e0b8:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
    e0bc:	d0a7e943 	ldbu	r2,-24667(gp)
    e0c0:	10803fcc 	andi	r2,r2,255
    e0c4:	10800060 	cmpeqi	r2,r2,1
    e0c8:	10002326 	beq	r2,zero,e158 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e0cc:	0005303a 	rdctl	r2,status
    e0d0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e0d4:	e0fffe17 	ldw	r3,-8(fp)
    e0d8:	00bfff84 	movi	r2,-2
    e0dc:	1884703a 	and	r2,r3,r2
    e0e0:	1001703a 	wrctl	status,r2
  
  return context;
    e0e4:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
    e0e8:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
    e0ec:	d0a7e717 	ldw	r2,-24676(gp)
    e0f0:	1000051e 	bne	r2,zero,e108 <__malloc_unlock+0x64>
    e0f4:	e0bffa17 	ldw	r2,-24(fp)
    e0f8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e0fc:	e0bffb17 	ldw	r2,-20(fp)
    e100:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
    e104:	00001506 	br	e15c <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
    e108:	d0a7e717 	ldw	r2,-24676(gp)
    e10c:	10bfffc4 	addi	r2,r2,-1
    e110:	d0a7e715 	stw	r2,-24676(gp)
    e114:	d0a7e717 	ldw	r2,-24676(gp)
    e118:	10000a1e 	bne	r2,zero,e144 <__malloc_unlock+0xa0>
  {
    lockid = -1;
    e11c:	00bfffc4 	movi	r2,-1
    e120:	d0a00e15 	stw	r2,-32712(gp)
    e124:	e0bffa17 	ldw	r2,-24(fp)
    e128:	e0bffc15 	stw	r2,-16(fp)
    e12c:	e0bffc17 	ldw	r2,-16(fp)
    e130:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
    e134:	d0a7e817 	ldw	r2,-24672(gp)
    e138:	1009883a 	mov	r4,r2
    e13c:	00139d00 	call	139d0 <OSSemPost>
    e140:	00000606 	br	e15c <__malloc_unlock+0xb8>
    e144:	e0bffa17 	ldw	r2,-24(fp)
    e148:	e0bffd15 	stw	r2,-12(fp)
    e14c:	e0bffd17 	ldw	r2,-12(fp)
    e150:	1001703a 	wrctl	status,r2
    e154:	00000106 	br	e15c <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
    e158:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    e15c:	e037883a 	mov	sp,fp
    e160:	dfc00117 	ldw	ra,4(sp)
    e164:	df000017 	ldw	fp,0(sp)
    e168:	dec00204 	addi	sp,sp,8
    e16c:	f800283a 	ret

0000e170 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    e170:	defff704 	addi	sp,sp,-36
    e174:	dfc00815 	stw	ra,32(sp)
    e178:	df000715 	stw	fp,28(sp)
    e17c:	df000704 	addi	fp,sp,28
    e180:	e13ffd15 	stw	r4,-12(fp)
    e184:	e17ffe15 	stw	r5,-8(fp)
    e188:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    e18c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    e190:	e0bfff17 	ldw	r2,-4(fp)
    e194:	1000021e 	bne	r2,zero,e1a0 <OSEventNameGet+0x30>
        return (0);
    e198:	0005883a 	mov	r2,zero
    e19c:	00003706 	br	e27c <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    e1a0:	e0bffd17 	ldw	r2,-12(fp)
    e1a4:	1000051e 	bne	r2,zero,e1bc <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
    e1a8:	e0bfff17 	ldw	r2,-4(fp)
    e1ac:	00c00104 	movi	r3,4
    e1b0:	10c00005 	stb	r3,0(r2)
        return (0);
    e1b4:	0005883a 	mov	r2,zero
    e1b8:	00003006 	br	e27c <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    e1bc:	e0bffe17 	ldw	r2,-8(fp)
    e1c0:	1000051e 	bne	r2,zero,e1d8 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    e1c4:	e0bfff17 	ldw	r2,-4(fp)
    e1c8:	00c00304 	movi	r3,12
    e1cc:	10c00005 	stb	r3,0(r2)
        return (0);
    e1d0:	0005883a 	mov	r2,zero
    e1d4:	00002906 	br	e27c <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    e1d8:	d0a7f703 	ldbu	r2,-24612(gp)
    e1dc:	10803fcc 	andi	r2,r2,255
    e1e0:	10000526 	beq	r2,zero,e1f8 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
    e1e4:	e0bfff17 	ldw	r2,-4(fp)
    e1e8:	00c00444 	movi	r3,17
    e1ec:	10c00005 	stb	r3,0(r2)
        return (0);
    e1f0:	0005883a 	mov	r2,zero
    e1f4:	00002106 	br	e27c <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
    e1f8:	e0bffd17 	ldw	r2,-12(fp)
    e1fc:	10800003 	ldbu	r2,0(r2)
    e200:	10803fcc 	andi	r2,r2,255
    e204:	10bfffc4 	addi	r2,r2,-1
    e208:	10800128 	cmpgeui	r2,r2,4
    e20c:	10000526 	beq	r2,zero,e224 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    e210:	e0bfff17 	ldw	r2,-4(fp)
    e214:	00c00044 	movi	r3,1
    e218:	10c00005 	stb	r3,0(r2)
             return (0);
    e21c:	0005883a 	mov	r2,zero
    e220:	00001606 	br	e27c <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    e224:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e228:	0005303a 	rdctl	r2,status
    e22c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e230:	e0fffb17 	ldw	r3,-20(fp)
    e234:	00bfff84 	movi	r2,-2
    e238:	1884703a 	and	r2,r3,r2
    e23c:	1001703a 	wrctl	status,r2
  
  return context;
    e240:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
    e244:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    e248:	e0bffd17 	ldw	r2,-12(fp)
    e24c:	10800384 	addi	r2,r2,14
    e250:	100b883a 	mov	r5,r2
    e254:	e13ffe17 	ldw	r4,-8(fp)
    e258:	000fbf40 	call	fbf4 <OS_StrCopy>
    e25c:	e0bffa05 	stb	r2,-24(fp)
    e260:	e0bff917 	ldw	r2,-28(fp)
    e264:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e268:	e0bffc17 	ldw	r2,-16(fp)
    e26c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    e270:	e0bfff17 	ldw	r2,-4(fp)
    e274:	10000005 	stb	zero,0(r2)
    return (len);
    e278:	e0bffa03 	ldbu	r2,-24(fp)
}
    e27c:	e037883a 	mov	sp,fp
    e280:	dfc00117 	ldw	ra,4(sp)
    e284:	df000017 	ldw	fp,0(sp)
    e288:	dec00204 	addi	sp,sp,8
    e28c:	f800283a 	ret

0000e290 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    e290:	defff604 	addi	sp,sp,-40
    e294:	dfc00915 	stw	ra,36(sp)
    e298:	df000815 	stw	fp,32(sp)
    e29c:	df000804 	addi	fp,sp,32
    e2a0:	e13ffd15 	stw	r4,-12(fp)
    e2a4:	e17ffe15 	stw	r5,-8(fp)
    e2a8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    e2ac:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    e2b0:	e0bfff17 	ldw	r2,-4(fp)
    e2b4:	10004026 	beq	r2,zero,e3b8 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    e2b8:	e0bffd17 	ldw	r2,-12(fp)
    e2bc:	1000041e 	bne	r2,zero,e2d0 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
    e2c0:	e0bfff17 	ldw	r2,-4(fp)
    e2c4:	00c00104 	movi	r3,4
    e2c8:	10c00005 	stb	r3,0(r2)
        return;
    e2cc:	00003b06 	br	e3bc <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    e2d0:	e0bffe17 	ldw	r2,-8(fp)
    e2d4:	1000041e 	bne	r2,zero,e2e8 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    e2d8:	e0bfff17 	ldw	r2,-4(fp)
    e2dc:	00c00304 	movi	r3,12
    e2e0:	10c00005 	stb	r3,0(r2)
        return;
    e2e4:	00003506 	br	e3bc <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    e2e8:	d0a7f703 	ldbu	r2,-24612(gp)
    e2ec:	10803fcc 	andi	r2,r2,255
    e2f0:	10000426 	beq	r2,zero,e304 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
    e2f4:	e0bfff17 	ldw	r2,-4(fp)
    e2f8:	00c00484 	movi	r3,18
    e2fc:	10c00005 	stb	r3,0(r2)
        return;
    e300:	00002e06 	br	e3bc <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
    e304:	e0bffd17 	ldw	r2,-12(fp)
    e308:	10800003 	ldbu	r2,0(r2)
    e30c:	10803fcc 	andi	r2,r2,255
    e310:	10bfffc4 	addi	r2,r2,-1
    e314:	10800128 	cmpgeui	r2,r2,4
    e318:	10000426 	beq	r2,zero,e32c <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    e31c:	e0bfff17 	ldw	r2,-4(fp)
    e320:	00c00044 	movi	r3,1
    e324:	10c00005 	stb	r3,0(r2)
             return;
    e328:	00002406 	br	e3bc <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    e32c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e330:	0005303a 	rdctl	r2,status
    e334:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e338:	e0fffc17 	ldw	r3,-16(fp)
    e33c:	00bfff84 	movi	r2,-2
    e340:	1884703a 	and	r2,r3,r2
    e344:	1001703a 	wrctl	status,r2
  
  return context;
    e348:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
    e34c:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    e350:	e13ffe17 	ldw	r4,-8(fp)
    e354:	000fc680 	call	fc68 <OS_StrLen>
    e358:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
    e35c:	e0bffa03 	ldbu	r2,-24(fp)
    e360:	10800830 	cmpltui	r2,r2,32
    e364:	1000081e 	bne	r2,zero,e388 <OSEventNameSet+0xf8>
    e368:	e0bff817 	ldw	r2,-32(fp)
    e36c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e370:	e0bff917 	ldw	r2,-28(fp)
    e374:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
    e378:	e0bfff17 	ldw	r2,-4(fp)
    e37c:	00c002c4 	movi	r3,11
    e380:	10c00005 	stb	r3,0(r2)
        return;
    e384:	00000d06 	br	e3bc <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    e388:	e0bffd17 	ldw	r2,-12(fp)
    e38c:	10800384 	addi	r2,r2,14
    e390:	e17ffe17 	ldw	r5,-8(fp)
    e394:	1009883a 	mov	r4,r2
    e398:	000fbf40 	call	fbf4 <OS_StrCopy>
    e39c:	e0bff817 	ldw	r2,-32(fp)
    e3a0:	e0bffb15 	stw	r2,-20(fp)
    e3a4:	e0bffb17 	ldw	r2,-20(fp)
    e3a8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    e3ac:	e0bfff17 	ldw	r2,-4(fp)
    e3b0:	10000005 	stb	zero,0(r2)
    e3b4:	00000106 	br	e3bc <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
    e3b8:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
    e3bc:	e037883a 	mov	sp,fp
    e3c0:	dfc00117 	ldw	ra,4(sp)
    e3c4:	df000017 	ldw	fp,0(sp)
    e3c8:	dec00204 	addi	sp,sp,8
    e3cc:	f800283a 	ret

0000e3d0 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
    e3d0:	deffed04 	addi	sp,sp,-76
    e3d4:	dfc01215 	stw	ra,72(sp)
    e3d8:	df001115 	stw	fp,68(sp)
    e3dc:	df001104 	addi	fp,sp,68
    e3e0:	e13ffc15 	stw	r4,-16(fp)
    e3e4:	e17ffd15 	stw	r5,-12(fp)
    e3e8:	e1bffe15 	stw	r6,-8(fp)
    e3ec:	3805883a 	mov	r2,r7
    e3f0:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
    e3f4:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
    e3f8:	e0800217 	ldw	r2,8(fp)
    e3fc:	1000021e 	bne	r2,zero,e408 <OSEventPendMulti+0x38>
        return (0);
    e400:	0005883a 	mov	r2,zero
    e404:	00017106 	br	e9cc <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
    e408:	e0bffc17 	ldw	r2,-16(fp)
    e40c:	1000051e 	bne	r2,zero,e424 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
    e410:	e0800217 	ldw	r2,8(fp)
    e414:	00c00104 	movi	r3,4
    e418:	10c00005 	stb	r3,0(r2)
        return (0);
    e41c:	0005883a 	mov	r2,zero
    e420:	00016a06 	br	e9cc <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
    e424:	e0bffd17 	ldw	r2,-12(fp)
    e428:	1000051e 	bne	r2,zero,e440 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
    e42c:	e0800217 	ldw	r2,8(fp)
    e430:	00c00104 	movi	r3,4
    e434:	10c00005 	stb	r3,0(r2)
        return (0);
    e438:	0005883a 	mov	r2,zero
    e43c:	00016306 	br	e9cc <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
    e440:	e0bffe17 	ldw	r2,-8(fp)
    e444:	1000051e 	bne	r2,zero,e45c <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
    e448:	e0800217 	ldw	r2,8(fp)
    e44c:	00c00104 	movi	r3,4
    e450:	10c00005 	stb	r3,0(r2)
        return (0);
    e454:	0005883a 	mov	r2,zero
    e458:	00015c06 	br	e9cc <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
    e45c:	e0bffd17 	ldw	r2,-12(fp)
    e460:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
    e464:	e0bffc17 	ldw	r2,-16(fp)
    e468:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
    e46c:	e0bfef17 	ldw	r2,-68(fp)
    e470:	10800017 	ldw	r2,0(r2)
    e474:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
    e478:	00001906 	br	e4e0 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
    e47c:	e0bff017 	ldw	r2,-64(fp)
    e480:	10800003 	ldbu	r2,0(r2)
    e484:	10803fcc 	andi	r2,r2,255
    e488:	10c000a0 	cmpeqi	r3,r2,2
    e48c:	1800091e 	bne	r3,zero,e4b4 <OSEventPendMulti+0xe4>
    e490:	10c000e0 	cmpeqi	r3,r2,3
    e494:	1800091e 	bne	r3,zero,e4bc <OSEventPendMulti+0xec>
    e498:	10800060 	cmpeqi	r2,r2,1
    e49c:	1000091e 	bne	r2,zero,e4c4 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
    e4a0:	e0800217 	ldw	r2,8(fp)
    e4a4:	00c00044 	movi	r3,1
    e4a8:	10c00005 	stb	r3,0(r2)
                 return (0);
    e4ac:	0005883a 	mov	r2,zero
    e4b0:	00014606 	br	e9cc <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
    e4b4:	0001883a 	nop
    e4b8:	00000306 	br	e4c8 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
    e4bc:	0001883a 	nop
    e4c0:	00000106 	br	e4c8 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
    e4c4:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
    e4c8:	e0bfef17 	ldw	r2,-68(fp)
    e4cc:	10800104 	addi	r2,r2,4
    e4d0:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    e4d4:	e0bfef17 	ldw	r2,-68(fp)
    e4d8:	10800017 	ldw	r2,0(r2)
    e4dc:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
    e4e0:	e0bff017 	ldw	r2,-64(fp)
    e4e4:	103fe51e 	bne	r2,zero,e47c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e47c>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
    e4e8:	d0a7f703 	ldbu	r2,-24612(gp)
    e4ec:	10803fcc 	andi	r2,r2,255
    e4f0:	10000526 	beq	r2,zero,e508 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
    e4f4:	e0800217 	ldw	r2,8(fp)
    e4f8:	00c00084 	movi	r3,2
    e4fc:	10c00005 	stb	r3,0(r2)
        return (0);
    e500:	0005883a 	mov	r2,zero
    e504:	00013106 	br	e9cc <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
    e508:	d0a7e903 	ldbu	r2,-24668(gp)
    e50c:	10803fcc 	andi	r2,r2,255
    e510:	10000526 	beq	r2,zero,e528 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
    e514:	e0800217 	ldw	r2,8(fp)
    e518:	00c00344 	movi	r3,13
    e51c:	10c00005 	stb	r3,0(r2)
        return (0);
    e520:	0005883a 	mov	r2,zero
    e524:	00012906 	br	e9cc <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e528:	0005303a 	rdctl	r2,status
    e52c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e530:	e0fffb17 	ldw	r3,-20(fp)
    e534:	00bfff84 	movi	r2,-2
    e538:	1884703a 	and	r2,r3,r2
    e53c:	1001703a 	wrctl	status,r2
  
  return context;
    e540:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
    e544:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
    e548:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
    e54c:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
    e550:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
    e554:	e0bffc17 	ldw	r2,-16(fp)
    e558:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
    e55c:	e0bfef17 	ldw	r2,-68(fp)
    e560:	10800017 	ldw	r2,0(r2)
    e564:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    e568:	00008106 	br	e770 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
    e56c:	e0bff017 	ldw	r2,-64(fp)
    e570:	10800003 	ldbu	r2,0(r2)
    e574:	10803fcc 	andi	r2,r2,255
    e578:	10c000a0 	cmpeqi	r3,r2,2
    e57c:	18003c1e 	bne	r3,zero,e670 <OSEventPendMulti+0x2a0>
    e580:	10c000e0 	cmpeqi	r3,r2,3
    e584:	1800031e 	bne	r3,zero,e594 <OSEventPendMulti+0x1c4>
    e588:	10800060 	cmpeqi	r2,r2,1
    e58c:	10001e1e 	bne	r2,zero,e608 <OSEventPendMulti+0x238>
    e590:	00006606 	br	e72c <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
    e594:	e0bff017 	ldw	r2,-64(fp)
    e598:	1080020b 	ldhu	r2,8(r2)
    e59c:	10bfffcc 	andi	r2,r2,65535
    e5a0:	10001526 	beq	r2,zero,e5f8 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
    e5a4:	e0bff017 	ldw	r2,-64(fp)
    e5a8:	1080020b 	ldhu	r2,8(r2)
    e5ac:	10bfffc4 	addi	r2,r2,-1
    e5b0:	1007883a 	mov	r3,r2
    e5b4:	e0bff017 	ldw	r2,-64(fp)
    e5b8:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
    e5bc:	e0bffd17 	ldw	r2,-12(fp)
    e5c0:	10c00104 	addi	r3,r2,4
    e5c4:	e0fffd15 	stw	r3,-12(fp)
    e5c8:	e0fff017 	ldw	r3,-64(fp)
    e5cc:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
    e5d0:	00800044 	movi	r2,1
    e5d4:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
    e5d8:	e0bffe17 	ldw	r2,-8(fp)
    e5dc:	10c00104 	addi	r3,r2,4
    e5e0:	e0fffe15 	stw	r3,-8(fp)
    e5e4:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
    e5e8:	e0bff18b 	ldhu	r2,-58(fp)
    e5ec:	10800044 	addi	r2,r2,1
    e5f0:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
    e5f4:	00005806 	br	e758 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
    e5f8:	e0bff203 	ldbu	r2,-56(fp)
    e5fc:	10800054 	ori	r2,r2,1
    e600:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    e604:	00005406 	br	e758 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
    e608:	e0bff017 	ldw	r2,-64(fp)
    e60c:	10800117 	ldw	r2,4(r2)
    e610:	10001326 	beq	r2,zero,e660 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
    e614:	e0bffe17 	ldw	r2,-8(fp)
    e618:	10c00104 	addi	r3,r2,4
    e61c:	e0fffe15 	stw	r3,-8(fp)
    e620:	e0fff017 	ldw	r3,-64(fp)
    e624:	18c00117 	ldw	r3,4(r3)
    e628:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
    e62c:	e0bff017 	ldw	r2,-64(fp)
    e630:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
    e634:	e0bffd17 	ldw	r2,-12(fp)
    e638:	10c00104 	addi	r3,r2,4
    e63c:	e0fffd15 	stw	r3,-12(fp)
    e640:	e0fff017 	ldw	r3,-64(fp)
    e644:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
    e648:	00800044 	movi	r2,1
    e64c:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    e650:	e0bff18b 	ldhu	r2,-58(fp)
    e654:	10800044 	addi	r2,r2,1
    e658:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
    e65c:	00003e06 	br	e758 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
    e660:	e0bff203 	ldbu	r2,-56(fp)
    e664:	10800094 	ori	r2,r2,2
    e668:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    e66c:	00003a06 	br	e758 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
    e670:	e0bff017 	ldw	r2,-64(fp)
    e674:	10800117 	ldw	r2,4(r2)
    e678:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
    e67c:	e0bff517 	ldw	r2,-44(fp)
    e680:	1080058b 	ldhu	r2,22(r2)
    e684:	10bfffcc 	andi	r2,r2,65535
    e688:	10002426 	beq	r2,zero,e71c <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
    e68c:	e0bffe17 	ldw	r2,-8(fp)
    e690:	10c00104 	addi	r3,r2,4
    e694:	e0fffe15 	stw	r3,-8(fp)
    e698:	e0fff517 	ldw	r3,-44(fp)
    e69c:	18c00417 	ldw	r3,16(r3)
    e6a0:	19400104 	addi	r5,r3,4
    e6a4:	e13ff517 	ldw	r4,-44(fp)
    e6a8:	21400415 	stw	r5,16(r4)
    e6ac:	18c00017 	ldw	r3,0(r3)
    e6b0:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
    e6b4:	e0bff517 	ldw	r2,-44(fp)
    e6b8:	10c00417 	ldw	r3,16(r2)
    e6bc:	e0bff517 	ldw	r2,-44(fp)
    e6c0:	10800217 	ldw	r2,8(r2)
    e6c4:	1880041e 	bne	r3,r2,e6d8 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
    e6c8:	e0bff517 	ldw	r2,-44(fp)
    e6cc:	10c00117 	ldw	r3,4(r2)
    e6d0:	e0bff517 	ldw	r2,-44(fp)
    e6d4:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
    e6d8:	e0bff517 	ldw	r2,-44(fp)
    e6dc:	1080058b 	ldhu	r2,22(r2)
    e6e0:	10bfffc4 	addi	r2,r2,-1
    e6e4:	1007883a 	mov	r3,r2
    e6e8:	e0bff517 	ldw	r2,-44(fp)
    e6ec:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
    e6f0:	e0bffd17 	ldw	r2,-12(fp)
    e6f4:	10c00104 	addi	r3,r2,4
    e6f8:	e0fffd15 	stw	r3,-12(fp)
    e6fc:	e0fff017 	ldw	r3,-64(fp)
    e700:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
    e704:	00800044 	movi	r2,1
    e708:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    e70c:	e0bff18b 	ldhu	r2,-58(fp)
    e710:	10800044 	addi	r2,r2,1
    e714:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
    e718:	00000f06 	br	e758 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
    e71c:	e0bff203 	ldbu	r2,-56(fp)
    e720:	10800114 	ori	r2,r2,4
    e724:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    e728:	00000b06 	br	e758 <OSEventPendMulti+0x388>
    e72c:	e0bff317 	ldw	r2,-52(fp)
    e730:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e734:	e0bff417 	ldw	r2,-48(fp)
    e738:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
    e73c:	e0bffd17 	ldw	r2,-12(fp)
    e740:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
    e744:	e0800217 	ldw	r2,8(fp)
    e748:	00c00044 	movi	r3,1
    e74c:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
    e750:	e0bff18b 	ldhu	r2,-58(fp)
    e754:	00009d06 	br	e9cc <OSEventPendMulti+0x5fc>
        }
        pevents++;
    e758:	e0bfef17 	ldw	r2,-68(fp)
    e75c:	10800104 	addi	r2,r2,4
    e760:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    e764:	e0bfef17 	ldw	r2,-68(fp)
    e768:	10800017 	ldw	r2,0(r2)
    e76c:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    e770:	e0bff017 	ldw	r2,-64(fp)
    e774:	103f7d1e 	bne	r2,zero,e56c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e56c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
    e778:	e0bff103 	ldbu	r2,-60(fp)
    e77c:	10800058 	cmpnei	r2,r2,1
    e780:	10000a1e 	bne	r2,zero,e7ac <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
    e784:	e0bffd17 	ldw	r2,-12(fp)
    e788:	10000015 	stw	zero,0(r2)
    e78c:	e0bff317 	ldw	r2,-52(fp)
    e790:	e0bff615 	stw	r2,-40(fp)
    e794:	e0bff617 	ldw	r2,-40(fp)
    e798:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
    e79c:	e0800217 	ldw	r2,8(fp)
    e7a0:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
    e7a4:	e0bff18b 	ldhu	r2,-58(fp)
    e7a8:	00008806 	br	e9cc <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
    e7ac:	d0a7f817 	ldw	r2,-24608(gp)
    e7b0:	d0e7f817 	ldw	r3,-24608(gp)
    e7b4:	19000c03 	ldbu	r4,48(r3)
    e7b8:	e0fff203 	ldbu	r3,-56(fp)
    e7bc:	20c6b03a 	or	r3,r4,r3
    e7c0:	1809883a 	mov	r4,r3
    e7c4:	00ffe004 	movi	r3,-128
    e7c8:	20c6b03a 	or	r3,r4,r3
    e7cc:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    e7d0:	d0a7f817 	ldw	r2,-24608(gp)
    e7d4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
    e7d8:	d0a7f817 	ldw	r2,-24608(gp)
    e7dc:	e0ffff0b 	ldhu	r3,-4(fp)
    e7e0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
    e7e4:	e13ffc17 	ldw	r4,-16(fp)
    e7e8:	000f30c0 	call	f30c <OS_EventTaskWaitMulti>
    e7ec:	e0bff317 	ldw	r2,-52(fp)
    e7f0:	e0bff915 	stw	r2,-28(fp)
    e7f4:	e0bff917 	ldw	r2,-28(fp)
    e7f8:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
    e7fc:	000fab00 	call	fab0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e800:	0005303a 	rdctl	r2,status
    e804:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e808:	e0fff717 	ldw	r3,-36(fp)
    e80c:	00bfff84 	movi	r2,-2
    e810:	1884703a 	and	r2,r3,r2
    e814:	1001703a 	wrctl	status,r2
  
  return context;
    e818:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
    e81c:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
    e820:	d0a7f817 	ldw	r2,-24608(gp)
    e824:	10800c43 	ldbu	r2,49(r2)
    e828:	10803fcc 	andi	r2,r2,255
    e82c:	10000226 	beq	r2,zero,e838 <OSEventPendMulti+0x468>
    e830:	108000a0 	cmpeqi	r2,r2,2
    e834:	10001826 	beq	r2,zero,e898 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
    e838:	d0a7f817 	ldw	r2,-24608(gp)
    e83c:	10800717 	ldw	r2,28(r2)
    e840:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
    e844:	e0bff017 	ldw	r2,-64(fp)
    e848:	10000b26 	beq	r2,zero,e878 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
    e84c:	e0bffd17 	ldw	r2,-12(fp)
    e850:	10c00104 	addi	r3,r2,4
    e854:	e0fffd15 	stw	r3,-12(fp)
    e858:	e0fff017 	ldw	r3,-64(fp)
    e85c:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
    e860:	e0bffd17 	ldw	r2,-12(fp)
    e864:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
    e868:	e0bff18b 	ldhu	r2,-58(fp)
    e86c:	10800044 	addi	r2,r2,1
    e870:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
    e874:	00000d06 	br	e8ac <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
    e878:	d0a7f817 	ldw	r2,-24608(gp)
    e87c:	00c00044 	movi	r3,1
    e880:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    e884:	d0a7f817 	ldw	r2,-24608(gp)
    e888:	e17ffc17 	ldw	r5,-16(fp)
    e88c:	1009883a 	mov	r4,r2
    e890:	000f5140 	call	f514 <OS_EventTaskRemoveMulti>
             }
			 break;
    e894:	00000506 	br	e8ac <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    e898:	d0a7f817 	ldw	r2,-24608(gp)
    e89c:	e17ffc17 	ldw	r5,-16(fp)
    e8a0:	1009883a 	mov	r4,r2
    e8a4:	000f5140 	call	f514 <OS_EventTaskRemoveMulti>
             break;
    e8a8:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
    e8ac:	d0a7f817 	ldw	r2,-24608(gp)
    e8b0:	10800c43 	ldbu	r2,49(r2)
    e8b4:	10803fcc 	andi	r2,r2,255
    e8b8:	10000326 	beq	r2,zero,e8c8 <OSEventPendMulti+0x4f8>
    e8bc:	108000a0 	cmpeqi	r2,r2,2
    e8c0:	1000231e 	bne	r2,zero,e950 <OSEventPendMulti+0x580>
    e8c4:	00002a06 	br	e970 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
    e8c8:	e0bff017 	ldw	r2,-64(fp)
    e8cc:	10800003 	ldbu	r2,0(r2)
    e8d0:	10803fcc 	andi	r2,r2,255
    e8d4:	0080100e 	bge	zero,r2,e918 <OSEventPendMulti+0x548>
    e8d8:	10c000d0 	cmplti	r3,r2,3
    e8dc:	1800071e 	bne	r3,zero,e8fc <OSEventPendMulti+0x52c>
    e8e0:	108000e0 	cmpeqi	r2,r2,3
    e8e4:	10000c26 	beq	r2,zero,e918 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
    e8e8:	e0bffe17 	ldw	r2,-8(fp)
    e8ec:	10c00104 	addi	r3,r2,4
    e8f0:	e0fffe15 	stw	r3,-8(fp)
    e8f4:	10000015 	stw	zero,0(r2)
                      break;
    e8f8:	00001206 	br	e944 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
    e8fc:	e0bffe17 	ldw	r2,-8(fp)
    e900:	10c00104 	addi	r3,r2,4
    e904:	e0fffe15 	stw	r3,-8(fp)
    e908:	d0e7f817 	ldw	r3,-24608(gp)
    e90c:	18c00917 	ldw	r3,36(r3)
    e910:	10c00015 	stw	r3,0(r2)
                      break;
    e914:	00000b06 	br	e944 <OSEventPendMulti+0x574>
    e918:	e0bff317 	ldw	r2,-52(fp)
    e91c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e920:	e0bff817 	ldw	r2,-32(fp)
    e924:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
    e928:	e0bffd17 	ldw	r2,-12(fp)
    e92c:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
    e930:	e0800217 	ldw	r2,8(fp)
    e934:	00c00044 	movi	r3,1
    e938:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
    e93c:	e0bff18b 	ldhu	r2,-58(fp)
    e940:	00002206 	br	e9cc <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
    e944:	e0800217 	ldw	r2,8(fp)
    e948:	10000005 	stb	zero,0(r2)
             break;
    e94c:	00001006 	br	e990 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
    e950:	e0bffe17 	ldw	r2,-8(fp)
    e954:	10c00104 	addi	r3,r2,4
    e958:	e0fffe15 	stw	r3,-8(fp)
    e95c:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
    e960:	e0800217 	ldw	r2,8(fp)
    e964:	00c00384 	movi	r3,14
    e968:	10c00005 	stb	r3,0(r2)
             break;
    e96c:	00000806 	br	e990 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
    e970:	e0bffe17 	ldw	r2,-8(fp)
    e974:	10c00104 	addi	r3,r2,4
    e978:	e0fffe15 	stw	r3,-8(fp)
    e97c:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
    e980:	e0800217 	ldw	r2,8(fp)
    e984:	00c00284 	movi	r3,10
    e988:	10c00005 	stb	r3,0(r2)
             break;
    e98c:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
    e990:	d0a7f817 	ldw	r2,-24608(gp)
    e994:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
    e998:	d0a7f817 	ldw	r2,-24608(gp)
    e99c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
    e9a0:	d0a7f817 	ldw	r2,-24608(gp)
    e9a4:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    e9a8:	d0a7f817 	ldw	r2,-24608(gp)
    e9ac:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    e9b0:	d0a7f817 	ldw	r2,-24608(gp)
    e9b4:	10000915 	stw	zero,36(r2)
    e9b8:	e0bff317 	ldw	r2,-52(fp)
    e9bc:	e0bffa15 	stw	r2,-24(fp)
    e9c0:	e0bffa17 	ldw	r2,-24(fp)
    e9c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
    e9c8:	e0bff18b 	ldhu	r2,-58(fp)
}
    e9cc:	e037883a 	mov	sp,fp
    e9d0:	dfc00117 	ldw	ra,4(sp)
    e9d4:	df000017 	ldw	fp,0(sp)
    e9d8:	dec00204 	addi	sp,sp,8
    e9dc:	f800283a 	ret

0000e9e0 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    e9e0:	defffe04 	addi	sp,sp,-8
    e9e4:	dfc00115 	stw	ra,4(sp)
    e9e8:	df000015 	stw	fp,0(sp)
    e9ec:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
    e9f0:	001915c0 	call	1915c <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
    e9f4:	000f75c0 	call	f75c <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
    e9f8:	000f7a40 	call	f7a4 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
    e9fc:	000f9100 	call	f910 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
    ea00:	000f67c0 	call	f67c <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
    ea04:	00117c00 	call	117c0 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
    ea08:	00120c00 	call	120c0 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
    ea0c:	00131e80 	call	131e8 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
    ea10:	000f8100 	call	f810 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
    ea14:	000f8900 	call	f890 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
    ea18:	001917c0 	call	1917c <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
    ea1c:	00101940 	call	10194 <OSDebugInit>
#endif
}
    ea20:	0001883a 	nop
    ea24:	e037883a 	mov	sp,fp
    ea28:	dfc00117 	ldw	ra,4(sp)
    ea2c:	df000017 	ldw	fp,0(sp)
    ea30:	dec00204 	addi	sp,sp,8
    ea34:	f800283a 	ret

0000ea38 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    ea38:	deffff04 	addi	sp,sp,-4
    ea3c:	df000015 	stw	fp,0(sp)
    ea40:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
    ea44:	d0a7e943 	ldbu	r2,-24667(gp)
    ea48:	10803fcc 	andi	r2,r2,255
    ea4c:	10800058 	cmpnei	r2,r2,1
    ea50:	1000071e 	bne	r2,zero,ea70 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
    ea54:	d0a7f703 	ldbu	r2,-24612(gp)
    ea58:	10803fcc 	andi	r2,r2,255
    ea5c:	10803fe0 	cmpeqi	r2,r2,255
    ea60:	1000031e 	bne	r2,zero,ea70 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
    ea64:	d0a7f703 	ldbu	r2,-24612(gp)
    ea68:	10800044 	addi	r2,r2,1
    ea6c:	d0a7f705 	stb	r2,-24612(gp)
        }
    }
}
    ea70:	0001883a 	nop
    ea74:	e037883a 	mov	sp,fp
    ea78:	df000017 	ldw	fp,0(sp)
    ea7c:	dec00104 	addi	sp,sp,4
    ea80:	f800283a 	ret

0000ea84 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
    ea84:	defffb04 	addi	sp,sp,-20
    ea88:	dfc00415 	stw	ra,16(sp)
    ea8c:	df000315 	stw	fp,12(sp)
    ea90:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    ea94:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
    ea98:	d0a7e943 	ldbu	r2,-24667(gp)
    ea9c:	10803fcc 	andi	r2,r2,255
    eaa0:	10800058 	cmpnei	r2,r2,1
    eaa4:	10002f1e 	bne	r2,zero,eb64 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    eaa8:	0005303a 	rdctl	r2,status
    eaac:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    eab0:	e0ffff17 	ldw	r3,-4(fp)
    eab4:	00bfff84 	movi	r2,-2
    eab8:	1884703a 	and	r2,r3,r2
    eabc:	1001703a 	wrctl	status,r2
  
  return context;
    eac0:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    eac4:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
    eac8:	d0a7f703 	ldbu	r2,-24612(gp)
    eacc:	10803fcc 	andi	r2,r2,255
    ead0:	10000326 	beq	r2,zero,eae0 <OSIntExit+0x5c>
            OSIntNesting--;
    ead4:	d0a7f703 	ldbu	r2,-24612(gp)
    ead8:	10bfffc4 	addi	r2,r2,-1
    eadc:	d0a7f705 	stb	r2,-24612(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
    eae0:	d0a7f703 	ldbu	r2,-24612(gp)
    eae4:	10803fcc 	andi	r2,r2,255
    eae8:	10001a1e 	bne	r2,zero,eb54 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
    eaec:	d0a7e903 	ldbu	r2,-24668(gp)
    eaf0:	10803fcc 	andi	r2,r2,255
    eaf4:	1000171e 	bne	r2,zero,eb54 <OSIntExit+0xd0>
                OS_SchedNew();
    eaf8:	000fb800 	call	fb80 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    eafc:	d0e7eb03 	ldbu	r3,-24660(gp)
    eb00:	d0a7eb43 	ldbu	r2,-24659(gp)
    eb04:	18c03fcc 	andi	r3,r3,255
    eb08:	10803fcc 	andi	r2,r2,255
    eb0c:	18801126 	beq	r3,r2,eb54 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    eb10:	d0a7eb03 	ldbu	r2,-24660(gp)
    eb14:	10c03fcc 	andi	r3,r2,255
    eb18:	008000b4 	movhi	r2,2
    eb1c:	109cd004 	addi	r2,r2,29504
    eb20:	18c7883a 	add	r3,r3,r3
    eb24:	18c7883a 	add	r3,r3,r3
    eb28:	10c5883a 	add	r2,r2,r3
    eb2c:	10800017 	ldw	r2,0(r2)
    eb30:	d0a7f315 	stw	r2,-24628(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
    eb34:	d0a7f317 	ldw	r2,-24628(gp)
    eb38:	10c00e17 	ldw	r3,56(r2)
    eb3c:	18c00044 	addi	r3,r3,1
    eb40:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    eb44:	d0a7ee17 	ldw	r2,-24648(gp)
    eb48:	10800044 	addi	r2,r2,1
    eb4c:	d0a7ee15 	stw	r2,-24648(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    eb50:	0018e880 	call	18e88 <OSCtxSw>
    eb54:	e0bffd17 	ldw	r2,-12(fp)
    eb58:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    eb5c:	e0bffe17 	ldw	r2,-8(fp)
    eb60:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    eb64:	0001883a 	nop
    eb68:	e037883a 	mov	sp,fp
    eb6c:	dfc00117 	ldw	ra,4(sp)
    eb70:	df000017 	ldw	fp,0(sp)
    eb74:	dec00204 	addi	sp,sp,8
    eb78:	f800283a 	ret

0000eb7c <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
    eb7c:	defffc04 	addi	sp,sp,-16
    eb80:	df000315 	stw	fp,12(sp)
    eb84:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    eb88:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
    eb8c:	d0a7e943 	ldbu	r2,-24667(gp)
    eb90:	10803fcc 	andi	r2,r2,255
    eb94:	10800058 	cmpnei	r2,r2,1
    eb98:	1000161e 	bne	r2,zero,ebf4 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    eb9c:	0005303a 	rdctl	r2,status
    eba0:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    eba4:	e0ffff17 	ldw	r3,-4(fp)
    eba8:	00bfff84 	movi	r2,-2
    ebac:	1884703a 	and	r2,r3,r2
    ebb0:	1001703a 	wrctl	status,r2
  
  return context;
    ebb4:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    ebb8:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
    ebbc:	d0a7f703 	ldbu	r2,-24612(gp)
    ebc0:	10803fcc 	andi	r2,r2,255
    ebc4:	1000071e 	bne	r2,zero,ebe4 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
    ebc8:	d0a7e903 	ldbu	r2,-24668(gp)
    ebcc:	10803fcc 	andi	r2,r2,255
    ebd0:	10803fe0 	cmpeqi	r2,r2,255
    ebd4:	1000031e 	bne	r2,zero,ebe4 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
    ebd8:	d0a7e903 	ldbu	r2,-24668(gp)
    ebdc:	10800044 	addi	r2,r2,1
    ebe0:	d0a7e905 	stb	r2,-24668(gp)
    ebe4:	e0bffd17 	ldw	r2,-12(fp)
    ebe8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ebec:	e0bffe17 	ldw	r2,-8(fp)
    ebf0:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    ebf4:	0001883a 	nop
    ebf8:	e037883a 	mov	sp,fp
    ebfc:	df000017 	ldw	fp,0(sp)
    ec00:	dec00104 	addi	sp,sp,4
    ec04:	f800283a 	ret

0000ec08 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
    ec08:	defff804 	addi	sp,sp,-32
    ec0c:	dfc00715 	stw	ra,28(sp)
    ec10:	df000615 	stw	fp,24(sp)
    ec14:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    ec18:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
    ec1c:	d0a7e943 	ldbu	r2,-24667(gp)
    ec20:	10803fcc 	andi	r2,r2,255
    ec24:	10800058 	cmpnei	r2,r2,1
    ec28:	1000281e 	bne	r2,zero,eccc <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ec2c:	0005303a 	rdctl	r2,status
    ec30:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ec34:	e0ffff17 	ldw	r3,-4(fp)
    ec38:	00bfff84 	movi	r2,-2
    ec3c:	1884703a 	and	r2,r3,r2
    ec40:	1001703a 	wrctl	status,r2
  
  return context;
    ec44:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    ec48:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
    ec4c:	d0a7e903 	ldbu	r2,-24668(gp)
    ec50:	10803fcc 	andi	r2,r2,255
    ec54:	10001926 	beq	r2,zero,ecbc <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
    ec58:	d0a7e903 	ldbu	r2,-24668(gp)
    ec5c:	10bfffc4 	addi	r2,r2,-1
    ec60:	d0a7e905 	stb	r2,-24668(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
    ec64:	d0a7e903 	ldbu	r2,-24668(gp)
    ec68:	10803fcc 	andi	r2,r2,255
    ec6c:	10000e1e 	bne	r2,zero,eca8 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
    ec70:	d0a7f703 	ldbu	r2,-24612(gp)
    ec74:	10803fcc 	andi	r2,r2,255
    ec78:	1000061e 	bne	r2,zero,ec94 <OSSchedUnlock+0x8c>
    ec7c:	e0bffa17 	ldw	r2,-24(fp)
    ec80:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ec84:	e0bffb17 	ldw	r2,-20(fp)
    ec88:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
    ec8c:	000fab00 	call	fab0 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
    ec90:	00000e06 	br	eccc <OSSchedUnlock+0xc4>
    ec94:	e0bffa17 	ldw	r2,-24(fp)
    ec98:	e0bffc15 	stw	r2,-16(fp)
    ec9c:	e0bffc17 	ldw	r2,-16(fp)
    eca0:	1001703a 	wrctl	status,r2
    eca4:	00000906 	br	eccc <OSSchedUnlock+0xc4>
    eca8:	e0bffa17 	ldw	r2,-24(fp)
    ecac:	e0bffd15 	stw	r2,-12(fp)
    ecb0:	e0bffd17 	ldw	r2,-12(fp)
    ecb4:	1001703a 	wrctl	status,r2
    ecb8:	00000406 	br	eccc <OSSchedUnlock+0xc4>
    ecbc:	e0bffa17 	ldw	r2,-24(fp)
    ecc0:	e0bffe15 	stw	r2,-8(fp)
    ecc4:	e0bffe17 	ldw	r2,-8(fp)
    ecc8:	1001703a 	wrctl	status,r2
    eccc:	0001883a 	nop
    ecd0:	e037883a 	mov	sp,fp
    ecd4:	dfc00117 	ldw	ra,4(sp)
    ecd8:	df000017 	ldw	fp,0(sp)
    ecdc:	dec00204 	addi	sp,sp,8
    ece0:	f800283a 	ret

0000ece4 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
    ece4:	defffe04 	addi	sp,sp,-8
    ece8:	dfc00115 	stw	ra,4(sp)
    ecec:	df000015 	stw	fp,0(sp)
    ecf0:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
    ecf4:	d0a7e943 	ldbu	r2,-24667(gp)
    ecf8:	10803fcc 	andi	r2,r2,255
    ecfc:	10000f1e 	bne	r2,zero,ed3c <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
    ed00:	000fb800 	call	fb80 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
    ed04:	d0a7eb03 	ldbu	r2,-24660(gp)
    ed08:	d0a7eb45 	stb	r2,-24659(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    ed0c:	d0a7eb03 	ldbu	r2,-24660(gp)
    ed10:	10c03fcc 	andi	r3,r2,255
    ed14:	008000b4 	movhi	r2,2
    ed18:	109cd004 	addi	r2,r2,29504
    ed1c:	18c7883a 	add	r3,r3,r3
    ed20:	18c7883a 	add	r3,r3,r3
    ed24:	10c5883a 	add	r2,r2,r3
    ed28:	10800017 	ldw	r2,0(r2)
    ed2c:	d0a7f315 	stw	r2,-24628(gp)
        OSTCBCur      = OSTCBHighRdy;
    ed30:	d0a7f317 	ldw	r2,-24628(gp)
    ed34:	d0a7f815 	stw	r2,-24608(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    ed38:	0018f140 	call	18f14 <OSStartHighRdy>
    }
}
    ed3c:	0001883a 	nop
    ed40:	e037883a 	mov	sp,fp
    ed44:	dfc00117 	ldw	ra,4(sp)
    ed48:	df000017 	ldw	fp,0(sp)
    ed4c:	dec00204 	addi	sp,sp,8
    ed50:	f800283a 	ret

0000ed54 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
    ed54:	defff904 	addi	sp,sp,-28
    ed58:	dfc00615 	stw	ra,24(sp)
    ed5c:	df000515 	stw	fp,20(sp)
    ed60:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    ed64:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    ed68:	01000084 	movi	r4,2
    ed6c:	001545c0 	call	1545c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ed70:	0005303a 	rdctl	r2,status
    ed74:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ed78:	e0fffc17 	ldw	r3,-16(fp)
    ed7c:	00bfff84 	movi	r2,-2
    ed80:	1884703a 	and	r2,r3,r2
    ed84:	1001703a 	wrctl	status,r2
  
  return context;
    ed88:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
    ed8c:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    ed90:	d027ea15 	stw	zero,-24664(gp)
    ed94:	e0bffb17 	ldw	r2,-20(fp)
    ed98:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ed9c:	e0bffd17 	ldw	r2,-12(fp)
    eda0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
    eda4:	0009883a 	mov	r4,zero
    eda8:	001545c0 	call	1545c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    edac:	0005303a 	rdctl	r2,status
    edb0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    edb4:	e0fffe17 	ldw	r3,-8(fp)
    edb8:	00bfff84 	movi	r2,-2
    edbc:	1884703a 	and	r2,r3,r2
    edc0:	1001703a 	wrctl	status,r2
  
  return context;
    edc4:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
    edc8:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
    edcc:	d0a7ea17 	ldw	r2,-24664(gp)
    edd0:	d0a7ef15 	stw	r2,-24644(gp)
    OSStatRdy    = OS_TRUE;
    edd4:	00800044 	movi	r2,1
    edd8:	d0a7fb05 	stb	r2,-24596(gp)
    eddc:	e0bffb17 	ldw	r2,-20(fp)
    ede0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ede4:	e0bfff17 	ldw	r2,-4(fp)
    ede8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    edec:	0001883a 	nop
    edf0:	e037883a 	mov	sp,fp
    edf4:	dfc00117 	ldw	ra,4(sp)
    edf8:	df000017 	ldw	fp,0(sp)
    edfc:	dec00204 	addi	sp,sp,8
    ee00:	f800283a 	ret

0000ee04 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
    ee04:	defff704 	addi	sp,sp,-36
    ee08:	dfc00815 	stw	ra,32(sp)
    ee0c:	df000715 	stw	fp,28(sp)
    ee10:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    ee14:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
    ee18:	001913c0 	call	1913c <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ee1c:	0005303a 	rdctl	r2,status
    ee20:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ee24:	e0fffd17 	ldw	r3,-12(fp)
    ee28:	00bfff84 	movi	r2,-2
    ee2c:	1884703a 	and	r2,r3,r2
    ee30:	1001703a 	wrctl	status,r2
  
  return context;
    ee34:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    ee38:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
    ee3c:	d0a7f917 	ldw	r2,-24604(gp)
    ee40:	10800044 	addi	r2,r2,1
    ee44:	d0a7f915 	stw	r2,-24604(gp)
    ee48:	e0bffb17 	ldw	r2,-20(fp)
    ee4c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ee50:	e0bfff17 	ldw	r2,-4(fp)
    ee54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
    ee58:	d0a7e943 	ldbu	r2,-24667(gp)
    ee5c:	10803fcc 	andi	r2,r2,255
    ee60:	10800058 	cmpnei	r2,r2,1
    ee64:	10006a1e 	bne	r2,zero,f010 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
    ee68:	d0a7ed03 	ldbu	r2,-24652(gp)
    ee6c:	10803fcc 	andi	r2,r2,255
    ee70:	10c00060 	cmpeqi	r3,r2,1
    ee74:	1800061e 	bne	r3,zero,ee90 <OSTimeTick+0x8c>
    ee78:	10c000a0 	cmpeqi	r3,r2,2
    ee7c:	1800061e 	bne	r3,zero,ee98 <OSTimeTick+0x94>
    ee80:	10000a1e 	bne	r2,zero,eeac <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
    ee84:	00800044 	movi	r2,1
    ee88:	e0bffa05 	stb	r2,-24(fp)
                 break;
    ee8c:	00000b06 	br	eebc <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
    ee90:	e03ffa05 	stb	zero,-24(fp)
                 break;
    ee94:	00000906 	br	eebc <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
    ee98:	00800044 	movi	r2,1
    ee9c:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
    eea0:	00800044 	movi	r2,1
    eea4:	d0a7ed05 	stb	r2,-24652(gp)
                 break;
    eea8:	00000406 	br	eebc <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
    eeac:	00800044 	movi	r2,1
    eeb0:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
    eeb4:	d027ed05 	stb	zero,-24652(gp)
                 break;
    eeb8:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
    eebc:	e0bffa03 	ldbu	r2,-24(fp)
    eec0:	10005226 	beq	r2,zero,f00c <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
    eec4:	d0a7ec17 	ldw	r2,-24656(gp)
    eec8:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    eecc:	00004906 	br	eff4 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    eed0:	0005303a 	rdctl	r2,status
    eed4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    eed8:	e0fffc17 	ldw	r3,-16(fp)
    eedc:	00bfff84 	movi	r2,-2
    eee0:	1884703a 	and	r2,r3,r2
    eee4:	1001703a 	wrctl	status,r2
  
  return context;
    eee8:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
    eeec:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
    eef0:	e0bff917 	ldw	r2,-28(fp)
    eef4:	10800b8b 	ldhu	r2,46(r2)
    eef8:	10bfffcc 	andi	r2,r2,65535
    eefc:	10003626 	beq	r2,zero,efd8 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
    ef00:	e0bff917 	ldw	r2,-28(fp)
    ef04:	10800b8b 	ldhu	r2,46(r2)
    ef08:	10bfffc4 	addi	r2,r2,-1
    ef0c:	1007883a 	mov	r3,r2
    ef10:	e0bff917 	ldw	r2,-28(fp)
    ef14:	10c00b8d 	sth	r3,46(r2)
    ef18:	e0bff917 	ldw	r2,-28(fp)
    ef1c:	10800b8b 	ldhu	r2,46(r2)
    ef20:	10bfffcc 	andi	r2,r2,65535
    ef24:	10002c1e 	bne	r2,zero,efd8 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    ef28:	e0bff917 	ldw	r2,-28(fp)
    ef2c:	10800c03 	ldbu	r2,48(r2)
    ef30:	10803fcc 	andi	r2,r2,255
    ef34:	10800dcc 	andi	r2,r2,55
    ef38:	10000b26 	beq	r2,zero,ef68 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
    ef3c:	e0bff917 	ldw	r2,-28(fp)
    ef40:	10c00c03 	ldbu	r3,48(r2)
    ef44:	00bff204 	movi	r2,-56
    ef48:	1884703a 	and	r2,r3,r2
    ef4c:	1007883a 	mov	r3,r2
    ef50:	e0bff917 	ldw	r2,-28(fp)
    ef54:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
    ef58:	e0bff917 	ldw	r2,-28(fp)
    ef5c:	00c00044 	movi	r3,1
    ef60:	10c00c45 	stb	r3,49(r2)
    ef64:	00000206 	br	ef70 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    ef68:	e0bff917 	ldw	r2,-28(fp)
    ef6c:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
    ef70:	e0bff917 	ldw	r2,-28(fp)
    ef74:	10800c03 	ldbu	r2,48(r2)
    ef78:	10803fcc 	andi	r2,r2,255
    ef7c:	1080020c 	andi	r2,r2,8
    ef80:	1000151e 	bne	r2,zero,efd8 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
    ef84:	e0bff917 	ldw	r2,-28(fp)
    ef88:	10c00d83 	ldbu	r3,54(r2)
    ef8c:	d0a7f503 	ldbu	r2,-24620(gp)
    ef90:	1884b03a 	or	r2,r3,r2
    ef94:	d0a7f505 	stb	r2,-24620(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    ef98:	e0bff917 	ldw	r2,-28(fp)
    ef9c:	10800d03 	ldbu	r2,52(r2)
    efa0:	10c03fcc 	andi	r3,r2,255
    efa4:	e0bff917 	ldw	r2,-28(fp)
    efa8:	10800d03 	ldbu	r2,52(r2)
    efac:	11003fcc 	andi	r4,r2,255
    efb0:	d0a7f544 	addi	r2,gp,-24619
    efb4:	2085883a 	add	r2,r4,r2
    efb8:	11000003 	ldbu	r4,0(r2)
    efbc:	e0bff917 	ldw	r2,-28(fp)
    efc0:	10800d43 	ldbu	r2,53(r2)
    efc4:	2084b03a 	or	r2,r4,r2
    efc8:	1009883a 	mov	r4,r2
    efcc:	d0a7f544 	addi	r2,gp,-24619
    efd0:	1885883a 	add	r2,r3,r2
    efd4:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
    efd8:	e0bff917 	ldw	r2,-28(fp)
    efdc:	10800517 	ldw	r2,20(r2)
    efe0:	e0bff915 	stw	r2,-28(fp)
    efe4:	e0bffb17 	ldw	r2,-20(fp)
    efe8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    efec:	e0bffe17 	ldw	r2,-8(fp)
    eff0:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    eff4:	e0bff917 	ldw	r2,-28(fp)
    eff8:	10800c83 	ldbu	r2,50(r2)
    effc:	10803fcc 	andi	r2,r2,255
    f000:	10800518 	cmpnei	r2,r2,20
    f004:	103fb21e 	bne	r2,zero,eed0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700eed0>
    f008:	00000106 	br	f010 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
    f00c:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
    f010:	e037883a 	mov	sp,fp
    f014:	dfc00117 	ldw	ra,4(sp)
    f018:	df000017 	ldw	fp,0(sp)
    f01c:	dec00204 	addi	sp,sp,8
    f020:	f800283a 	ret

0000f024 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
    f024:	deffff04 	addi	sp,sp,-4
    f028:	df000015 	stw	fp,0(sp)
    f02c:	d839883a 	mov	fp,sp
    return (OS_VERSION);
    f030:	00804784 	movi	r2,286
}
    f034:	e037883a 	mov	sp,fp
    f038:	df000017 	ldw	fp,0(sp)
    f03c:	dec00104 	addi	sp,sp,4
    f040:	f800283a 	ret

0000f044 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
    f044:	deffff04 	addi	sp,sp,-4
    f048:	df000015 	stw	fp,0(sp)
    f04c:	d839883a 	mov	fp,sp
}
    f050:	0001883a 	nop
    f054:	e037883a 	mov	sp,fp
    f058:	df000017 	ldw	fp,0(sp)
    f05c:	dec00104 	addi	sp,sp,4
    f060:	f800283a 	ret

0000f064 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
    f064:	defff804 	addi	sp,sp,-32
    f068:	dfc00715 	stw	ra,28(sp)
    f06c:	df000615 	stw	fp,24(sp)
    f070:	df000604 	addi	fp,sp,24
    f074:	e13ffc15 	stw	r4,-16(fp)
    f078:	e17ffd15 	stw	r5,-12(fp)
    f07c:	3007883a 	mov	r3,r6
    f080:	3805883a 	mov	r2,r7
    f084:	e0fffe05 	stb	r3,-8(fp)
    f088:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
    f08c:	e0bffc17 	ldw	r2,-16(fp)
    f090:	10800283 	ldbu	r2,10(r2)
    f094:	10c03fcc 	andi	r3,r2,255
    f098:	008000b4 	movhi	r2,2
    f09c:	10a84004 	addi	r2,r2,-24320
    f0a0:	10c5883a 	add	r2,r2,r3
    f0a4:	10800003 	ldbu	r2,0(r2)
    f0a8:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
    f0ac:	e0bffa03 	ldbu	r2,-24(fp)
    f0b0:	e0fffc17 	ldw	r3,-16(fp)
    f0b4:	1885883a 	add	r2,r3,r2
    f0b8:	108002c4 	addi	r2,r2,11
    f0bc:	10800003 	ldbu	r2,0(r2)
    f0c0:	10c03fcc 	andi	r3,r2,255
    f0c4:	008000b4 	movhi	r2,2
    f0c8:	10a84004 	addi	r2,r2,-24320
    f0cc:	10c5883a 	add	r2,r2,r3
    f0d0:	10800003 	ldbu	r2,0(r2)
    f0d4:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
    f0d8:	e0bffa03 	ldbu	r2,-24(fp)
    f0dc:	100490fa 	slli	r2,r2,3
    f0e0:	1007883a 	mov	r3,r2
    f0e4:	e0bffa43 	ldbu	r2,-23(fp)
    f0e8:	1885883a 	add	r2,r3,r2
    f0ec:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    f0f0:	e0fffa83 	ldbu	r3,-22(fp)
    f0f4:	008000b4 	movhi	r2,2
    f0f8:	109cd004 	addi	r2,r2,29504
    f0fc:	18c7883a 	add	r3,r3,r3
    f100:	18c7883a 	add	r3,r3,r3
    f104:	10c5883a 	add	r2,r2,r3
    f108:	10800017 	ldw	r2,0(r2)
    f10c:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
    f110:	e0bffb17 	ldw	r2,-20(fp)
    f114:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
    f118:	e0bffb17 	ldw	r2,-20(fp)
    f11c:	e0fffd17 	ldw	r3,-12(fp)
    f120:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    f124:	e0bffb17 	ldw	r2,-20(fp)
    f128:	10800c03 	ldbu	r2,48(r2)
    f12c:	1007883a 	mov	r3,r2
    f130:	e0bffe03 	ldbu	r2,-8(fp)
    f134:	0084303a 	nor	r2,zero,r2
    f138:	1884703a 	and	r2,r3,r2
    f13c:	1007883a 	mov	r3,r2
    f140:	e0bffb17 	ldw	r2,-20(fp)
    f144:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
    f148:	e0bffb17 	ldw	r2,-20(fp)
    f14c:	e0ffff03 	ldbu	r3,-4(fp)
    f150:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
    f154:	e0bffb17 	ldw	r2,-20(fp)
    f158:	10800c03 	ldbu	r2,48(r2)
    f15c:	10803fcc 	andi	r2,r2,255
    f160:	1080020c 	andi	r2,r2,8
    f164:	1000111e 	bne	r2,zero,f1ac <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
    f168:	e0bffb17 	ldw	r2,-20(fp)
    f16c:	10c00d83 	ldbu	r3,54(r2)
    f170:	d0a7f503 	ldbu	r2,-24620(gp)
    f174:	1884b03a 	or	r2,r3,r2
    f178:	d0a7f505 	stb	r2,-24620(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    f17c:	e0fffa03 	ldbu	r3,-24(fp)
    f180:	e13ffa03 	ldbu	r4,-24(fp)
    f184:	d0a7f544 	addi	r2,gp,-24619
    f188:	2085883a 	add	r2,r4,r2
    f18c:	11000003 	ldbu	r4,0(r2)
    f190:	e0bffb17 	ldw	r2,-20(fp)
    f194:	10800d43 	ldbu	r2,53(r2)
    f198:	2084b03a 	or	r2,r4,r2
    f19c:	1009883a 	mov	r4,r2
    f1a0:	d0a7f544 	addi	r2,gp,-24619
    f1a4:	1885883a 	add	r2,r3,r2
    f1a8:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
    f1ac:	e17ffc17 	ldw	r5,-16(fp)
    f1b0:	e13ffb17 	ldw	r4,-20(fp)
    f1b4:	000f45c0 	call	f45c <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
    f1b8:	e0bffb17 	ldw	r2,-20(fp)
    f1bc:	10800817 	ldw	r2,32(r2)
    f1c0:	10000826 	beq	r2,zero,f1e4 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    f1c4:	e0bffb17 	ldw	r2,-20(fp)
    f1c8:	10800817 	ldw	r2,32(r2)
    f1cc:	100b883a 	mov	r5,r2
    f1d0:	e13ffb17 	ldw	r4,-20(fp)
    f1d4:	000f5140 	call	f514 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    f1d8:	e0bffb17 	ldw	r2,-20(fp)
    f1dc:	e0fffc17 	ldw	r3,-16(fp)
    f1e0:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
    f1e4:	e0bffa83 	ldbu	r2,-22(fp)
}
    f1e8:	e037883a 	mov	sp,fp
    f1ec:	dfc00117 	ldw	ra,4(sp)
    f1f0:	df000017 	ldw	fp,0(sp)
    f1f4:	dec00204 	addi	sp,sp,8
    f1f8:	f800283a 	ret

0000f1fc <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    f1fc:	defffd04 	addi	sp,sp,-12
    f200:	df000215 	stw	fp,8(sp)
    f204:	df000204 	addi	fp,sp,8
    f208:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
    f20c:	d0a7f817 	ldw	r2,-24608(gp)
    f210:	e0ffff17 	ldw	r3,-4(fp)
    f214:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    f218:	d0a7f817 	ldw	r2,-24608(gp)
    f21c:	10800d03 	ldbu	r2,52(r2)
    f220:	10803fcc 	andi	r2,r2,255
    f224:	d0e7f817 	ldw	r3,-24608(gp)
    f228:	18c00d03 	ldbu	r3,52(r3)
    f22c:	18c03fcc 	andi	r3,r3,255
    f230:	e13fff17 	ldw	r4,-4(fp)
    f234:	20c7883a 	add	r3,r4,r3
    f238:	18c002c4 	addi	r3,r3,11
    f23c:	19000003 	ldbu	r4,0(r3)
    f240:	d0e7f817 	ldw	r3,-24608(gp)
    f244:	18c00d43 	ldbu	r3,53(r3)
    f248:	20c6b03a 	or	r3,r4,r3
    f24c:	1809883a 	mov	r4,r3
    f250:	e0ffff17 	ldw	r3,-4(fp)
    f254:	1885883a 	add	r2,r3,r2
    f258:	108002c4 	addi	r2,r2,11
    f25c:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    f260:	e0bfff17 	ldw	r2,-4(fp)
    f264:	10c00283 	ldbu	r3,10(r2)
    f268:	d0a7f817 	ldw	r2,-24608(gp)
    f26c:	10800d83 	ldbu	r2,54(r2)
    f270:	1884b03a 	or	r2,r3,r2
    f274:	1007883a 	mov	r3,r2
    f278:	e0bfff17 	ldw	r2,-4(fp)
    f27c:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    f280:	d0a7f817 	ldw	r2,-24608(gp)
    f284:	10800d03 	ldbu	r2,52(r2)
    f288:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    f28c:	e0fffe03 	ldbu	r3,-8(fp)
    f290:	e13ffe03 	ldbu	r4,-8(fp)
    f294:	d0a7f544 	addi	r2,gp,-24619
    f298:	2085883a 	add	r2,r4,r2
    f29c:	10800003 	ldbu	r2,0(r2)
    f2a0:	1009883a 	mov	r4,r2
    f2a4:	d0a7f817 	ldw	r2,-24608(gp)
    f2a8:	10800d43 	ldbu	r2,53(r2)
    f2ac:	0084303a 	nor	r2,zero,r2
    f2b0:	2084703a 	and	r2,r4,r2
    f2b4:	1009883a 	mov	r4,r2
    f2b8:	d0a7f544 	addi	r2,gp,-24619
    f2bc:	1885883a 	add	r2,r3,r2
    f2c0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    f2c4:	e0fffe03 	ldbu	r3,-8(fp)
    f2c8:	d0a7f544 	addi	r2,gp,-24619
    f2cc:	1885883a 	add	r2,r3,r2
    f2d0:	10800003 	ldbu	r2,0(r2)
    f2d4:	10803fcc 	andi	r2,r2,255
    f2d8:	1000071e 	bne	r2,zero,f2f8 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    f2dc:	d0a7f817 	ldw	r2,-24608(gp)
    f2e0:	10800d83 	ldbu	r2,54(r2)
    f2e4:	0084303a 	nor	r2,zero,r2
    f2e8:	1007883a 	mov	r3,r2
    f2ec:	d0a7f503 	ldbu	r2,-24620(gp)
    f2f0:	1884703a 	and	r2,r3,r2
    f2f4:	d0a7f505 	stb	r2,-24620(gp)
    }
}
    f2f8:	0001883a 	nop
    f2fc:	e037883a 	mov	sp,fp
    f300:	df000017 	ldw	fp,0(sp)
    f304:	dec00104 	addi	sp,sp,4
    f308:	f800283a 	ret

0000f30c <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
    f30c:	defffb04 	addi	sp,sp,-20
    f310:	df000415 	stw	fp,16(sp)
    f314:	df000404 	addi	fp,sp,16
    f318:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    f31c:	d0a7f817 	ldw	r2,-24608(gp)
    f320:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
    f324:	d0a7f817 	ldw	r2,-24608(gp)
    f328:	e0ffff17 	ldw	r3,-4(fp)
    f32c:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
    f330:	e0bfff17 	ldw	r2,-4(fp)
    f334:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
    f338:	e0bffc17 	ldw	r2,-16(fp)
    f33c:	10800017 	ldw	r2,0(r2)
    f340:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    f344:	00002006 	br	f3c8 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
    f348:	d0a7f817 	ldw	r2,-24608(gp)
    f34c:	10800d03 	ldbu	r2,52(r2)
    f350:	10803fcc 	andi	r2,r2,255
    f354:	d0e7f817 	ldw	r3,-24608(gp)
    f358:	18c00d03 	ldbu	r3,52(r3)
    f35c:	18c03fcc 	andi	r3,r3,255
    f360:	e13ffd17 	ldw	r4,-12(fp)
    f364:	20c7883a 	add	r3,r4,r3
    f368:	18c002c4 	addi	r3,r3,11
    f36c:	19000003 	ldbu	r4,0(r3)
    f370:	d0e7f817 	ldw	r3,-24608(gp)
    f374:	18c00d43 	ldbu	r3,53(r3)
    f378:	20c6b03a 	or	r3,r4,r3
    f37c:	1809883a 	mov	r4,r3
    f380:	e0fffd17 	ldw	r3,-12(fp)
    f384:	1885883a 	add	r2,r3,r2
    f388:	108002c4 	addi	r2,r2,11
    f38c:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    f390:	e0bffd17 	ldw	r2,-12(fp)
    f394:	10c00283 	ldbu	r3,10(r2)
    f398:	d0a7f817 	ldw	r2,-24608(gp)
    f39c:	10800d83 	ldbu	r2,54(r2)
    f3a0:	1884b03a 	or	r2,r3,r2
    f3a4:	1007883a 	mov	r3,r2
    f3a8:	e0bffd17 	ldw	r2,-12(fp)
    f3ac:	10c00285 	stb	r3,10(r2)
        pevents++;
    f3b0:	e0bffc17 	ldw	r2,-16(fp)
    f3b4:	10800104 	addi	r2,r2,4
    f3b8:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
    f3bc:	e0bffc17 	ldw	r2,-16(fp)
    f3c0:	10800017 	ldw	r2,0(r2)
    f3c4:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    f3c8:	e0bffd17 	ldw	r2,-12(fp)
    f3cc:	103fde1e 	bne	r2,zero,f348 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f348>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    f3d0:	d0a7f817 	ldw	r2,-24608(gp)
    f3d4:	10800d03 	ldbu	r2,52(r2)
    f3d8:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    f3dc:	e0fffe03 	ldbu	r3,-8(fp)
    f3e0:	e13ffe03 	ldbu	r4,-8(fp)
    f3e4:	d0a7f544 	addi	r2,gp,-24619
    f3e8:	2085883a 	add	r2,r4,r2
    f3ec:	10800003 	ldbu	r2,0(r2)
    f3f0:	1009883a 	mov	r4,r2
    f3f4:	d0a7f817 	ldw	r2,-24608(gp)
    f3f8:	10800d43 	ldbu	r2,53(r2)
    f3fc:	0084303a 	nor	r2,zero,r2
    f400:	2084703a 	and	r2,r4,r2
    f404:	1009883a 	mov	r4,r2
    f408:	d0a7f544 	addi	r2,gp,-24619
    f40c:	1885883a 	add	r2,r3,r2
    f410:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    f414:	e0fffe03 	ldbu	r3,-8(fp)
    f418:	d0a7f544 	addi	r2,gp,-24619
    f41c:	1885883a 	add	r2,r3,r2
    f420:	10800003 	ldbu	r2,0(r2)
    f424:	10803fcc 	andi	r2,r2,255
    f428:	1000071e 	bne	r2,zero,f448 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    f42c:	d0a7f817 	ldw	r2,-24608(gp)
    f430:	10800d83 	ldbu	r2,54(r2)
    f434:	0084303a 	nor	r2,zero,r2
    f438:	1007883a 	mov	r3,r2
    f43c:	d0a7f503 	ldbu	r2,-24620(gp)
    f440:	1884703a 	and	r2,r3,r2
    f444:	d0a7f505 	stb	r2,-24620(gp)
    }
}
    f448:	0001883a 	nop
    f44c:	e037883a 	mov	sp,fp
    f450:	df000017 	ldw	fp,0(sp)
    f454:	dec00104 	addi	sp,sp,4
    f458:	f800283a 	ret

0000f45c <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
    f45c:	defffc04 	addi	sp,sp,-16
    f460:	df000315 	stw	fp,12(sp)
    f464:	df000304 	addi	fp,sp,12
    f468:	e13ffe15 	stw	r4,-8(fp)
    f46c:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    f470:	e0bffe17 	ldw	r2,-8(fp)
    f474:	10800d03 	ldbu	r2,52(r2)
    f478:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
    f47c:	e0bffd03 	ldbu	r2,-12(fp)
    f480:	e0fffd03 	ldbu	r3,-12(fp)
    f484:	e13fff17 	ldw	r4,-4(fp)
    f488:	20c7883a 	add	r3,r4,r3
    f48c:	18c002c4 	addi	r3,r3,11
    f490:	18c00003 	ldbu	r3,0(r3)
    f494:	1809883a 	mov	r4,r3
    f498:	e0fffe17 	ldw	r3,-8(fp)
    f49c:	18c00d43 	ldbu	r3,53(r3)
    f4a0:	00c6303a 	nor	r3,zero,r3
    f4a4:	20c6703a 	and	r3,r4,r3
    f4a8:	1809883a 	mov	r4,r3
    f4ac:	e0ffff17 	ldw	r3,-4(fp)
    f4b0:	1885883a 	add	r2,r3,r2
    f4b4:	108002c4 	addi	r2,r2,11
    f4b8:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
    f4bc:	e0bffd03 	ldbu	r2,-12(fp)
    f4c0:	e0ffff17 	ldw	r3,-4(fp)
    f4c4:	1885883a 	add	r2,r3,r2
    f4c8:	108002c4 	addi	r2,r2,11
    f4cc:	10800003 	ldbu	r2,0(r2)
    f4d0:	10803fcc 	andi	r2,r2,255
    f4d4:	10000a1e 	bne	r2,zero,f500 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
    f4d8:	e0bfff17 	ldw	r2,-4(fp)
    f4dc:	10800283 	ldbu	r2,10(r2)
    f4e0:	1007883a 	mov	r3,r2
    f4e4:	e0bffe17 	ldw	r2,-8(fp)
    f4e8:	10800d83 	ldbu	r2,54(r2)
    f4ec:	0084303a 	nor	r2,zero,r2
    f4f0:	1884703a 	and	r2,r3,r2
    f4f4:	1007883a 	mov	r3,r2
    f4f8:	e0bfff17 	ldw	r2,-4(fp)
    f4fc:	10c00285 	stb	r3,10(r2)
    }
}
    f500:	0001883a 	nop
    f504:	e037883a 	mov	sp,fp
    f508:	df000017 	ldw	fp,0(sp)
    f50c:	dec00104 	addi	sp,sp,4
    f510:	f800283a 	ret

0000f514 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
    f514:	defffa04 	addi	sp,sp,-24
    f518:	df000515 	stw	fp,20(sp)
    f51c:	df000504 	addi	fp,sp,20
    f520:	e13ffe15 	stw	r4,-8(fp)
    f524:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
    f528:	e0bffe17 	ldw	r2,-8(fp)
    f52c:	10800d03 	ldbu	r2,52(r2)
    f530:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
    f534:	e0bffe17 	ldw	r2,-8(fp)
    f538:	10800d83 	ldbu	r2,54(r2)
    f53c:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
    f540:	e0bffe17 	ldw	r2,-8(fp)
    f544:	10800d43 	ldbu	r2,53(r2)
    f548:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
    f54c:	e0bfff17 	ldw	r2,-4(fp)
    f550:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
    f554:	e0bffb17 	ldw	r2,-20(fp)
    f558:	10800017 	ldw	r2,0(r2)
    f55c:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    f560:	00002506 	br	f5f8 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
    f564:	e0bffd03 	ldbu	r2,-12(fp)
    f568:	e0fffd03 	ldbu	r3,-12(fp)
    f56c:	e13ffc17 	ldw	r4,-16(fp)
    f570:	20c7883a 	add	r3,r4,r3
    f574:	18c002c4 	addi	r3,r3,11
    f578:	18c00003 	ldbu	r3,0(r3)
    f57c:	1809883a 	mov	r4,r3
    f580:	e0fffd83 	ldbu	r3,-10(fp)
    f584:	00c6303a 	nor	r3,zero,r3
    f588:	20c6703a 	and	r3,r4,r3
    f58c:	1809883a 	mov	r4,r3
    f590:	e0fffc17 	ldw	r3,-16(fp)
    f594:	1885883a 	add	r2,r3,r2
    f598:	108002c4 	addi	r2,r2,11
    f59c:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
    f5a0:	e0bffd03 	ldbu	r2,-12(fp)
    f5a4:	e0fffc17 	ldw	r3,-16(fp)
    f5a8:	1885883a 	add	r2,r3,r2
    f5ac:	108002c4 	addi	r2,r2,11
    f5b0:	10800003 	ldbu	r2,0(r2)
    f5b4:	10803fcc 	andi	r2,r2,255
    f5b8:	1000091e 	bne	r2,zero,f5e0 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
    f5bc:	e0bffc17 	ldw	r2,-16(fp)
    f5c0:	10800283 	ldbu	r2,10(r2)
    f5c4:	1007883a 	mov	r3,r2
    f5c8:	e0bffd43 	ldbu	r2,-11(fp)
    f5cc:	0084303a 	nor	r2,zero,r2
    f5d0:	1884703a 	and	r2,r3,r2
    f5d4:	1007883a 	mov	r3,r2
    f5d8:	e0bffc17 	ldw	r2,-16(fp)
    f5dc:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
    f5e0:	e0bffb17 	ldw	r2,-20(fp)
    f5e4:	10800104 	addi	r2,r2,4
    f5e8:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
    f5ec:	e0bffb17 	ldw	r2,-20(fp)
    f5f0:	10800017 	ldw	r2,0(r2)
    f5f4:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    f5f8:	e0bffc17 	ldw	r2,-16(fp)
    f5fc:	103fd91e 	bne	r2,zero,f564 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f564>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
    f600:	0001883a 	nop
    f604:	e037883a 	mov	sp,fp
    f608:	df000017 	ldw	fp,0(sp)
    f60c:	dec00104 	addi	sp,sp,4
    f610:	f800283a 	ret

0000f614 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    f614:	defffc04 	addi	sp,sp,-16
    f618:	df000315 	stw	fp,12(sp)
    f61c:	df000304 	addi	fp,sp,12
    f620:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    f624:	e0bfff17 	ldw	r2,-4(fp)
    f628:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
    f62c:	e0bfff17 	ldw	r2,-4(fp)
    f630:	108002c4 	addi	r2,r2,11
    f634:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    f638:	e03ffe05 	stb	zero,-8(fp)
    f63c:	00000706 	br	f65c <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
    f640:	e0bffd17 	ldw	r2,-12(fp)
    f644:	10c00044 	addi	r3,r2,1
    f648:	e0fffd15 	stw	r3,-12(fp)
    f64c:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    f650:	e0bffe03 	ldbu	r2,-8(fp)
    f654:	10800044 	addi	r2,r2,1
    f658:	e0bffe05 	stb	r2,-8(fp)
    f65c:	e0bffe03 	ldbu	r2,-8(fp)
    f660:	108000f0 	cmpltui	r2,r2,3
    f664:	103ff61e 	bne	r2,zero,f640 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f640>
        *ptbl++ = 0;
    }
}
    f668:	0001883a 	nop
    f66c:	e037883a 	mov	sp,fp
    f670:	df000017 	ldw	fp,0(sp)
    f674:	dec00104 	addi	sp,sp,4
    f678:	f800283a 	ret

0000f67c <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
    f67c:	defffb04 	addi	sp,sp,-20
    f680:	dfc00415 	stw	ra,16(sp)
    f684:	df000315 	stw	fp,12(sp)
    f688:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    f68c:	0142d004 	movi	r5,2880
    f690:	010000b4 	movhi	r4,2
    f694:	2118bc04 	addi	r4,r4,25328
    f698:	000f9f40 	call	f9f4 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
    f69c:	008000b4 	movhi	r2,2
    f6a0:	1098bc04 	addi	r2,r2,25328
    f6a4:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
    f6a8:	008000b4 	movhi	r2,2
    f6ac:	1098c804 	addi	r2,r2,25376
    f6b0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    f6b4:	e03ffd0d 	sth	zero,-12(fp)
    f6b8:	00001306 	br	f708 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
    f6bc:	e0bffe17 	ldw	r2,-8(fp)
    f6c0:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
    f6c4:	e0bffe17 	ldw	r2,-8(fp)
    f6c8:	e0ffff17 	ldw	r3,-4(fp)
    f6cc:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
    f6d0:	e0bffe17 	ldw	r2,-8(fp)
    f6d4:	00c00fc4 	movi	r3,63
    f6d8:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
    f6dc:	e0bffe17 	ldw	r2,-8(fp)
    f6e0:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
    f6e4:	e0bffe17 	ldw	r2,-8(fp)
    f6e8:	10800c04 	addi	r2,r2,48
    f6ec:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
    f6f0:	e0bfff17 	ldw	r2,-4(fp)
    f6f4:	10800c04 	addi	r2,r2,48
    f6f8:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    f6fc:	e0bffd0b 	ldhu	r2,-12(fp)
    f700:	10800044 	addi	r2,r2,1
    f704:	e0bffd0d 	sth	r2,-12(fp)
    f708:	e0bffd0b 	ldhu	r2,-12(fp)
    f70c:	10800ef0 	cmpltui	r2,r2,59
    f710:	103fea1e 	bne	r2,zero,f6bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f6bc>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    f714:	e0bffe17 	ldw	r2,-8(fp)
    f718:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
    f71c:	e0bffe17 	ldw	r2,-8(fp)
    f720:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
    f724:	e0bffe17 	ldw	r2,-8(fp)
    f728:	00c00fc4 	movi	r3,63
    f72c:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
    f730:	e0bffe17 	ldw	r2,-8(fp)
    f734:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
    f738:	008000b4 	movhi	r2,2
    f73c:	1098bc04 	addi	r2,r2,25328
    f740:	d0a7f615 	stw	r2,-24616(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
    f744:	0001883a 	nop
    f748:	e037883a 	mov	sp,fp
    f74c:	dfc00117 	ldw	ra,4(sp)
    f750:	df000017 	ldw	fp,0(sp)
    f754:	dec00204 	addi	sp,sp,8
    f758:	f800283a 	ret

0000f75c <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
    f75c:	deffff04 	addi	sp,sp,-4
    f760:	df000015 	stw	fp,0(sp)
    f764:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    f768:	d027f915 	stw	zero,-24604(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    f76c:	d027f705 	stb	zero,-24612(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    f770:	d027e905 	stb	zero,-24668(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    f774:	d027f145 	stb	zero,-24635(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
    f778:	d027e945 	stb	zero,-24667(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    f77c:	d027ee15 	stw	zero,-24648(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    f780:	d027ea15 	stw	zero,-24664(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
    f784:	d027fc15 	stw	zero,-24592(gp)
    OSIdleCtrMax  = 0L;
    f788:	d027ef15 	stw	zero,-24644(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
    f78c:	d027fb05 	stb	zero,-24596(gp)
#endif
}
    f790:	0001883a 	nop
    f794:	e037883a 	mov	sp,fp
    f798:	df000017 	ldw	fp,0(sp)
    f79c:	dec00104 	addi	sp,sp,4
    f7a0:	f800283a 	ret

0000f7a4 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
    f7a4:	defffd04 	addi	sp,sp,-12
    f7a8:	df000215 	stw	fp,8(sp)
    f7ac:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    f7b0:	d027f505 	stb	zero,-24620(gp)
    prdytbl       = &OSRdyTbl[0];
    f7b4:	d0a7f544 	addi	r2,gp,-24619
    f7b8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    f7bc:	e03ffe05 	stb	zero,-8(fp)
    f7c0:	00000706 	br	f7e0 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
    f7c4:	e0bfff17 	ldw	r2,-4(fp)
    f7c8:	10c00044 	addi	r3,r2,1
    f7cc:	e0ffff15 	stw	r3,-4(fp)
    f7d0:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    f7d4:	e0bffe03 	ldbu	r2,-8(fp)
    f7d8:	10800044 	addi	r2,r2,1
    f7dc:	e0bffe05 	stb	r2,-8(fp)
    f7e0:	e0bffe03 	ldbu	r2,-8(fp)
    f7e4:	108000f0 	cmpltui	r2,r2,3
    f7e8:	103ff61e 	bne	r2,zero,f7c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f7c4>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
    f7ec:	d027eb45 	stb	zero,-24659(gp)
    OSPrioHighRdy = 0;
    f7f0:	d027eb05 	stb	zero,-24660(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
    f7f4:	d027f315 	stw	zero,-24628(gp)
    OSTCBCur      = (OS_TCB *)0;
    f7f8:	d027f815 	stw	zero,-24608(gp)
}
    f7fc:	0001883a 	nop
    f800:	e037883a 	mov	sp,fp
    f804:	df000017 	ldw	fp,0(sp)
    f808:	dec00104 	addi	sp,sp,4
    f80c:	f800283a 	ret

0000f810 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
    f810:	defff804 	addi	sp,sp,-32
    f814:	dfc00715 	stw	ra,28(sp)
    f818:	df000615 	stw	fp,24(sp)
    f81c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
    f820:	008000c4 	movi	r2,3
    f824:	d8800415 	stw	r2,16(sp)
    f828:	d8000315 	stw	zero,12(sp)
    f82c:	00808004 	movi	r2,512
    f830:	d8800215 	stw	r2,8(sp)
    f834:	008000b4 	movhi	r2,2
    f838:	1096bc04 	addi	r2,r2,23280
    f83c:	d8800115 	stw	r2,4(sp)
    f840:	00bfffd4 	movui	r2,65535
    f844:	d8800015 	stw	r2,0(sp)
    f848:	01c00504 	movi	r7,20
    f84c:	018000b4 	movhi	r6,2
    f850:	3198bb04 	addi	r6,r6,25324
    f854:	000b883a 	mov	r5,zero
    f858:	01000074 	movhi	r4,1
    f85c:	213f2f04 	addi	r4,r4,-836
    f860:	001438c0 	call	1438c <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
    f864:	e1bfff04 	addi	r6,fp,-4
    f868:	014000b4 	movhi	r5,2
    f86c:	29688004 	addi	r5,r5,-24064
    f870:	01000504 	movi	r4,20
    f874:	0014b9c0 	call	14b9c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
    f878:	0001883a 	nop
    f87c:	e037883a 	mov	sp,fp
    f880:	dfc00117 	ldw	ra,4(sp)
    f884:	df000017 	ldw	fp,0(sp)
    f888:	dec00204 	addi	sp,sp,8
    f88c:	f800283a 	ret

0000f890 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
    f890:	defff804 	addi	sp,sp,-32
    f894:	dfc00715 	stw	ra,28(sp)
    f898:	df000615 	stw	fp,24(sp)
    f89c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
    f8a0:	008000c4 	movi	r2,3
    f8a4:	d8800415 	stw	r2,16(sp)
    f8a8:	d8000315 	stw	zero,12(sp)
    f8ac:	00808004 	movi	r2,512
    f8b0:	d8800215 	stw	r2,8(sp)
    f8b4:	008000b4 	movhi	r2,2
    f8b8:	10944404 	addi	r2,r2,20752
    f8bc:	d8800115 	stw	r2,4(sp)
    f8c0:	00bfff94 	movui	r2,65534
    f8c4:	d8800015 	stw	r2,0(sp)
    f8c8:	01c004c4 	movi	r7,19
    f8cc:	018000b4 	movhi	r6,2
    f8d0:	31964304 	addi	r6,r6,22796
    f8d4:	000b883a 	mov	r5,zero
    f8d8:	01000074 	movhi	r4,1
    f8dc:	213f4604 	addi	r4,r4,-744
    f8e0:	001438c0 	call	1438c <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
    f8e4:	e1bfff04 	addi	r6,fp,-4
    f8e8:	014000b4 	movhi	r5,2
    f8ec:	29688404 	addi	r5,r5,-24048
    f8f0:	010004c4 	movi	r4,19
    f8f4:	0014b9c0 	call	14b9c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
    f8f8:	0001883a 	nop
    f8fc:	e037883a 	mov	sp,fp
    f900:	dfc00117 	ldw	ra,4(sp)
    f904:	df000017 	ldw	fp,0(sp)
    f908:	dec00204 	addi	sp,sp,8
    f90c:	f800283a 	ret

0000f910 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
    f910:	defffb04 	addi	sp,sp,-20
    f914:	dfc00415 	stw	ra,16(sp)
    f918:	df000315 	stw	fp,12(sp)
    f91c:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    f920:	01414404 	movi	r5,1296
    f924:	010000b4 	movhi	r4,2
    f928:	211b8c04 	addi	r4,r4,28208
    f92c:	000f9f40 	call	f9f4 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    f930:	01401504 	movi	r5,84
    f934:	010000b4 	movhi	r4,2
    f938:	211cd004 	addi	r4,r4,29504
    f93c:	000f9f40 	call	f9f4 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
    f940:	008000b4 	movhi	r2,2
    f944:	109b8c04 	addi	r2,r2,28208
    f948:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
    f94c:	008000b4 	movhi	r2,2
    f950:	109ba704 	addi	r2,r2,28316
    f954:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    f958:	e03ffd05 	stb	zero,-12(fp)
    f95c:	00001106 	br	f9a4 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
    f960:	e0bffe17 	ldw	r2,-8(fp)
    f964:	e0ffff17 	ldw	r3,-4(fp)
    f968:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
    f96c:	e0bffe17 	ldw	r2,-8(fp)
    f970:	00c00fc4 	movi	r3,63
    f974:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    f978:	e0bffe17 	ldw	r2,-8(fp)
    f97c:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
    f980:	e0bffe17 	ldw	r2,-8(fp)
    f984:	10801b04 	addi	r2,r2,108
    f988:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
    f98c:	e0bfff17 	ldw	r2,-4(fp)
    f990:	10801b04 	addi	r2,r2,108
    f994:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    f998:	e0bffd03 	ldbu	r2,-12(fp)
    f99c:	10800044 	addi	r2,r2,1
    f9a0:	e0bffd05 	stb	r2,-12(fp)
    f9a4:	e0bffd03 	ldbu	r2,-12(fp)
    f9a8:	108002f0 	cmpltui	r2,r2,11
    f9ac:	103fec1e 	bne	r2,zero,f960 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f960>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
    f9b0:	e0bffe17 	ldw	r2,-8(fp)
    f9b4:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    f9b8:	e0bffe17 	ldw	r2,-8(fp)
    f9bc:	00c00fc4 	movi	r3,63
    f9c0:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    f9c4:	e0bffe17 	ldw	r2,-8(fp)
    f9c8:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    f9cc:	d027ec15 	stw	zero,-24656(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
    f9d0:	008000b4 	movhi	r2,2
    f9d4:	109b8c04 	addi	r2,r2,28208
    f9d8:	d0a7f015 	stw	r2,-24640(gp)
}
    f9dc:	0001883a 	nop
    f9e0:	e037883a 	mov	sp,fp
    f9e4:	dfc00117 	ldw	ra,4(sp)
    f9e8:	df000017 	ldw	fp,0(sp)
    f9ec:	dec00204 	addi	sp,sp,8
    f9f0:	f800283a 	ret

0000f9f4 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    f9f4:	defffd04 	addi	sp,sp,-12
    f9f8:	df000215 	stw	fp,8(sp)
    f9fc:	df000204 	addi	fp,sp,8
    fa00:	e13ffe15 	stw	r4,-8(fp)
    fa04:	2805883a 	mov	r2,r5
    fa08:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    fa0c:	00000706 	br	fa2c <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
    fa10:	e0bffe17 	ldw	r2,-8(fp)
    fa14:	10c00044 	addi	r3,r2,1
    fa18:	e0fffe15 	stw	r3,-8(fp)
    fa1c:	10000005 	stb	zero,0(r2)
        size--;
    fa20:	e0bfff0b 	ldhu	r2,-4(fp)
    fa24:	10bfffc4 	addi	r2,r2,-1
    fa28:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
    fa2c:	e0bfff0b 	ldhu	r2,-4(fp)
    fa30:	103ff71e 	bne	r2,zero,fa10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fa10>
        *pdest++ = (INT8U)0;
        size--;
    }
}
    fa34:	0001883a 	nop
    fa38:	e037883a 	mov	sp,fp
    fa3c:	df000017 	ldw	fp,0(sp)
    fa40:	dec00104 	addi	sp,sp,4
    fa44:	f800283a 	ret

0000fa48 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    fa48:	defffc04 	addi	sp,sp,-16
    fa4c:	df000315 	stw	fp,12(sp)
    fa50:	df000304 	addi	fp,sp,12
    fa54:	e13ffd15 	stw	r4,-12(fp)
    fa58:	e17ffe15 	stw	r5,-8(fp)
    fa5c:	3005883a 	mov	r2,r6
    fa60:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    fa64:	00000b06 	br	fa94 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
    fa68:	e0bffd17 	ldw	r2,-12(fp)
    fa6c:	10c00044 	addi	r3,r2,1
    fa70:	e0fffd15 	stw	r3,-12(fp)
    fa74:	e0fffe17 	ldw	r3,-8(fp)
    fa78:	19000044 	addi	r4,r3,1
    fa7c:	e13ffe15 	stw	r4,-8(fp)
    fa80:	18c00003 	ldbu	r3,0(r3)
    fa84:	10c00005 	stb	r3,0(r2)
        size--;
    fa88:	e0bfff0b 	ldhu	r2,-4(fp)
    fa8c:	10bfffc4 	addi	r2,r2,-1
    fa90:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
    fa94:	e0bfff0b 	ldhu	r2,-4(fp)
    fa98:	103ff31e 	bne	r2,zero,fa68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fa68>
        *pdest++ = *psrc++;
        size--;
    }
}
    fa9c:	0001883a 	nop
    faa0:	e037883a 	mov	sp,fp
    faa4:	df000017 	ldw	fp,0(sp)
    faa8:	dec00104 	addi	sp,sp,4
    faac:	f800283a 	ret

0000fab0 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
    fab0:	defffb04 	addi	sp,sp,-20
    fab4:	dfc00415 	stw	ra,16(sp)
    fab8:	df000315 	stw	fp,12(sp)
    fabc:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    fac0:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fac4:	0005303a 	rdctl	r2,status
    fac8:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    facc:	e0ffff17 	ldw	r3,-4(fp)
    fad0:	00bfff84 	movi	r2,-2
    fad4:	1884703a 	and	r2,r3,r2
    fad8:	1001703a 	wrctl	status,r2
  
  return context;
    fadc:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
    fae0:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
    fae4:	d0a7f703 	ldbu	r2,-24612(gp)
    fae8:	10803fcc 	andi	r2,r2,255
    faec:	10001a1e 	bne	r2,zero,fb58 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
    faf0:	d0a7e903 	ldbu	r2,-24668(gp)
    faf4:	10803fcc 	andi	r2,r2,255
    faf8:	1000171e 	bne	r2,zero,fb58 <OS_Sched+0xa8>
            OS_SchedNew();
    fafc:	000fb800 	call	fb80 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
    fb00:	d0e7eb03 	ldbu	r3,-24660(gp)
    fb04:	d0a7eb43 	ldbu	r2,-24659(gp)
    fb08:	18c03fcc 	andi	r3,r3,255
    fb0c:	10803fcc 	andi	r2,r2,255
    fb10:	18801126 	beq	r3,r2,fb58 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
    fb14:	d0a7eb03 	ldbu	r2,-24660(gp)
    fb18:	10c03fcc 	andi	r3,r2,255
    fb1c:	008000b4 	movhi	r2,2
    fb20:	109cd004 	addi	r2,r2,29504
    fb24:	18c7883a 	add	r3,r3,r3
    fb28:	18c7883a 	add	r3,r3,r3
    fb2c:	10c5883a 	add	r2,r2,r3
    fb30:	10800017 	ldw	r2,0(r2)
    fb34:	d0a7f315 	stw	r2,-24628(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
    fb38:	d0a7f317 	ldw	r2,-24628(gp)
    fb3c:	10c00e17 	ldw	r3,56(r2)
    fb40:	18c00044 	addi	r3,r3,1
    fb44:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
    fb48:	d0a7ee17 	ldw	r2,-24648(gp)
    fb4c:	10800044 	addi	r2,r2,1
    fb50:	d0a7ee15 	stw	r2,-24648(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
    fb54:	0018e880 	call	18e88 <OSCtxSw>
    fb58:	e0bffd17 	ldw	r2,-12(fp)
    fb5c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fb60:	e0bffe17 	ldw	r2,-8(fp)
    fb64:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
    fb68:	0001883a 	nop
    fb6c:	e037883a 	mov	sp,fp
    fb70:	dfc00117 	ldw	ra,4(sp)
    fb74:	df000017 	ldw	fp,0(sp)
    fb78:	dec00204 	addi	sp,sp,8
    fb7c:	f800283a 	ret

0000fb80 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
    fb80:	defffe04 	addi	sp,sp,-8
    fb84:	df000115 	stw	fp,4(sp)
    fb88:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    fb8c:	d0a7f503 	ldbu	r2,-24620(gp)
    fb90:	10c03fcc 	andi	r3,r2,255
    fb94:	008000b4 	movhi	r2,2
    fb98:	10a84004 	addi	r2,r2,-24320
    fb9c:	10c5883a 	add	r2,r2,r3
    fba0:	10800003 	ldbu	r2,0(r2)
    fba4:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
    fba8:	e0bfff03 	ldbu	r2,-4(fp)
    fbac:	100490fa 	slli	r2,r2,3
    fbb0:	1009883a 	mov	r4,r2
    fbb4:	e0ffff03 	ldbu	r3,-4(fp)
    fbb8:	d0a7f544 	addi	r2,gp,-24619
    fbbc:	1885883a 	add	r2,r3,r2
    fbc0:	10800003 	ldbu	r2,0(r2)
    fbc4:	10c03fcc 	andi	r3,r2,255
    fbc8:	008000b4 	movhi	r2,2
    fbcc:	10a84004 	addi	r2,r2,-24320
    fbd0:	10c5883a 	add	r2,r2,r3
    fbd4:	10800003 	ldbu	r2,0(r2)
    fbd8:	2085883a 	add	r2,r4,r2
    fbdc:	d0a7eb05 	stb	r2,-24660(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
    fbe0:	0001883a 	nop
    fbe4:	e037883a 	mov	sp,fp
    fbe8:	df000017 	ldw	fp,0(sp)
    fbec:	dec00104 	addi	sp,sp,4
    fbf0:	f800283a 	ret

0000fbf4 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
    fbf4:	defffc04 	addi	sp,sp,-16
    fbf8:	df000315 	stw	fp,12(sp)
    fbfc:	df000304 	addi	fp,sp,12
    fc00:	e13ffe15 	stw	r4,-8(fp)
    fc04:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
    fc08:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
    fc0c:	00000b06 	br	fc3c <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
    fc10:	e0bffe17 	ldw	r2,-8(fp)
    fc14:	10c00044 	addi	r3,r2,1
    fc18:	e0fffe15 	stw	r3,-8(fp)
    fc1c:	e0ffff17 	ldw	r3,-4(fp)
    fc20:	19000044 	addi	r4,r3,1
    fc24:	e13fff15 	stw	r4,-4(fp)
    fc28:	18c00003 	ldbu	r3,0(r3)
    fc2c:	10c00005 	stb	r3,0(r2)
        len++;
    fc30:	e0bffd03 	ldbu	r2,-12(fp)
    fc34:	10800044 	addi	r2,r2,1
    fc38:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    fc3c:	e0bfff17 	ldw	r2,-4(fp)
    fc40:	10800003 	ldbu	r2,0(r2)
    fc44:	10803fcc 	andi	r2,r2,255
    fc48:	103ff11e 	bne	r2,zero,fc10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fc10>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
    fc4c:	e0bffe17 	ldw	r2,-8(fp)
    fc50:	10000005 	stb	zero,0(r2)
    return (len);
    fc54:	e0bffd03 	ldbu	r2,-12(fp)
}
    fc58:	e037883a 	mov	sp,fp
    fc5c:	df000017 	ldw	fp,0(sp)
    fc60:	dec00104 	addi	sp,sp,4
    fc64:	f800283a 	ret

0000fc68 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
    fc68:	defffd04 	addi	sp,sp,-12
    fc6c:	df000215 	stw	fp,8(sp)
    fc70:	df000204 	addi	fp,sp,8
    fc74:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
    fc78:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
    fc7c:	00000606 	br	fc98 <OS_StrLen+0x30>
        psrc++;
    fc80:	e0bfff17 	ldw	r2,-4(fp)
    fc84:	10800044 	addi	r2,r2,1
    fc88:	e0bfff15 	stw	r2,-4(fp)
        len++;
    fc8c:	e0bffe03 	ldbu	r2,-8(fp)
    fc90:	10800044 	addi	r2,r2,1
    fc94:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    fc98:	e0bfff17 	ldw	r2,-4(fp)
    fc9c:	10800003 	ldbu	r2,0(r2)
    fca0:	10803fcc 	andi	r2,r2,255
    fca4:	103ff61e 	bne	r2,zero,fc80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fc80>
        psrc++;
        len++;
    }
    return (len);
    fca8:	e0bffe03 	ldbu	r2,-8(fp)
}
    fcac:	e037883a 	mov	sp,fp
    fcb0:	df000017 	ldw	fp,0(sp)
    fcb4:	dec00104 	addi	sp,sp,4
    fcb8:	f800283a 	ret

0000fcbc <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
    fcbc:	defffa04 	addi	sp,sp,-24
    fcc0:	dfc00515 	stw	ra,20(sp)
    fcc4:	df000415 	stw	fp,16(sp)
    fcc8:	df000404 	addi	fp,sp,16
    fccc:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    fcd0:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fcd4:	0005303a 	rdctl	r2,status
    fcd8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fcdc:	e0fffd17 	ldw	r3,-12(fp)
    fce0:	00bfff84 	movi	r2,-2
    fce4:	1884703a 	and	r2,r3,r2
    fce8:	1001703a 	wrctl	status,r2
  
  return context;
    fcec:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
    fcf0:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
    fcf4:	d0a7ea17 	ldw	r2,-24664(gp)
    fcf8:	10800044 	addi	r2,r2,1
    fcfc:	d0a7ea15 	stw	r2,-24664(gp)
    fd00:	e0bffc17 	ldw	r2,-16(fp)
    fd04:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fd08:	e0bffe17 	ldw	r2,-8(fp)
    fd0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
    fd10:	001919c0 	call	1919c <OSTaskIdleHook>
    }
    fd14:	003fef06 	br	fcd4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fcd4>

0000fd18 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
    fd18:	defff804 	addi	sp,sp,-32
    fd1c:	dfc00715 	stw	ra,28(sp)
    fd20:	df000615 	stw	fp,24(sp)
    fd24:	dc400515 	stw	r17,20(sp)
    fd28:	dc000415 	stw	r16,16(sp)
    fd2c:	df000604 	addi	fp,sp,24
    fd30:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    fd34:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    fd38:	00000206 	br	fd44 <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    fd3c:	01000044 	movi	r4,1
    fd40:	001545c0 	call	1545c <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    fd44:	d0a7fb03 	ldbu	r2,-24596(gp)
    fd48:	10803fcc 	andi	r2,r2,255
    fd4c:	103ffb26 	beq	r2,zero,fd3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fd3c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
    fd50:	d0e7ef17 	ldw	r3,-24644(gp)
    fd54:	00947b34 	movhi	r2,20972
    fd58:	10a147c4 	addi	r2,r2,-31457
    fd5c:	1888383a 	mulxuu	r4,r3,r2
    fd60:	1885383a 	mul	r2,r3,r2
    fd64:	1021883a 	mov	r16,r2
    fd68:	2023883a 	mov	r17,r4
    fd6c:	8804d17a 	srli	r2,r17,5
    fd70:	d0a7ef15 	stw	r2,-24644(gp)
    if (OSIdleCtrMax == 0L) {
    fd74:	d0a7ef17 	ldw	r2,-24644(gp)
    fd78:	1000031e 	bne	r2,zero,fd88 <OS_TaskStat+0x70>
        OSCPUUsage = 0;
    fd7c:	d027f105 	stb	zero,-24636(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
    fd80:	01003fc4 	movi	r4,255
    fd84:	00150e40 	call	150e4 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fd88:	0005303a 	rdctl	r2,status
    fd8c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fd90:	e0fffb17 	ldw	r3,-20(fp)
    fd94:	00bfff84 	movi	r2,-2
    fd98:	1884703a 	and	r2,r3,r2
    fd9c:	1001703a 	wrctl	status,r2
  
  return context;
    fda0:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
    fda4:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
    fda8:	d0a7ea17 	ldw	r2,-24664(gp)
    fdac:	d0a7fc15 	stw	r2,-24592(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
    fdb0:	d027ea15 	stw	zero,-24664(gp)
    fdb4:	e0bffa17 	ldw	r2,-24(fp)
    fdb8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fdbc:	e0bffc17 	ldw	r2,-16(fp)
    fdc0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
    fdc4:	d0e7fc17 	ldw	r3,-24592(gp)
    fdc8:	d0a7ef17 	ldw	r2,-24644(gp)
    fdcc:	1885203a 	divu	r2,r3,r2
    fdd0:	1007883a 	mov	r3,r2
    fdd4:	00801904 	movi	r2,100
    fdd8:	10c5c83a 	sub	r2,r2,r3
    fddc:	d0a7f105 	stb	r2,-24636(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
    fde0:	001911c0 	call	1911c <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
    fde4:	000fdf40 	call	fdf4 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
    fde8:	0009883a 	mov	r4,zero
    fdec:	001545c0 	call	1545c <OSTimeDly>
    }
    fdf0:	003fe506 	br	fd88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fd88>

0000fdf4 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
    fdf4:	defffa04 	addi	sp,sp,-24
    fdf8:	dfc00515 	stw	ra,20(sp)
    fdfc:	df000415 	stw	fp,16(sp)
    fe00:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    fe04:	e03ffc05 	stb	zero,-16(fp)
    fe08:	00002406 	br	fe9c <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
    fe0c:	e0bffc03 	ldbu	r2,-16(fp)
    fe10:	e0fffe04 	addi	r3,fp,-8
    fe14:	180b883a 	mov	r5,r3
    fe18:	1009883a 	mov	r4,r2
    fe1c:	0014f240 	call	14f24 <OSTaskStkChk>
    fe20:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
    fe24:	e0bffc43 	ldbu	r2,-15(fp)
    fe28:	1000191e 	bne	r2,zero,fe90 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
    fe2c:	e0fffc03 	ldbu	r3,-16(fp)
    fe30:	008000b4 	movhi	r2,2
    fe34:	109cd004 	addi	r2,r2,29504
    fe38:	18c7883a 	add	r3,r3,r3
    fe3c:	18c7883a 	add	r3,r3,r3
    fe40:	10c5883a 	add	r2,r2,r3
    fe44:	10800017 	ldw	r2,0(r2)
    fe48:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
    fe4c:	e0bffd17 	ldw	r2,-12(fp)
    fe50:	10000f26 	beq	r2,zero,fe90 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
    fe54:	e0bffd17 	ldw	r2,-12(fp)
    fe58:	10800060 	cmpeqi	r2,r2,1
    fe5c:	10000c1e 	bne	r2,zero,fe90 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
    fe60:	e0bffd17 	ldw	r2,-12(fp)
    fe64:	10c00217 	ldw	r3,8(r2)
    fe68:	e0bffd17 	ldw	r2,-12(fp)
    fe6c:	10800317 	ldw	r2,12(r2)
    fe70:	1085883a 	add	r2,r2,r2
    fe74:	1085883a 	add	r2,r2,r2
    fe78:	1887883a 	add	r3,r3,r2
    fe7c:	e0bffd17 	ldw	r2,-12(fp)
    fe80:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
    fe84:	e0ffff17 	ldw	r3,-4(fp)
    fe88:	e0bffd17 	ldw	r2,-12(fp)
    fe8c:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    fe90:	e0bffc03 	ldbu	r2,-16(fp)
    fe94:	10800044 	addi	r2,r2,1
    fe98:	e0bffc05 	stb	r2,-16(fp)
    fe9c:	e0bffc03 	ldbu	r2,-16(fp)
    fea0:	10800570 	cmpltui	r2,r2,21
    fea4:	103fd91e 	bne	r2,zero,fe0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fe0c>
#endif
                }
            }
        }
    }
}
    fea8:	0001883a 	nop
    feac:	e037883a 	mov	sp,fp
    feb0:	dfc00117 	ldw	ra,4(sp)
    feb4:	df000017 	ldw	fp,0(sp)
    feb8:	dec00204 	addi	sp,sp,8
    febc:	f800283a 	ret

0000fec0 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
    fec0:	defff204 	addi	sp,sp,-56
    fec4:	dfc00d15 	stw	ra,52(sp)
    fec8:	df000c15 	stw	fp,48(sp)
    fecc:	df000c04 	addi	fp,sp,48
    fed0:	e17ffc15 	stw	r5,-16(fp)
    fed4:	e1bffd15 	stw	r6,-12(fp)
    fed8:	3807883a 	mov	r3,r7
    fedc:	e0800417 	ldw	r2,16(fp)
    fee0:	e13ffb05 	stb	r4,-20(fp)
    fee4:	e0fffe0d 	sth	r3,-8(fp)
    fee8:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    feec:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fef0:	0005303a 	rdctl	r2,status
    fef4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fef8:	e0fffa17 	ldw	r3,-24(fp)
    fefc:	00bfff84 	movi	r2,-2
    ff00:	1884703a 	and	r2,r3,r2
    ff04:	1001703a 	wrctl	status,r2
  
  return context;
    ff08:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
    ff0c:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    ff10:	d0a7f017 	ldw	r2,-24640(gp)
    ff14:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
    ff18:	e0bff617 	ldw	r2,-40(fp)
    ff1c:	10009326 	beq	r2,zero,1016c <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
    ff20:	e0bff617 	ldw	r2,-40(fp)
    ff24:	10800517 	ldw	r2,20(r2)
    ff28:	d0a7f015 	stw	r2,-24640(gp)
    ff2c:	e0bff417 	ldw	r2,-48(fp)
    ff30:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ff34:	e0bff817 	ldw	r2,-32(fp)
    ff38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
    ff3c:	e0bff617 	ldw	r2,-40(fp)
    ff40:	e0fffc17 	ldw	r3,-16(fp)
    ff44:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
    ff48:	e0bff617 	ldw	r2,-40(fp)
    ff4c:	e0fffb03 	ldbu	r3,-20(fp)
    ff50:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
    ff54:	e0bff617 	ldw	r2,-40(fp)
    ff58:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
    ff5c:	e0bff617 	ldw	r2,-40(fp)
    ff60:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
    ff64:	e0bff617 	ldw	r2,-40(fp)
    ff68:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
    ff6c:	e0bff617 	ldw	r2,-40(fp)
    ff70:	e0c00317 	ldw	r3,12(fp)
    ff74:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
    ff78:	e0bff617 	ldw	r2,-40(fp)
    ff7c:	e0c00217 	ldw	r3,8(fp)
    ff80:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
    ff84:	e0bff617 	ldw	r2,-40(fp)
    ff88:	e0fffd17 	ldw	r3,-12(fp)
    ff8c:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
    ff90:	e0bff617 	ldw	r2,-40(fp)
    ff94:	e0ffff0b 	ldhu	r3,-4(fp)
    ff98:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
    ff9c:	e0bff617 	ldw	r2,-40(fp)
    ffa0:	e0fffe0b 	ldhu	r3,-8(fp)
    ffa4:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
    ffa8:	e0bff617 	ldw	r2,-40(fp)
    ffac:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
    ffb0:	e0bffb03 	ldbu	r2,-20(fp)
    ffb4:	1004d0fa 	srli	r2,r2,3
    ffb8:	1007883a 	mov	r3,r2
    ffbc:	e0bff617 	ldw	r2,-40(fp)
    ffc0:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
    ffc4:	e0bffb03 	ldbu	r2,-20(fp)
    ffc8:	108001cc 	andi	r2,r2,7
    ffcc:	1007883a 	mov	r3,r2
    ffd0:	e0bff617 	ldw	r2,-40(fp)
    ffd4:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
    ffd8:	e0bff617 	ldw	r2,-40(fp)
    ffdc:	10800d03 	ldbu	r2,52(r2)
    ffe0:	10803fcc 	andi	r2,r2,255
    ffe4:	00c00044 	movi	r3,1
    ffe8:	1884983a 	sll	r2,r3,r2
    ffec:	1007883a 	mov	r3,r2
    fff0:	e0bff617 	ldw	r2,-40(fp)
    fff4:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
    fff8:	e0bff617 	ldw	r2,-40(fp)
    fffc:	10800cc3 	ldbu	r2,51(r2)
   10000:	10803fcc 	andi	r2,r2,255
   10004:	00c00044 	movi	r3,1
   10008:	1884983a 	sll	r2,r3,r2
   1000c:	1007883a 	mov	r3,r2
   10010:	e0bff617 	ldw	r2,-40(fp)
   10014:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   10018:	e0bff617 	ldw	r2,-40(fp)
   1001c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   10020:	e0bff617 	ldw	r2,-40(fp)
   10024:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   10028:	e0bff617 	ldw	r2,-40(fp)
   1002c:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   10030:	e0bff617 	ldw	r2,-40(fp)
   10034:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   10038:	e0bff617 	ldw	r2,-40(fp)
   1003c:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   10040:	e0bff617 	ldw	r2,-40(fp)
   10044:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   10048:	e0bff617 	ldw	r2,-40(fp)
   1004c:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   10050:	e0bff617 	ldw	r2,-40(fp)
   10054:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   10058:	e0bff617 	ldw	r2,-40(fp)
   1005c:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   10060:	e0bff617 	ldw	r2,-40(fp)
   10064:	00c00fc4 	movi	r3,63
   10068:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   1006c:	e0bff617 	ldw	r2,-40(fp)
   10070:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   10074:	e13ff617 	ldw	r4,-40(fp)
   10078:	00191bc0 	call	191bc <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   1007c:	e13ff617 	ldw	r4,-40(fp)
   10080:	00190b40 	call	190b4 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10084:	0005303a 	rdctl	r2,status
   10088:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1008c:	e0fff517 	ldw	r3,-44(fp)
   10090:	00bfff84 	movi	r2,-2
   10094:	1884703a 	and	r2,r3,r2
   10098:	1001703a 	wrctl	status,r2
  
  return context;
   1009c:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
   100a0:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   100a4:	e0fffb03 	ldbu	r3,-20(fp)
   100a8:	008000b4 	movhi	r2,2
   100ac:	109cd004 	addi	r2,r2,29504
   100b0:	18c7883a 	add	r3,r3,r3
   100b4:	18c7883a 	add	r3,r3,r3
   100b8:	10c5883a 	add	r2,r2,r3
   100bc:	e0fff617 	ldw	r3,-40(fp)
   100c0:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   100c4:	d0e7ec17 	ldw	r3,-24656(gp)
   100c8:	e0bff617 	ldw	r2,-40(fp)
   100cc:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   100d0:	e0bff617 	ldw	r2,-40(fp)
   100d4:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   100d8:	d0a7ec17 	ldw	r2,-24656(gp)
   100dc:	10000326 	beq	r2,zero,100ec <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   100e0:	d0a7ec17 	ldw	r2,-24656(gp)
   100e4:	e0fff617 	ldw	r3,-40(fp)
   100e8:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   100ec:	e0bff617 	ldw	r2,-40(fp)
   100f0:	d0a7ec15 	stw	r2,-24656(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   100f4:	e0bff617 	ldw	r2,-40(fp)
   100f8:	10c00d83 	ldbu	r3,54(r2)
   100fc:	d0a7f503 	ldbu	r2,-24620(gp)
   10100:	1884b03a 	or	r2,r3,r2
   10104:	d0a7f505 	stb	r2,-24620(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   10108:	e0bff617 	ldw	r2,-40(fp)
   1010c:	10800d03 	ldbu	r2,52(r2)
   10110:	10c03fcc 	andi	r3,r2,255
   10114:	e0bff617 	ldw	r2,-40(fp)
   10118:	10800d03 	ldbu	r2,52(r2)
   1011c:	11003fcc 	andi	r4,r2,255
   10120:	d0a7f544 	addi	r2,gp,-24619
   10124:	2085883a 	add	r2,r4,r2
   10128:	11000003 	ldbu	r4,0(r2)
   1012c:	e0bff617 	ldw	r2,-40(fp)
   10130:	10800d43 	ldbu	r2,53(r2)
   10134:	2084b03a 	or	r2,r4,r2
   10138:	1009883a 	mov	r4,r2
   1013c:	d0a7f544 	addi	r2,gp,-24619
   10140:	1885883a 	add	r2,r3,r2
   10144:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   10148:	d0a7f143 	ldbu	r2,-24635(gp)
   1014c:	10800044 	addi	r2,r2,1
   10150:	d0a7f145 	stb	r2,-24635(gp)
   10154:	e0bff417 	ldw	r2,-48(fp)
   10158:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1015c:	e0bff717 	ldw	r2,-36(fp)
   10160:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   10164:	0005883a 	mov	r2,zero
   10168:	00000506 	br	10180 <OS_TCBInit+0x2c0>
   1016c:	e0bff417 	ldw	r2,-48(fp)
   10170:	e0bff915 	stw	r2,-28(fp)
   10174:	e0bff917 	ldw	r2,-28(fp)
   10178:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   1017c:	00801084 	movi	r2,66
}
   10180:	e037883a 	mov	sp,fp
   10184:	dfc00117 	ldw	ra,4(sp)
   10188:	df000017 	ldw	fp,0(sp)
   1018c:	dec00204 	addi	sp,sp,8
   10190:	f800283a 	ret

00010194 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   10194:	defffe04 	addi	sp,sp,-8
   10198:	df000115 	stw	fp,4(sp)
   1019c:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   101a0:	d0a00f04 	addi	r2,gp,-32708
   101a4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   101a8:	d0a01004 	addi	r2,gp,-32704
   101ac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   101b0:	d0a01184 	addi	r2,gp,-32698
   101b4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   101b8:	d0a01204 	addi	r2,gp,-32696
   101bc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   101c0:	d0a01104 	addi	r2,gp,-32700
   101c4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   101c8:	d0a01284 	addi	r2,gp,-32694
   101cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   101d0:	d0a01304 	addi	r2,gp,-32692
   101d4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   101d8:	d0a01384 	addi	r2,gp,-32690
   101dc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   101e0:	d0a01404 	addi	r2,gp,-32688
   101e4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   101e8:	d0a01484 	addi	r2,gp,-32686
   101ec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   101f0:	d0a01504 	addi	r2,gp,-32684
   101f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   101f8:	d0a01584 	addi	r2,gp,-32682
   101fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   10200:	d0a01604 	addi	r2,gp,-32680
   10204:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   10208:	d0a01684 	addi	r2,gp,-32678
   1020c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   10210:	d0a01704 	addi	r2,gp,-32676
   10214:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   10218:	d0a01784 	addi	r2,gp,-32674
   1021c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   10220:	d0a01804 	addi	r2,gp,-32672
   10224:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   10228:	d0a01884 	addi	r2,gp,-32670
   1022c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   10230:	d0a01904 	addi	r2,gp,-32668
   10234:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   10238:	d0a01984 	addi	r2,gp,-32666
   1023c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   10240:	d0a01a04 	addi	r2,gp,-32664
   10244:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   10248:	d0a01a84 	addi	r2,gp,-32662
   1024c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   10250:	d0a01b04 	addi	r2,gp,-32660
   10254:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   10258:	d0a01b84 	addi	r2,gp,-32658
   1025c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   10260:	d0a01c04 	addi	r2,gp,-32656
   10264:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   10268:	d0a01c84 	addi	r2,gp,-32654
   1026c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   10270:	d0a01d04 	addi	r2,gp,-32652
   10274:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   10278:	d0a01d84 	addi	r2,gp,-32650
   1027c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   10280:	d0a01e04 	addi	r2,gp,-32648
   10284:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   10288:	d0a01e84 	addi	r2,gp,-32646
   1028c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   10290:	d0a01f04 	addi	r2,gp,-32644
   10294:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   10298:	d0a01f84 	addi	r2,gp,-32642
   1029c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   102a0:	d0a02004 	addi	r2,gp,-32640
   102a4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   102a8:	d0a02084 	addi	r2,gp,-32638
   102ac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   102b0:	d0a02104 	addi	r2,gp,-32636
   102b4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   102b8:	d0a02184 	addi	r2,gp,-32634
   102bc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   102c0:	d0a02204 	addi	r2,gp,-32632
   102c4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   102c8:	d0a02284 	addi	r2,gp,-32630
   102cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   102d0:	d0a02304 	addi	r2,gp,-32628
   102d4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   102d8:	d0a02384 	addi	r2,gp,-32626
   102dc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   102e0:	d0a02404 	addi	r2,gp,-32624
   102e4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   102e8:	d0a02484 	addi	r2,gp,-32622
   102ec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   102f0:	d0a02504 	addi	r2,gp,-32620
   102f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   102f8:	d0a02584 	addi	r2,gp,-32618
   102fc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   10300:	d0a02604 	addi	r2,gp,-32616
   10304:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   10308:	d0a02b04 	addi	r2,gp,-32596
   1030c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   10310:	0001883a 	nop
   10314:	e037883a 	mov	sp,fp
   10318:	df000017 	ldw	fp,0(sp)
   1031c:	dec00104 	addi	sp,sp,4
   10320:	f800283a 	ret

00010324 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   10324:	defff204 	addi	sp,sp,-56
   10328:	df000d15 	stw	fp,52(sp)
   1032c:	df000d04 	addi	fp,sp,52
   10330:	e13ffc15 	stw	r4,-16(fp)
   10334:	2807883a 	mov	r3,r5
   10338:	3005883a 	mov	r2,r6
   1033c:	e1ffff15 	stw	r7,-4(fp)
   10340:	e0fffd0d 	sth	r3,-12(fp)
   10344:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   10348:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1034c:	e0bfff17 	ldw	r2,-4(fp)
   10350:	1000021e 	bne	r2,zero,1035c <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   10354:	0005883a 	mov	r2,zero
   10358:	0000b006 	br	1061c <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   1035c:	e0bffc17 	ldw	r2,-16(fp)
   10360:	1000051e 	bne	r2,zero,10378 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10364:	e0bfff17 	ldw	r2,-4(fp)
   10368:	00c01b84 	movi	r3,110
   1036c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10370:	0005883a 	mov	r2,zero
   10374:	0000a906 	br	1061c <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   10378:	e0bffc17 	ldw	r2,-16(fp)
   1037c:	10800003 	ldbu	r2,0(r2)
   10380:	10803fcc 	andi	r2,r2,255
   10384:	10800160 	cmpeqi	r2,r2,5
   10388:	1000051e 	bne	r2,zero,103a0 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   1038c:	e0bfff17 	ldw	r2,-4(fp)
   10390:	00c00044 	movi	r3,1
   10394:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10398:	0005883a 	mov	r2,zero
   1039c:	00009f06 	br	1061c <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   103a0:	e0fffe03 	ldbu	r3,-8(fp)
   103a4:	00bfe004 	movi	r2,-128
   103a8:	1884703a 	and	r2,r3,r2
   103ac:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   103b0:	e0bff503 	ldbu	r2,-44(fp)
   103b4:	10000626 	beq	r2,zero,103d0 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   103b8:	e0bffe03 	ldbu	r2,-8(fp)
   103bc:	10801fcc 	andi	r2,r2,127
   103c0:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   103c4:	00800044 	movi	r2,1
   103c8:	e0bff385 	stb	r2,-50(fp)
   103cc:	00000106 	br	103d4 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   103d0:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   103d4:	e0bfff17 	ldw	r2,-4(fp)
   103d8:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   103dc:	0005303a 	rdctl	r2,status
   103e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   103e4:	e0fffb17 	ldw	r3,-20(fp)
   103e8:	00bfff84 	movi	r2,-2
   103ec:	1884703a 	and	r2,r3,r2
   103f0:	1001703a 	wrctl	status,r2
  
  return context;
   103f4:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   103f8:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   103fc:	e0bffe03 	ldbu	r2,-8(fp)
   10400:	10c00060 	cmpeqi	r3,r2,1
   10404:	18005f1e 	bne	r3,zero,10584 <OSFlagAccept+0x260>
   10408:	10c00088 	cmpgei	r3,r2,2
   1040c:	1800021e 	bne	r3,zero,10418 <OSFlagAccept+0xf4>
   10410:	10003f26 	beq	r2,zero,10510 <OSFlagAccept+0x1ec>
   10414:	00007706 	br	105f4 <OSFlagAccept+0x2d0>
   10418:	10c000a0 	cmpeqi	r3,r2,2
   1041c:	1800031e 	bne	r3,zero,1042c <OSFlagAccept+0x108>
   10420:	108000e0 	cmpeqi	r2,r2,3
   10424:	10001e1e 	bne	r2,zero,104a0 <OSFlagAccept+0x17c>
   10428:	00007206 	br	105f4 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   1042c:	e0bffc17 	ldw	r2,-16(fp)
   10430:	10c0020b 	ldhu	r3,8(r2)
   10434:	e0bffd0b 	ldhu	r2,-12(fp)
   10438:	1884703a 	and	r2,r3,r2
   1043c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   10440:	e0fff30b 	ldhu	r3,-52(fp)
   10444:	e0bffd0b 	ldhu	r2,-12(fp)
   10448:	18800d1e 	bne	r3,r2,10480 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1044c:	e0bff383 	ldbu	r2,-50(fp)
   10450:	10800058 	cmpnei	r2,r2,1
   10454:	10000d1e 	bne	r2,zero,1048c <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   10458:	e0bffc17 	ldw	r2,-16(fp)
   1045c:	1080020b 	ldhu	r2,8(r2)
   10460:	1007883a 	mov	r3,r2
   10464:	e0bff30b 	ldhu	r2,-52(fp)
   10468:	0084303a 	nor	r2,zero,r2
   1046c:	1884703a 	and	r2,r3,r2
   10470:	1007883a 	mov	r3,r2
   10474:	e0bffc17 	ldw	r2,-16(fp)
   10478:	10c0020d 	sth	r3,8(r2)
   1047c:	00000306 	br	1048c <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   10480:	e0bfff17 	ldw	r2,-4(fp)
   10484:	00c01c04 	movi	r3,112
   10488:	10c00005 	stb	r3,0(r2)
   1048c:	e0bff417 	ldw	r2,-48(fp)
   10490:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10494:	e0bff617 	ldw	r2,-40(fp)
   10498:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   1049c:	00005e06 	br	10618 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   104a0:	e0bffc17 	ldw	r2,-16(fp)
   104a4:	10c0020b 	ldhu	r3,8(r2)
   104a8:	e0bffd0b 	ldhu	r2,-12(fp)
   104ac:	1884703a 	and	r2,r3,r2
   104b0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   104b4:	e0bff30b 	ldhu	r2,-52(fp)
   104b8:	10000d26 	beq	r2,zero,104f0 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   104bc:	e0bff383 	ldbu	r2,-50(fp)
   104c0:	10800058 	cmpnei	r2,r2,1
   104c4:	10000d1e 	bne	r2,zero,104fc <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   104c8:	e0bffc17 	ldw	r2,-16(fp)
   104cc:	1080020b 	ldhu	r2,8(r2)
   104d0:	1007883a 	mov	r3,r2
   104d4:	e0bff30b 	ldhu	r2,-52(fp)
   104d8:	0084303a 	nor	r2,zero,r2
   104dc:	1884703a 	and	r2,r3,r2
   104e0:	1007883a 	mov	r3,r2
   104e4:	e0bffc17 	ldw	r2,-16(fp)
   104e8:	10c0020d 	sth	r3,8(r2)
   104ec:	00000306 	br	104fc <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   104f0:	e0bfff17 	ldw	r2,-4(fp)
   104f4:	00c01c04 	movi	r3,112
   104f8:	10c00005 	stb	r3,0(r2)
   104fc:	e0bff417 	ldw	r2,-48(fp)
   10500:	e0bff715 	stw	r2,-36(fp)
   10504:	e0bff717 	ldw	r2,-36(fp)
   10508:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   1050c:	00004206 	br	10618 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   10510:	e0bffc17 	ldw	r2,-16(fp)
   10514:	1080020b 	ldhu	r2,8(r2)
   10518:	0084303a 	nor	r2,zero,r2
   1051c:	1007883a 	mov	r3,r2
   10520:	e0bffd0b 	ldhu	r2,-12(fp)
   10524:	1884703a 	and	r2,r3,r2
   10528:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   1052c:	e0fff30b 	ldhu	r3,-52(fp)
   10530:	e0bffd0b 	ldhu	r2,-12(fp)
   10534:	18800b1e 	bne	r3,r2,10564 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10538:	e0bff383 	ldbu	r2,-50(fp)
   1053c:	10800058 	cmpnei	r2,r2,1
   10540:	10000b1e 	bne	r2,zero,10570 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   10544:	e0bffc17 	ldw	r2,-16(fp)
   10548:	10c0020b 	ldhu	r3,8(r2)
   1054c:	e0bff30b 	ldhu	r2,-52(fp)
   10550:	1884b03a 	or	r2,r3,r2
   10554:	1007883a 	mov	r3,r2
   10558:	e0bffc17 	ldw	r2,-16(fp)
   1055c:	10c0020d 	sth	r3,8(r2)
   10560:	00000306 	br	10570 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   10564:	e0bfff17 	ldw	r2,-4(fp)
   10568:	00c01c04 	movi	r3,112
   1056c:	10c00005 	stb	r3,0(r2)
   10570:	e0bff417 	ldw	r2,-48(fp)
   10574:	e0bff815 	stw	r2,-32(fp)
   10578:	e0bff817 	ldw	r2,-32(fp)
   1057c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   10580:	00002506 	br	10618 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   10584:	e0bffc17 	ldw	r2,-16(fp)
   10588:	1080020b 	ldhu	r2,8(r2)
   1058c:	0084303a 	nor	r2,zero,r2
   10590:	1007883a 	mov	r3,r2
   10594:	e0bffd0b 	ldhu	r2,-12(fp)
   10598:	1884703a 	and	r2,r3,r2
   1059c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   105a0:	e0bff30b 	ldhu	r2,-52(fp)
   105a4:	10000b26 	beq	r2,zero,105d4 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   105a8:	e0bff383 	ldbu	r2,-50(fp)
   105ac:	10800058 	cmpnei	r2,r2,1
   105b0:	10000b1e 	bne	r2,zero,105e0 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   105b4:	e0bffc17 	ldw	r2,-16(fp)
   105b8:	10c0020b 	ldhu	r3,8(r2)
   105bc:	e0bff30b 	ldhu	r2,-52(fp)
   105c0:	1884b03a 	or	r2,r3,r2
   105c4:	1007883a 	mov	r3,r2
   105c8:	e0bffc17 	ldw	r2,-16(fp)
   105cc:	10c0020d 	sth	r3,8(r2)
   105d0:	00000306 	br	105e0 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   105d4:	e0bfff17 	ldw	r2,-4(fp)
   105d8:	00c01c04 	movi	r3,112
   105dc:	10c00005 	stb	r3,0(r2)
   105e0:	e0bff417 	ldw	r2,-48(fp)
   105e4:	e0bff915 	stw	r2,-28(fp)
   105e8:	e0bff917 	ldw	r2,-28(fp)
   105ec:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   105f0:	00000906 	br	10618 <OSFlagAccept+0x2f4>
   105f4:	e0bff417 	ldw	r2,-48(fp)
   105f8:	e0bffa15 	stw	r2,-24(fp)
   105fc:	e0bffa17 	ldw	r2,-24(fp)
   10600:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   10604:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   10608:	e0bfff17 	ldw	r2,-4(fp)
   1060c:	00c01bc4 	movi	r3,111
   10610:	10c00005 	stb	r3,0(r2)
             break;
   10614:	0001883a 	nop
    }
    return (flags_rdy);
   10618:	e0bff30b 	ldhu	r2,-52(fp)
}
   1061c:	e037883a 	mov	sp,fp
   10620:	df000017 	ldw	fp,0(sp)
   10624:	dec00104 	addi	sp,sp,4
   10628:	f800283a 	ret

0001062c <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   1062c:	defff804 	addi	sp,sp,-32
   10630:	df000715 	stw	fp,28(sp)
   10634:	df000704 	addi	fp,sp,28
   10638:	2005883a 	mov	r2,r4
   1063c:	e17fff15 	stw	r5,-4(fp)
   10640:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   10644:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   10648:	e0bfff17 	ldw	r2,-4(fp)
   1064c:	1000021e 	bne	r2,zero,10658 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   10650:	0005883a 	mov	r2,zero
   10654:	00003306 	br	10724 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   10658:	d0a7f703 	ldbu	r2,-24612(gp)
   1065c:	10803fcc 	andi	r2,r2,255
   10660:	10000526 	beq	r2,zero,10678 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   10664:	e0bfff17 	ldw	r2,-4(fp)
   10668:	00c00404 	movi	r3,16
   1066c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   10670:	0005883a 	mov	r2,zero
   10674:	00002b06 	br	10724 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10678:	0005303a 	rdctl	r2,status
   1067c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10680:	e0fffd17 	ldw	r3,-12(fp)
   10684:	00bfff84 	movi	r2,-2
   10688:	1884703a 	and	r2,r3,r2
   1068c:	1001703a 	wrctl	status,r2
  
  return context;
   10690:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   10694:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   10698:	d0a7fa17 	ldw	r2,-24600(gp)
   1069c:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   106a0:	e0bffb17 	ldw	r2,-20(fp)
   106a4:	10001726 	beq	r2,zero,10704 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   106a8:	d0a7fa17 	ldw	r2,-24600(gp)
   106ac:	10800117 	ldw	r2,4(r2)
   106b0:	d0a7fa15 	stw	r2,-24600(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   106b4:	e0bffb17 	ldw	r2,-20(fp)
   106b8:	00c00144 	movi	r3,5
   106bc:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   106c0:	e0bffb17 	ldw	r2,-20(fp)
   106c4:	e0fffe0b 	ldhu	r3,-8(fp)
   106c8:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   106cc:	e0bffb17 	ldw	r2,-20(fp)
   106d0:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   106d4:	e0bffb17 	ldw	r2,-20(fp)
   106d8:	00c00fc4 	movi	r3,63
   106dc:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   106e0:	e0bffb17 	ldw	r2,-20(fp)
   106e4:	100002c5 	stb	zero,11(r2)
   106e8:	e0bff917 	ldw	r2,-28(fp)
   106ec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   106f0:	e0bffa17 	ldw	r2,-24(fp)
   106f4:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   106f8:	e0bfff17 	ldw	r2,-4(fp)
   106fc:	10000005 	stb	zero,0(r2)
   10700:	00000706 	br	10720 <OSFlagCreate+0xf4>
   10704:	e0bff917 	ldw	r2,-28(fp)
   10708:	e0bffc15 	stw	r2,-16(fp)
   1070c:	e0bffc17 	ldw	r2,-16(fp)
   10710:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   10714:	e0bfff17 	ldw	r2,-4(fp)
   10718:	00c01c84 	movi	r3,114
   1071c:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   10720:	e0bffb17 	ldw	r2,-20(fp)
}
   10724:	e037883a 	mov	sp,fp
   10728:	df000017 	ldw	fp,0(sp)
   1072c:	dec00104 	addi	sp,sp,4
   10730:	f800283a 	ret

00010734 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   10734:	defff204 	addi	sp,sp,-56
   10738:	dfc00d15 	stw	ra,52(sp)
   1073c:	df000c15 	stw	fp,48(sp)
   10740:	df000c04 	addi	fp,sp,48
   10744:	e13ffd15 	stw	r4,-12(fp)
   10748:	2805883a 	mov	r2,r5
   1074c:	e1bfff15 	stw	r6,-4(fp)
   10750:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   10754:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   10758:	e0bfff17 	ldw	r2,-4(fp)
   1075c:	1000021e 	bne	r2,zero,10768 <OSFlagDel+0x34>
        return (pgrp);
   10760:	e0bffd17 	ldw	r2,-12(fp)
   10764:	00008006 	br	10968 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   10768:	e0bffd17 	ldw	r2,-12(fp)
   1076c:	1000051e 	bne	r2,zero,10784 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10770:	e0bfff17 	ldw	r2,-4(fp)
   10774:	00c01b84 	movi	r3,110
   10778:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   1077c:	e0bffd17 	ldw	r2,-12(fp)
   10780:	00007906 	br	10968 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   10784:	d0a7f703 	ldbu	r2,-24612(gp)
   10788:	10803fcc 	andi	r2,r2,255
   1078c:	10000526 	beq	r2,zero,107a4 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   10790:	e0bfff17 	ldw	r2,-4(fp)
   10794:	00c003c4 	movi	r3,15
   10798:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   1079c:	e0bffd17 	ldw	r2,-12(fp)
   107a0:	00007106 	br	10968 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   107a4:	e0bffd17 	ldw	r2,-12(fp)
   107a8:	10800003 	ldbu	r2,0(r2)
   107ac:	10803fcc 	andi	r2,r2,255
   107b0:	10800160 	cmpeqi	r2,r2,5
   107b4:	1000051e 	bne	r2,zero,107cc <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
   107b8:	e0bfff17 	ldw	r2,-4(fp)
   107bc:	00c00044 	movi	r3,1
   107c0:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   107c4:	e0bffd17 	ldw	r2,-12(fp)
   107c8:	00006706 	br	10968 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   107cc:	0005303a 	rdctl	r2,status
   107d0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   107d4:	e0fffc17 	ldw	r3,-16(fp)
   107d8:	00bfff84 	movi	r2,-2
   107dc:	1884703a 	and	r2,r3,r2
   107e0:	1001703a 	wrctl	status,r2
  
  return context;
   107e4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   107e8:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   107ec:	e0bffd17 	ldw	r2,-12(fp)
   107f0:	10800117 	ldw	r2,4(r2)
   107f4:	10000326 	beq	r2,zero,10804 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   107f8:	00800044 	movi	r2,1
   107fc:	e0bff405 	stb	r2,-48(fp)
   10800:	00000106 	br	10808 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   10804:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   10808:	e0bffe03 	ldbu	r2,-8(fp)
   1080c:	10000326 	beq	r2,zero,1081c <OSFlagDel+0xe8>
   10810:	10800060 	cmpeqi	r2,r2,1
   10814:	1000231e 	bne	r2,zero,108a4 <OSFlagDel+0x170>
   10818:	00004806 	br	1093c <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   1081c:	e0bff403 	ldbu	r2,-48(fp)
   10820:	1000161e 	bne	r2,zero,1087c <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   10824:	e0bffd17 	ldw	r2,-12(fp)
   10828:	00c00fc4 	movi	r3,63
   1082c:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   10830:	e0bffd17 	ldw	r2,-12(fp)
   10834:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   10838:	e0bffd17 	ldw	r2,-12(fp)
   1083c:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   10840:	d0e7fa17 	ldw	r3,-24600(gp)
   10844:	e0bffd17 	ldw	r2,-12(fp)
   10848:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   1084c:	e0bffd17 	ldw	r2,-12(fp)
   10850:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   10854:	e0bffd17 	ldw	r2,-12(fp)
   10858:	d0a7fa15 	stw	r2,-24600(gp)
   1085c:	e0bff717 	ldw	r2,-36(fp)
   10860:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10864:	e0bff817 	ldw	r2,-32(fp)
   10868:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   1086c:	e0bfff17 	ldw	r2,-4(fp)
   10870:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   10874:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   10878:	00003a06 	br	10964 <OSFlagDel+0x230>
   1087c:	e0bff717 	ldw	r2,-36(fp)
   10880:	e0bff915 	stw	r2,-28(fp)
   10884:	e0bff917 	ldw	r2,-28(fp)
   10888:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   1088c:	e0bfff17 	ldw	r2,-4(fp)
   10890:	00c01244 	movi	r3,73
   10894:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   10898:	e0bffd17 	ldw	r2,-12(fp)
   1089c:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   108a0:	00003006 	br	10964 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   108a4:	e0bffd17 	ldw	r2,-12(fp)
   108a8:	10800117 	ldw	r2,4(r2)
   108ac:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   108b0:	00000606 	br	108cc <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   108b4:	000b883a 	mov	r5,zero
   108b8:	e13ff517 	ldw	r4,-44(fp)
   108bc:	00118a00 	call	118a0 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   108c0:	e0bff517 	ldw	r2,-44(fp)
   108c4:	10800017 	ldw	r2,0(r2)
   108c8:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   108cc:	e0bff517 	ldw	r2,-44(fp)
   108d0:	103ff81e 	bne	r2,zero,108b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70108b4>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   108d4:	e0bffd17 	ldw	r2,-12(fp)
   108d8:	00c00fc4 	movi	r3,63
   108dc:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   108e0:	e0bffd17 	ldw	r2,-12(fp)
   108e4:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   108e8:	e0bffd17 	ldw	r2,-12(fp)
   108ec:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   108f0:	d0e7fa17 	ldw	r3,-24600(gp)
   108f4:	e0bffd17 	ldw	r2,-12(fp)
   108f8:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   108fc:	e0bffd17 	ldw	r2,-12(fp)
   10900:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   10904:	e0bffd17 	ldw	r2,-12(fp)
   10908:	d0a7fa15 	stw	r2,-24600(gp)
   1090c:	e0bff717 	ldw	r2,-36(fp)
   10910:	e0bffa15 	stw	r2,-24(fp)
   10914:	e0bffa17 	ldw	r2,-24(fp)
   10918:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   1091c:	e0bff403 	ldbu	r2,-48(fp)
   10920:	10800058 	cmpnei	r2,r2,1
   10924:	1000011e 	bne	r2,zero,1092c <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   10928:	000fab00 	call	fab0 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   1092c:	e0bfff17 	ldw	r2,-4(fp)
   10930:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   10934:	e03ff615 	stw	zero,-40(fp)
             break;
   10938:	00000a06 	br	10964 <OSFlagDel+0x230>
   1093c:	e0bff717 	ldw	r2,-36(fp)
   10940:	e0bffb15 	stw	r2,-20(fp)
   10944:	e0bffb17 	ldw	r2,-20(fp)
   10948:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   1094c:	e0bfff17 	ldw	r2,-4(fp)
   10950:	00c001c4 	movi	r3,7
   10954:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   10958:	e0bffd17 	ldw	r2,-12(fp)
   1095c:	e0bff615 	stw	r2,-40(fp)
             break;
   10960:	0001883a 	nop
    }
    return (pgrp_return);
   10964:	e0bff617 	ldw	r2,-40(fp)
}
   10968:	e037883a 	mov	sp,fp
   1096c:	dfc00117 	ldw	ra,4(sp)
   10970:	df000017 	ldw	fp,0(sp)
   10974:	dec00204 	addi	sp,sp,8
   10978:	f800283a 	ret

0001097c <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   1097c:	defff604 	addi	sp,sp,-40
   10980:	dfc00915 	stw	ra,36(sp)
   10984:	df000815 	stw	fp,32(sp)
   10988:	df000804 	addi	fp,sp,32
   1098c:	e13ffd15 	stw	r4,-12(fp)
   10990:	e17ffe15 	stw	r5,-8(fp)
   10994:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10998:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1099c:	e0bfff17 	ldw	r2,-4(fp)
   109a0:	1000021e 	bne	r2,zero,109ac <OSFlagNameGet+0x30>
        return (0);
   109a4:	0005883a 	mov	r2,zero
   109a8:	00003906 	br	10a90 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   109ac:	e0bffd17 	ldw	r2,-12(fp)
   109b0:	1000051e 	bne	r2,zero,109c8 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   109b4:	e0bfff17 	ldw	r2,-4(fp)
   109b8:	00c01b84 	movi	r3,110
   109bc:	10c00005 	stb	r3,0(r2)
        return (0);
   109c0:	0005883a 	mov	r2,zero
   109c4:	00003206 	br	10a90 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   109c8:	e0bffe17 	ldw	r2,-8(fp)
   109cc:	1000051e 	bne	r2,zero,109e4 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   109d0:	e0bfff17 	ldw	r2,-4(fp)
   109d4:	00c00304 	movi	r3,12
   109d8:	10c00005 	stb	r3,0(r2)
        return (0);
   109dc:	0005883a 	mov	r2,zero
   109e0:	00002b06 	br	10a90 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   109e4:	d0a7f703 	ldbu	r2,-24612(gp)
   109e8:	10803fcc 	andi	r2,r2,255
   109ec:	10000526 	beq	r2,zero,10a04 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   109f0:	e0bfff17 	ldw	r2,-4(fp)
   109f4:	00c00444 	movi	r3,17
   109f8:	10c00005 	stb	r3,0(r2)
        return (0);
   109fc:	0005883a 	mov	r2,zero
   10a00:	00002306 	br	10a90 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10a04:	0005303a 	rdctl	r2,status
   10a08:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10a0c:	e0fffc17 	ldw	r3,-16(fp)
   10a10:	00bfff84 	movi	r2,-2
   10a14:	1884703a 	and	r2,r3,r2
   10a18:	1001703a 	wrctl	status,r2
  
  return context;
   10a1c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   10a20:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   10a24:	e0bffd17 	ldw	r2,-12(fp)
   10a28:	10800003 	ldbu	r2,0(r2)
   10a2c:	10803fcc 	andi	r2,r2,255
   10a30:	10800160 	cmpeqi	r2,r2,5
   10a34:	1000091e 	bne	r2,zero,10a5c <OSFlagNameGet+0xe0>
   10a38:	e0bff817 	ldw	r2,-32(fp)
   10a3c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10a40:	e0bff917 	ldw	r2,-28(fp)
   10a44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   10a48:	e0bfff17 	ldw	r2,-4(fp)
   10a4c:	00c00044 	movi	r3,1
   10a50:	10c00005 	stb	r3,0(r2)
        return (0);
   10a54:	0005883a 	mov	r2,zero
   10a58:	00000d06 	br	10a90 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   10a5c:	e0bffd17 	ldw	r2,-12(fp)
   10a60:	10800284 	addi	r2,r2,10
   10a64:	100b883a 	mov	r5,r2
   10a68:	e13ffe17 	ldw	r4,-8(fp)
   10a6c:	000fbf40 	call	fbf4 <OS_StrCopy>
   10a70:	e0bffb05 	stb	r2,-20(fp)
   10a74:	e0bff817 	ldw	r2,-32(fp)
   10a78:	e0bffa15 	stw	r2,-24(fp)
   10a7c:	e0bffa17 	ldw	r2,-24(fp)
   10a80:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   10a84:	e0bfff17 	ldw	r2,-4(fp)
   10a88:	10000005 	stb	zero,0(r2)
    return (len);
   10a8c:	e0bffb03 	ldbu	r2,-20(fp)
}
   10a90:	e037883a 	mov	sp,fp
   10a94:	dfc00117 	ldw	ra,4(sp)
   10a98:	df000017 	ldw	fp,0(sp)
   10a9c:	dec00204 	addi	sp,sp,8
   10aa0:	f800283a 	ret

00010aa4 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   10aa4:	defff504 	addi	sp,sp,-44
   10aa8:	dfc00a15 	stw	ra,40(sp)
   10aac:	df000915 	stw	fp,36(sp)
   10ab0:	df000904 	addi	fp,sp,36
   10ab4:	e13ffd15 	stw	r4,-12(fp)
   10ab8:	e17ffe15 	stw	r5,-8(fp)
   10abc:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10ac0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   10ac4:	e0bfff17 	ldw	r2,-4(fp)
   10ac8:	10004326 	beq	r2,zero,10bd8 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   10acc:	e0bffd17 	ldw	r2,-12(fp)
   10ad0:	1000041e 	bne	r2,zero,10ae4 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10ad4:	e0bfff17 	ldw	r2,-4(fp)
   10ad8:	00c01b84 	movi	r3,110
   10adc:	10c00005 	stb	r3,0(r2)
        return;
   10ae0:	00003e06 	br	10bdc <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   10ae4:	e0bffe17 	ldw	r2,-8(fp)
   10ae8:	1000041e 	bne	r2,zero,10afc <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   10aec:	e0bfff17 	ldw	r2,-4(fp)
   10af0:	00c00304 	movi	r3,12
   10af4:	10c00005 	stb	r3,0(r2)
        return;
   10af8:	00003806 	br	10bdc <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   10afc:	d0a7f703 	ldbu	r2,-24612(gp)
   10b00:	10803fcc 	andi	r2,r2,255
   10b04:	10000426 	beq	r2,zero,10b18 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   10b08:	e0bfff17 	ldw	r2,-4(fp)
   10b0c:	00c00484 	movi	r3,18
   10b10:	10c00005 	stb	r3,0(r2)
        return;
   10b14:	00003106 	br	10bdc <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10b18:	0005303a 	rdctl	r2,status
   10b1c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10b20:	e0fffc17 	ldw	r3,-16(fp)
   10b24:	00bfff84 	movi	r2,-2
   10b28:	1884703a 	and	r2,r3,r2
   10b2c:	1001703a 	wrctl	status,r2
  
  return context;
   10b30:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   10b34:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   10b38:	e0bffd17 	ldw	r2,-12(fp)
   10b3c:	10800003 	ldbu	r2,0(r2)
   10b40:	10803fcc 	andi	r2,r2,255
   10b44:	10800160 	cmpeqi	r2,r2,5
   10b48:	1000081e 	bne	r2,zero,10b6c <OSFlagNameSet+0xc8>
   10b4c:	e0bff717 	ldw	r2,-36(fp)
   10b50:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10b54:	e0bff817 	ldw	r2,-32(fp)
   10b58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   10b5c:	e0bfff17 	ldw	r2,-4(fp)
   10b60:	00c00044 	movi	r3,1
   10b64:	10c00005 	stb	r3,0(r2)
        return;
   10b68:	00001c06 	br	10bdc <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   10b6c:	e13ffe17 	ldw	r4,-8(fp)
   10b70:	000fc680 	call	fc68 <OS_StrLen>
   10b74:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   10b78:	e0bffa03 	ldbu	r2,-24(fp)
   10b7c:	10800830 	cmpltui	r2,r2,32
   10b80:	1000081e 	bne	r2,zero,10ba4 <OSFlagNameSet+0x100>
   10b84:	e0bff717 	ldw	r2,-36(fp)
   10b88:	e0bff915 	stw	r2,-28(fp)
   10b8c:	e0bff917 	ldw	r2,-28(fp)
   10b90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   10b94:	e0bfff17 	ldw	r2,-4(fp)
   10b98:	00c01cc4 	movi	r3,115
   10b9c:	10c00005 	stb	r3,0(r2)
        return;
   10ba0:	00000e06 	br	10bdc <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   10ba4:	e0bffd17 	ldw	r2,-12(fp)
   10ba8:	10800284 	addi	r2,r2,10
   10bac:	e17ffe17 	ldw	r5,-8(fp)
   10bb0:	1009883a 	mov	r4,r2
   10bb4:	000fbf40 	call	fbf4 <OS_StrCopy>
   10bb8:	e0bff717 	ldw	r2,-36(fp)
   10bbc:	e0bffb15 	stw	r2,-20(fp)
   10bc0:	e0bffb17 	ldw	r2,-20(fp)
   10bc4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   10bc8:	e0bfff17 	ldw	r2,-4(fp)
   10bcc:	10000005 	stb	zero,0(r2)
    return;
   10bd0:	0001883a 	nop
   10bd4:	00000106 	br	10bdc <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   10bd8:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
   10bdc:	e037883a 	mov	sp,fp
   10be0:	dfc00117 	ldw	ra,4(sp)
   10be4:	df000017 	ldw	fp,0(sp)
   10be8:	dec00204 	addi	sp,sp,8
   10bec:	f800283a 	ret

00010bf0 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   10bf0:	deffe104 	addi	sp,sp,-124
   10bf4:	dfc01e15 	stw	ra,120(sp)
   10bf8:	df001d15 	stw	fp,116(sp)
   10bfc:	df001d04 	addi	fp,sp,116
   10c00:	e13ffc15 	stw	r4,-16(fp)
   10c04:	2809883a 	mov	r4,r5
   10c08:	3007883a 	mov	r3,r6
   10c0c:	3805883a 	mov	r2,r7
   10c10:	e13ffd0d 	sth	r4,-12(fp)
   10c14:	e0fffe05 	stb	r3,-8(fp)
   10c18:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   10c1c:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   10c20:	e0800217 	ldw	r2,8(fp)
   10c24:	1000021e 	bne	r2,zero,10c30 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   10c28:	0005883a 	mov	r2,zero
   10c2c:	00015906 	br	11194 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   10c30:	e0bffc17 	ldw	r2,-16(fp)
   10c34:	1000051e 	bne	r2,zero,10c4c <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10c38:	e0800217 	ldw	r2,8(fp)
   10c3c:	00c01b84 	movi	r3,110
   10c40:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10c44:	0005883a 	mov	r2,zero
   10c48:	00015206 	br	11194 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   10c4c:	d0a7f703 	ldbu	r2,-24612(gp)
   10c50:	10803fcc 	andi	r2,r2,255
   10c54:	10000526 	beq	r2,zero,10c6c <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   10c58:	e0800217 	ldw	r2,8(fp)
   10c5c:	00c00084 	movi	r3,2
   10c60:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10c64:	0005883a 	mov	r2,zero
   10c68:	00014a06 	br	11194 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   10c6c:	d0a7e903 	ldbu	r2,-24668(gp)
   10c70:	10803fcc 	andi	r2,r2,255
   10c74:	10000526 	beq	r2,zero,10c8c <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   10c78:	e0800217 	ldw	r2,8(fp)
   10c7c:	00c00344 	movi	r3,13
   10c80:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10c84:	0005883a 	mov	r2,zero
   10c88:	00014206 	br	11194 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   10c8c:	e0bffc17 	ldw	r2,-16(fp)
   10c90:	10800003 	ldbu	r2,0(r2)
   10c94:	10803fcc 	andi	r2,r2,255
   10c98:	10800160 	cmpeqi	r2,r2,5
   10c9c:	1000051e 	bne	r2,zero,10cb4 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
   10ca0:	e0800217 	ldw	r2,8(fp)
   10ca4:	00c00044 	movi	r3,1
   10ca8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10cac:	0005883a 	mov	r2,zero
   10cb0:	00013806 	br	11194 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   10cb4:	e0fffe03 	ldbu	r3,-8(fp)
   10cb8:	00bfe004 	movi	r2,-128
   10cbc:	1884703a 	and	r2,r3,r2
   10cc0:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   10cc4:	e0bfe603 	ldbu	r2,-104(fp)
   10cc8:	10000626 	beq	r2,zero,10ce4 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   10ccc:	e0bffe03 	ldbu	r2,-8(fp)
   10cd0:	10801fcc 	andi	r2,r2,127
   10cd4:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   10cd8:	00800044 	movi	r2,1
   10cdc:	e0bfe405 	stb	r2,-112(fp)
   10ce0:	00000106 	br	10ce8 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
   10ce4:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10ce8:	0005303a 	rdctl	r2,status
   10cec:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10cf0:	e0fff617 	ldw	r3,-40(fp)
   10cf4:	00bfff84 	movi	r2,-2
   10cf8:	1884703a 	and	r2,r3,r2
   10cfc:	1001703a 	wrctl	status,r2
  
  return context;
   10d00:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   10d04:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
   10d08:	e0bffe03 	ldbu	r2,-8(fp)
   10d0c:	10c00060 	cmpeqi	r3,r2,1
   10d10:	1800921e 	bne	r3,zero,10f5c <OSFlagPend+0x36c>
   10d14:	10c00088 	cmpgei	r3,r2,2
   10d18:	1800021e 	bne	r3,zero,10d24 <OSFlagPend+0x134>
   10d1c:	10006126 	beq	r2,zero,10ea4 <OSFlagPend+0x2b4>
   10d20:	0000bb06 	br	11010 <OSFlagPend+0x420>
   10d24:	10c000a0 	cmpeqi	r3,r2,2
   10d28:	1800031e 	bne	r3,zero,10d38 <OSFlagPend+0x148>
   10d2c:	108000e0 	cmpeqi	r2,r2,3
   10d30:	10002f1e 	bne	r2,zero,10df0 <OSFlagPend+0x200>
   10d34:	0000b606 	br	11010 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   10d38:	e0bffc17 	ldw	r2,-16(fp)
   10d3c:	10c0020b 	ldhu	r3,8(r2)
   10d40:	e0bffd0b 	ldhu	r2,-12(fp)
   10d44:	1884703a 	and	r2,r3,r2
   10d48:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   10d4c:	e0ffe80b 	ldhu	r3,-96(fp)
   10d50:	e0bffd0b 	ldhu	r2,-12(fp)
   10d54:	1880171e 	bne	r3,r2,10db4 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10d58:	e0bfe403 	ldbu	r2,-112(fp)
   10d5c:	10800058 	cmpnei	r2,r2,1
   10d60:	1000091e 	bne	r2,zero,10d88 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   10d64:	e0bffc17 	ldw	r2,-16(fp)
   10d68:	1080020b 	ldhu	r2,8(r2)
   10d6c:	1007883a 	mov	r3,r2
   10d70:	e0bfe80b 	ldhu	r2,-96(fp)
   10d74:	0084303a 	nor	r2,zero,r2
   10d78:	1884703a 	and	r2,r3,r2
   10d7c:	1007883a 	mov	r3,r2
   10d80:	e0bffc17 	ldw	r2,-16(fp)
   10d84:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   10d88:	d0a7f817 	ldw	r2,-24608(gp)
   10d8c:	e0ffe80b 	ldhu	r3,-96(fp)
   10d90:	10c00b0d 	sth	r3,44(r2)
   10d94:	e0bfe517 	ldw	r2,-108(fp)
   10d98:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10d9c:	e0bfe717 	ldw	r2,-100(fp)
   10da0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   10da4:	e0800217 	ldw	r2,8(fp)
   10da8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   10dac:	e0bfe80b 	ldhu	r2,-96(fp)
   10db0:	0000f806 	br	11194 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   10db4:	e13ffd0b 	ldhu	r4,-12(fp)
   10db8:	e17ffe03 	ldbu	r5,-8(fp)
   10dbc:	e0bfff0b 	ldhu	r2,-4(fp)
   10dc0:	e0fff704 	addi	r3,fp,-36
   10dc4:	d8800015 	stw	r2,0(sp)
   10dc8:	280f883a 	mov	r7,r5
   10dcc:	200d883a 	mov	r6,r4
   10dd0:	180b883a 	mov	r5,r3
   10dd4:	e13ffc17 	ldw	r4,-16(fp)
   10dd8:	00116600 	call	11660 <OS_FlagBlock>
   10ddc:	e0bfe517 	ldw	r2,-108(fp)
   10de0:	e0bfe915 	stw	r2,-92(fp)
   10de4:	e0bfe917 	ldw	r2,-92(fp)
   10de8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   10dec:	00009206 	br	11038 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   10df0:	e0bffc17 	ldw	r2,-16(fp)
   10df4:	10c0020b 	ldhu	r3,8(r2)
   10df8:	e0bffd0b 	ldhu	r2,-12(fp)
   10dfc:	1884703a 	and	r2,r3,r2
   10e00:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   10e04:	e0bfe80b 	ldhu	r2,-96(fp)
   10e08:	10001726 	beq	r2,zero,10e68 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10e0c:	e0bfe403 	ldbu	r2,-112(fp)
   10e10:	10800058 	cmpnei	r2,r2,1
   10e14:	1000091e 	bne	r2,zero,10e3c <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   10e18:	e0bffc17 	ldw	r2,-16(fp)
   10e1c:	1080020b 	ldhu	r2,8(r2)
   10e20:	1007883a 	mov	r3,r2
   10e24:	e0bfe80b 	ldhu	r2,-96(fp)
   10e28:	0084303a 	nor	r2,zero,r2
   10e2c:	1884703a 	and	r2,r3,r2
   10e30:	1007883a 	mov	r3,r2
   10e34:	e0bffc17 	ldw	r2,-16(fp)
   10e38:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   10e3c:	d0a7f817 	ldw	r2,-24608(gp)
   10e40:	e0ffe80b 	ldhu	r3,-96(fp)
   10e44:	10c00b0d 	sth	r3,44(r2)
   10e48:	e0bfe517 	ldw	r2,-108(fp)
   10e4c:	e0bfea15 	stw	r2,-88(fp)
   10e50:	e0bfea17 	ldw	r2,-88(fp)
   10e54:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   10e58:	e0800217 	ldw	r2,8(fp)
   10e5c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   10e60:	e0bfe80b 	ldhu	r2,-96(fp)
   10e64:	0000cb06 	br	11194 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   10e68:	e13ffd0b 	ldhu	r4,-12(fp)
   10e6c:	e17ffe03 	ldbu	r5,-8(fp)
   10e70:	e0bfff0b 	ldhu	r2,-4(fp)
   10e74:	e0fff704 	addi	r3,fp,-36
   10e78:	d8800015 	stw	r2,0(sp)
   10e7c:	280f883a 	mov	r7,r5
   10e80:	200d883a 	mov	r6,r4
   10e84:	180b883a 	mov	r5,r3
   10e88:	e13ffc17 	ldw	r4,-16(fp)
   10e8c:	00116600 	call	11660 <OS_FlagBlock>
   10e90:	e0bfe517 	ldw	r2,-108(fp)
   10e94:	e0bfeb15 	stw	r2,-84(fp)
   10e98:	e0bfeb17 	ldw	r2,-84(fp)
   10e9c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   10ea0:	00006506 	br	11038 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   10ea4:	e0bffc17 	ldw	r2,-16(fp)
   10ea8:	1080020b 	ldhu	r2,8(r2)
   10eac:	0084303a 	nor	r2,zero,r2
   10eb0:	1007883a 	mov	r3,r2
   10eb4:	e0bffd0b 	ldhu	r2,-12(fp)
   10eb8:	1884703a 	and	r2,r3,r2
   10ebc:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   10ec0:	e0ffe80b 	ldhu	r3,-96(fp)
   10ec4:	e0bffd0b 	ldhu	r2,-12(fp)
   10ec8:	1880151e 	bne	r3,r2,10f20 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10ecc:	e0bfe403 	ldbu	r2,-112(fp)
   10ed0:	10800058 	cmpnei	r2,r2,1
   10ed4:	1000071e 	bne	r2,zero,10ef4 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   10ed8:	e0bffc17 	ldw	r2,-16(fp)
   10edc:	10c0020b 	ldhu	r3,8(r2)
   10ee0:	e0bfe80b 	ldhu	r2,-96(fp)
   10ee4:	1884b03a 	or	r2,r3,r2
   10ee8:	1007883a 	mov	r3,r2
   10eec:	e0bffc17 	ldw	r2,-16(fp)
   10ef0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   10ef4:	d0a7f817 	ldw	r2,-24608(gp)
   10ef8:	e0ffe80b 	ldhu	r3,-96(fp)
   10efc:	10c00b0d 	sth	r3,44(r2)
   10f00:	e0bfe517 	ldw	r2,-108(fp)
   10f04:	e0bfec15 	stw	r2,-80(fp)
   10f08:	e0bfec17 	ldw	r2,-80(fp)
   10f0c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   10f10:	e0800217 	ldw	r2,8(fp)
   10f14:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   10f18:	e0bfe80b 	ldhu	r2,-96(fp)
   10f1c:	00009d06 	br	11194 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   10f20:	e13ffd0b 	ldhu	r4,-12(fp)
   10f24:	e17ffe03 	ldbu	r5,-8(fp)
   10f28:	e0bfff0b 	ldhu	r2,-4(fp)
   10f2c:	e0fff704 	addi	r3,fp,-36
   10f30:	d8800015 	stw	r2,0(sp)
   10f34:	280f883a 	mov	r7,r5
   10f38:	200d883a 	mov	r6,r4
   10f3c:	180b883a 	mov	r5,r3
   10f40:	e13ffc17 	ldw	r4,-16(fp)
   10f44:	00116600 	call	11660 <OS_FlagBlock>
   10f48:	e0bfe517 	ldw	r2,-108(fp)
   10f4c:	e0bfed15 	stw	r2,-76(fp)
   10f50:	e0bfed17 	ldw	r2,-76(fp)
   10f54:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   10f58:	00003706 	br	11038 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   10f5c:	e0bffc17 	ldw	r2,-16(fp)
   10f60:	1080020b 	ldhu	r2,8(r2)
   10f64:	0084303a 	nor	r2,zero,r2
   10f68:	1007883a 	mov	r3,r2
   10f6c:	e0bffd0b 	ldhu	r2,-12(fp)
   10f70:	1884703a 	and	r2,r3,r2
   10f74:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   10f78:	e0bfe80b 	ldhu	r2,-96(fp)
   10f7c:	10001526 	beq	r2,zero,10fd4 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10f80:	e0bfe403 	ldbu	r2,-112(fp)
   10f84:	10800058 	cmpnei	r2,r2,1
   10f88:	1000071e 	bne	r2,zero,10fa8 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   10f8c:	e0bffc17 	ldw	r2,-16(fp)
   10f90:	10c0020b 	ldhu	r3,8(r2)
   10f94:	e0bfe80b 	ldhu	r2,-96(fp)
   10f98:	1884b03a 	or	r2,r3,r2
   10f9c:	1007883a 	mov	r3,r2
   10fa0:	e0bffc17 	ldw	r2,-16(fp)
   10fa4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   10fa8:	d0a7f817 	ldw	r2,-24608(gp)
   10fac:	e0ffe80b 	ldhu	r3,-96(fp)
   10fb0:	10c00b0d 	sth	r3,44(r2)
   10fb4:	e0bfe517 	ldw	r2,-108(fp)
   10fb8:	e0bfee15 	stw	r2,-72(fp)
   10fbc:	e0bfee17 	ldw	r2,-72(fp)
   10fc0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   10fc4:	e0800217 	ldw	r2,8(fp)
   10fc8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   10fcc:	e0bfe80b 	ldhu	r2,-96(fp)
   10fd0:	00007006 	br	11194 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   10fd4:	e13ffd0b 	ldhu	r4,-12(fp)
   10fd8:	e17ffe03 	ldbu	r5,-8(fp)
   10fdc:	e0bfff0b 	ldhu	r2,-4(fp)
   10fe0:	e0fff704 	addi	r3,fp,-36
   10fe4:	d8800015 	stw	r2,0(sp)
   10fe8:	280f883a 	mov	r7,r5
   10fec:	200d883a 	mov	r6,r4
   10ff0:	180b883a 	mov	r5,r3
   10ff4:	e13ffc17 	ldw	r4,-16(fp)
   10ff8:	00116600 	call	11660 <OS_FlagBlock>
   10ffc:	e0bfe517 	ldw	r2,-108(fp)
   11000:	e0bfef15 	stw	r2,-68(fp)
   11004:	e0bfef17 	ldw	r2,-68(fp)
   11008:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   1100c:	00000a06 	br	11038 <OSFlagPend+0x448>
   11010:	e0bfe517 	ldw	r2,-108(fp)
   11014:	e0bff015 	stw	r2,-64(fp)
   11018:	e0bff017 	ldw	r2,-64(fp)
   1101c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   11020:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   11024:	e0800217 	ldw	r2,8(fp)
   11028:	00c01bc4 	movi	r3,111
   1102c:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   11030:	e0bfe80b 	ldhu	r2,-96(fp)
   11034:	00005706 	br	11194 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   11038:	000fab00 	call	fab0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1103c:	0005303a 	rdctl	r2,status
   11040:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11044:	e0fff117 	ldw	r3,-60(fp)
   11048:	00bfff84 	movi	r2,-2
   1104c:	1884703a 	and	r2,r3,r2
   11050:	1001703a 	wrctl	status,r2
  
  return context;
   11054:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
   11058:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   1105c:	d0a7f817 	ldw	r2,-24608(gp)
   11060:	10800c43 	ldbu	r2,49(r2)
   11064:	10803fcc 	andi	r2,r2,255
   11068:	10001c26 	beq	r2,zero,110dc <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   1106c:	d0a7f817 	ldw	r2,-24608(gp)
   11070:	10800c43 	ldbu	r2,49(r2)
   11074:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   11078:	d0a7f817 	ldw	r2,-24608(gp)
   1107c:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   11080:	e0bff704 	addi	r2,fp,-36
   11084:	1009883a 	mov	r4,r2
   11088:	00119940 	call	11994 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   1108c:	d0a7f817 	ldw	r2,-24608(gp)
   11090:	10000c05 	stb	zero,48(r2)
   11094:	e0bfe517 	ldw	r2,-108(fp)
   11098:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1109c:	e0bff217 	ldw	r2,-56(fp)
   110a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   110a4:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
   110a8:	e0bff303 	ldbu	r2,-52(fp)
   110ac:	108000a0 	cmpeqi	r2,r2,2
   110b0:	10000426 	beq	r2,zero,110c4 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   110b4:	e0800217 	ldw	r2,8(fp)
   110b8:	00c00384 	movi	r3,14
   110bc:	10c00005 	stb	r3,0(r2)
                 break;
   110c0:	00000406 	br	110d4 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   110c4:	e0800217 	ldw	r2,8(fp)
   110c8:	00c00284 	movi	r3,10
   110cc:	10c00005 	stb	r3,0(r2)
                 break;
   110d0:	0001883a 	nop
        }
        return (flags_rdy);
   110d4:	e0bfe80b 	ldhu	r2,-96(fp)
   110d8:	00002e06 	br	11194 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   110dc:	d0a7f817 	ldw	r2,-24608(gp)
   110e0:	10800b0b 	ldhu	r2,44(r2)
   110e4:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   110e8:	e0bfe403 	ldbu	r2,-112(fp)
   110ec:	10800058 	cmpnei	r2,r2,1
   110f0:	1000211e 	bne	r2,zero,11178 <OSFlagPend+0x588>
        switch (wait_type) {
   110f4:	e0bffe03 	ldbu	r2,-8(fp)
   110f8:	10001616 	blt	r2,zero,11154 <OSFlagPend+0x564>
   110fc:	10c00090 	cmplti	r3,r2,2
   11100:	18000c1e 	bne	r3,zero,11134 <OSFlagPend+0x544>
   11104:	10800108 	cmpgei	r2,r2,4
   11108:	1000121e 	bne	r2,zero,11154 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   1110c:	e0bffc17 	ldw	r2,-16(fp)
   11110:	1080020b 	ldhu	r2,8(r2)
   11114:	1007883a 	mov	r3,r2
   11118:	e0bfe80b 	ldhu	r2,-96(fp)
   1111c:	0084303a 	nor	r2,zero,r2
   11120:	1884703a 	and	r2,r3,r2
   11124:	1007883a 	mov	r3,r2
   11128:	e0bffc17 	ldw	r2,-16(fp)
   1112c:	10c0020d 	sth	r3,8(r2)
                 break;
   11130:	00001106 	br	11178 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   11134:	e0bffc17 	ldw	r2,-16(fp)
   11138:	10c0020b 	ldhu	r3,8(r2)
   1113c:	e0bfe80b 	ldhu	r2,-96(fp)
   11140:	1884b03a 	or	r2,r3,r2
   11144:	1007883a 	mov	r3,r2
   11148:	e0bffc17 	ldw	r2,-16(fp)
   1114c:	10c0020d 	sth	r3,8(r2)
                 break;
   11150:	00000906 	br	11178 <OSFlagPend+0x588>
   11154:	e0bfe517 	ldw	r2,-108(fp)
   11158:	e0bff415 	stw	r2,-48(fp)
   1115c:	e0bff417 	ldw	r2,-48(fp)
   11160:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   11164:	e0800217 	ldw	r2,8(fp)
   11168:	00c01bc4 	movi	r3,111
   1116c:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   11170:	0005883a 	mov	r2,zero
   11174:	00000706 	br	11194 <OSFlagPend+0x5a4>
   11178:	e0bfe517 	ldw	r2,-108(fp)
   1117c:	e0bff515 	stw	r2,-44(fp)
   11180:	e0bff517 	ldw	r2,-44(fp)
   11184:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   11188:	e0800217 	ldw	r2,8(fp)
   1118c:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   11190:	e0bfe80b 	ldhu	r2,-96(fp)
}
   11194:	e037883a 	mov	sp,fp
   11198:	dfc00117 	ldw	ra,4(sp)
   1119c:	df000017 	ldw	fp,0(sp)
   111a0:	dec00204 	addi	sp,sp,8
   111a4:	f800283a 	ret

000111a8 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   111a8:	defffb04 	addi	sp,sp,-20
   111ac:	df000415 	stw	fp,16(sp)
   111b0:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   111b4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   111b8:	0005303a 	rdctl	r2,status
   111bc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   111c0:	e0fffe17 	ldw	r3,-8(fp)
   111c4:	00bfff84 	movi	r2,-2
   111c8:	1884703a 	and	r2,r3,r2
   111cc:	1001703a 	wrctl	status,r2
  
  return context;
   111d0:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   111d4:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   111d8:	d0a7f817 	ldw	r2,-24608(gp)
   111dc:	10800b0b 	ldhu	r2,44(r2)
   111e0:	e0bffd0d 	sth	r2,-12(fp)
   111e4:	e0bffc17 	ldw	r2,-16(fp)
   111e8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   111ec:	e0bfff17 	ldw	r2,-4(fp)
   111f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   111f4:	e0bffd0b 	ldhu	r2,-12(fp)
}
   111f8:	e037883a 	mov	sp,fp
   111fc:	df000017 	ldw	fp,0(sp)
   11200:	dec00104 	addi	sp,sp,4
   11204:	f800283a 	ret

00011208 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   11208:	deffef04 	addi	sp,sp,-68
   1120c:	dfc01015 	stw	ra,64(sp)
   11210:	df000f15 	stw	fp,60(sp)
   11214:	df000f04 	addi	fp,sp,60
   11218:	e13ffc15 	stw	r4,-16(fp)
   1121c:	2807883a 	mov	r3,r5
   11220:	3005883a 	mov	r2,r6
   11224:	e1ffff15 	stw	r7,-4(fp)
   11228:	e0fffd0d 	sth	r3,-12(fp)
   1122c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   11230:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   11234:	e0bfff17 	ldw	r2,-4(fp)
   11238:	1000021e 	bne	r2,zero,11244 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   1123c:	0005883a 	mov	r2,zero
   11240:	0000d106 	br	11588 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   11244:	e0bffc17 	ldw	r2,-16(fp)
   11248:	1000051e 	bne	r2,zero,11260 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1124c:	e0bfff17 	ldw	r2,-4(fp)
   11250:	00c01b84 	movi	r3,110
   11254:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11258:	0005883a 	mov	r2,zero
   1125c:	0000ca06 	br	11588 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   11260:	e0bffc17 	ldw	r2,-16(fp)
   11264:	10800003 	ldbu	r2,0(r2)
   11268:	10803fcc 	andi	r2,r2,255
   1126c:	10800160 	cmpeqi	r2,r2,5
   11270:	1000051e 	bne	r2,zero,11288 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   11274:	e0bfff17 	ldw	r2,-4(fp)
   11278:	00c00044 	movi	r3,1
   1127c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11280:	0005883a 	mov	r2,zero
   11284:	0000c006 	br	11588 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11288:	0005303a 	rdctl	r2,status
   1128c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11290:	e0fffb17 	ldw	r3,-20(fp)
   11294:	00bfff84 	movi	r2,-2
   11298:	1884703a 	and	r2,r3,r2
   1129c:	1001703a 	wrctl	status,r2
  
  return context;
   112a0:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   112a4:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   112a8:	e0bffe03 	ldbu	r2,-8(fp)
   112ac:	10000326 	beq	r2,zero,112bc <OSFlagPost+0xb4>
   112b0:	10800060 	cmpeqi	r2,r2,1
   112b4:	10000b1e 	bne	r2,zero,112e4 <OSFlagPost+0xdc>
   112b8:	00001206 	br	11304 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   112bc:	e0bffc17 	ldw	r2,-16(fp)
   112c0:	1080020b 	ldhu	r2,8(r2)
   112c4:	1007883a 	mov	r3,r2
   112c8:	e0bffd0b 	ldhu	r2,-12(fp)
   112cc:	0084303a 	nor	r2,zero,r2
   112d0:	1884703a 	and	r2,r3,r2
   112d4:	1007883a 	mov	r3,r2
   112d8:	e0bffc17 	ldw	r2,-16(fp)
   112dc:	10c0020d 	sth	r3,8(r2)
             break;
   112e0:	00001106 	br	11328 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   112e4:	e0bffc17 	ldw	r2,-16(fp)
   112e8:	10c0020b 	ldhu	r3,8(r2)
   112ec:	e0bffd0b 	ldhu	r2,-12(fp)
   112f0:	1884b03a 	or	r2,r3,r2
   112f4:	1007883a 	mov	r3,r2
   112f8:	e0bffc17 	ldw	r2,-16(fp)
   112fc:	10c0020d 	sth	r3,8(r2)
             break;
   11300:	00000906 	br	11328 <OSFlagPost+0x120>
   11304:	e0bff317 	ldw	r2,-52(fp)
   11308:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1130c:	e0bff417 	ldw	r2,-48(fp)
   11310:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   11314:	e0bfff17 	ldw	r2,-4(fp)
   11318:	00c01c44 	movi	r3,113
   1131c:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   11320:	0005883a 	mov	r2,zero
   11324:	00009806 	br	11588 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   11328:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   1132c:	e0bffc17 	ldw	r2,-16(fp)
   11330:	10800117 	ldw	r2,4(r2)
   11334:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   11338:	00007706 	br	11518 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
   1133c:	e0bff117 	ldw	r2,-60(fp)
   11340:	10800483 	ldbu	r2,18(r2)
   11344:	10803fcc 	andi	r2,r2,255
   11348:	10c00060 	cmpeqi	r3,r2,1
   1134c:	18004a1e 	bne	r3,zero,11478 <OSFlagPost+0x270>
   11350:	10c00088 	cmpgei	r3,r2,2
   11354:	1800021e 	bne	r3,zero,11360 <OSFlagPost+0x158>
   11358:	10002f26 	beq	r2,zero,11418 <OSFlagPost+0x210>
   1135c:	00005b06 	br	114cc <OSFlagPost+0x2c4>
   11360:	10c000a0 	cmpeqi	r3,r2,2
   11364:	1800031e 	bne	r3,zero,11374 <OSFlagPost+0x16c>
   11368:	108000e0 	cmpeqi	r2,r2,3
   1136c:	1000171e 	bne	r2,zero,113cc <OSFlagPost+0x1c4>
   11370:	00005606 	br	114cc <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   11374:	e0bffc17 	ldw	r2,-16(fp)
   11378:	10c0020b 	ldhu	r3,8(r2)
   1137c:	e0bff117 	ldw	r2,-60(fp)
   11380:	1080040b 	ldhu	r2,16(r2)
   11384:	1884703a 	and	r2,r3,r2
   11388:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   1138c:	e0bff117 	ldw	r2,-60(fp)
   11390:	1080040b 	ldhu	r2,16(r2)
   11394:	10ffffcc 	andi	r3,r2,65535
   11398:	e0bff60b 	ldhu	r2,-40(fp)
   1139c:	1880541e 	bne	r3,r2,114f0 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   113a0:	e0bff60b 	ldhu	r2,-40(fp)
   113a4:	100b883a 	mov	r5,r2
   113a8:	e13ff117 	ldw	r4,-60(fp)
   113ac:	00118a00 	call	118a0 <OS_FlagTaskRdy>
   113b0:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   113b4:	e0bff683 	ldbu	r2,-38(fp)
   113b8:	10800058 	cmpnei	r2,r2,1
   113bc:	10004c1e 	bne	r2,zero,114f0 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   113c0:	00800044 	movi	r2,1
   113c4:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   113c8:	00004906 	br	114f0 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   113cc:	e0bffc17 	ldw	r2,-16(fp)
   113d0:	10c0020b 	ldhu	r3,8(r2)
   113d4:	e0bff117 	ldw	r2,-60(fp)
   113d8:	1080040b 	ldhu	r2,16(r2)
   113dc:	1884703a 	and	r2,r3,r2
   113e0:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   113e4:	e0bff60b 	ldhu	r2,-40(fp)
   113e8:	10004326 	beq	r2,zero,114f8 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   113ec:	e0bff60b 	ldhu	r2,-40(fp)
   113f0:	100b883a 	mov	r5,r2
   113f4:	e13ff117 	ldw	r4,-60(fp)
   113f8:	00118a00 	call	118a0 <OS_FlagTaskRdy>
   113fc:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   11400:	e0bff683 	ldbu	r2,-38(fp)
   11404:	10800058 	cmpnei	r2,r2,1
   11408:	10003b1e 	bne	r2,zero,114f8 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   1140c:	00800044 	movi	r2,1
   11410:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   11414:	00003806 	br	114f8 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   11418:	e0bffc17 	ldw	r2,-16(fp)
   1141c:	1080020b 	ldhu	r2,8(r2)
   11420:	0084303a 	nor	r2,zero,r2
   11424:	1007883a 	mov	r3,r2
   11428:	e0bff117 	ldw	r2,-60(fp)
   1142c:	1080040b 	ldhu	r2,16(r2)
   11430:	1884703a 	and	r2,r3,r2
   11434:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   11438:	e0bff117 	ldw	r2,-60(fp)
   1143c:	1080040b 	ldhu	r2,16(r2)
   11440:	10ffffcc 	andi	r3,r2,65535
   11444:	e0bff60b 	ldhu	r2,-40(fp)
   11448:	18802d1e 	bne	r3,r2,11500 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   1144c:	e0bff60b 	ldhu	r2,-40(fp)
   11450:	100b883a 	mov	r5,r2
   11454:	e13ff117 	ldw	r4,-60(fp)
   11458:	00118a00 	call	118a0 <OS_FlagTaskRdy>
   1145c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   11460:	e0bff683 	ldbu	r2,-38(fp)
   11464:	10800058 	cmpnei	r2,r2,1
   11468:	1000251e 	bne	r2,zero,11500 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   1146c:	00800044 	movi	r2,1
   11470:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   11474:	00002206 	br	11500 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   11478:	e0bffc17 	ldw	r2,-16(fp)
   1147c:	1080020b 	ldhu	r2,8(r2)
   11480:	0084303a 	nor	r2,zero,r2
   11484:	1007883a 	mov	r3,r2
   11488:	e0bff117 	ldw	r2,-60(fp)
   1148c:	1080040b 	ldhu	r2,16(r2)
   11490:	1884703a 	and	r2,r3,r2
   11494:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   11498:	e0bff60b 	ldhu	r2,-40(fp)
   1149c:	10001a26 	beq	r2,zero,11508 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   114a0:	e0bff60b 	ldhu	r2,-40(fp)
   114a4:	100b883a 	mov	r5,r2
   114a8:	e13ff117 	ldw	r4,-60(fp)
   114ac:	00118a00 	call	118a0 <OS_FlagTaskRdy>
   114b0:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   114b4:	e0bff683 	ldbu	r2,-38(fp)
   114b8:	10800058 	cmpnei	r2,r2,1
   114bc:	1000121e 	bne	r2,zero,11508 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   114c0:	00800044 	movi	r2,1
   114c4:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   114c8:	00000f06 	br	11508 <OSFlagPost+0x300>
   114cc:	e0bff317 	ldw	r2,-52(fp)
   114d0:	e0bff515 	stw	r2,-44(fp)
   114d4:	e0bff517 	ldw	r2,-44(fp)
   114d8:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   114dc:	e0bfff17 	ldw	r2,-4(fp)
   114e0:	00c01bc4 	movi	r3,111
   114e4:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   114e8:	0005883a 	mov	r2,zero
   114ec:	00002606 	br	11588 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   114f0:	0001883a 	nop
   114f4:	00000506 	br	1150c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   114f8:	0001883a 	nop
   114fc:	00000306 	br	1150c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   11500:	0001883a 	nop
   11504:	00000106 	br	1150c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   11508:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   1150c:	e0bff117 	ldw	r2,-60(fp)
   11510:	10800017 	ldw	r2,0(r2)
   11514:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   11518:	e0bff117 	ldw	r2,-60(fp)
   1151c:	103f871e 	bne	r2,zero,1133c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701133c>
   11520:	e0bff317 	ldw	r2,-52(fp)
   11524:	e0bff715 	stw	r2,-36(fp)
   11528:	e0bff717 	ldw	r2,-36(fp)
   1152c:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   11530:	e0bff203 	ldbu	r2,-56(fp)
   11534:	10800058 	cmpnei	r2,r2,1
   11538:	1000011e 	bne	r2,zero,11540 <OSFlagPost+0x338>
        OS_Sched();
   1153c:	000fab00 	call	fab0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11540:	0005303a 	rdctl	r2,status
   11544:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11548:	e0fffa17 	ldw	r3,-24(fp)
   1154c:	00bfff84 	movi	r2,-2
   11550:	1884703a 	and	r2,r3,r2
   11554:	1001703a 	wrctl	status,r2
  
  return context;
   11558:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   1155c:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   11560:	e0bffc17 	ldw	r2,-16(fp)
   11564:	1080020b 	ldhu	r2,8(r2)
   11568:	e0bff90d 	sth	r2,-28(fp)
   1156c:	e0bff317 	ldw	r2,-52(fp)
   11570:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11574:	e0bff817 	ldw	r2,-32(fp)
   11578:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   1157c:	e0bfff17 	ldw	r2,-4(fp)
   11580:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   11584:	e0bff90b 	ldhu	r2,-28(fp)
}
   11588:	e037883a 	mov	sp,fp
   1158c:	dfc00117 	ldw	ra,4(sp)
   11590:	df000017 	ldw	fp,0(sp)
   11594:	dec00204 	addi	sp,sp,8
   11598:	f800283a 	ret

0001159c <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   1159c:	defff904 	addi	sp,sp,-28
   115a0:	df000615 	stw	fp,24(sp)
   115a4:	df000604 	addi	fp,sp,24
   115a8:	e13ffe15 	stw	r4,-8(fp)
   115ac:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   115b0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   115b4:	e0bfff17 	ldw	r2,-4(fp)
   115b8:	1000021e 	bne	r2,zero,115c4 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   115bc:	0005883a 	mov	r2,zero
   115c0:	00002306 	br	11650 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   115c4:	e0bffe17 	ldw	r2,-8(fp)
   115c8:	1000051e 	bne	r2,zero,115e0 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   115cc:	e0bfff17 	ldw	r2,-4(fp)
   115d0:	00c01b84 	movi	r3,110
   115d4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   115d8:	0005883a 	mov	r2,zero
   115dc:	00001c06 	br	11650 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   115e0:	e0bffe17 	ldw	r2,-8(fp)
   115e4:	10800003 	ldbu	r2,0(r2)
   115e8:	10803fcc 	andi	r2,r2,255
   115ec:	10800160 	cmpeqi	r2,r2,5
   115f0:	1000051e 	bne	r2,zero,11608 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   115f4:	e0bfff17 	ldw	r2,-4(fp)
   115f8:	00c00044 	movi	r3,1
   115fc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11600:	0005883a 	mov	r2,zero
   11604:	00001206 	br	11650 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11608:	0005303a 	rdctl	r2,status
   1160c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11610:	e0fffc17 	ldw	r3,-16(fp)
   11614:	00bfff84 	movi	r2,-2
   11618:	1884703a 	and	r2,r3,r2
   1161c:	1001703a 	wrctl	status,r2
  
  return context;
   11620:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   11624:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   11628:	e0bffe17 	ldw	r2,-8(fp)
   1162c:	1080020b 	ldhu	r2,8(r2)
   11630:	e0bffb0d 	sth	r2,-20(fp)
   11634:	e0bffa17 	ldw	r2,-24(fp)
   11638:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1163c:	e0bffd17 	ldw	r2,-12(fp)
   11640:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   11644:	e0bfff17 	ldw	r2,-4(fp)
   11648:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   1164c:	e0bffb0b 	ldhu	r2,-20(fp)
}
   11650:	e037883a 	mov	sp,fp
   11654:	df000017 	ldw	fp,0(sp)
   11658:	dec00104 	addi	sp,sp,4
   1165c:	f800283a 	ret

00011660 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   11660:	defff804 	addi	sp,sp,-32
   11664:	df000715 	stw	fp,28(sp)
   11668:	df000704 	addi	fp,sp,28
   1166c:	e13ffb15 	stw	r4,-20(fp)
   11670:	e17ffc15 	stw	r5,-16(fp)
   11674:	3009883a 	mov	r4,r6
   11678:	3807883a 	mov	r3,r7
   1167c:	e0800117 	ldw	r2,4(fp)
   11680:	e13ffd0d 	sth	r4,-12(fp)
   11684:	e0fffe05 	stb	r3,-8(fp)
   11688:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   1168c:	d0a7f817 	ldw	r2,-24608(gp)
   11690:	d0e7f817 	ldw	r3,-24608(gp)
   11694:	18c00c03 	ldbu	r3,48(r3)
   11698:	18c00814 	ori	r3,r3,32
   1169c:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   116a0:	d0a7f817 	ldw	r2,-24608(gp)
   116a4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   116a8:	d0a7f817 	ldw	r2,-24608(gp)
   116ac:	e0ffff0b 	ldhu	r3,-4(fp)
   116b0:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   116b4:	d0a7f817 	ldw	r2,-24608(gp)
   116b8:	e0fffc17 	ldw	r3,-16(fp)
   116bc:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   116c0:	e0bffc17 	ldw	r2,-16(fp)
   116c4:	e0fffd0b 	ldhu	r3,-12(fp)
   116c8:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   116cc:	e0bffc17 	ldw	r2,-16(fp)
   116d0:	e0fffe03 	ldbu	r3,-8(fp)
   116d4:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   116d8:	d0e7f817 	ldw	r3,-24608(gp)
   116dc:	e0bffc17 	ldw	r2,-16(fp)
   116e0:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   116e4:	e0bffb17 	ldw	r2,-20(fp)
   116e8:	10c00117 	ldw	r3,4(r2)
   116ec:	e0bffc17 	ldw	r2,-16(fp)
   116f0:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   116f4:	e0bffc17 	ldw	r2,-16(fp)
   116f8:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   116fc:	e0bffc17 	ldw	r2,-16(fp)
   11700:	e0fffb17 	ldw	r3,-20(fp)
   11704:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   11708:	e0bffb17 	ldw	r2,-20(fp)
   1170c:	10800117 	ldw	r2,4(r2)
   11710:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   11714:	e0bff917 	ldw	r2,-28(fp)
   11718:	10000326 	beq	r2,zero,11728 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   1171c:	e0bff917 	ldw	r2,-28(fp)
   11720:	e0fffc17 	ldw	r3,-16(fp)
   11724:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   11728:	e0bffb17 	ldw	r2,-20(fp)
   1172c:	e0fffc17 	ldw	r3,-16(fp)
   11730:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   11734:	d0a7f817 	ldw	r2,-24608(gp)
   11738:	10800d03 	ldbu	r2,52(r2)
   1173c:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   11740:	e0fffa03 	ldbu	r3,-24(fp)
   11744:	e13ffa03 	ldbu	r4,-24(fp)
   11748:	d0a7f544 	addi	r2,gp,-24619
   1174c:	2085883a 	add	r2,r4,r2
   11750:	10800003 	ldbu	r2,0(r2)
   11754:	1009883a 	mov	r4,r2
   11758:	d0a7f817 	ldw	r2,-24608(gp)
   1175c:	10800d43 	ldbu	r2,53(r2)
   11760:	0084303a 	nor	r2,zero,r2
   11764:	2084703a 	and	r2,r4,r2
   11768:	1009883a 	mov	r4,r2
   1176c:	d0a7f544 	addi	r2,gp,-24619
   11770:	1885883a 	add	r2,r3,r2
   11774:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   11778:	e0fffa03 	ldbu	r3,-24(fp)
   1177c:	d0a7f544 	addi	r2,gp,-24619
   11780:	1885883a 	add	r2,r3,r2
   11784:	10800003 	ldbu	r2,0(r2)
   11788:	10803fcc 	andi	r2,r2,255
   1178c:	1000071e 	bne	r2,zero,117ac <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   11790:	d0a7f817 	ldw	r2,-24608(gp)
   11794:	10800d83 	ldbu	r2,54(r2)
   11798:	0084303a 	nor	r2,zero,r2
   1179c:	1007883a 	mov	r3,r2
   117a0:	d0a7f503 	ldbu	r2,-24620(gp)
   117a4:	1884703a 	and	r2,r3,r2
   117a8:	d0a7f505 	stb	r2,-24620(gp)
    }
}
   117ac:	0001883a 	nop
   117b0:	e037883a 	mov	sp,fp
   117b4:	df000017 	ldw	fp,0(sp)
   117b8:	dec00104 	addi	sp,sp,4
   117bc:	f800283a 	ret

000117c0 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   117c0:	defffb04 	addi	sp,sp,-20
   117c4:	dfc00415 	stw	ra,16(sp)
   117c8:	df000315 	stw	fp,12(sp)
   117cc:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   117d0:	0140dc04 	movi	r5,880
   117d4:	010000b4 	movhi	r4,2
   117d8:	21105c04 	addi	r4,r4,16752
   117dc:	000f9f40 	call	f9f4 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   117e0:	008000b4 	movhi	r2,2
   117e4:	10905c04 	addi	r2,r2,16752
   117e8:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   117ec:	008000b4 	movhi	r2,2
   117f0:	10906704 	addi	r2,r2,16796
   117f4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   117f8:	e03ffd0d 	sth	zero,-12(fp)
   117fc:	00001306 	br	1184c <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   11800:	e0bffe17 	ldw	r2,-8(fp)
   11804:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   11808:	e0bffe17 	ldw	r2,-8(fp)
   1180c:	e0ffff17 	ldw	r3,-4(fp)
   11810:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   11814:	e0bffe17 	ldw	r2,-8(fp)
   11818:	00c00fc4 	movi	r3,63
   1181c:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   11820:	e0bffe17 	ldw	r2,-8(fp)
   11824:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   11828:	e0bffe17 	ldw	r2,-8(fp)
   1182c:	10800b04 	addi	r2,r2,44
   11830:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   11834:	e0bfff17 	ldw	r2,-4(fp)
   11838:	10800b04 	addi	r2,r2,44
   1183c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   11840:	e0bffd0b 	ldhu	r2,-12(fp)
   11844:	10800044 	addi	r2,r2,1
   11848:	e0bffd0d 	sth	r2,-12(fp)
   1184c:	e0bffd0b 	ldhu	r2,-12(fp)
   11850:	108004f0 	cmpltui	r2,r2,19
   11854:	103fea1e 	bne	r2,zero,11800 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011800>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   11858:	e0bffe17 	ldw	r2,-8(fp)
   1185c:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   11860:	e0bffe17 	ldw	r2,-8(fp)
   11864:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   11868:	e0bffe17 	ldw	r2,-8(fp)
   1186c:	00c00fc4 	movi	r3,63
   11870:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   11874:	e0bffe17 	ldw	r2,-8(fp)
   11878:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   1187c:	008000b4 	movhi	r2,2
   11880:	10905c04 	addi	r2,r2,16752
   11884:	d0a7fa15 	stw	r2,-24600(gp)
#endif
}
   11888:	0001883a 	nop
   1188c:	e037883a 	mov	sp,fp
   11890:	dfc00117 	ldw	ra,4(sp)
   11894:	df000017 	ldw	fp,0(sp)
   11898:	dec00204 	addi	sp,sp,8
   1189c:	f800283a 	ret

000118a0 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   118a0:	defffa04 	addi	sp,sp,-24
   118a4:	dfc00515 	stw	ra,20(sp)
   118a8:	df000415 	stw	fp,16(sp)
   118ac:	df000404 	addi	fp,sp,16
   118b0:	e13ffe15 	stw	r4,-8(fp)
   118b4:	2805883a 	mov	r2,r5
   118b8:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   118bc:	e0bffe17 	ldw	r2,-8(fp)
   118c0:	10800217 	ldw	r2,8(r2)
   118c4:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   118c8:	e0bffd17 	ldw	r2,-12(fp)
   118cc:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   118d0:	e0bffd17 	ldw	r2,-12(fp)
   118d4:	e0ffff0b 	ldhu	r3,-4(fp)
   118d8:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   118dc:	e0bffd17 	ldw	r2,-12(fp)
   118e0:	10c00c03 	ldbu	r3,48(r2)
   118e4:	00bff7c4 	movi	r2,-33
   118e8:	1884703a 	and	r2,r3,r2
   118ec:	1007883a 	mov	r3,r2
   118f0:	e0bffd17 	ldw	r2,-12(fp)
   118f4:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   118f8:	e0bffd17 	ldw	r2,-12(fp)
   118fc:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   11900:	e0bffd17 	ldw	r2,-12(fp)
   11904:	10800c03 	ldbu	r2,48(r2)
   11908:	10803fcc 	andi	r2,r2,255
   1190c:	1000181e 	bne	r2,zero,11970 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   11910:	e0bffd17 	ldw	r2,-12(fp)
   11914:	10c00d83 	ldbu	r3,54(r2)
   11918:	d0a7f503 	ldbu	r2,-24620(gp)
   1191c:	1884b03a 	or	r2,r3,r2
   11920:	d0a7f505 	stb	r2,-24620(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   11924:	e0bffd17 	ldw	r2,-12(fp)
   11928:	10800d03 	ldbu	r2,52(r2)
   1192c:	10c03fcc 	andi	r3,r2,255
   11930:	e0bffd17 	ldw	r2,-12(fp)
   11934:	10800d03 	ldbu	r2,52(r2)
   11938:	11003fcc 	andi	r4,r2,255
   1193c:	d0a7f544 	addi	r2,gp,-24619
   11940:	2085883a 	add	r2,r4,r2
   11944:	11000003 	ldbu	r4,0(r2)
   11948:	e0bffd17 	ldw	r2,-12(fp)
   1194c:	10800d43 	ldbu	r2,53(r2)
   11950:	2084b03a 	or	r2,r4,r2
   11954:	1009883a 	mov	r4,r2
   11958:	d0a7f544 	addi	r2,gp,-24619
   1195c:	1885883a 	add	r2,r3,r2
   11960:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   11964:	00800044 	movi	r2,1
   11968:	e0bffc05 	stb	r2,-16(fp)
   1196c:	00000106 	br	11974 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
   11970:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   11974:	e13ffe17 	ldw	r4,-8(fp)
   11978:	00119940 	call	11994 <OS_FlagUnlink>
    return (sched);
   1197c:	e0bffc03 	ldbu	r2,-16(fp)
}
   11980:	e037883a 	mov	sp,fp
   11984:	dfc00117 	ldw	ra,4(sp)
   11988:	df000017 	ldw	fp,0(sp)
   1198c:	dec00204 	addi	sp,sp,8
   11990:	f800283a 	ret

00011994 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   11994:	defffa04 	addi	sp,sp,-24
   11998:	df000515 	stw	fp,20(sp)
   1199c:	df000504 	addi	fp,sp,20
   119a0:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   119a4:	e0bfff17 	ldw	r2,-4(fp)
   119a8:	10800117 	ldw	r2,4(r2)
   119ac:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   119b0:	e0bfff17 	ldw	r2,-4(fp)
   119b4:	10800017 	ldw	r2,0(r2)
   119b8:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   119bc:	e0bffb17 	ldw	r2,-20(fp)
   119c0:	10000b1e 	bne	r2,zero,119f0 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   119c4:	e0bfff17 	ldw	r2,-4(fp)
   119c8:	10800317 	ldw	r2,12(r2)
   119cc:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   119d0:	e0bffd17 	ldw	r2,-12(fp)
   119d4:	e0fffc17 	ldw	r3,-16(fp)
   119d8:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   119dc:	e0bffc17 	ldw	r2,-16(fp)
   119e0:	10000b26 	beq	r2,zero,11a10 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   119e4:	e0bffc17 	ldw	r2,-16(fp)
   119e8:	10000115 	stw	zero,4(r2)
   119ec:	00000806 	br	11a10 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   119f0:	e0bffb17 	ldw	r2,-20(fp)
   119f4:	e0fffc17 	ldw	r3,-16(fp)
   119f8:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   119fc:	e0bffc17 	ldw	r2,-16(fp)
   11a00:	10000326 	beq	r2,zero,11a10 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   11a04:	e0bffc17 	ldw	r2,-16(fp)
   11a08:	e0fffb17 	ldw	r3,-20(fp)
   11a0c:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   11a10:	e0bfff17 	ldw	r2,-4(fp)
   11a14:	10800217 	ldw	r2,8(r2)
   11a18:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   11a1c:	e0bffe17 	ldw	r2,-8(fp)
   11a20:	10000a15 	stw	zero,40(r2)
#endif
}
   11a24:	0001883a 	nop
   11a28:	e037883a 	mov	sp,fp
   11a2c:	df000017 	ldw	fp,0(sp)
   11a30:	dec00104 	addi	sp,sp,4
   11a34:	f800283a 	ret

00011a38 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   11a38:	defff404 	addi	sp,sp,-48
   11a3c:	df000b15 	stw	fp,44(sp)
   11a40:	df000b04 	addi	fp,sp,44
   11a44:	e13ffc15 	stw	r4,-16(fp)
   11a48:	e17ffd15 	stw	r5,-12(fp)
   11a4c:	e1bffe15 	stw	r6,-8(fp)
   11a50:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   11a54:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   11a58:	e0bfff17 	ldw	r2,-4(fp)
   11a5c:	1000021e 	bne	r2,zero,11a68 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   11a60:	0005883a 	mov	r2,zero
   11a64:	00006506 	br	11bfc <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   11a68:	e0bffc17 	ldw	r2,-16(fp)
   11a6c:	1000051e 	bne	r2,zero,11a84 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   11a70:	e0bfff17 	ldw	r2,-4(fp)
   11a74:	00c01884 	movi	r3,98
   11a78:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11a7c:	0005883a 	mov	r2,zero
   11a80:	00005e06 	br	11bfc <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   11a84:	e0bffc17 	ldw	r2,-16(fp)
   11a88:	108000cc 	andi	r2,r2,3
   11a8c:	10000526 	beq	r2,zero,11aa4 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   11a90:	e0bfff17 	ldw	r2,-4(fp)
   11a94:	00c01884 	movi	r3,98
   11a98:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11a9c:	0005883a 	mov	r2,zero
   11aa0:	00005606 	br	11bfc <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   11aa4:	e0bffd17 	ldw	r2,-12(fp)
   11aa8:	108000a8 	cmpgeui	r2,r2,2
   11aac:	1000051e 	bne	r2,zero,11ac4 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   11ab0:	e0bfff17 	ldw	r2,-4(fp)
   11ab4:	00c016c4 	movi	r3,91
   11ab8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11abc:	0005883a 	mov	r2,zero
   11ac0:	00004e06 	br	11bfc <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   11ac4:	e0bffe17 	ldw	r2,-8(fp)
   11ac8:	10800128 	cmpgeui	r2,r2,4
   11acc:	1000051e 	bne	r2,zero,11ae4 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   11ad0:	e0bfff17 	ldw	r2,-4(fp)
   11ad4:	00c01704 	movi	r3,92
   11ad8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11adc:	0005883a 	mov	r2,zero
   11ae0:	00004606 	br	11bfc <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11ae4:	0005303a 	rdctl	r2,status
   11ae8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11aec:	e0fffb17 	ldw	r3,-20(fp)
   11af0:	00bfff84 	movi	r2,-2
   11af4:	1884703a 	and	r2,r3,r2
   11af8:	1001703a 	wrctl	status,r2
  
  return context;
   11afc:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   11b00:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   11b04:	d0a7f217 	ldw	r2,-24632(gp)
   11b08:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   11b0c:	d0a7f217 	ldw	r2,-24632(gp)
   11b10:	10000326 	beq	r2,zero,11b20 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   11b14:	d0a7f217 	ldw	r2,-24632(gp)
   11b18:	10800117 	ldw	r2,4(r2)
   11b1c:	d0a7f215 	stw	r2,-24632(gp)
   11b20:	e0bff817 	ldw	r2,-32(fp)
   11b24:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11b28:	e0bff917 	ldw	r2,-28(fp)
   11b2c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   11b30:	e0bffa17 	ldw	r2,-24(fp)
   11b34:	1000051e 	bne	r2,zero,11b4c <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
   11b38:	e0bfff17 	ldw	r2,-4(fp)
   11b3c:	00c01684 	movi	r3,90
   11b40:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11b44:	0005883a 	mov	r2,zero
   11b48:	00002c06 	br	11bfc <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   11b4c:	e0bffc17 	ldw	r2,-16(fp)
   11b50:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   11b54:	e0fffc17 	ldw	r3,-16(fp)
   11b58:	e0bffe17 	ldw	r2,-8(fp)
   11b5c:	1885883a 	add	r2,r3,r2
   11b60:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   11b64:	e03ff715 	stw	zero,-36(fp)
   11b68:	00000c06 	br	11b9c <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   11b6c:	e0bff617 	ldw	r2,-40(fp)
   11b70:	e0fff517 	ldw	r3,-44(fp)
   11b74:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   11b78:	e0bff517 	ldw	r2,-44(fp)
   11b7c:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   11b80:	e0fff517 	ldw	r3,-44(fp)
   11b84:	e0bffe17 	ldw	r2,-8(fp)
   11b88:	1885883a 	add	r2,r3,r2
   11b8c:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   11b90:	e0bff717 	ldw	r2,-36(fp)
   11b94:	10800044 	addi	r2,r2,1
   11b98:	e0bff715 	stw	r2,-36(fp)
   11b9c:	e0bffd17 	ldw	r2,-12(fp)
   11ba0:	10bfffc4 	addi	r2,r2,-1
   11ba4:	e0fff717 	ldw	r3,-36(fp)
   11ba8:	18bff036 	bltu	r3,r2,11b6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011b6c>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   11bac:	e0bff617 	ldw	r2,-40(fp)
   11bb0:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   11bb4:	e0bffa17 	ldw	r2,-24(fp)
   11bb8:	e0fffc17 	ldw	r3,-16(fp)
   11bbc:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   11bc0:	e0bffa17 	ldw	r2,-24(fp)
   11bc4:	e0fffc17 	ldw	r3,-16(fp)
   11bc8:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   11bcc:	e0bffa17 	ldw	r2,-24(fp)
   11bd0:	e0fffd17 	ldw	r3,-12(fp)
   11bd4:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   11bd8:	e0bffa17 	ldw	r2,-24(fp)
   11bdc:	e0fffd17 	ldw	r3,-12(fp)
   11be0:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   11be4:	e0bffa17 	ldw	r2,-24(fp)
   11be8:	e0fffe17 	ldw	r3,-8(fp)
   11bec:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   11bf0:	e0bfff17 	ldw	r2,-4(fp)
   11bf4:	10000005 	stb	zero,0(r2)
    return (pmem);
   11bf8:	e0bffa17 	ldw	r2,-24(fp)
}
   11bfc:	e037883a 	mov	sp,fp
   11c00:	df000017 	ldw	fp,0(sp)
   11c04:	dec00104 	addi	sp,sp,4
   11c08:	f800283a 	ret

00011c0c <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   11c0c:	defff804 	addi	sp,sp,-32
   11c10:	df000715 	stw	fp,28(sp)
   11c14:	df000704 	addi	fp,sp,28
   11c18:	e13ffe15 	stw	r4,-8(fp)
   11c1c:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   11c20:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   11c24:	e0bfff17 	ldw	r2,-4(fp)
   11c28:	1000021e 	bne	r2,zero,11c34 <OSMemGet+0x28>
        return ((void *)0);
   11c2c:	0005883a 	mov	r2,zero
   11c30:	00002e06 	br	11cec <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   11c34:	e0bffe17 	ldw	r2,-8(fp)
   11c38:	1000051e 	bne	r2,zero,11c50 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   11c3c:	e0bfff17 	ldw	r2,-4(fp)
   11c40:	00c01804 	movi	r3,96
   11c44:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   11c48:	0005883a 	mov	r2,zero
   11c4c:	00002706 	br	11cec <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11c50:	0005303a 	rdctl	r2,status
   11c54:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11c58:	e0fffd17 	ldw	r3,-12(fp)
   11c5c:	00bfff84 	movi	r2,-2
   11c60:	1884703a 	and	r2,r3,r2
   11c64:	1001703a 	wrctl	status,r2
  
  return context;
   11c68:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   11c6c:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   11c70:	e0bffe17 	ldw	r2,-8(fp)
   11c74:	10800417 	ldw	r2,16(r2)
   11c78:	10001426 	beq	r2,zero,11ccc <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   11c7c:	e0bffe17 	ldw	r2,-8(fp)
   11c80:	10800117 	ldw	r2,4(r2)
   11c84:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   11c88:	e0bffb17 	ldw	r2,-20(fp)
   11c8c:	10c00017 	ldw	r3,0(r2)
   11c90:	e0bffe17 	ldw	r2,-8(fp)
   11c94:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   11c98:	e0bffe17 	ldw	r2,-8(fp)
   11c9c:	10800417 	ldw	r2,16(r2)
   11ca0:	10ffffc4 	addi	r3,r2,-1
   11ca4:	e0bffe17 	ldw	r2,-8(fp)
   11ca8:	10c00415 	stw	r3,16(r2)
   11cac:	e0bff917 	ldw	r2,-28(fp)
   11cb0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11cb4:	e0bffa17 	ldw	r2,-24(fp)
   11cb8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   11cbc:	e0bfff17 	ldw	r2,-4(fp)
   11cc0:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   11cc4:	e0bffb17 	ldw	r2,-20(fp)
   11cc8:	00000806 	br	11cec <OSMemGet+0xe0>
   11ccc:	e0bff917 	ldw	r2,-28(fp)
   11cd0:	e0bffc15 	stw	r2,-16(fp)
   11cd4:	e0bffc17 	ldw	r2,-16(fp)
   11cd8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   11cdc:	e0bfff17 	ldw	r2,-4(fp)
   11ce0:	00c01744 	movi	r3,93
   11ce4:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   11ce8:	0005883a 	mov	r2,zero
}
   11cec:	e037883a 	mov	sp,fp
   11cf0:	df000017 	ldw	fp,0(sp)
   11cf4:	dec00104 	addi	sp,sp,4
   11cf8:	f800283a 	ret

00011cfc <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   11cfc:	defff704 	addi	sp,sp,-36
   11d00:	dfc00815 	stw	ra,32(sp)
   11d04:	df000715 	stw	fp,28(sp)
   11d08:	df000704 	addi	fp,sp,28
   11d0c:	e13ffd15 	stw	r4,-12(fp)
   11d10:	e17ffe15 	stw	r5,-8(fp)
   11d14:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11d18:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   11d1c:	e0bfff17 	ldw	r2,-4(fp)
   11d20:	1000021e 	bne	r2,zero,11d2c <OSMemNameGet+0x30>
        return (0);
   11d24:	0005883a 	mov	r2,zero
   11d28:	00002b06 	br	11dd8 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   11d2c:	e0bffd17 	ldw	r2,-12(fp)
   11d30:	1000051e 	bne	r2,zero,11d48 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   11d34:	e0bfff17 	ldw	r2,-4(fp)
   11d38:	00c01804 	movi	r3,96
   11d3c:	10c00005 	stb	r3,0(r2)
        return (0);
   11d40:	0005883a 	mov	r2,zero
   11d44:	00002406 	br	11dd8 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   11d48:	e0bffe17 	ldw	r2,-8(fp)
   11d4c:	1000051e 	bne	r2,zero,11d64 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   11d50:	e0bfff17 	ldw	r2,-4(fp)
   11d54:	00c00304 	movi	r3,12
   11d58:	10c00005 	stb	r3,0(r2)
        return (0);
   11d5c:	0005883a 	mov	r2,zero
   11d60:	00001d06 	br	11dd8 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   11d64:	d0a7f703 	ldbu	r2,-24612(gp)
   11d68:	10803fcc 	andi	r2,r2,255
   11d6c:	10000526 	beq	r2,zero,11d84 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   11d70:	e0bfff17 	ldw	r2,-4(fp)
   11d74:	00c00444 	movi	r3,17
   11d78:	10c00005 	stb	r3,0(r2)
        return (0);
   11d7c:	0005883a 	mov	r2,zero
   11d80:	00001506 	br	11dd8 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11d84:	0005303a 	rdctl	r2,status
   11d88:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11d8c:	e0fffb17 	ldw	r3,-20(fp)
   11d90:	00bfff84 	movi	r2,-2
   11d94:	1884703a 	and	r2,r3,r2
   11d98:	1001703a 	wrctl	status,r2
  
  return context;
   11d9c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   11da0:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   11da4:	e0bffd17 	ldw	r2,-12(fp)
   11da8:	10800504 	addi	r2,r2,20
   11dac:	100b883a 	mov	r5,r2
   11db0:	e13ffe17 	ldw	r4,-8(fp)
   11db4:	000fbf40 	call	fbf4 <OS_StrCopy>
   11db8:	e0bffa05 	stb	r2,-24(fp)
   11dbc:	e0bff917 	ldw	r2,-28(fp)
   11dc0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11dc4:	e0bffc17 	ldw	r2,-16(fp)
   11dc8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   11dcc:	e0bfff17 	ldw	r2,-4(fp)
   11dd0:	10000005 	stb	zero,0(r2)
    return (len);
   11dd4:	e0bffa03 	ldbu	r2,-24(fp)
}
   11dd8:	e037883a 	mov	sp,fp
   11ddc:	dfc00117 	ldw	ra,4(sp)
   11de0:	df000017 	ldw	fp,0(sp)
   11de4:	dec00204 	addi	sp,sp,8
   11de8:	f800283a 	ret

00011dec <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   11dec:	defff604 	addi	sp,sp,-40
   11df0:	dfc00915 	stw	ra,36(sp)
   11df4:	df000815 	stw	fp,32(sp)
   11df8:	df000804 	addi	fp,sp,32
   11dfc:	e13ffd15 	stw	r4,-12(fp)
   11e00:	e17ffe15 	stw	r5,-8(fp)
   11e04:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11e08:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   11e0c:	e0bfff17 	ldw	r2,-4(fp)
   11e10:	10003526 	beq	r2,zero,11ee8 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   11e14:	e0bffd17 	ldw	r2,-12(fp)
   11e18:	1000041e 	bne	r2,zero,11e2c <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   11e1c:	e0bfff17 	ldw	r2,-4(fp)
   11e20:	00c01804 	movi	r3,96
   11e24:	10c00005 	stb	r3,0(r2)
        return;
   11e28:	00003006 	br	11eec <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   11e2c:	e0bffe17 	ldw	r2,-8(fp)
   11e30:	1000041e 	bne	r2,zero,11e44 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   11e34:	e0bfff17 	ldw	r2,-4(fp)
   11e38:	00c00304 	movi	r3,12
   11e3c:	10c00005 	stb	r3,0(r2)
        return;
   11e40:	00002a06 	br	11eec <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   11e44:	d0a7f703 	ldbu	r2,-24612(gp)
   11e48:	10803fcc 	andi	r2,r2,255
   11e4c:	10000426 	beq	r2,zero,11e60 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   11e50:	e0bfff17 	ldw	r2,-4(fp)
   11e54:	00c00484 	movi	r3,18
   11e58:	10c00005 	stb	r3,0(r2)
        return;
   11e5c:	00002306 	br	11eec <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11e60:	0005303a 	rdctl	r2,status
   11e64:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11e68:	e0fffc17 	ldw	r3,-16(fp)
   11e6c:	00bfff84 	movi	r2,-2
   11e70:	1884703a 	and	r2,r3,r2
   11e74:	1001703a 	wrctl	status,r2
  
  return context;
   11e78:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   11e7c:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   11e80:	e13ffe17 	ldw	r4,-8(fp)
   11e84:	000fc680 	call	fc68 <OS_StrLen>
   11e88:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   11e8c:	e0bffa03 	ldbu	r2,-24(fp)
   11e90:	10800830 	cmpltui	r2,r2,32
   11e94:	1000081e 	bne	r2,zero,11eb8 <OSMemNameSet+0xcc>
   11e98:	e0bff817 	ldw	r2,-32(fp)
   11e9c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11ea0:	e0bff917 	ldw	r2,-28(fp)
   11ea4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   11ea8:	e0bfff17 	ldw	r2,-4(fp)
   11eac:	00c018c4 	movi	r3,99
   11eb0:	10c00005 	stb	r3,0(r2)
        return;
   11eb4:	00000d06 	br	11eec <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   11eb8:	e0bffd17 	ldw	r2,-12(fp)
   11ebc:	10800504 	addi	r2,r2,20
   11ec0:	e17ffe17 	ldw	r5,-8(fp)
   11ec4:	1009883a 	mov	r4,r2
   11ec8:	000fbf40 	call	fbf4 <OS_StrCopy>
   11ecc:	e0bff817 	ldw	r2,-32(fp)
   11ed0:	e0bffb15 	stw	r2,-20(fp)
   11ed4:	e0bffb17 	ldw	r2,-20(fp)
   11ed8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   11edc:	e0bfff17 	ldw	r2,-4(fp)
   11ee0:	10000005 	stb	zero,0(r2)
   11ee4:	00000106 	br	11eec <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   11ee8:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   11eec:	e037883a 	mov	sp,fp
   11ef0:	dfc00117 	ldw	ra,4(sp)
   11ef4:	df000017 	ldw	fp,0(sp)
   11ef8:	dec00204 	addi	sp,sp,8
   11efc:	f800283a 	ret

00011f00 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   11f00:	defff904 	addi	sp,sp,-28
   11f04:	df000615 	stw	fp,24(sp)
   11f08:	df000604 	addi	fp,sp,24
   11f0c:	e13ffe15 	stw	r4,-8(fp)
   11f10:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11f14:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   11f18:	e0bffe17 	ldw	r2,-8(fp)
   11f1c:	1000021e 	bne	r2,zero,11f28 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   11f20:	00801804 	movi	r2,96
   11f24:	00002806 	br	11fc8 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   11f28:	e0bfff17 	ldw	r2,-4(fp)
   11f2c:	1000021e 	bne	r2,zero,11f38 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   11f30:	008017c4 	movi	r2,95
   11f34:	00002406 	br	11fc8 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11f38:	0005303a 	rdctl	r2,status
   11f3c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11f40:	e0fffd17 	ldw	r3,-12(fp)
   11f44:	00bfff84 	movi	r2,-2
   11f48:	1884703a 	and	r2,r3,r2
   11f4c:	1001703a 	wrctl	status,r2
  
  return context;
   11f50:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   11f54:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   11f58:	e0bffe17 	ldw	r2,-8(fp)
   11f5c:	10c00417 	ldw	r3,16(r2)
   11f60:	e0bffe17 	ldw	r2,-8(fp)
   11f64:	10800317 	ldw	r2,12(r2)
   11f68:	18800636 	bltu	r3,r2,11f84 <OSMemPut+0x84>
   11f6c:	e0bffa17 	ldw	r2,-24(fp)
   11f70:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11f74:	e0bffb17 	ldw	r2,-20(fp)
   11f78:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   11f7c:	00801784 	movi	r2,94
   11f80:	00001106 	br	11fc8 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   11f84:	e0bffe17 	ldw	r2,-8(fp)
   11f88:	10c00117 	ldw	r3,4(r2)
   11f8c:	e0bfff17 	ldw	r2,-4(fp)
   11f90:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   11f94:	e0bffe17 	ldw	r2,-8(fp)
   11f98:	e0ffff17 	ldw	r3,-4(fp)
   11f9c:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   11fa0:	e0bffe17 	ldw	r2,-8(fp)
   11fa4:	10800417 	ldw	r2,16(r2)
   11fa8:	10c00044 	addi	r3,r2,1
   11fac:	e0bffe17 	ldw	r2,-8(fp)
   11fb0:	10c00415 	stw	r3,16(r2)
   11fb4:	e0bffa17 	ldw	r2,-24(fp)
   11fb8:	e0bffc15 	stw	r2,-16(fp)
   11fbc:	e0bffc17 	ldw	r2,-16(fp)
   11fc0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   11fc4:	0005883a 	mov	r2,zero
}
   11fc8:	e037883a 	mov	sp,fp
   11fcc:	df000017 	ldw	fp,0(sp)
   11fd0:	dec00104 	addi	sp,sp,4
   11fd4:	f800283a 	ret

00011fd8 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   11fd8:	defffa04 	addi	sp,sp,-24
   11fdc:	df000515 	stw	fp,20(sp)
   11fe0:	df000504 	addi	fp,sp,20
   11fe4:	e13ffe15 	stw	r4,-8(fp)
   11fe8:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11fec:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   11ff0:	e0bffe17 	ldw	r2,-8(fp)
   11ff4:	1000021e 	bne	r2,zero,12000 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   11ff8:	00801804 	movi	r2,96
   11ffc:	00002c06 	br	120b0 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   12000:	e0bfff17 	ldw	r2,-4(fp)
   12004:	1000021e 	bne	r2,zero,12010 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   12008:	00801844 	movi	r2,97
   1200c:	00002806 	br	120b0 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12010:	0005303a 	rdctl	r2,status
   12014:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12018:	e0fffc17 	ldw	r3,-16(fp)
   1201c:	00bfff84 	movi	r2,-2
   12020:	1884703a 	and	r2,r3,r2
   12024:	1001703a 	wrctl	status,r2
  
  return context;
   12028:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1202c:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   12030:	e0bffe17 	ldw	r2,-8(fp)
   12034:	10c00017 	ldw	r3,0(r2)
   12038:	e0bfff17 	ldw	r2,-4(fp)
   1203c:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   12040:	e0bffe17 	ldw	r2,-8(fp)
   12044:	10c00117 	ldw	r3,4(r2)
   12048:	e0bfff17 	ldw	r2,-4(fp)
   1204c:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   12050:	e0bffe17 	ldw	r2,-8(fp)
   12054:	10c00217 	ldw	r3,8(r2)
   12058:	e0bfff17 	ldw	r2,-4(fp)
   1205c:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   12060:	e0bffe17 	ldw	r2,-8(fp)
   12064:	10c00317 	ldw	r3,12(r2)
   12068:	e0bfff17 	ldw	r2,-4(fp)
   1206c:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   12070:	e0bffe17 	ldw	r2,-8(fp)
   12074:	10c00417 	ldw	r3,16(r2)
   12078:	e0bfff17 	ldw	r2,-4(fp)
   1207c:	10c00415 	stw	r3,16(r2)
   12080:	e0bffb17 	ldw	r2,-20(fp)
   12084:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12088:	e0bffd17 	ldw	r2,-12(fp)
   1208c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   12090:	e0bfff17 	ldw	r2,-4(fp)
   12094:	10c00317 	ldw	r3,12(r2)
   12098:	e0bfff17 	ldw	r2,-4(fp)
   1209c:	10800417 	ldw	r2,16(r2)
   120a0:	1887c83a 	sub	r3,r3,r2
   120a4:	e0bfff17 	ldw	r2,-4(fp)
   120a8:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   120ac:	0005883a 	mov	r2,zero
}
   120b0:	e037883a 	mov	sp,fp
   120b4:	df000017 	ldw	fp,0(sp)
   120b8:	dec00104 	addi	sp,sp,4
   120bc:	f800283a 	ret

000120c0 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   120c0:	defffc04 	addi	sp,sp,-16
   120c4:	dfc00315 	stw	ra,12(sp)
   120c8:	df000215 	stw	fp,8(sp)
   120cc:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   120d0:	01430c04 	movi	r5,3120
   120d4:	010000b4 	movhi	r4,2
   120d8:	21113804 	addi	r4,r4,17632
   120dc:	000f9f40 	call	f9f4 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   120e0:	008000b4 	movhi	r2,2
   120e4:	10913804 	addi	r2,r2,17632
   120e8:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   120ec:	e03fff0d 	sth	zero,-4(fp)
   120f0:	00001306 	br	12140 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   120f4:	e0bfff0b 	ldhu	r2,-4(fp)
   120f8:	10800044 	addi	r2,r2,1
   120fc:	10c00d24 	muli	r3,r2,52
   12100:	008000b4 	movhi	r2,2
   12104:	10913804 	addi	r2,r2,17632
   12108:	1887883a 	add	r3,r3,r2
   1210c:	e0bffe17 	ldw	r2,-8(fp)
   12110:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   12114:	e0bffe17 	ldw	r2,-8(fp)
   12118:	00c00fc4 	movi	r3,63
   1211c:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   12120:	e0bffe17 	ldw	r2,-8(fp)
   12124:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   12128:	e0bffe17 	ldw	r2,-8(fp)
   1212c:	10800d04 	addi	r2,r2,52
   12130:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   12134:	e0bfff0b 	ldhu	r2,-4(fp)
   12138:	10800044 	addi	r2,r2,1
   1213c:	e0bfff0d 	sth	r2,-4(fp)
   12140:	e0bfff0b 	ldhu	r2,-4(fp)
   12144:	10800ef0 	cmpltui	r2,r2,59
   12148:	103fea1e 	bne	r2,zero,120f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70120f4>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   1214c:	e0bffe17 	ldw	r2,-8(fp)
   12150:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   12154:	e0bffe17 	ldw	r2,-8(fp)
   12158:	00c00fc4 	movi	r3,63
   1215c:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   12160:	e0bffe17 	ldw	r2,-8(fp)
   12164:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   12168:	008000b4 	movhi	r2,2
   1216c:	10913804 	addi	r2,r2,17632
   12170:	d0a7f215 	stw	r2,-24632(gp)
#endif
}
   12174:	0001883a 	nop
   12178:	e037883a 	mov	sp,fp
   1217c:	dfc00117 	ldw	ra,4(sp)
   12180:	df000017 	ldw	fp,0(sp)
   12184:	dec00204 	addi	sp,sp,8
   12188:	f800283a 	ret

0001218c <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   1218c:	defff804 	addi	sp,sp,-32
   12190:	df000715 	stw	fp,28(sp)
   12194:	df000704 	addi	fp,sp,28
   12198:	e13ffe15 	stw	r4,-8(fp)
   1219c:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   121a0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   121a4:	e0bfff17 	ldw	r2,-4(fp)
   121a8:	1000021e 	bne	r2,zero,121b4 <OSQAccept+0x28>
        return ((void *)0);
   121ac:	0005883a 	mov	r2,zero
   121b0:	00004206 	br	122bc <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   121b4:	e0bffe17 	ldw	r2,-8(fp)
   121b8:	1000051e 	bne	r2,zero,121d0 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   121bc:	e0bfff17 	ldw	r2,-4(fp)
   121c0:	00c00104 	movi	r3,4
   121c4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   121c8:	0005883a 	mov	r2,zero
   121cc:	00003b06 	br	122bc <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   121d0:	e0bffe17 	ldw	r2,-8(fp)
   121d4:	10800003 	ldbu	r2,0(r2)
   121d8:	10803fcc 	andi	r2,r2,255
   121dc:	108000a0 	cmpeqi	r2,r2,2
   121e0:	1000051e 	bne	r2,zero,121f8 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   121e4:	e0bfff17 	ldw	r2,-4(fp)
   121e8:	00c00044 	movi	r3,1
   121ec:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   121f0:	0005883a 	mov	r2,zero
   121f4:	00003106 	br	122bc <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   121f8:	0005303a 	rdctl	r2,status
   121fc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12200:	e0fffd17 	ldw	r3,-12(fp)
   12204:	00bfff84 	movi	r2,-2
   12208:	1884703a 	and	r2,r3,r2
   1220c:	1001703a 	wrctl	status,r2
  
  return context;
   12210:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   12214:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   12218:	e0bffe17 	ldw	r2,-8(fp)
   1221c:	10800117 	ldw	r2,4(r2)
   12220:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   12224:	e0bffc17 	ldw	r2,-16(fp)
   12228:	1080058b 	ldhu	r2,22(r2)
   1222c:	10bfffcc 	andi	r2,r2,65535
   12230:	10001926 	beq	r2,zero,12298 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   12234:	e0bffc17 	ldw	r2,-16(fp)
   12238:	10800417 	ldw	r2,16(r2)
   1223c:	11000104 	addi	r4,r2,4
   12240:	e0fffc17 	ldw	r3,-16(fp)
   12244:	19000415 	stw	r4,16(r3)
   12248:	10800017 	ldw	r2,0(r2)
   1224c:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   12250:	e0bffc17 	ldw	r2,-16(fp)
   12254:	1080058b 	ldhu	r2,22(r2)
   12258:	10bfffc4 	addi	r2,r2,-1
   1225c:	1007883a 	mov	r3,r2
   12260:	e0bffc17 	ldw	r2,-16(fp)
   12264:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   12268:	e0bffc17 	ldw	r2,-16(fp)
   1226c:	10c00417 	ldw	r3,16(r2)
   12270:	e0bffc17 	ldw	r2,-16(fp)
   12274:	10800217 	ldw	r2,8(r2)
   12278:	1880041e 	bne	r3,r2,1228c <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   1227c:	e0bffc17 	ldw	r2,-16(fp)
   12280:	10c00117 	ldw	r3,4(r2)
   12284:	e0bffc17 	ldw	r2,-16(fp)
   12288:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   1228c:	e0bfff17 	ldw	r2,-4(fp)
   12290:	10000005 	stb	zero,0(r2)
   12294:	00000406 	br	122a8 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   12298:	e0bfff17 	ldw	r2,-4(fp)
   1229c:	00c007c4 	movi	r3,31
   122a0:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   122a4:	e03ff915 	stw	zero,-28(fp)
   122a8:	e0bffa17 	ldw	r2,-24(fp)
   122ac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   122b0:	e0bffb17 	ldw	r2,-20(fp)
   122b4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   122b8:	e0bff917 	ldw	r2,-28(fp)
}
   122bc:	e037883a 	mov	sp,fp
   122c0:	df000017 	ldw	fp,0(sp)
   122c4:	dec00104 	addi	sp,sp,4
   122c8:	f800283a 	ret

000122cc <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   122cc:	defff404 	addi	sp,sp,-48
   122d0:	dfc00b15 	stw	ra,44(sp)
   122d4:	df000a15 	stw	fp,40(sp)
   122d8:	df000a04 	addi	fp,sp,40
   122dc:	e13ffe15 	stw	r4,-8(fp)
   122e0:	2805883a 	mov	r2,r5
   122e4:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   122e8:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   122ec:	d0a7f703 	ldbu	r2,-24612(gp)
   122f0:	10803fcc 	andi	r2,r2,255
   122f4:	10000226 	beq	r2,zero,12300 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   122f8:	0005883a 	mov	r2,zero
   122fc:	00005906 	br	12464 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12300:	0005303a 	rdctl	r2,status
   12304:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12308:	e0fffd17 	ldw	r3,-12(fp)
   1230c:	00bfff84 	movi	r2,-2
   12310:	1884703a 	and	r2,r3,r2
   12314:	1001703a 	wrctl	status,r2
  
  return context;
   12318:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   1231c:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   12320:	d0a7f617 	ldw	r2,-24616(gp)
   12324:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   12328:	d0a7f617 	ldw	r2,-24616(gp)
   1232c:	10000326 	beq	r2,zero,1233c <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   12330:	d0a7f617 	ldw	r2,-24616(gp)
   12334:	10800117 	ldw	r2,4(r2)
   12338:	d0a7f615 	stw	r2,-24616(gp)
   1233c:	e0bff717 	ldw	r2,-36(fp)
   12340:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12344:	e0bff817 	ldw	r2,-32(fp)
   12348:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   1234c:	e0bff617 	ldw	r2,-40(fp)
   12350:	10004326 	beq	r2,zero,12460 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12354:	0005303a 	rdctl	r2,status
   12358:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1235c:	e0fff917 	ldw	r3,-28(fp)
   12360:	00bfff84 	movi	r2,-2
   12364:	1884703a 	and	r2,r3,r2
   12368:	1001703a 	wrctl	status,r2
  
  return context;
   1236c:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
   12370:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   12374:	d0a7f417 	ldw	r2,-24624(gp)
   12378:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   1237c:	e0bffb17 	ldw	r2,-20(fp)
   12380:	10002d26 	beq	r2,zero,12438 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   12384:	d0a7f417 	ldw	r2,-24624(gp)
   12388:	10800017 	ldw	r2,0(r2)
   1238c:	d0a7f415 	stw	r2,-24624(gp)
   12390:	e0bff717 	ldw	r2,-36(fp)
   12394:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12398:	e0bffa17 	ldw	r2,-24(fp)
   1239c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   123a0:	e0bffb17 	ldw	r2,-20(fp)
   123a4:	e0fffe17 	ldw	r3,-8(fp)
   123a8:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   123ac:	e0bfff0b 	ldhu	r2,-4(fp)
   123b0:	1085883a 	add	r2,r2,r2
   123b4:	1085883a 	add	r2,r2,r2
   123b8:	1007883a 	mov	r3,r2
   123bc:	e0bffe17 	ldw	r2,-8(fp)
   123c0:	10c7883a 	add	r3,r2,r3
   123c4:	e0bffb17 	ldw	r2,-20(fp)
   123c8:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   123cc:	e0bffb17 	ldw	r2,-20(fp)
   123d0:	e0fffe17 	ldw	r3,-8(fp)
   123d4:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   123d8:	e0bffb17 	ldw	r2,-20(fp)
   123dc:	e0fffe17 	ldw	r3,-8(fp)
   123e0:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   123e4:	e0bffb17 	ldw	r2,-20(fp)
   123e8:	e0ffff0b 	ldhu	r3,-4(fp)
   123ec:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   123f0:	e0bffb17 	ldw	r2,-20(fp)
   123f4:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   123f8:	e0bff617 	ldw	r2,-40(fp)
   123fc:	00c00084 	movi	r3,2
   12400:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   12404:	e0bff617 	ldw	r2,-40(fp)
   12408:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   1240c:	e0bff617 	ldw	r2,-40(fp)
   12410:	e0fffb17 	ldw	r3,-20(fp)
   12414:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   12418:	e0bff617 	ldw	r2,-40(fp)
   1241c:	00c00fc4 	movi	r3,63
   12420:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   12424:	e0bff617 	ldw	r2,-40(fp)
   12428:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   1242c:	e13ff617 	ldw	r4,-40(fp)
   12430:	000f6140 	call	f614 <OS_EventWaitListInit>
   12434:	00000a06 	br	12460 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   12438:	d0e7f617 	ldw	r3,-24616(gp)
   1243c:	e0bff617 	ldw	r2,-40(fp)
   12440:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   12444:	e0bff617 	ldw	r2,-40(fp)
   12448:	d0a7f615 	stw	r2,-24616(gp)
   1244c:	e0bff717 	ldw	r2,-36(fp)
   12450:	e0bffc15 	stw	r2,-16(fp)
   12454:	e0bffc17 	ldw	r2,-16(fp)
   12458:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   1245c:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   12460:	e0bff617 	ldw	r2,-40(fp)
}
   12464:	e037883a 	mov	sp,fp
   12468:	dfc00117 	ldw	ra,4(sp)
   1246c:	df000017 	ldw	fp,0(sp)
   12470:	dec00204 	addi	sp,sp,8
   12474:	f800283a 	ret

00012478 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   12478:	defff204 	addi	sp,sp,-56
   1247c:	dfc00d15 	stw	ra,52(sp)
   12480:	df000c15 	stw	fp,48(sp)
   12484:	df000c04 	addi	fp,sp,48
   12488:	e13ffd15 	stw	r4,-12(fp)
   1248c:	2805883a 	mov	r2,r5
   12490:	e1bfff15 	stw	r6,-4(fp)
   12494:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   12498:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1249c:	e0bfff17 	ldw	r2,-4(fp)
   124a0:	1000021e 	bne	r2,zero,124ac <OSQDel+0x34>
        return (pevent);
   124a4:	e0bffd17 	ldw	r2,-12(fp)
   124a8:	00008e06 	br	126e4 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   124ac:	e0bffd17 	ldw	r2,-12(fp)
   124b0:	1000051e 	bne	r2,zero,124c8 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   124b4:	e0bfff17 	ldw	r2,-4(fp)
   124b8:	00c00104 	movi	r3,4
   124bc:	10c00005 	stb	r3,0(r2)
        return (pevent);
   124c0:	e0bffd17 	ldw	r2,-12(fp)
   124c4:	00008706 	br	126e4 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   124c8:	e0bffd17 	ldw	r2,-12(fp)
   124cc:	10800003 	ldbu	r2,0(r2)
   124d0:	10803fcc 	andi	r2,r2,255
   124d4:	108000a0 	cmpeqi	r2,r2,2
   124d8:	1000051e 	bne	r2,zero,124f0 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   124dc:	e0bfff17 	ldw	r2,-4(fp)
   124e0:	00c00044 	movi	r3,1
   124e4:	10c00005 	stb	r3,0(r2)
        return (pevent);
   124e8:	e0bffd17 	ldw	r2,-12(fp)
   124ec:	00007d06 	br	126e4 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   124f0:	d0a7f703 	ldbu	r2,-24612(gp)
   124f4:	10803fcc 	andi	r2,r2,255
   124f8:	10000526 	beq	r2,zero,12510 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   124fc:	e0bfff17 	ldw	r2,-4(fp)
   12500:	00c003c4 	movi	r3,15
   12504:	10c00005 	stb	r3,0(r2)
        return (pevent);
   12508:	e0bffd17 	ldw	r2,-12(fp)
   1250c:	00007506 	br	126e4 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12510:	0005303a 	rdctl	r2,status
   12514:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12518:	e0fffc17 	ldw	r3,-16(fp)
   1251c:	00bfff84 	movi	r2,-2
   12520:	1884703a 	and	r2,r3,r2
   12524:	1001703a 	wrctl	status,r2
  
  return context;
   12528:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1252c:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   12530:	e0bffd17 	ldw	r2,-12(fp)
   12534:	10800283 	ldbu	r2,10(r2)
   12538:	10803fcc 	andi	r2,r2,255
   1253c:	10000326 	beq	r2,zero,1254c <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   12540:	00800044 	movi	r2,1
   12544:	e0bff405 	stb	r2,-48(fp)
   12548:	00000106 	br	12550 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   1254c:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   12550:	e0bffe03 	ldbu	r2,-8(fp)
   12554:	10000326 	beq	r2,zero,12564 <OSQDel+0xec>
   12558:	10800060 	cmpeqi	r2,r2,1
   1255c:	1000301e 	bne	r2,zero,12620 <OSQDel+0x1a8>
   12560:	00005506 	br	126b8 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   12564:	e0bff403 	ldbu	r2,-48(fp)
   12568:	10001e1e 	bne	r2,zero,125e4 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   1256c:	e0bffd17 	ldw	r2,-12(fp)
   12570:	00c00fc4 	movi	r3,63
   12574:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   12578:	e0bffd17 	ldw	r2,-12(fp)
   1257c:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   12580:	e0bffd17 	ldw	r2,-12(fp)
   12584:	10800117 	ldw	r2,4(r2)
   12588:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
   1258c:	d0e7f417 	ldw	r3,-24624(gp)
   12590:	e0bff817 	ldw	r2,-32(fp)
   12594:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   12598:	e0bff817 	ldw	r2,-32(fp)
   1259c:	d0a7f415 	stw	r2,-24624(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   125a0:	e0bffd17 	ldw	r2,-12(fp)
   125a4:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   125a8:	d0e7f617 	ldw	r3,-24616(gp)
   125ac:	e0bffd17 	ldw	r2,-12(fp)
   125b0:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   125b4:	e0bffd17 	ldw	r2,-12(fp)
   125b8:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   125bc:	e0bffd17 	ldw	r2,-12(fp)
   125c0:	d0a7f615 	stw	r2,-24616(gp)
   125c4:	e0bff617 	ldw	r2,-40(fp)
   125c8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   125cc:	e0bff717 	ldw	r2,-36(fp)
   125d0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   125d4:	e0bfff17 	ldw	r2,-4(fp)
   125d8:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   125dc:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   125e0:	00003f06 	br	126e0 <OSQDel+0x268>
   125e4:	e0bff617 	ldw	r2,-40(fp)
   125e8:	e0bff915 	stw	r2,-28(fp)
   125ec:	e0bff917 	ldw	r2,-28(fp)
   125f0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   125f4:	e0bfff17 	ldw	r2,-4(fp)
   125f8:	00c01244 	movi	r3,73
   125fc:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   12600:	e0bffd17 	ldw	r2,-12(fp)
   12604:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   12608:	00003506 	br	126e0 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   1260c:	000f883a 	mov	r7,zero
   12610:	01800104 	movi	r6,4
   12614:	000b883a 	mov	r5,zero
   12618:	e13ffd17 	ldw	r4,-12(fp)
   1261c:	000f0640 	call	f064 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   12620:	e0bffd17 	ldw	r2,-12(fp)
   12624:	10800283 	ldbu	r2,10(r2)
   12628:	10803fcc 	andi	r2,r2,255
   1262c:	103ff71e 	bne	r2,zero,1260c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701260c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   12630:	e0bffd17 	ldw	r2,-12(fp)
   12634:	00c00fc4 	movi	r3,63
   12638:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   1263c:	e0bffd17 	ldw	r2,-12(fp)
   12640:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   12644:	e0bffd17 	ldw	r2,-12(fp)
   12648:	10800117 	ldw	r2,4(r2)
   1264c:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
   12650:	d0e7f417 	ldw	r3,-24624(gp)
   12654:	e0bff817 	ldw	r2,-32(fp)
   12658:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   1265c:	e0bff817 	ldw	r2,-32(fp)
   12660:	d0a7f415 	stw	r2,-24624(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   12664:	e0bffd17 	ldw	r2,-12(fp)
   12668:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   1266c:	d0e7f617 	ldw	r3,-24616(gp)
   12670:	e0bffd17 	ldw	r2,-12(fp)
   12674:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   12678:	e0bffd17 	ldw	r2,-12(fp)
   1267c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   12680:	e0bffd17 	ldw	r2,-12(fp)
   12684:	d0a7f615 	stw	r2,-24616(gp)
   12688:	e0bff617 	ldw	r2,-40(fp)
   1268c:	e0bffa15 	stw	r2,-24(fp)
   12690:	e0bffa17 	ldw	r2,-24(fp)
   12694:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   12698:	e0bff403 	ldbu	r2,-48(fp)
   1269c:	10800058 	cmpnei	r2,r2,1
   126a0:	1000011e 	bne	r2,zero,126a8 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   126a4:	000fab00 	call	fab0 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   126a8:	e0bfff17 	ldw	r2,-4(fp)
   126ac:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   126b0:	e03ff515 	stw	zero,-44(fp)
             break;
   126b4:	00000a06 	br	126e0 <OSQDel+0x268>
   126b8:	e0bff617 	ldw	r2,-40(fp)
   126bc:	e0bffb15 	stw	r2,-20(fp)
   126c0:	e0bffb17 	ldw	r2,-20(fp)
   126c4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   126c8:	e0bfff17 	ldw	r2,-4(fp)
   126cc:	00c001c4 	movi	r3,7
   126d0:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   126d4:	e0bffd17 	ldw	r2,-12(fp)
   126d8:	e0bff515 	stw	r2,-44(fp)
             break;
   126dc:	0001883a 	nop
    }
    return (pevent_return);
   126e0:	e0bff517 	ldw	r2,-44(fp)
}
   126e4:	e037883a 	mov	sp,fp
   126e8:	dfc00117 	ldw	ra,4(sp)
   126ec:	df000017 	ldw	fp,0(sp)
   126f0:	dec00204 	addi	sp,sp,8
   126f4:	f800283a 	ret

000126f8 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   126f8:	defffa04 	addi	sp,sp,-24
   126fc:	df000515 	stw	fp,20(sp)
   12700:	df000504 	addi	fp,sp,20
   12704:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12708:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1270c:	e0bfff17 	ldw	r2,-4(fp)
   12710:	1000021e 	bne	r2,zero,1271c <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   12714:	00800104 	movi	r2,4
   12718:	00002106 	br	127a0 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   1271c:	e0bfff17 	ldw	r2,-4(fp)
   12720:	10800003 	ldbu	r2,0(r2)
   12724:	10803fcc 	andi	r2,r2,255
   12728:	108000a0 	cmpeqi	r2,r2,2
   1272c:	1000021e 	bne	r2,zero,12738 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   12730:	00800044 	movi	r2,1
   12734:	00001a06 	br	127a0 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12738:	0005303a 	rdctl	r2,status
   1273c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12740:	e0fffd17 	ldw	r3,-12(fp)
   12744:	00bfff84 	movi	r2,-2
   12748:	1884703a 	and	r2,r3,r2
   1274c:	1001703a 	wrctl	status,r2
  
  return context;
   12750:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   12754:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   12758:	e0bfff17 	ldw	r2,-4(fp)
   1275c:	10800117 	ldw	r2,4(r2)
   12760:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   12764:	e0bffc17 	ldw	r2,-16(fp)
   12768:	10c00117 	ldw	r3,4(r2)
   1276c:	e0bffc17 	ldw	r2,-16(fp)
   12770:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   12774:	e0bffc17 	ldw	r2,-16(fp)
   12778:	10c00117 	ldw	r3,4(r2)
   1277c:	e0bffc17 	ldw	r2,-16(fp)
   12780:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   12784:	e0bffc17 	ldw	r2,-16(fp)
   12788:	1000058d 	sth	zero,22(r2)
   1278c:	e0bffb17 	ldw	r2,-20(fp)
   12790:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12794:	e0bffe17 	ldw	r2,-8(fp)
   12798:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1279c:	0005883a 	mov	r2,zero
}
   127a0:	e037883a 	mov	sp,fp
   127a4:	df000017 	ldw	fp,0(sp)
   127a8:	dec00104 	addi	sp,sp,4
   127ac:	f800283a 	ret

000127b0 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   127b0:	defff304 	addi	sp,sp,-52
   127b4:	dfc00c15 	stw	ra,48(sp)
   127b8:	df000b15 	stw	fp,44(sp)
   127bc:	df000b04 	addi	fp,sp,44
   127c0:	e13ffd15 	stw	r4,-12(fp)
   127c4:	2805883a 	mov	r2,r5
   127c8:	e1bfff15 	stw	r6,-4(fp)
   127cc:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   127d0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   127d4:	e0bfff17 	ldw	r2,-4(fp)
   127d8:	1000021e 	bne	r2,zero,127e4 <OSQPend+0x34>
        return ((void *)0);
   127dc:	0005883a 	mov	r2,zero
   127e0:	00009106 	br	12a28 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   127e4:	e0bffd17 	ldw	r2,-12(fp)
   127e8:	1000051e 	bne	r2,zero,12800 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   127ec:	e0bfff17 	ldw	r2,-4(fp)
   127f0:	00c00104 	movi	r3,4
   127f4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   127f8:	0005883a 	mov	r2,zero
   127fc:	00008a06 	br	12a28 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   12800:	e0bffd17 	ldw	r2,-12(fp)
   12804:	10800003 	ldbu	r2,0(r2)
   12808:	10803fcc 	andi	r2,r2,255
   1280c:	108000a0 	cmpeqi	r2,r2,2
   12810:	1000051e 	bne	r2,zero,12828 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   12814:	e0bfff17 	ldw	r2,-4(fp)
   12818:	00c00044 	movi	r3,1
   1281c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12820:	0005883a 	mov	r2,zero
   12824:	00008006 	br	12a28 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   12828:	d0a7f703 	ldbu	r2,-24612(gp)
   1282c:	10803fcc 	andi	r2,r2,255
   12830:	10000526 	beq	r2,zero,12848 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   12834:	e0bfff17 	ldw	r2,-4(fp)
   12838:	00c00084 	movi	r3,2
   1283c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12840:	0005883a 	mov	r2,zero
   12844:	00007806 	br	12a28 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   12848:	d0a7e903 	ldbu	r2,-24668(gp)
   1284c:	10803fcc 	andi	r2,r2,255
   12850:	10000526 	beq	r2,zero,12868 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   12854:	e0bfff17 	ldw	r2,-4(fp)
   12858:	00c00344 	movi	r3,13
   1285c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12860:	0005883a 	mov	r2,zero
   12864:	00007006 	br	12a28 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12868:	0005303a 	rdctl	r2,status
   1286c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12870:	e0fffc17 	ldw	r3,-16(fp)
   12874:	00bfff84 	movi	r2,-2
   12878:	1884703a 	and	r2,r3,r2
   1287c:	1001703a 	wrctl	status,r2
  
  return context;
   12880:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12884:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   12888:	e0bffd17 	ldw	r2,-12(fp)
   1288c:	10800117 	ldw	r2,4(r2)
   12890:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   12894:	e0bff817 	ldw	r2,-32(fp)
   12898:	1080058b 	ldhu	r2,22(r2)
   1289c:	10bfffcc 	andi	r2,r2,65535
   128a0:	10001e26 	beq	r2,zero,1291c <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   128a4:	e0bff817 	ldw	r2,-32(fp)
   128a8:	10800417 	ldw	r2,16(r2)
   128ac:	11000104 	addi	r4,r2,4
   128b0:	e0fff817 	ldw	r3,-32(fp)
   128b4:	19000415 	stw	r4,16(r3)
   128b8:	10800017 	ldw	r2,0(r2)
   128bc:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   128c0:	e0bff817 	ldw	r2,-32(fp)
   128c4:	1080058b 	ldhu	r2,22(r2)
   128c8:	10bfffc4 	addi	r2,r2,-1
   128cc:	1007883a 	mov	r3,r2
   128d0:	e0bff817 	ldw	r2,-32(fp)
   128d4:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   128d8:	e0bff817 	ldw	r2,-32(fp)
   128dc:	10c00417 	ldw	r3,16(r2)
   128e0:	e0bff817 	ldw	r2,-32(fp)
   128e4:	10800217 	ldw	r2,8(r2)
   128e8:	1880041e 	bne	r3,r2,128fc <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
   128ec:	e0bff817 	ldw	r2,-32(fp)
   128f0:	10c00117 	ldw	r3,4(r2)
   128f4:	e0bff817 	ldw	r2,-32(fp)
   128f8:	10c00415 	stw	r3,16(r2)
   128fc:	e0bff617 	ldw	r2,-40(fp)
   12900:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12904:	e0bff717 	ldw	r2,-36(fp)
   12908:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   1290c:	e0bfff17 	ldw	r2,-4(fp)
   12910:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   12914:	e0bff517 	ldw	r2,-44(fp)
   12918:	00004306 	br	12a28 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   1291c:	d0a7f817 	ldw	r2,-24608(gp)
   12920:	d0e7f817 	ldw	r3,-24608(gp)
   12924:	18c00c03 	ldbu	r3,48(r3)
   12928:	18c00114 	ori	r3,r3,4
   1292c:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   12930:	d0a7f817 	ldw	r2,-24608(gp)
   12934:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   12938:	d0a7f817 	ldw	r2,-24608(gp)
   1293c:	e0fffe0b 	ldhu	r3,-8(fp)
   12940:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   12944:	e13ffd17 	ldw	r4,-12(fp)
   12948:	000f1fc0 	call	f1fc <OS_EventTaskWait>
   1294c:	e0bff617 	ldw	r2,-40(fp)
   12950:	e0bffb15 	stw	r2,-20(fp)
   12954:	e0bffb17 	ldw	r2,-20(fp)
   12958:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   1295c:	000fab00 	call	fab0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12960:	0005303a 	rdctl	r2,status
   12964:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12968:	e0fff917 	ldw	r3,-28(fp)
   1296c:	00bfff84 	movi	r2,-2
   12970:	1884703a 	and	r2,r3,r2
   12974:	1001703a 	wrctl	status,r2
  
  return context;
   12978:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   1297c:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   12980:	d0a7f817 	ldw	r2,-24608(gp)
   12984:	10800c43 	ldbu	r2,49(r2)
   12988:	10803fcc 	andi	r2,r2,255
   1298c:	10000326 	beq	r2,zero,1299c <OSQPend+0x1ec>
   12990:	108000a0 	cmpeqi	r2,r2,2
   12994:	1000071e 	bne	r2,zero,129b4 <OSQPend+0x204>
   12998:	00000b06 	br	129c8 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   1299c:	d0a7f817 	ldw	r2,-24608(gp)
   129a0:	10800917 	ldw	r2,36(r2)
   129a4:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   129a8:	e0bfff17 	ldw	r2,-4(fp)
   129ac:	10000005 	stb	zero,0(r2)
             break;
   129b0:	00000e06 	br	129ec <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   129b4:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   129b8:	e0bfff17 	ldw	r2,-4(fp)
   129bc:	00c00384 	movi	r3,14
   129c0:	10c00005 	stb	r3,0(r2)
             break;
   129c4:	00000906 	br	129ec <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   129c8:	d0a7f817 	ldw	r2,-24608(gp)
   129cc:	e17ffd17 	ldw	r5,-12(fp)
   129d0:	1009883a 	mov	r4,r2
   129d4:	000f45c0 	call	f45c <OS_EventTaskRemove>
             pmsg = (void *)0;
   129d8:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   129dc:	e0bfff17 	ldw	r2,-4(fp)
   129e0:	00c00284 	movi	r3,10
   129e4:	10c00005 	stb	r3,0(r2)
             break;
   129e8:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   129ec:	d0a7f817 	ldw	r2,-24608(gp)
   129f0:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   129f4:	d0a7f817 	ldw	r2,-24608(gp)
   129f8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   129fc:	d0a7f817 	ldw	r2,-24608(gp)
   12a00:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   12a04:	d0a7f817 	ldw	r2,-24608(gp)
   12a08:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   12a0c:	d0a7f817 	ldw	r2,-24608(gp)
   12a10:	10000915 	stw	zero,36(r2)
   12a14:	e0bff617 	ldw	r2,-40(fp)
   12a18:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12a1c:	e0bffa17 	ldw	r2,-24(fp)
   12a20:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   12a24:	e0bff517 	ldw	r2,-44(fp)
}
   12a28:	e037883a 	mov	sp,fp
   12a2c:	dfc00117 	ldw	ra,4(sp)
   12a30:	df000017 	ldw	fp,0(sp)
   12a34:	dec00204 	addi	sp,sp,8
   12a38:	f800283a 	ret

00012a3c <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   12a3c:	defff604 	addi	sp,sp,-40
   12a40:	dfc00915 	stw	ra,36(sp)
   12a44:	df000815 	stw	fp,32(sp)
   12a48:	df000804 	addi	fp,sp,32
   12a4c:	e13ffd15 	stw	r4,-12(fp)
   12a50:	2805883a 	mov	r2,r5
   12a54:	e1bfff15 	stw	r6,-4(fp)
   12a58:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   12a5c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   12a60:	e0bfff17 	ldw	r2,-4(fp)
   12a64:	1000021e 	bne	r2,zero,12a70 <OSQPendAbort+0x34>
        return (0);
   12a68:	0005883a 	mov	r2,zero
   12a6c:	00004906 	br	12b94 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   12a70:	e0bffd17 	ldw	r2,-12(fp)
   12a74:	1000051e 	bne	r2,zero,12a8c <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   12a78:	e0bfff17 	ldw	r2,-4(fp)
   12a7c:	00c00104 	movi	r3,4
   12a80:	10c00005 	stb	r3,0(r2)
        return (0);
   12a84:	0005883a 	mov	r2,zero
   12a88:	00004206 	br	12b94 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   12a8c:	e0bffd17 	ldw	r2,-12(fp)
   12a90:	10800003 	ldbu	r2,0(r2)
   12a94:	10803fcc 	andi	r2,r2,255
   12a98:	108000a0 	cmpeqi	r2,r2,2
   12a9c:	1000051e 	bne	r2,zero,12ab4 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   12aa0:	e0bfff17 	ldw	r2,-4(fp)
   12aa4:	00c00044 	movi	r3,1
   12aa8:	10c00005 	stb	r3,0(r2)
        return (0);
   12aac:	0005883a 	mov	r2,zero
   12ab0:	00003806 	br	12b94 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12ab4:	0005303a 	rdctl	r2,status
   12ab8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12abc:	e0fffc17 	ldw	r3,-16(fp)
   12ac0:	00bfff84 	movi	r2,-2
   12ac4:	1884703a 	and	r2,r3,r2
   12ac8:	1001703a 	wrctl	status,r2
  
  return context;
   12acc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12ad0:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   12ad4:	e0bffd17 	ldw	r2,-12(fp)
   12ad8:	10800283 	ldbu	r2,10(r2)
   12adc:	10803fcc 	andi	r2,r2,255
   12ae0:	10002526 	beq	r2,zero,12b78 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   12ae4:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   12ae8:	e0bffe03 	ldbu	r2,-8(fp)
   12aec:	10800060 	cmpeqi	r2,r2,1
   12af0:	10000e26 	beq	r2,zero,12b2c <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   12af4:	00000806 	br	12b18 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   12af8:	01c00084 	movi	r7,2
   12afc:	01800104 	movi	r6,4
   12b00:	000b883a 	mov	r5,zero
   12b04:	e13ffd17 	ldw	r4,-12(fp)
   12b08:	000f0640 	call	f064 <OS_EventTaskRdy>
                     nbr_tasks++;
   12b0c:	e0bff803 	ldbu	r2,-32(fp)
   12b10:	10800044 	addi	r2,r2,1
   12b14:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   12b18:	e0bffd17 	ldw	r2,-12(fp)
   12b1c:	10800283 	ldbu	r2,10(r2)
   12b20:	10803fcc 	andi	r2,r2,255
   12b24:	103ff41e 	bne	r2,zero,12af8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012af8>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   12b28:	00000906 	br	12b50 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   12b2c:	01c00084 	movi	r7,2
   12b30:	01800104 	movi	r6,4
   12b34:	000b883a 	mov	r5,zero
   12b38:	e13ffd17 	ldw	r4,-12(fp)
   12b3c:	000f0640 	call	f064 <OS_EventTaskRdy>
                 nbr_tasks++;
   12b40:	e0bff803 	ldbu	r2,-32(fp)
   12b44:	10800044 	addi	r2,r2,1
   12b48:	e0bff805 	stb	r2,-32(fp)
                 break;
   12b4c:	0001883a 	nop
   12b50:	e0bff917 	ldw	r2,-28(fp)
   12b54:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12b58:	e0bffa17 	ldw	r2,-24(fp)
   12b5c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   12b60:	000fab00 	call	fab0 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   12b64:	e0bfff17 	ldw	r2,-4(fp)
   12b68:	00c00384 	movi	r3,14
   12b6c:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   12b70:	e0bff803 	ldbu	r2,-32(fp)
   12b74:	00000706 	br	12b94 <OSQPendAbort+0x158>
   12b78:	e0bff917 	ldw	r2,-28(fp)
   12b7c:	e0bffb15 	stw	r2,-20(fp)
   12b80:	e0bffb17 	ldw	r2,-20(fp)
   12b84:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   12b88:	e0bfff17 	ldw	r2,-4(fp)
   12b8c:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   12b90:	0005883a 	mov	r2,zero
}
   12b94:	e037883a 	mov	sp,fp
   12b98:	dfc00117 	ldw	ra,4(sp)
   12b9c:	df000017 	ldw	fp,0(sp)
   12ba0:	dec00204 	addi	sp,sp,8
   12ba4:	f800283a 	ret

00012ba8 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   12ba8:	defff604 	addi	sp,sp,-40
   12bac:	dfc00915 	stw	ra,36(sp)
   12bb0:	df000815 	stw	fp,32(sp)
   12bb4:	df000804 	addi	fp,sp,32
   12bb8:	e13ffe15 	stw	r4,-8(fp)
   12bbc:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   12bc0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   12bc4:	e0bffe17 	ldw	r2,-8(fp)
   12bc8:	1000021e 	bne	r2,zero,12bd4 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   12bcc:	00800104 	movi	r2,4
   12bd0:	00004a06 	br	12cfc <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   12bd4:	e0bffe17 	ldw	r2,-8(fp)
   12bd8:	10800003 	ldbu	r2,0(r2)
   12bdc:	10803fcc 	andi	r2,r2,255
   12be0:	108000a0 	cmpeqi	r2,r2,2
   12be4:	1000021e 	bne	r2,zero,12bf0 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   12be8:	00800044 	movi	r2,1
   12bec:	00004306 	br	12cfc <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12bf0:	0005303a 	rdctl	r2,status
   12bf4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12bf8:	e0fffd17 	ldw	r3,-12(fp)
   12bfc:	00bfff84 	movi	r2,-2
   12c00:	1884703a 	and	r2,r3,r2
   12c04:	1001703a 	wrctl	status,r2
  
  return context;
   12c08:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   12c0c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   12c10:	e0bffe17 	ldw	r2,-8(fp)
   12c14:	10800283 	ldbu	r2,10(r2)
   12c18:	10803fcc 	andi	r2,r2,255
   12c1c:	10000c26 	beq	r2,zero,12c50 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   12c20:	000f883a 	mov	r7,zero
   12c24:	01800104 	movi	r6,4
   12c28:	e17fff17 	ldw	r5,-4(fp)
   12c2c:	e13ffe17 	ldw	r4,-8(fp)
   12c30:	000f0640 	call	f064 <OS_EventTaskRdy>
   12c34:	e0bff817 	ldw	r2,-32(fp)
   12c38:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12c3c:	e0bff917 	ldw	r2,-28(fp)
   12c40:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   12c44:	000fab00 	call	fab0 <OS_Sched>
        return (OS_ERR_NONE);
   12c48:	0005883a 	mov	r2,zero
   12c4c:	00002b06 	br	12cfc <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   12c50:	e0bffe17 	ldw	r2,-8(fp)
   12c54:	10800117 	ldw	r2,4(r2)
   12c58:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   12c5c:	e0bffb17 	ldw	r2,-20(fp)
   12c60:	10c0058b 	ldhu	r3,22(r2)
   12c64:	e0bffb17 	ldw	r2,-20(fp)
   12c68:	1080050b 	ldhu	r2,20(r2)
   12c6c:	18ffffcc 	andi	r3,r3,65535
   12c70:	10bfffcc 	andi	r2,r2,65535
   12c74:	18800636 	bltu	r3,r2,12c90 <OSQPost+0xe8>
   12c78:	e0bff817 	ldw	r2,-32(fp)
   12c7c:	e0bffa15 	stw	r2,-24(fp)
   12c80:	e0bffa17 	ldw	r2,-24(fp)
   12c84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   12c88:	00800784 	movi	r2,30
   12c8c:	00001b06 	br	12cfc <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   12c90:	e0bffb17 	ldw	r2,-20(fp)
   12c94:	10800317 	ldw	r2,12(r2)
   12c98:	11000104 	addi	r4,r2,4
   12c9c:	e0fffb17 	ldw	r3,-20(fp)
   12ca0:	19000315 	stw	r4,12(r3)
   12ca4:	e0ffff17 	ldw	r3,-4(fp)
   12ca8:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   12cac:	e0bffb17 	ldw	r2,-20(fp)
   12cb0:	1080058b 	ldhu	r2,22(r2)
   12cb4:	10800044 	addi	r2,r2,1
   12cb8:	1007883a 	mov	r3,r2
   12cbc:	e0bffb17 	ldw	r2,-20(fp)
   12cc0:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   12cc4:	e0bffb17 	ldw	r2,-20(fp)
   12cc8:	10c00317 	ldw	r3,12(r2)
   12ccc:	e0bffb17 	ldw	r2,-20(fp)
   12cd0:	10800217 	ldw	r2,8(r2)
   12cd4:	1880041e 	bne	r3,r2,12ce8 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   12cd8:	e0bffb17 	ldw	r2,-20(fp)
   12cdc:	10c00117 	ldw	r3,4(r2)
   12ce0:	e0bffb17 	ldw	r2,-20(fp)
   12ce4:	10c00315 	stw	r3,12(r2)
   12ce8:	e0bff817 	ldw	r2,-32(fp)
   12cec:	e0bffc15 	stw	r2,-16(fp)
   12cf0:	e0bffc17 	ldw	r2,-16(fp)
   12cf4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   12cf8:	0005883a 	mov	r2,zero
}
   12cfc:	e037883a 	mov	sp,fp
   12d00:	dfc00117 	ldw	ra,4(sp)
   12d04:	df000017 	ldw	fp,0(sp)
   12d08:	dec00204 	addi	sp,sp,8
   12d0c:	f800283a 	ret

00012d10 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   12d10:	defff604 	addi	sp,sp,-40
   12d14:	dfc00915 	stw	ra,36(sp)
   12d18:	df000815 	stw	fp,32(sp)
   12d1c:	df000804 	addi	fp,sp,32
   12d20:	e13ffe15 	stw	r4,-8(fp)
   12d24:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12d28:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   12d2c:	e0bffe17 	ldw	r2,-8(fp)
   12d30:	1000021e 	bne	r2,zero,12d3c <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   12d34:	00800104 	movi	r2,4
   12d38:	00004c06 	br	12e6c <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   12d3c:	e0bffe17 	ldw	r2,-8(fp)
   12d40:	10800003 	ldbu	r2,0(r2)
   12d44:	10803fcc 	andi	r2,r2,255
   12d48:	108000a0 	cmpeqi	r2,r2,2
   12d4c:	1000021e 	bne	r2,zero,12d58 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   12d50:	00800044 	movi	r2,1
   12d54:	00004506 	br	12e6c <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12d58:	0005303a 	rdctl	r2,status
   12d5c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12d60:	e0fffd17 	ldw	r3,-12(fp)
   12d64:	00bfff84 	movi	r2,-2
   12d68:	1884703a 	and	r2,r3,r2
   12d6c:	1001703a 	wrctl	status,r2
  
  return context;
   12d70:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   12d74:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   12d78:	e0bffe17 	ldw	r2,-8(fp)
   12d7c:	10800283 	ldbu	r2,10(r2)
   12d80:	10803fcc 	andi	r2,r2,255
   12d84:	10000c26 	beq	r2,zero,12db8 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   12d88:	000f883a 	mov	r7,zero
   12d8c:	01800104 	movi	r6,4
   12d90:	e17fff17 	ldw	r5,-4(fp)
   12d94:	e13ffe17 	ldw	r4,-8(fp)
   12d98:	000f0640 	call	f064 <OS_EventTaskRdy>
   12d9c:	e0bff817 	ldw	r2,-32(fp)
   12da0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12da4:	e0bff917 	ldw	r2,-28(fp)
   12da8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   12dac:	000fab00 	call	fab0 <OS_Sched>
        return (OS_ERR_NONE);
   12db0:	0005883a 	mov	r2,zero
   12db4:	00002d06 	br	12e6c <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   12db8:	e0bffe17 	ldw	r2,-8(fp)
   12dbc:	10800117 	ldw	r2,4(r2)
   12dc0:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   12dc4:	e0bffb17 	ldw	r2,-20(fp)
   12dc8:	10c0058b 	ldhu	r3,22(r2)
   12dcc:	e0bffb17 	ldw	r2,-20(fp)
   12dd0:	1080050b 	ldhu	r2,20(r2)
   12dd4:	18ffffcc 	andi	r3,r3,65535
   12dd8:	10bfffcc 	andi	r2,r2,65535
   12ddc:	18800636 	bltu	r3,r2,12df8 <OSQPostFront+0xe8>
   12de0:	e0bff817 	ldw	r2,-32(fp)
   12de4:	e0bffa15 	stw	r2,-24(fp)
   12de8:	e0bffa17 	ldw	r2,-24(fp)
   12dec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   12df0:	00800784 	movi	r2,30
   12df4:	00001d06 	br	12e6c <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   12df8:	e0bffb17 	ldw	r2,-20(fp)
   12dfc:	10c00417 	ldw	r3,16(r2)
   12e00:	e0bffb17 	ldw	r2,-20(fp)
   12e04:	10800117 	ldw	r2,4(r2)
   12e08:	1880041e 	bne	r3,r2,12e1c <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   12e0c:	e0bffb17 	ldw	r2,-20(fp)
   12e10:	10c00217 	ldw	r3,8(r2)
   12e14:	e0bffb17 	ldw	r2,-20(fp)
   12e18:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   12e1c:	e0bffb17 	ldw	r2,-20(fp)
   12e20:	10800417 	ldw	r2,16(r2)
   12e24:	10ffff04 	addi	r3,r2,-4
   12e28:	e0bffb17 	ldw	r2,-20(fp)
   12e2c:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   12e30:	e0bffb17 	ldw	r2,-20(fp)
   12e34:	10800417 	ldw	r2,16(r2)
   12e38:	e0ffff17 	ldw	r3,-4(fp)
   12e3c:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   12e40:	e0bffb17 	ldw	r2,-20(fp)
   12e44:	1080058b 	ldhu	r2,22(r2)
   12e48:	10800044 	addi	r2,r2,1
   12e4c:	1007883a 	mov	r3,r2
   12e50:	e0bffb17 	ldw	r2,-20(fp)
   12e54:	10c0058d 	sth	r3,22(r2)
   12e58:	e0bff817 	ldw	r2,-32(fp)
   12e5c:	e0bffc15 	stw	r2,-16(fp)
   12e60:	e0bffc17 	ldw	r2,-16(fp)
   12e64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   12e68:	0005883a 	mov	r2,zero
}
   12e6c:	e037883a 	mov	sp,fp
   12e70:	dfc00117 	ldw	ra,4(sp)
   12e74:	df000017 	ldw	fp,0(sp)
   12e78:	dec00204 	addi	sp,sp,8
   12e7c:	f800283a 	ret

00012e80 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   12e80:	defff504 	addi	sp,sp,-44
   12e84:	dfc00a15 	stw	ra,40(sp)
   12e88:	df000915 	stw	fp,36(sp)
   12e8c:	df000904 	addi	fp,sp,36
   12e90:	e13ffd15 	stw	r4,-12(fp)
   12e94:	e17ffe15 	stw	r5,-8(fp)
   12e98:	3005883a 	mov	r2,r6
   12e9c:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12ea0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   12ea4:	e0bffd17 	ldw	r2,-12(fp)
   12ea8:	1000021e 	bne	r2,zero,12eb4 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   12eac:	00800104 	movi	r2,4
   12eb0:	00007106 	br	13078 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   12eb4:	e0bffd17 	ldw	r2,-12(fp)
   12eb8:	10800003 	ldbu	r2,0(r2)
   12ebc:	10803fcc 	andi	r2,r2,255
   12ec0:	108000a0 	cmpeqi	r2,r2,2
   12ec4:	1000021e 	bne	r2,zero,12ed0 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   12ec8:	00800044 	movi	r2,1
   12ecc:	00006a06 	br	13078 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12ed0:	0005303a 	rdctl	r2,status
   12ed4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12ed8:	e0fffc17 	ldw	r3,-16(fp)
   12edc:	00bfff84 	movi	r2,-2
   12ee0:	1884703a 	and	r2,r3,r2
   12ee4:	1001703a 	wrctl	status,r2
  
  return context;
   12ee8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12eec:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   12ef0:	e0bffd17 	ldw	r2,-12(fp)
   12ef4:	10800283 	ldbu	r2,10(r2)
   12ef8:	10803fcc 	andi	r2,r2,255
   12efc:	10001d26 	beq	r2,zero,12f74 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   12f00:	e0bfff03 	ldbu	r2,-4(fp)
   12f04:	1080004c 	andi	r2,r2,1
   12f08:	10000b26 	beq	r2,zero,12f38 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   12f0c:	00000506 	br	12f24 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   12f10:	000f883a 	mov	r7,zero
   12f14:	01800104 	movi	r6,4
   12f18:	e17ffe17 	ldw	r5,-8(fp)
   12f1c:	e13ffd17 	ldw	r4,-12(fp)
   12f20:	000f0640 	call	f064 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   12f24:	e0bffd17 	ldw	r2,-12(fp)
   12f28:	10800283 	ldbu	r2,10(r2)
   12f2c:	10803fcc 	andi	r2,r2,255
   12f30:	103ff71e 	bne	r2,zero,12f10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012f10>
   12f34:	00000506 	br	12f4c <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   12f38:	000f883a 	mov	r7,zero
   12f3c:	01800104 	movi	r6,4
   12f40:	e17ffe17 	ldw	r5,-8(fp)
   12f44:	e13ffd17 	ldw	r4,-12(fp)
   12f48:	000f0640 	call	f064 <OS_EventTaskRdy>
   12f4c:	e0bff717 	ldw	r2,-36(fp)
   12f50:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12f54:	e0bff817 	ldw	r2,-32(fp)
   12f58:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   12f5c:	e0bfff03 	ldbu	r2,-4(fp)
   12f60:	1080010c 	andi	r2,r2,4
   12f64:	1000011e 	bne	r2,zero,12f6c <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   12f68:	000fab00 	call	fab0 <OS_Sched>
        }
        return (OS_ERR_NONE);
   12f6c:	0005883a 	mov	r2,zero
   12f70:	00004106 	br	13078 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   12f74:	e0bffd17 	ldw	r2,-12(fp)
   12f78:	10800117 	ldw	r2,4(r2)
   12f7c:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   12f80:	e0bffa17 	ldw	r2,-24(fp)
   12f84:	10c0058b 	ldhu	r3,22(r2)
   12f88:	e0bffa17 	ldw	r2,-24(fp)
   12f8c:	1080050b 	ldhu	r2,20(r2)
   12f90:	18ffffcc 	andi	r3,r3,65535
   12f94:	10bfffcc 	andi	r2,r2,65535
   12f98:	18800636 	bltu	r3,r2,12fb4 <OSQPostOpt+0x134>
   12f9c:	e0bff717 	ldw	r2,-36(fp)
   12fa0:	e0bff915 	stw	r2,-28(fp)
   12fa4:	e0bff917 	ldw	r2,-28(fp)
   12fa8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   12fac:	00800784 	movi	r2,30
   12fb0:	00003106 	br	13078 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   12fb4:	e0bfff03 	ldbu	r2,-4(fp)
   12fb8:	1080008c 	andi	r2,r2,2
   12fbc:	10001326 	beq	r2,zero,1300c <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   12fc0:	e0bffa17 	ldw	r2,-24(fp)
   12fc4:	10c00417 	ldw	r3,16(r2)
   12fc8:	e0bffa17 	ldw	r2,-24(fp)
   12fcc:	10800117 	ldw	r2,4(r2)
   12fd0:	1880041e 	bne	r3,r2,12fe4 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   12fd4:	e0bffa17 	ldw	r2,-24(fp)
   12fd8:	10c00217 	ldw	r3,8(r2)
   12fdc:	e0bffa17 	ldw	r2,-24(fp)
   12fe0:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   12fe4:	e0bffa17 	ldw	r2,-24(fp)
   12fe8:	10800417 	ldw	r2,16(r2)
   12fec:	10ffff04 	addi	r3,r2,-4
   12ff0:	e0bffa17 	ldw	r2,-24(fp)
   12ff4:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   12ff8:	e0bffa17 	ldw	r2,-24(fp)
   12ffc:	10800417 	ldw	r2,16(r2)
   13000:	e0fffe17 	ldw	r3,-8(fp)
   13004:	10c00015 	stw	r3,0(r2)
   13008:	00001006 	br	1304c <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   1300c:	e0bffa17 	ldw	r2,-24(fp)
   13010:	10800317 	ldw	r2,12(r2)
   13014:	11000104 	addi	r4,r2,4
   13018:	e0fffa17 	ldw	r3,-24(fp)
   1301c:	19000315 	stw	r4,12(r3)
   13020:	e0fffe17 	ldw	r3,-8(fp)
   13024:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   13028:	e0bffa17 	ldw	r2,-24(fp)
   1302c:	10c00317 	ldw	r3,12(r2)
   13030:	e0bffa17 	ldw	r2,-24(fp)
   13034:	10800217 	ldw	r2,8(r2)
   13038:	1880041e 	bne	r3,r2,1304c <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   1303c:	e0bffa17 	ldw	r2,-24(fp)
   13040:	10c00117 	ldw	r3,4(r2)
   13044:	e0bffa17 	ldw	r2,-24(fp)
   13048:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   1304c:	e0bffa17 	ldw	r2,-24(fp)
   13050:	1080058b 	ldhu	r2,22(r2)
   13054:	10800044 	addi	r2,r2,1
   13058:	1007883a 	mov	r3,r2
   1305c:	e0bffa17 	ldw	r2,-24(fp)
   13060:	10c0058d 	sth	r3,22(r2)
   13064:	e0bff717 	ldw	r2,-36(fp)
   13068:	e0bffb15 	stw	r2,-20(fp)
   1306c:	e0bffb17 	ldw	r2,-20(fp)
   13070:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   13074:	0005883a 	mov	r2,zero
}
   13078:	e037883a 	mov	sp,fp
   1307c:	dfc00117 	ldw	ra,4(sp)
   13080:	df000017 	ldw	fp,0(sp)
   13084:	dec00204 	addi	sp,sp,8
   13088:	f800283a 	ret

0001308c <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   1308c:	defff604 	addi	sp,sp,-40
   13090:	df000915 	stw	fp,36(sp)
   13094:	df000904 	addi	fp,sp,36
   13098:	e13ffe15 	stw	r4,-8(fp)
   1309c:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   130a0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   130a4:	e0bffe17 	ldw	r2,-8(fp)
   130a8:	1000021e 	bne	r2,zero,130b4 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   130ac:	00800104 	movi	r2,4
   130b0:	00004906 	br	131d8 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   130b4:	e0bfff17 	ldw	r2,-4(fp)
   130b8:	1000021e 	bne	r2,zero,130c4 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   130bc:	00800244 	movi	r2,9
   130c0:	00004506 	br	131d8 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   130c4:	e0bffe17 	ldw	r2,-8(fp)
   130c8:	10800003 	ldbu	r2,0(r2)
   130cc:	10803fcc 	andi	r2,r2,255
   130d0:	108000a0 	cmpeqi	r2,r2,2
   130d4:	1000021e 	bne	r2,zero,130e0 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   130d8:	00800044 	movi	r2,1
   130dc:	00003e06 	br	131d8 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   130e0:	0005303a 	rdctl	r2,status
   130e4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   130e8:	e0fffd17 	ldw	r3,-12(fp)
   130ec:	00bfff84 	movi	r2,-2
   130f0:	1884703a 	and	r2,r3,r2
   130f4:	1001703a 	wrctl	status,r2
  
  return context;
   130f8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   130fc:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   13100:	e0bffe17 	ldw	r2,-8(fp)
   13104:	10c00283 	ldbu	r3,10(r2)
   13108:	e0bfff17 	ldw	r2,-4(fp)
   1310c:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   13110:	e0bffe17 	ldw	r2,-8(fp)
   13114:	108002c4 	addi	r2,r2,11
   13118:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   1311c:	e0bfff17 	ldw	r2,-4(fp)
   13120:	10800204 	addi	r2,r2,8
   13124:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   13128:	e03ff705 	stb	zero,-36(fp)
   1312c:	00000b06 	br	1315c <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   13130:	e0bff917 	ldw	r2,-28(fp)
   13134:	10c00044 	addi	r3,r2,1
   13138:	e0fff915 	stw	r3,-28(fp)
   1313c:	e0fff817 	ldw	r3,-32(fp)
   13140:	19000044 	addi	r4,r3,1
   13144:	e13ff815 	stw	r4,-32(fp)
   13148:	18c00003 	ldbu	r3,0(r3)
   1314c:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   13150:	e0bff703 	ldbu	r2,-36(fp)
   13154:	10800044 	addi	r2,r2,1
   13158:	e0bff705 	stb	r2,-36(fp)
   1315c:	e0bff703 	ldbu	r2,-36(fp)
   13160:	108000f0 	cmpltui	r2,r2,3
   13164:	103ff21e 	bne	r2,zero,13130 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013130>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   13168:	e0bffe17 	ldw	r2,-8(fp)
   1316c:	10800117 	ldw	r2,4(r2)
   13170:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
   13174:	e0bffc17 	ldw	r2,-16(fp)
   13178:	1080058b 	ldhu	r2,22(r2)
   1317c:	10bfffcc 	andi	r2,r2,65535
   13180:	10000626 	beq	r2,zero,1319c <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   13184:	e0bffc17 	ldw	r2,-16(fp)
   13188:	10800417 	ldw	r2,16(r2)
   1318c:	10c00017 	ldw	r3,0(r2)
   13190:	e0bfff17 	ldw	r2,-4(fp)
   13194:	10c00015 	stw	r3,0(r2)
   13198:	00000206 	br	131a4 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   1319c:	e0bfff17 	ldw	r2,-4(fp)
   131a0:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   131a4:	e0bffc17 	ldw	r2,-16(fp)
   131a8:	10c0058b 	ldhu	r3,22(r2)
   131ac:	e0bfff17 	ldw	r2,-4(fp)
   131b0:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   131b4:	e0bffc17 	ldw	r2,-16(fp)
   131b8:	10c0050b 	ldhu	r3,20(r2)
   131bc:	e0bfff17 	ldw	r2,-4(fp)
   131c0:	10c0018d 	sth	r3,6(r2)
   131c4:	e0bffa17 	ldw	r2,-24(fp)
   131c8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   131cc:	e0bffb17 	ldw	r2,-20(fp)
   131d0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   131d4:	0005883a 	mov	r2,zero
}
   131d8:	e037883a 	mov	sp,fp
   131dc:	df000017 	ldw	fp,0(sp)
   131e0:	dec00104 	addi	sp,sp,4
   131e4:	f800283a 	ret

000131e8 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   131e8:	defffb04 	addi	sp,sp,-20
   131ec:	dfc00415 	stw	ra,16(sp)
   131f0:	df000315 	stw	fp,12(sp)
   131f4:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   131f8:	01407804 	movi	r5,480
   131fc:	010000b4 	movhi	r4,2
   13200:	21164404 	addi	r4,r4,22800
   13204:	000f9f40 	call	f9f4 <OS_MemClr>
    pq1 = &OSQTbl[0];
   13208:	008000b4 	movhi	r2,2
   1320c:	10964404 	addi	r2,r2,22800
   13210:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   13214:	008000b4 	movhi	r2,2
   13218:	10964a04 	addi	r2,r2,22824
   1321c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   13220:	e03ffd0d 	sth	zero,-12(fp)
   13224:	00000c06 	br	13258 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   13228:	e0bffe17 	ldw	r2,-8(fp)
   1322c:	e0ffff17 	ldw	r3,-4(fp)
   13230:	10c00015 	stw	r3,0(r2)
        pq1++;
   13234:	e0bffe17 	ldw	r2,-8(fp)
   13238:	10800604 	addi	r2,r2,24
   1323c:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   13240:	e0bfff17 	ldw	r2,-4(fp)
   13244:	10800604 	addi	r2,r2,24
   13248:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   1324c:	e0bffd0b 	ldhu	r2,-12(fp)
   13250:	10800044 	addi	r2,r2,1
   13254:	e0bffd0d 	sth	r2,-12(fp)
   13258:	e0bffd0b 	ldhu	r2,-12(fp)
   1325c:	108004f0 	cmpltui	r2,r2,19
   13260:	103ff11e 	bne	r2,zero,13228 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013228>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   13264:	e0bffe17 	ldw	r2,-8(fp)
   13268:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   1326c:	008000b4 	movhi	r2,2
   13270:	10964404 	addi	r2,r2,22800
   13274:	d0a7f415 	stw	r2,-24624(gp)
#endif
}
   13278:	0001883a 	nop
   1327c:	e037883a 	mov	sp,fp
   13280:	dfc00117 	ldw	ra,4(sp)
   13284:	df000017 	ldw	fp,0(sp)
   13288:	dec00204 	addi	sp,sp,8
   1328c:	f800283a 	ret

00013290 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   13290:	defffa04 	addi	sp,sp,-24
   13294:	df000515 	stw	fp,20(sp)
   13298:	df000504 	addi	fp,sp,20
   1329c:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   132a0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   132a4:	e0bfff17 	ldw	r2,-4(fp)
   132a8:	1000021e 	bne	r2,zero,132b4 <OSSemAccept+0x24>
        return (0);
   132ac:	0005883a 	mov	r2,zero
   132b0:	00001f06 	br	13330 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   132b4:	e0bfff17 	ldw	r2,-4(fp)
   132b8:	10800003 	ldbu	r2,0(r2)
   132bc:	10803fcc 	andi	r2,r2,255
   132c0:	108000e0 	cmpeqi	r2,r2,3
   132c4:	1000021e 	bne	r2,zero,132d0 <OSSemAccept+0x40>
        return (0);
   132c8:	0005883a 	mov	r2,zero
   132cc:	00001806 	br	13330 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   132d0:	0005303a 	rdctl	r2,status
   132d4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   132d8:	e0fffe17 	ldw	r3,-8(fp)
   132dc:	00bfff84 	movi	r2,-2
   132e0:	1884703a 	and	r2,r3,r2
   132e4:	1001703a 	wrctl	status,r2
  
  return context;
   132e8:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   132ec:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   132f0:	e0bfff17 	ldw	r2,-4(fp)
   132f4:	1080020b 	ldhu	r2,8(r2)
   132f8:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   132fc:	e0bffd0b 	ldhu	r2,-12(fp)
   13300:	10000626 	beq	r2,zero,1331c <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   13304:	e0bfff17 	ldw	r2,-4(fp)
   13308:	1080020b 	ldhu	r2,8(r2)
   1330c:	10bfffc4 	addi	r2,r2,-1
   13310:	1007883a 	mov	r3,r2
   13314:	e0bfff17 	ldw	r2,-4(fp)
   13318:	10c0020d 	sth	r3,8(r2)
   1331c:	e0bffb17 	ldw	r2,-20(fp)
   13320:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13324:	e0bffc17 	ldw	r2,-16(fp)
   13328:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   1332c:	e0bffd0b 	ldhu	r2,-12(fp)
}
   13330:	e037883a 	mov	sp,fp
   13334:	df000017 	ldw	fp,0(sp)
   13338:	dec00104 	addi	sp,sp,4
   1333c:	f800283a 	ret

00013340 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   13340:	defff904 	addi	sp,sp,-28
   13344:	dfc00615 	stw	ra,24(sp)
   13348:	df000515 	stw	fp,20(sp)
   1334c:	df000504 	addi	fp,sp,20
   13350:	2005883a 	mov	r2,r4
   13354:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13358:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1335c:	d0a7f703 	ldbu	r2,-24612(gp)
   13360:	10803fcc 	andi	r2,r2,255
   13364:	10000226 	beq	r2,zero,13370 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   13368:	0005883a 	mov	r2,zero
   1336c:	00002506 	br	13404 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13370:	0005303a 	rdctl	r2,status
   13374:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13378:	e0fffe17 	ldw	r3,-8(fp)
   1337c:	00bfff84 	movi	r2,-2
   13380:	1884703a 	and	r2,r3,r2
   13384:	1001703a 	wrctl	status,r2
  
  return context;
   13388:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   1338c:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   13390:	d0a7f617 	ldw	r2,-24616(gp)
   13394:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   13398:	d0a7f617 	ldw	r2,-24616(gp)
   1339c:	10000326 	beq	r2,zero,133ac <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   133a0:	d0a7f617 	ldw	r2,-24616(gp)
   133a4:	10800117 	ldw	r2,4(r2)
   133a8:	d0a7f615 	stw	r2,-24616(gp)
   133ac:	e0bffb17 	ldw	r2,-20(fp)
   133b0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   133b4:	e0bffc17 	ldw	r2,-16(fp)
   133b8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   133bc:	e0bffd17 	ldw	r2,-12(fp)
   133c0:	10000f26 	beq	r2,zero,13400 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   133c4:	e0bffd17 	ldw	r2,-12(fp)
   133c8:	00c000c4 	movi	r3,3
   133cc:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   133d0:	e0bffd17 	ldw	r2,-12(fp)
   133d4:	e0ffff0b 	ldhu	r3,-4(fp)
   133d8:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   133dc:	e0bffd17 	ldw	r2,-12(fp)
   133e0:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   133e4:	e0bffd17 	ldw	r2,-12(fp)
   133e8:	00c00fc4 	movi	r3,63
   133ec:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   133f0:	e0bffd17 	ldw	r2,-12(fp)
   133f4:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   133f8:	e13ffd17 	ldw	r4,-12(fp)
   133fc:	000f6140 	call	f614 <OS_EventWaitListInit>
    }
    return (pevent);
   13400:	e0bffd17 	ldw	r2,-12(fp)
}
   13404:	e037883a 	mov	sp,fp
   13408:	dfc00117 	ldw	ra,4(sp)
   1340c:	df000017 	ldw	fp,0(sp)
   13410:	dec00204 	addi	sp,sp,8
   13414:	f800283a 	ret

00013418 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   13418:	defff304 	addi	sp,sp,-52
   1341c:	dfc00c15 	stw	ra,48(sp)
   13420:	df000b15 	stw	fp,44(sp)
   13424:	df000b04 	addi	fp,sp,44
   13428:	e13ffd15 	stw	r4,-12(fp)
   1342c:	2805883a 	mov	r2,r5
   13430:	e1bfff15 	stw	r6,-4(fp)
   13434:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13438:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1343c:	e0bfff17 	ldw	r2,-4(fp)
   13440:	1000021e 	bne	r2,zero,1344c <OSSemDel+0x34>
        return (pevent);
   13444:	e0bffd17 	ldw	r2,-12(fp)
   13448:	00007e06 	br	13644 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   1344c:	e0bffd17 	ldw	r2,-12(fp)
   13450:	1000051e 	bne	r2,zero,13468 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   13454:	e0bfff17 	ldw	r2,-4(fp)
   13458:	00c00104 	movi	r3,4
   1345c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   13460:	e0bffd17 	ldw	r2,-12(fp)
   13464:	00007706 	br	13644 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   13468:	e0bffd17 	ldw	r2,-12(fp)
   1346c:	10800003 	ldbu	r2,0(r2)
   13470:	10803fcc 	andi	r2,r2,255
   13474:	108000e0 	cmpeqi	r2,r2,3
   13478:	1000051e 	bne	r2,zero,13490 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1347c:	e0bfff17 	ldw	r2,-4(fp)
   13480:	00c00044 	movi	r3,1
   13484:	10c00005 	stb	r3,0(r2)
        return (pevent);
   13488:	e0bffd17 	ldw	r2,-12(fp)
   1348c:	00006d06 	br	13644 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   13490:	d0a7f703 	ldbu	r2,-24612(gp)
   13494:	10803fcc 	andi	r2,r2,255
   13498:	10000526 	beq	r2,zero,134b0 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   1349c:	e0bfff17 	ldw	r2,-4(fp)
   134a0:	00c003c4 	movi	r3,15
   134a4:	10c00005 	stb	r3,0(r2)
        return (pevent);
   134a8:	e0bffd17 	ldw	r2,-12(fp)
   134ac:	00006506 	br	13644 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   134b0:	0005303a 	rdctl	r2,status
   134b4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   134b8:	e0fffc17 	ldw	r3,-16(fp)
   134bc:	00bfff84 	movi	r2,-2
   134c0:	1884703a 	and	r2,r3,r2
   134c4:	1001703a 	wrctl	status,r2
  
  return context;
   134c8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   134cc:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   134d0:	e0bffd17 	ldw	r2,-12(fp)
   134d4:	10800283 	ldbu	r2,10(r2)
   134d8:	10803fcc 	andi	r2,r2,255
   134dc:	10000326 	beq	r2,zero,134ec <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   134e0:	00800044 	movi	r2,1
   134e4:	e0bff505 	stb	r2,-44(fp)
   134e8:	00000106 	br	134f0 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   134ec:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   134f0:	e0bffe03 	ldbu	r2,-8(fp)
   134f4:	10000326 	beq	r2,zero,13504 <OSSemDel+0xec>
   134f8:	10800060 	cmpeqi	r2,r2,1
   134fc:	1000281e 	bne	r2,zero,135a0 <OSSemDel+0x188>
   13500:	00004506 	br	13618 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   13504:	e0bff503 	ldbu	r2,-44(fp)
   13508:	1000161e 	bne	r2,zero,13564 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   1350c:	e0bffd17 	ldw	r2,-12(fp)
   13510:	00c00fc4 	movi	r3,63
   13514:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   13518:	e0bffd17 	ldw	r2,-12(fp)
   1351c:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   13520:	e0bffd17 	ldw	r2,-12(fp)
   13524:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   13528:	d0e7f617 	ldw	r3,-24616(gp)
   1352c:	e0bffd17 	ldw	r2,-12(fp)
   13530:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   13534:	e0bffd17 	ldw	r2,-12(fp)
   13538:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   1353c:	e0bffd17 	ldw	r2,-12(fp)
   13540:	d0a7f615 	stw	r2,-24616(gp)
   13544:	e0bff717 	ldw	r2,-36(fp)
   13548:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1354c:	e0bff817 	ldw	r2,-32(fp)
   13550:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   13554:	e0bfff17 	ldw	r2,-4(fp)
   13558:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   1355c:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   13560:	00003706 	br	13640 <OSSemDel+0x228>
   13564:	e0bff717 	ldw	r2,-36(fp)
   13568:	e0bff915 	stw	r2,-28(fp)
   1356c:	e0bff917 	ldw	r2,-28(fp)
   13570:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   13574:	e0bfff17 	ldw	r2,-4(fp)
   13578:	00c01244 	movi	r3,73
   1357c:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   13580:	e0bffd17 	ldw	r2,-12(fp)
   13584:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   13588:	00002d06 	br	13640 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   1358c:	000f883a 	mov	r7,zero
   13590:	01800044 	movi	r6,1
   13594:	000b883a 	mov	r5,zero
   13598:	e13ffd17 	ldw	r4,-12(fp)
   1359c:	000f0640 	call	f064 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   135a0:	e0bffd17 	ldw	r2,-12(fp)
   135a4:	10800283 	ldbu	r2,10(r2)
   135a8:	10803fcc 	andi	r2,r2,255
   135ac:	103ff71e 	bne	r2,zero,1358c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701358c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   135b0:	e0bffd17 	ldw	r2,-12(fp)
   135b4:	00c00fc4 	movi	r3,63
   135b8:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   135bc:	e0bffd17 	ldw	r2,-12(fp)
   135c0:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   135c4:	e0bffd17 	ldw	r2,-12(fp)
   135c8:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   135cc:	d0e7f617 	ldw	r3,-24616(gp)
   135d0:	e0bffd17 	ldw	r2,-12(fp)
   135d4:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   135d8:	e0bffd17 	ldw	r2,-12(fp)
   135dc:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   135e0:	e0bffd17 	ldw	r2,-12(fp)
   135e4:	d0a7f615 	stw	r2,-24616(gp)
   135e8:	e0bff717 	ldw	r2,-36(fp)
   135ec:	e0bffa15 	stw	r2,-24(fp)
   135f0:	e0bffa17 	ldw	r2,-24(fp)
   135f4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   135f8:	e0bff503 	ldbu	r2,-44(fp)
   135fc:	10800058 	cmpnei	r2,r2,1
   13600:	1000011e 	bne	r2,zero,13608 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   13604:	000fab00 	call	fab0 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   13608:	e0bfff17 	ldw	r2,-4(fp)
   1360c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   13610:	e03ff615 	stw	zero,-40(fp)
             break;
   13614:	00000a06 	br	13640 <OSSemDel+0x228>
   13618:	e0bff717 	ldw	r2,-36(fp)
   1361c:	e0bffb15 	stw	r2,-20(fp)
   13620:	e0bffb17 	ldw	r2,-20(fp)
   13624:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   13628:	e0bfff17 	ldw	r2,-4(fp)
   1362c:	00c001c4 	movi	r3,7
   13630:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   13634:	e0bffd17 	ldw	r2,-12(fp)
   13638:	e0bff615 	stw	r2,-40(fp)
             break;
   1363c:	0001883a 	nop
    }
    return (pevent_return);
   13640:	e0bff617 	ldw	r2,-40(fp)
}
   13644:	e037883a 	mov	sp,fp
   13648:	dfc00117 	ldw	ra,4(sp)
   1364c:	df000017 	ldw	fp,0(sp)
   13650:	dec00204 	addi	sp,sp,8
   13654:	f800283a 	ret

00013658 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   13658:	defff504 	addi	sp,sp,-44
   1365c:	dfc00a15 	stw	ra,40(sp)
   13660:	df000915 	stw	fp,36(sp)
   13664:	df000904 	addi	fp,sp,36
   13668:	e13ffd15 	stw	r4,-12(fp)
   1366c:	2805883a 	mov	r2,r5
   13670:	e1bfff15 	stw	r6,-4(fp)
   13674:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13678:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1367c:	e0bfff17 	ldw	r2,-4(fp)
   13680:	10007226 	beq	r2,zero,1384c <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13684:	e0bffd17 	ldw	r2,-12(fp)
   13688:	1000041e 	bne	r2,zero,1369c <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   1368c:	e0bfff17 	ldw	r2,-4(fp)
   13690:	00c00104 	movi	r3,4
   13694:	10c00005 	stb	r3,0(r2)
        return;
   13698:	00006d06 	br	13850 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1369c:	e0bffd17 	ldw	r2,-12(fp)
   136a0:	10800003 	ldbu	r2,0(r2)
   136a4:	10803fcc 	andi	r2,r2,255
   136a8:	108000e0 	cmpeqi	r2,r2,3
   136ac:	1000041e 	bne	r2,zero,136c0 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   136b0:	e0bfff17 	ldw	r2,-4(fp)
   136b4:	00c00044 	movi	r3,1
   136b8:	10c00005 	stb	r3,0(r2)
        return;
   136bc:	00006406 	br	13850 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   136c0:	d0a7f703 	ldbu	r2,-24612(gp)
   136c4:	10803fcc 	andi	r2,r2,255
   136c8:	10000426 	beq	r2,zero,136dc <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   136cc:	e0bfff17 	ldw	r2,-4(fp)
   136d0:	00c00084 	movi	r3,2
   136d4:	10c00005 	stb	r3,0(r2)
        return;
   136d8:	00005d06 	br	13850 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   136dc:	d0a7e903 	ldbu	r2,-24668(gp)
   136e0:	10803fcc 	andi	r2,r2,255
   136e4:	10000426 	beq	r2,zero,136f8 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   136e8:	e0bfff17 	ldw	r2,-4(fp)
   136ec:	00c00344 	movi	r3,13
   136f0:	10c00005 	stb	r3,0(r2)
        return;
   136f4:	00005606 	br	13850 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   136f8:	0005303a 	rdctl	r2,status
   136fc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13700:	e0fffc17 	ldw	r3,-16(fp)
   13704:	00bfff84 	movi	r2,-2
   13708:	1884703a 	and	r2,r3,r2
   1370c:	1001703a 	wrctl	status,r2
  
  return context;
   13710:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   13714:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   13718:	e0bffd17 	ldw	r2,-12(fp)
   1371c:	1080020b 	ldhu	r2,8(r2)
   13720:	10bfffcc 	andi	r2,r2,65535
   13724:	10000d26 	beq	r2,zero,1375c <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   13728:	e0bffd17 	ldw	r2,-12(fp)
   1372c:	1080020b 	ldhu	r2,8(r2)
   13730:	10bfffc4 	addi	r2,r2,-1
   13734:	1007883a 	mov	r3,r2
   13738:	e0bffd17 	ldw	r2,-12(fp)
   1373c:	10c0020d 	sth	r3,8(r2)
   13740:	e0bff717 	ldw	r2,-36(fp)
   13744:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13748:	e0bff817 	ldw	r2,-32(fp)
   1374c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   13750:	e0bfff17 	ldw	r2,-4(fp)
   13754:	10000005 	stb	zero,0(r2)
        return;
   13758:	00003d06 	br	13850 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   1375c:	d0a7f817 	ldw	r2,-24608(gp)
   13760:	d0e7f817 	ldw	r3,-24608(gp)
   13764:	18c00c03 	ldbu	r3,48(r3)
   13768:	18c00054 	ori	r3,r3,1
   1376c:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   13770:	d0a7f817 	ldw	r2,-24608(gp)
   13774:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   13778:	d0a7f817 	ldw	r2,-24608(gp)
   1377c:	e0fffe0b 	ldhu	r3,-8(fp)
   13780:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   13784:	e13ffd17 	ldw	r4,-12(fp)
   13788:	000f1fc0 	call	f1fc <OS_EventTaskWait>
   1378c:	e0bff717 	ldw	r2,-36(fp)
   13790:	e0bffb15 	stw	r2,-20(fp)
   13794:	e0bffb17 	ldw	r2,-20(fp)
   13798:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   1379c:	000fab00 	call	fab0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   137a0:	0005303a 	rdctl	r2,status
   137a4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   137a8:	e0fff917 	ldw	r3,-28(fp)
   137ac:	00bfff84 	movi	r2,-2
   137b0:	1884703a 	and	r2,r3,r2
   137b4:	1001703a 	wrctl	status,r2
  
  return context;
   137b8:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   137bc:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   137c0:	d0a7f817 	ldw	r2,-24608(gp)
   137c4:	10800c43 	ldbu	r2,49(r2)
   137c8:	10803fcc 	andi	r2,r2,255
   137cc:	10000326 	beq	r2,zero,137dc <OSSemPend+0x184>
   137d0:	108000a0 	cmpeqi	r2,r2,2
   137d4:	1000041e 	bne	r2,zero,137e8 <OSSemPend+0x190>
   137d8:	00000706 	br	137f8 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   137dc:	e0bfff17 	ldw	r2,-4(fp)
   137e0:	10000005 	stb	zero,0(r2)
             break;
   137e4:	00000c06 	br	13818 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   137e8:	e0bfff17 	ldw	r2,-4(fp)
   137ec:	00c00384 	movi	r3,14
   137f0:	10c00005 	stb	r3,0(r2)
             break;
   137f4:	00000806 	br	13818 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   137f8:	d0a7f817 	ldw	r2,-24608(gp)
   137fc:	e17ffd17 	ldw	r5,-12(fp)
   13800:	1009883a 	mov	r4,r2
   13804:	000f45c0 	call	f45c <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   13808:	e0bfff17 	ldw	r2,-4(fp)
   1380c:	00c00284 	movi	r3,10
   13810:	10c00005 	stb	r3,0(r2)
             break;
   13814:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   13818:	d0a7f817 	ldw	r2,-24608(gp)
   1381c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   13820:	d0a7f817 	ldw	r2,-24608(gp)
   13824:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   13828:	d0a7f817 	ldw	r2,-24608(gp)
   1382c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   13830:	d0a7f817 	ldw	r2,-24608(gp)
   13834:	10000815 	stw	zero,32(r2)
   13838:	e0bff717 	ldw	r2,-36(fp)
   1383c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13840:	e0bffa17 	ldw	r2,-24(fp)
   13844:	1001703a 	wrctl	status,r2
   13848:	00000106 	br	13850 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   1384c:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
   13850:	e037883a 	mov	sp,fp
   13854:	dfc00117 	ldw	ra,4(sp)
   13858:	df000017 	ldw	fp,0(sp)
   1385c:	dec00204 	addi	sp,sp,8
   13860:	f800283a 	ret

00013864 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   13864:	defff604 	addi	sp,sp,-40
   13868:	dfc00915 	stw	ra,36(sp)
   1386c:	df000815 	stw	fp,32(sp)
   13870:	df000804 	addi	fp,sp,32
   13874:	e13ffd15 	stw	r4,-12(fp)
   13878:	2805883a 	mov	r2,r5
   1387c:	e1bfff15 	stw	r6,-4(fp)
   13880:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13884:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   13888:	e0bfff17 	ldw	r2,-4(fp)
   1388c:	1000021e 	bne	r2,zero,13898 <OSSemPendAbort+0x34>
        return (0);
   13890:	0005883a 	mov	r2,zero
   13894:	00004906 	br	139bc <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13898:	e0bffd17 	ldw	r2,-12(fp)
   1389c:	1000051e 	bne	r2,zero,138b4 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   138a0:	e0bfff17 	ldw	r2,-4(fp)
   138a4:	00c00104 	movi	r3,4
   138a8:	10c00005 	stb	r3,0(r2)
        return (0);
   138ac:	0005883a 	mov	r2,zero
   138b0:	00004206 	br	139bc <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   138b4:	e0bffd17 	ldw	r2,-12(fp)
   138b8:	10800003 	ldbu	r2,0(r2)
   138bc:	10803fcc 	andi	r2,r2,255
   138c0:	108000e0 	cmpeqi	r2,r2,3
   138c4:	1000051e 	bne	r2,zero,138dc <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   138c8:	e0bfff17 	ldw	r2,-4(fp)
   138cc:	00c00044 	movi	r3,1
   138d0:	10c00005 	stb	r3,0(r2)
        return (0);
   138d4:	0005883a 	mov	r2,zero
   138d8:	00003806 	br	139bc <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   138dc:	0005303a 	rdctl	r2,status
   138e0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   138e4:	e0fffc17 	ldw	r3,-16(fp)
   138e8:	00bfff84 	movi	r2,-2
   138ec:	1884703a 	and	r2,r3,r2
   138f0:	1001703a 	wrctl	status,r2
  
  return context;
   138f4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   138f8:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   138fc:	e0bffd17 	ldw	r2,-12(fp)
   13900:	10800283 	ldbu	r2,10(r2)
   13904:	10803fcc 	andi	r2,r2,255
   13908:	10002526 	beq	r2,zero,139a0 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   1390c:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   13910:	e0bffe03 	ldbu	r2,-8(fp)
   13914:	10800060 	cmpeqi	r2,r2,1
   13918:	10000e26 	beq	r2,zero,13954 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   1391c:	00000806 	br	13940 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   13920:	01c00084 	movi	r7,2
   13924:	01800044 	movi	r6,1
   13928:	000b883a 	mov	r5,zero
   1392c:	e13ffd17 	ldw	r4,-12(fp)
   13930:	000f0640 	call	f064 <OS_EventTaskRdy>
                     nbr_tasks++;
   13934:	e0bff803 	ldbu	r2,-32(fp)
   13938:	10800044 	addi	r2,r2,1
   1393c:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   13940:	e0bffd17 	ldw	r2,-12(fp)
   13944:	10800283 	ldbu	r2,10(r2)
   13948:	10803fcc 	andi	r2,r2,255
   1394c:	103ff41e 	bne	r2,zero,13920 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013920>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   13950:	00000906 	br	13978 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   13954:	01c00084 	movi	r7,2
   13958:	01800044 	movi	r6,1
   1395c:	000b883a 	mov	r5,zero
   13960:	e13ffd17 	ldw	r4,-12(fp)
   13964:	000f0640 	call	f064 <OS_EventTaskRdy>
                 nbr_tasks++;
   13968:	e0bff803 	ldbu	r2,-32(fp)
   1396c:	10800044 	addi	r2,r2,1
   13970:	e0bff805 	stb	r2,-32(fp)
                 break;
   13974:	0001883a 	nop
   13978:	e0bff917 	ldw	r2,-28(fp)
   1397c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13980:	e0bffa17 	ldw	r2,-24(fp)
   13984:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   13988:	000fab00 	call	fab0 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   1398c:	e0bfff17 	ldw	r2,-4(fp)
   13990:	00c00384 	movi	r3,14
   13994:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   13998:	e0bff803 	ldbu	r2,-32(fp)
   1399c:	00000706 	br	139bc <OSSemPendAbort+0x158>
   139a0:	e0bff917 	ldw	r2,-28(fp)
   139a4:	e0bffb15 	stw	r2,-20(fp)
   139a8:	e0bffb17 	ldw	r2,-20(fp)
   139ac:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   139b0:	e0bfff17 	ldw	r2,-4(fp)
   139b4:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   139b8:	0005883a 	mov	r2,zero
}
   139bc:	e037883a 	mov	sp,fp
   139c0:	dfc00117 	ldw	ra,4(sp)
   139c4:	df000017 	ldw	fp,0(sp)
   139c8:	dec00204 	addi	sp,sp,8
   139cc:	f800283a 	ret

000139d0 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   139d0:	defff804 	addi	sp,sp,-32
   139d4:	dfc00715 	stw	ra,28(sp)
   139d8:	df000615 	stw	fp,24(sp)
   139dc:	df000604 	addi	fp,sp,24
   139e0:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   139e4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   139e8:	e0bfff17 	ldw	r2,-4(fp)
   139ec:	1000021e 	bne	r2,zero,139f8 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   139f0:	00800104 	movi	r2,4
   139f4:	00003506 	br	13acc <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   139f8:	e0bfff17 	ldw	r2,-4(fp)
   139fc:	10800003 	ldbu	r2,0(r2)
   13a00:	10803fcc 	andi	r2,r2,255
   13a04:	108000e0 	cmpeqi	r2,r2,3
   13a08:	1000021e 	bne	r2,zero,13a14 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   13a0c:	00800044 	movi	r2,1
   13a10:	00002e06 	br	13acc <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13a14:	0005303a 	rdctl	r2,status
   13a18:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13a1c:	e0fffe17 	ldw	r3,-8(fp)
   13a20:	00bfff84 	movi	r2,-2
   13a24:	1884703a 	and	r2,r3,r2
   13a28:	1001703a 	wrctl	status,r2
  
  return context;
   13a2c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   13a30:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   13a34:	e0bfff17 	ldw	r2,-4(fp)
   13a38:	10800283 	ldbu	r2,10(r2)
   13a3c:	10803fcc 	andi	r2,r2,255
   13a40:	10000c26 	beq	r2,zero,13a74 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   13a44:	000f883a 	mov	r7,zero
   13a48:	01800044 	movi	r6,1
   13a4c:	000b883a 	mov	r5,zero
   13a50:	e13fff17 	ldw	r4,-4(fp)
   13a54:	000f0640 	call	f064 <OS_EventTaskRdy>
   13a58:	e0bffa17 	ldw	r2,-24(fp)
   13a5c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13a60:	e0bffb17 	ldw	r2,-20(fp)
   13a64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   13a68:	000fab00 	call	fab0 <OS_Sched>
        return (OS_ERR_NONE);
   13a6c:	0005883a 	mov	r2,zero
   13a70:	00001606 	br	13acc <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   13a74:	e0bfff17 	ldw	r2,-4(fp)
   13a78:	1080020b 	ldhu	r2,8(r2)
   13a7c:	10ffffcc 	andi	r3,r2,65535
   13a80:	00bfffd4 	movui	r2,65535
   13a84:	18800c26 	beq	r3,r2,13ab8 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   13a88:	e0bfff17 	ldw	r2,-4(fp)
   13a8c:	1080020b 	ldhu	r2,8(r2)
   13a90:	10800044 	addi	r2,r2,1
   13a94:	1007883a 	mov	r3,r2
   13a98:	e0bfff17 	ldw	r2,-4(fp)
   13a9c:	10c0020d 	sth	r3,8(r2)
   13aa0:	e0bffa17 	ldw	r2,-24(fp)
   13aa4:	e0bffc15 	stw	r2,-16(fp)
   13aa8:	e0bffc17 	ldw	r2,-16(fp)
   13aac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   13ab0:	0005883a 	mov	r2,zero
   13ab4:	00000506 	br	13acc <OSSemPost+0xfc>
   13ab8:	e0bffa17 	ldw	r2,-24(fp)
   13abc:	e0bffd15 	stw	r2,-12(fp)
   13ac0:	e0bffd17 	ldw	r2,-12(fp)
   13ac4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   13ac8:	00800c84 	movi	r2,50
}
   13acc:	e037883a 	mov	sp,fp
   13ad0:	dfc00117 	ldw	ra,4(sp)
   13ad4:	df000017 	ldw	fp,0(sp)
   13ad8:	dec00204 	addi	sp,sp,8
   13adc:	f800283a 	ret

00013ae0 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   13ae0:	defff704 	addi	sp,sp,-36
   13ae4:	df000815 	stw	fp,32(sp)
   13ae8:	df000804 	addi	fp,sp,32
   13aec:	e13ffe15 	stw	r4,-8(fp)
   13af0:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13af4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   13af8:	e0bffe17 	ldw	r2,-8(fp)
   13afc:	1000021e 	bne	r2,zero,13b08 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   13b00:	00800104 	movi	r2,4
   13b04:	00003606 	br	13be0 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   13b08:	e0bfff17 	ldw	r2,-4(fp)
   13b0c:	1000021e 	bne	r2,zero,13b18 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   13b10:	00800244 	movi	r2,9
   13b14:	00003206 	br	13be0 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   13b18:	e0bffe17 	ldw	r2,-8(fp)
   13b1c:	10800003 	ldbu	r2,0(r2)
   13b20:	10803fcc 	andi	r2,r2,255
   13b24:	108000e0 	cmpeqi	r2,r2,3
   13b28:	1000021e 	bne	r2,zero,13b34 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   13b2c:	00800044 	movi	r2,1
   13b30:	00002b06 	br	13be0 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13b34:	0005303a 	rdctl	r2,status
   13b38:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13b3c:	e0fffd17 	ldw	r3,-12(fp)
   13b40:	00bfff84 	movi	r2,-2
   13b44:	1884703a 	and	r2,r3,r2
   13b48:	1001703a 	wrctl	status,r2
  
  return context;
   13b4c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   13b50:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   13b54:	e0bffe17 	ldw	r2,-8(fp)
   13b58:	10c00283 	ldbu	r3,10(r2)
   13b5c:	e0bfff17 	ldw	r2,-4(fp)
   13b60:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   13b64:	e0bffe17 	ldw	r2,-8(fp)
   13b68:	108002c4 	addi	r2,r2,11
   13b6c:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   13b70:	e0bfff17 	ldw	r2,-4(fp)
   13b74:	10800084 	addi	r2,r2,2
   13b78:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   13b7c:	e03ffa05 	stb	zero,-24(fp)
   13b80:	00000b06 	br	13bb0 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   13b84:	e0bff917 	ldw	r2,-28(fp)
   13b88:	10c00044 	addi	r3,r2,1
   13b8c:	e0fff915 	stw	r3,-28(fp)
   13b90:	e0fff817 	ldw	r3,-32(fp)
   13b94:	19000044 	addi	r4,r3,1
   13b98:	e13ff815 	stw	r4,-32(fp)
   13b9c:	18c00003 	ldbu	r3,0(r3)
   13ba0:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   13ba4:	e0bffa03 	ldbu	r2,-24(fp)
   13ba8:	10800044 	addi	r2,r2,1
   13bac:	e0bffa05 	stb	r2,-24(fp)
   13bb0:	e0bffa03 	ldbu	r2,-24(fp)
   13bb4:	108000f0 	cmpltui	r2,r2,3
   13bb8:	103ff21e 	bne	r2,zero,13b84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013b84>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   13bbc:	e0bffe17 	ldw	r2,-8(fp)
   13bc0:	10c0020b 	ldhu	r3,8(r2)
   13bc4:	e0bfff17 	ldw	r2,-4(fp)
   13bc8:	10c0000d 	sth	r3,0(r2)
   13bcc:	e0bffb17 	ldw	r2,-20(fp)
   13bd0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13bd4:	e0bffc17 	ldw	r2,-16(fp)
   13bd8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   13bdc:	0005883a 	mov	r2,zero
}
   13be0:	e037883a 	mov	sp,fp
   13be4:	df000017 	ldw	fp,0(sp)
   13be8:	dec00104 	addi	sp,sp,4
   13bec:	f800283a 	ret

00013bf0 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   13bf0:	defff904 	addi	sp,sp,-28
   13bf4:	df000615 	stw	fp,24(sp)
   13bf8:	df000604 	addi	fp,sp,24
   13bfc:	e13ffd15 	stw	r4,-12(fp)
   13c00:	2805883a 	mov	r2,r5
   13c04:	e1bfff15 	stw	r6,-4(fp)
   13c08:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13c0c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   13c10:	e0bfff17 	ldw	r2,-4(fp)
   13c14:	10003126 	beq	r2,zero,13cdc <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13c18:	e0bffd17 	ldw	r2,-12(fp)
   13c1c:	1000041e 	bne	r2,zero,13c30 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   13c20:	e0bfff17 	ldw	r2,-4(fp)
   13c24:	00c00104 	movi	r3,4
   13c28:	10c00005 	stb	r3,0(r2)
        return;
   13c2c:	00002c06 	br	13ce0 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   13c30:	e0bffd17 	ldw	r2,-12(fp)
   13c34:	10800003 	ldbu	r2,0(r2)
   13c38:	10803fcc 	andi	r2,r2,255
   13c3c:	108000e0 	cmpeqi	r2,r2,3
   13c40:	1000041e 	bne	r2,zero,13c54 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
   13c44:	e0bfff17 	ldw	r2,-4(fp)
   13c48:	00c00044 	movi	r3,1
   13c4c:	10c00005 	stb	r3,0(r2)
        return;
   13c50:	00002306 	br	13ce0 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13c54:	0005303a 	rdctl	r2,status
   13c58:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13c5c:	e0fffc17 	ldw	r3,-16(fp)
   13c60:	00bfff84 	movi	r2,-2
   13c64:	1884703a 	and	r2,r3,r2
   13c68:	1001703a 	wrctl	status,r2
  
  return context;
   13c6c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   13c70:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   13c74:	e0bfff17 	ldw	r2,-4(fp)
   13c78:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   13c7c:	e0bffd17 	ldw	r2,-12(fp)
   13c80:	1080020b 	ldhu	r2,8(r2)
   13c84:	10bfffcc 	andi	r2,r2,65535
   13c88:	10000426 	beq	r2,zero,13c9c <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   13c8c:	e0bffd17 	ldw	r2,-12(fp)
   13c90:	e0fffe0b 	ldhu	r3,-8(fp)
   13c94:	10c0020d 	sth	r3,8(r2)
   13c98:	00000b06 	br	13cc8 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   13c9c:	e0bffd17 	ldw	r2,-12(fp)
   13ca0:	10800283 	ldbu	r2,10(r2)
   13ca4:	10803fcc 	andi	r2,r2,255
   13ca8:	1000041e 	bne	r2,zero,13cbc <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   13cac:	e0bffd17 	ldw	r2,-12(fp)
   13cb0:	e0fffe0b 	ldhu	r3,-8(fp)
   13cb4:	10c0020d 	sth	r3,8(r2)
   13cb8:	00000306 	br	13cc8 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   13cbc:	e0bfff17 	ldw	r2,-4(fp)
   13cc0:	00c01244 	movi	r3,73
   13cc4:	10c00005 	stb	r3,0(r2)
   13cc8:	e0bffa17 	ldw	r2,-24(fp)
   13ccc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13cd0:	e0bffb17 	ldw	r2,-20(fp)
   13cd4:	1001703a 	wrctl	status,r2
   13cd8:	00000106 	br	13ce0 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   13cdc:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
   13ce0:	e037883a 	mov	sp,fp
   13ce4:	df000017 	ldw	fp,0(sp)
   13ce8:	dec00104 	addi	sp,sp,4
   13cec:	f800283a 	ret

00013cf0 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   13cf0:	defff104 	addi	sp,sp,-60
   13cf4:	dfc00e15 	stw	ra,56(sp)
   13cf8:	df000d15 	stw	fp,52(sp)
   13cfc:	df000d04 	addi	fp,sp,52
   13d00:	2007883a 	mov	r3,r4
   13d04:	2805883a 	mov	r2,r5
   13d08:	e0fffe05 	stb	r3,-8(fp)
   13d0c:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   13d10:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   13d14:	e0bffe03 	ldbu	r2,-8(fp)
   13d18:	10800530 	cmpltui	r2,r2,20
   13d1c:	1000051e 	bne	r2,zero,13d34 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   13d20:	e0bffe03 	ldbu	r2,-8(fp)
   13d24:	10803fe0 	cmpeqi	r2,r2,255
   13d28:	1000021e 	bne	r2,zero,13d34 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   13d2c:	00800a84 	movi	r2,42
   13d30:	00012606 	br	141cc <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   13d34:	e0bfff03 	ldbu	r2,-4(fp)
   13d38:	10800530 	cmpltui	r2,r2,20
   13d3c:	1000021e 	bne	r2,zero,13d48 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   13d40:	00800a84 	movi	r2,42
   13d44:	00012106 	br	141cc <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13d48:	0005303a 	rdctl	r2,status
   13d4c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13d50:	e0fffd17 	ldw	r3,-12(fp)
   13d54:	00bfff84 	movi	r2,-2
   13d58:	1884703a 	and	r2,r3,r2
   13d5c:	1001703a 	wrctl	status,r2
  
  return context;
   13d60:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   13d64:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   13d68:	e0ffff03 	ldbu	r3,-4(fp)
   13d6c:	008000b4 	movhi	r2,2
   13d70:	109cd004 	addi	r2,r2,29504
   13d74:	18c7883a 	add	r3,r3,r3
   13d78:	18c7883a 	add	r3,r3,r3
   13d7c:	10c5883a 	add	r2,r2,r3
   13d80:	10800017 	ldw	r2,0(r2)
   13d84:	10000626 	beq	r2,zero,13da0 <OSTaskChangePrio+0xb0>
   13d88:	e0bff517 	ldw	r2,-44(fp)
   13d8c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13d90:	e0bff617 	ldw	r2,-40(fp)
   13d94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   13d98:	00800a04 	movi	r2,40
   13d9c:	00010b06 	br	141cc <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   13da0:	e0bffe03 	ldbu	r2,-8(fp)
   13da4:	10803fd8 	cmpnei	r2,r2,255
   13da8:	1000031e 	bne	r2,zero,13db8 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   13dac:	d0a7f817 	ldw	r2,-24608(gp)
   13db0:	10800c83 	ldbu	r2,50(r2)
   13db4:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   13db8:	e0fffe03 	ldbu	r3,-8(fp)
   13dbc:	008000b4 	movhi	r2,2
   13dc0:	109cd004 	addi	r2,r2,29504
   13dc4:	18c7883a 	add	r3,r3,r3
   13dc8:	18c7883a 	add	r3,r3,r3
   13dcc:	10c5883a 	add	r2,r2,r3
   13dd0:	10800017 	ldw	r2,0(r2)
   13dd4:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   13dd8:	e0bff817 	ldw	r2,-32(fp)
   13ddc:	1000061e 	bne	r2,zero,13df8 <OSTaskChangePrio+0x108>
   13de0:	e0bff517 	ldw	r2,-44(fp)
   13de4:	e0bff715 	stw	r2,-36(fp)
   13de8:	e0bff717 	ldw	r2,-36(fp)
   13dec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   13df0:	00800a44 	movi	r2,41
   13df4:	0000f506 	br	141cc <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   13df8:	e0bff817 	ldw	r2,-32(fp)
   13dfc:	10800058 	cmpnei	r2,r2,1
   13e00:	1000061e 	bne	r2,zero,13e1c <OSTaskChangePrio+0x12c>
   13e04:	e0bff517 	ldw	r2,-44(fp)
   13e08:	e0bff915 	stw	r2,-28(fp)
   13e0c:	e0bff917 	ldw	r2,-28(fp)
   13e10:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   13e14:	008010c4 	movi	r2,67
   13e18:	0000ec06 	br	141cc <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   13e1c:	e0bfff03 	ldbu	r2,-4(fp)
   13e20:	1004d0fa 	srli	r2,r2,3
   13e24:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   13e28:	e0bfff03 	ldbu	r2,-4(fp)
   13e2c:	108001cc 	andi	r2,r2,7
   13e30:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
   13e34:	e0bffb03 	ldbu	r2,-20(fp)
   13e38:	00c00044 	movi	r3,1
   13e3c:	1884983a 	sll	r2,r3,r2
   13e40:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
   13e44:	e0bffb43 	ldbu	r2,-19(fp)
   13e48:	00c00044 	movi	r3,1
   13e4c:	1884983a 	sll	r2,r3,r2
   13e50:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   13e54:	e0fffe03 	ldbu	r3,-8(fp)
   13e58:	008000b4 	movhi	r2,2
   13e5c:	109cd004 	addi	r2,r2,29504
   13e60:	18c7883a 	add	r3,r3,r3
   13e64:	18c7883a 	add	r3,r3,r3
   13e68:	10c5883a 	add	r2,r2,r3
   13e6c:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   13e70:	e0ffff03 	ldbu	r3,-4(fp)
   13e74:	008000b4 	movhi	r2,2
   13e78:	109cd004 	addi	r2,r2,29504
   13e7c:	18c7883a 	add	r3,r3,r3
   13e80:	18c7883a 	add	r3,r3,r3
   13e84:	10c5883a 	add	r2,r2,r3
   13e88:	e0fff817 	ldw	r3,-32(fp)
   13e8c:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   13e90:	e0bff817 	ldw	r2,-32(fp)
   13e94:	10800d03 	ldbu	r2,52(r2)
   13e98:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
   13e9c:	e0bff817 	ldw	r2,-32(fp)
   13ea0:	10800d83 	ldbu	r2,54(r2)
   13ea4:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   13ea8:	e0bff817 	ldw	r2,-32(fp)
   13eac:	10800d43 	ldbu	r2,53(r2)
   13eb0:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   13eb4:	e0fffc03 	ldbu	r3,-16(fp)
   13eb8:	d0a7f544 	addi	r2,gp,-24619
   13ebc:	1885883a 	add	r2,r3,r2
   13ec0:	10c00003 	ldbu	r3,0(r2)
   13ec4:	e0bffc83 	ldbu	r2,-14(fp)
   13ec8:	1884703a 	and	r2,r3,r2
   13ecc:	10803fcc 	andi	r2,r2,255
   13ed0:	10002826 	beq	r2,zero,13f74 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
   13ed4:	e0fffc03 	ldbu	r3,-16(fp)
   13ed8:	e13ffc03 	ldbu	r4,-16(fp)
   13edc:	d0a7f544 	addi	r2,gp,-24619
   13ee0:	2085883a 	add	r2,r4,r2
   13ee4:	10800003 	ldbu	r2,0(r2)
   13ee8:	1009883a 	mov	r4,r2
   13eec:	e0bffc83 	ldbu	r2,-14(fp)
   13ef0:	0084303a 	nor	r2,zero,r2
   13ef4:	2084703a 	and	r2,r4,r2
   13ef8:	1009883a 	mov	r4,r2
   13efc:	d0a7f544 	addi	r2,gp,-24619
   13f00:	1885883a 	add	r2,r3,r2
   13f04:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   13f08:	e0fffc03 	ldbu	r3,-16(fp)
   13f0c:	d0a7f544 	addi	r2,gp,-24619
   13f10:	1885883a 	add	r2,r3,r2
   13f14:	10800003 	ldbu	r2,0(r2)
   13f18:	10803fcc 	andi	r2,r2,255
   13f1c:	1000061e 	bne	r2,zero,13f38 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
   13f20:	e0bffc43 	ldbu	r2,-15(fp)
   13f24:	0084303a 	nor	r2,zero,r2
   13f28:	1007883a 	mov	r3,r2
   13f2c:	d0a7f503 	ldbu	r2,-24620(gp)
   13f30:	1884703a 	and	r2,r3,r2
   13f34:	d0a7f505 	stb	r2,-24620(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   13f38:	d0e7f503 	ldbu	r3,-24620(gp)
   13f3c:	e0bffb83 	ldbu	r2,-18(fp)
   13f40:	1884b03a 	or	r2,r3,r2
   13f44:	d0a7f505 	stb	r2,-24620(gp)
         OSRdyTbl[y_new] |= bitx_new;
   13f48:	e0fffb03 	ldbu	r3,-20(fp)
   13f4c:	e13ffb03 	ldbu	r4,-20(fp)
   13f50:	d0a7f544 	addi	r2,gp,-24619
   13f54:	2085883a 	add	r2,r4,r2
   13f58:	11000003 	ldbu	r4,0(r2)
   13f5c:	e0bffbc3 	ldbu	r2,-17(fp)
   13f60:	2084b03a 	or	r2,r4,r2
   13f64:	1009883a 	mov	r4,r2
   13f68:	d0a7f544 	addi	r2,gp,-24619
   13f6c:	1885883a 	add	r2,r3,r2
   13f70:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   13f74:	e0bff817 	ldw	r2,-32(fp)
   13f78:	10800717 	ldw	r2,28(r2)
   13f7c:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   13f80:	e0bff317 	ldw	r2,-52(fp)
   13f84:	10003326 	beq	r2,zero,14054 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   13f88:	e0bffc03 	ldbu	r2,-16(fp)
   13f8c:	e0fffc03 	ldbu	r3,-16(fp)
   13f90:	e13ff317 	ldw	r4,-52(fp)
   13f94:	20c7883a 	add	r3,r4,r3
   13f98:	18c002c4 	addi	r3,r3,11
   13f9c:	18c00003 	ldbu	r3,0(r3)
   13fa0:	1809883a 	mov	r4,r3
   13fa4:	e0fffc83 	ldbu	r3,-14(fp)
   13fa8:	00c6303a 	nor	r3,zero,r3
   13fac:	20c6703a 	and	r3,r4,r3
   13fb0:	1809883a 	mov	r4,r3
   13fb4:	e0fff317 	ldw	r3,-52(fp)
   13fb8:	1885883a 	add	r2,r3,r2
   13fbc:	108002c4 	addi	r2,r2,11
   13fc0:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   13fc4:	e0bffc03 	ldbu	r2,-16(fp)
   13fc8:	e0fff317 	ldw	r3,-52(fp)
   13fcc:	1885883a 	add	r2,r3,r2
   13fd0:	108002c4 	addi	r2,r2,11
   13fd4:	10800003 	ldbu	r2,0(r2)
   13fd8:	10803fcc 	andi	r2,r2,255
   13fdc:	1000091e 	bne	r2,zero,14004 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
   13fe0:	e0bff317 	ldw	r2,-52(fp)
   13fe4:	10800283 	ldbu	r2,10(r2)
   13fe8:	1007883a 	mov	r3,r2
   13fec:	e0bffc43 	ldbu	r2,-15(fp)
   13ff0:	0084303a 	nor	r2,zero,r2
   13ff4:	1884703a 	and	r2,r3,r2
   13ff8:	1007883a 	mov	r3,r2
   13ffc:	e0bff317 	ldw	r2,-52(fp)
   14000:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   14004:	e0bff317 	ldw	r2,-52(fp)
   14008:	10c00283 	ldbu	r3,10(r2)
   1400c:	e0bffb83 	ldbu	r2,-18(fp)
   14010:	1884b03a 	or	r2,r3,r2
   14014:	1007883a 	mov	r3,r2
   14018:	e0bff317 	ldw	r2,-52(fp)
   1401c:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   14020:	e0bffb03 	ldbu	r2,-20(fp)
   14024:	e0fffb03 	ldbu	r3,-20(fp)
   14028:	e13ff317 	ldw	r4,-52(fp)
   1402c:	20c7883a 	add	r3,r4,r3
   14030:	18c002c4 	addi	r3,r3,11
   14034:	19000003 	ldbu	r4,0(r3)
   14038:	e0fffbc3 	ldbu	r3,-17(fp)
   1403c:	20c6b03a 	or	r3,r4,r3
   14040:	1809883a 	mov	r4,r3
   14044:	e0fff317 	ldw	r3,-52(fp)
   14048:	1885883a 	add	r2,r3,r2
   1404c:	108002c4 	addi	r2,r2,11
   14050:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   14054:	e0bff817 	ldw	r2,-32(fp)
   14058:	10800817 	ldw	r2,32(r2)
   1405c:	10004226 	beq	r2,zero,14168 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
   14060:	e0bff817 	ldw	r2,-32(fp)
   14064:	10800817 	ldw	r2,32(r2)
   14068:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   1406c:	e0bff417 	ldw	r2,-48(fp)
   14070:	10800017 	ldw	r2,0(r2)
   14074:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   14078:	00003906 	br	14160 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   1407c:	e0bffc03 	ldbu	r2,-16(fp)
   14080:	e0fffc03 	ldbu	r3,-16(fp)
   14084:	e13ff317 	ldw	r4,-52(fp)
   14088:	20c7883a 	add	r3,r4,r3
   1408c:	18c002c4 	addi	r3,r3,11
   14090:	18c00003 	ldbu	r3,0(r3)
   14094:	1809883a 	mov	r4,r3
   14098:	e0fffc83 	ldbu	r3,-14(fp)
   1409c:	00c6303a 	nor	r3,zero,r3
   140a0:	20c6703a 	and	r3,r4,r3
   140a4:	1809883a 	mov	r4,r3
   140a8:	e0fff317 	ldw	r3,-52(fp)
   140ac:	1885883a 	add	r2,r3,r2
   140b0:	108002c4 	addi	r2,r2,11
   140b4:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   140b8:	e0bffc03 	ldbu	r2,-16(fp)
   140bc:	e0fff317 	ldw	r3,-52(fp)
   140c0:	1885883a 	add	r2,r3,r2
   140c4:	108002c4 	addi	r2,r2,11
   140c8:	10800003 	ldbu	r2,0(r2)
   140cc:	10803fcc 	andi	r2,r2,255
   140d0:	1000091e 	bne	r2,zero,140f8 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
   140d4:	e0bff317 	ldw	r2,-52(fp)
   140d8:	10800283 	ldbu	r2,10(r2)
   140dc:	1007883a 	mov	r3,r2
   140e0:	e0bffc43 	ldbu	r2,-15(fp)
   140e4:	0084303a 	nor	r2,zero,r2
   140e8:	1884703a 	and	r2,r3,r2
   140ec:	1007883a 	mov	r3,r2
   140f0:	e0bff317 	ldw	r2,-52(fp)
   140f4:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   140f8:	e0bff317 	ldw	r2,-52(fp)
   140fc:	10c00283 	ldbu	r3,10(r2)
   14100:	e0bffb83 	ldbu	r2,-18(fp)
   14104:	1884b03a 	or	r2,r3,r2
   14108:	1007883a 	mov	r3,r2
   1410c:	e0bff317 	ldw	r2,-52(fp)
   14110:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   14114:	e0bffb03 	ldbu	r2,-20(fp)
   14118:	e0fffb03 	ldbu	r3,-20(fp)
   1411c:	e13ff317 	ldw	r4,-52(fp)
   14120:	20c7883a 	add	r3,r4,r3
   14124:	18c002c4 	addi	r3,r3,11
   14128:	19000003 	ldbu	r4,0(r3)
   1412c:	e0fffbc3 	ldbu	r3,-17(fp)
   14130:	20c6b03a 	or	r3,r4,r3
   14134:	1809883a 	mov	r4,r3
   14138:	e0fff317 	ldw	r3,-52(fp)
   1413c:	1885883a 	add	r2,r3,r2
   14140:	108002c4 	addi	r2,r2,11
   14144:	11000005 	stb	r4,0(r2)
            pevents++;
   14148:	e0bff417 	ldw	r2,-48(fp)
   1414c:	10800104 	addi	r2,r2,4
   14150:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   14154:	e0bff417 	ldw	r2,-48(fp)
   14158:	10800017 	ldw	r2,0(r2)
   1415c:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   14160:	e0bff317 	ldw	r2,-52(fp)
   14164:	103fc51e 	bne	r2,zero,1407c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701407c>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   14168:	e0bff817 	ldw	r2,-32(fp)
   1416c:	e0ffff03 	ldbu	r3,-4(fp)
   14170:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   14174:	e0bff817 	ldw	r2,-32(fp)
   14178:	e0fffb03 	ldbu	r3,-20(fp)
   1417c:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   14180:	e0bff817 	ldw	r2,-32(fp)
   14184:	e0fffb43 	ldbu	r3,-19(fp)
   14188:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   1418c:	e0bff817 	ldw	r2,-32(fp)
   14190:	e0fffb83 	ldbu	r3,-18(fp)
   14194:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   14198:	e0bff817 	ldw	r2,-32(fp)
   1419c:	e0fffbc3 	ldbu	r3,-17(fp)
   141a0:	10c00d45 	stb	r3,53(r2)
   141a4:	e0bff517 	ldw	r2,-44(fp)
   141a8:	e0bffa15 	stw	r2,-24(fp)
   141ac:	e0bffa17 	ldw	r2,-24(fp)
   141b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   141b4:	d0a7e943 	ldbu	r2,-24667(gp)
   141b8:	10803fcc 	andi	r2,r2,255
   141bc:	10800058 	cmpnei	r2,r2,1
   141c0:	1000011e 	bne	r2,zero,141c8 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
   141c4:	000fab00 	call	fab0 <OS_Sched>
    }
    return (OS_ERR_NONE);
   141c8:	0005883a 	mov	r2,zero
}
   141cc:	e037883a 	mov	sp,fp
   141d0:	dfc00117 	ldw	ra,4(sp)
   141d4:	df000017 	ldw	fp,0(sp)
   141d8:	dec00204 	addi	sp,sp,8
   141dc:	f800283a 	ret

000141e0 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   141e0:	deffee04 	addi	sp,sp,-72
   141e4:	dfc01115 	stw	ra,68(sp)
   141e8:	df001015 	stw	fp,64(sp)
   141ec:	df001004 	addi	fp,sp,64
   141f0:	e13ffc15 	stw	r4,-16(fp)
   141f4:	e17ffd15 	stw	r5,-12(fp)
   141f8:	e1bffe15 	stw	r6,-8(fp)
   141fc:	3805883a 	mov	r2,r7
   14200:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   14204:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   14208:	e0bfff03 	ldbu	r2,-4(fp)
   1420c:	10800570 	cmpltui	r2,r2,21
   14210:	1000021e 	bne	r2,zero,1421c <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   14214:	00800a84 	movi	r2,42
   14218:	00005706 	br	14378 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1421c:	0005303a 	rdctl	r2,status
   14220:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14224:	e0fffb17 	ldw	r3,-20(fp)
   14228:	00bfff84 	movi	r2,-2
   1422c:	1884703a 	and	r2,r3,r2
   14230:	1001703a 	wrctl	status,r2
  
  return context;
   14234:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14238:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   1423c:	d0a7f703 	ldbu	r2,-24612(gp)
   14240:	10803fcc 	andi	r2,r2,255
   14244:	10000626 	beq	r2,zero,14260 <OSTaskCreate+0x80>
   14248:	e0bff317 	ldw	r2,-52(fp)
   1424c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14250:	e0bff417 	ldw	r2,-48(fp)
   14254:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   14258:	00800f04 	movi	r2,60
   1425c:	00004606 	br	14378 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   14260:	e0ffff03 	ldbu	r3,-4(fp)
   14264:	008000b4 	movhi	r2,2
   14268:	109cd004 	addi	r2,r2,29504
   1426c:	18c7883a 	add	r3,r3,r3
   14270:	18c7883a 	add	r3,r3,r3
   14274:	10c5883a 	add	r2,r2,r3
   14278:	10800017 	ldw	r2,0(r2)
   1427c:	1000391e 	bne	r2,zero,14364 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   14280:	e0ffff03 	ldbu	r3,-4(fp)
   14284:	008000b4 	movhi	r2,2
   14288:	109cd004 	addi	r2,r2,29504
   1428c:	18c7883a 	add	r3,r3,r3
   14290:	18c7883a 	add	r3,r3,r3
   14294:	10c5883a 	add	r2,r2,r3
   14298:	00c00044 	movi	r3,1
   1429c:	10c00015 	stw	r3,0(r2)
   142a0:	e0bff317 	ldw	r2,-52(fp)
   142a4:	e0bff515 	stw	r2,-44(fp)
   142a8:	e0bff517 	ldw	r2,-44(fp)
   142ac:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   142b0:	000f883a 	mov	r7,zero
   142b4:	e1bffe17 	ldw	r6,-8(fp)
   142b8:	e17ffd17 	ldw	r5,-12(fp)
   142bc:	e13ffc17 	ldw	r4,-16(fp)
   142c0:	0018f580 	call	18f58 <OSTaskStkInit>
   142c4:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   142c8:	e0bfff03 	ldbu	r2,-4(fp)
   142cc:	d8000215 	stw	zero,8(sp)
   142d0:	d8000115 	stw	zero,4(sp)
   142d4:	d8000015 	stw	zero,0(sp)
   142d8:	000f883a 	mov	r7,zero
   142dc:	000d883a 	mov	r6,zero
   142e0:	e17ff717 	ldw	r5,-36(fp)
   142e4:	1009883a 	mov	r4,r2
   142e8:	000fec00 	call	fec0 <OS_TCBInit>
   142ec:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
   142f0:	e0bff803 	ldbu	r2,-32(fp)
   142f4:	1000061e 	bne	r2,zero,14310 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   142f8:	d0a7e943 	ldbu	r2,-24667(gp)
   142fc:	10803fcc 	andi	r2,r2,255
   14300:	10800058 	cmpnei	r2,r2,1
   14304:	1000151e 	bne	r2,zero,1435c <OSTaskCreate+0x17c>
                OS_Sched();
   14308:	000fab00 	call	fab0 <OS_Sched>
   1430c:	00001306 	br	1435c <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14310:	0005303a 	rdctl	r2,status
   14314:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14318:	e0fffa17 	ldw	r3,-24(fp)
   1431c:	00bfff84 	movi	r2,-2
   14320:	1884703a 	and	r2,r3,r2
   14324:	1001703a 	wrctl	status,r2
  
  return context;
   14328:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   1432c:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   14330:	e0ffff03 	ldbu	r3,-4(fp)
   14334:	008000b4 	movhi	r2,2
   14338:	109cd004 	addi	r2,r2,29504
   1433c:	18c7883a 	add	r3,r3,r3
   14340:	18c7883a 	add	r3,r3,r3
   14344:	10c5883a 	add	r2,r2,r3
   14348:	10000015 	stw	zero,0(r2)
   1434c:	e0bff317 	ldw	r2,-52(fp)
   14350:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14354:	e0bff617 	ldw	r2,-40(fp)
   14358:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   1435c:	e0bff803 	ldbu	r2,-32(fp)
   14360:	00000506 	br	14378 <OSTaskCreate+0x198>
   14364:	e0bff317 	ldw	r2,-52(fp)
   14368:	e0bff915 	stw	r2,-28(fp)
   1436c:	e0bff917 	ldw	r2,-28(fp)
   14370:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   14374:	00800a04 	movi	r2,40
}
   14378:	e037883a 	mov	sp,fp
   1437c:	dfc00117 	ldw	ra,4(sp)
   14380:	df000017 	ldw	fp,0(sp)
   14384:	dec00204 	addi	sp,sp,8
   14388:	f800283a 	ret

0001438c <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   1438c:	deffec04 	addi	sp,sp,-80
   14390:	dfc01315 	stw	ra,76(sp)
   14394:	df001215 	stw	fp,72(sp)
   14398:	df001204 	addi	fp,sp,72
   1439c:	e13ffa15 	stw	r4,-24(fp)
   143a0:	e17ffb15 	stw	r5,-20(fp)
   143a4:	e1bffc15 	stw	r6,-16(fp)
   143a8:	3809883a 	mov	r4,r7
   143ac:	e0c00217 	ldw	r3,8(fp)
   143b0:	e0800617 	ldw	r2,24(fp)
   143b4:	e13ffd05 	stb	r4,-12(fp)
   143b8:	e0fffe0d 	sth	r3,-8(fp)
   143bc:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   143c0:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   143c4:	e0bffd03 	ldbu	r2,-12(fp)
   143c8:	10800570 	cmpltui	r2,r2,21
   143cc:	1000021e 	bne	r2,zero,143d8 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   143d0:	00800a84 	movi	r2,42
   143d4:	00006106 	br	1455c <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   143d8:	0005303a 	rdctl	r2,status
   143dc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   143e0:	e0fff917 	ldw	r3,-28(fp)
   143e4:	00bfff84 	movi	r2,-2
   143e8:	1884703a 	and	r2,r3,r2
   143ec:	1001703a 	wrctl	status,r2
  
  return context;
   143f0:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   143f4:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   143f8:	d0a7f703 	ldbu	r2,-24612(gp)
   143fc:	10803fcc 	andi	r2,r2,255
   14400:	10000626 	beq	r2,zero,1441c <OSTaskCreateExt+0x90>
   14404:	e0bff117 	ldw	r2,-60(fp)
   14408:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1440c:	e0bff217 	ldw	r2,-56(fp)
   14410:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   14414:	00800f04 	movi	r2,60
   14418:	00005006 	br	1455c <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   1441c:	e0fffd03 	ldbu	r3,-12(fp)
   14420:	008000b4 	movhi	r2,2
   14424:	109cd004 	addi	r2,r2,29504
   14428:	18c7883a 	add	r3,r3,r3
   1442c:	18c7883a 	add	r3,r3,r3
   14430:	10c5883a 	add	r2,r2,r3
   14434:	10800017 	ldw	r2,0(r2)
   14438:	1000431e 	bne	r2,zero,14548 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   1443c:	e0fffd03 	ldbu	r3,-12(fp)
   14440:	008000b4 	movhi	r2,2
   14444:	109cd004 	addi	r2,r2,29504
   14448:	18c7883a 	add	r3,r3,r3
   1444c:	18c7883a 	add	r3,r3,r3
   14450:	10c5883a 	add	r2,r2,r3
   14454:	00c00044 	movi	r3,1
   14458:	10c00015 	stw	r3,0(r2)
   1445c:	e0bff117 	ldw	r2,-60(fp)
   14460:	e0bff315 	stw	r2,-52(fp)
   14464:	e0bff317 	ldw	r2,-52(fp)
   14468:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   1446c:	e0bfff0b 	ldhu	r2,-4(fp)
   14470:	100d883a 	mov	r6,r2
   14474:	e1400417 	ldw	r5,16(fp)
   14478:	e1000317 	ldw	r4,12(fp)
   1447c:	00153ec0 	call	153ec <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   14480:	e0bfff0b 	ldhu	r2,-4(fp)
   14484:	100f883a 	mov	r7,r2
   14488:	e1bffc17 	ldw	r6,-16(fp)
   1448c:	e17ffb17 	ldw	r5,-20(fp)
   14490:	e13ffa17 	ldw	r4,-24(fp)
   14494:	0018f580 	call	18f58 <OSTaskStkInit>
   14498:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   1449c:	e0fffd03 	ldbu	r3,-12(fp)
   144a0:	e13ffe0b 	ldhu	r4,-8(fp)
   144a4:	e0bfff0b 	ldhu	r2,-4(fp)
   144a8:	d8800215 	stw	r2,8(sp)
   144ac:	e0800517 	ldw	r2,20(fp)
   144b0:	d8800115 	stw	r2,4(sp)
   144b4:	e0800417 	ldw	r2,16(fp)
   144b8:	d8800015 	stw	r2,0(sp)
   144bc:	200f883a 	mov	r7,r4
   144c0:	e1800317 	ldw	r6,12(fp)
   144c4:	e17ff517 	ldw	r5,-44(fp)
   144c8:	1809883a 	mov	r4,r3
   144cc:	000fec00 	call	fec0 <OS_TCBInit>
   144d0:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
   144d4:	e0bff603 	ldbu	r2,-40(fp)
   144d8:	1000061e 	bne	r2,zero,144f4 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   144dc:	d0a7e943 	ldbu	r2,-24667(gp)
   144e0:	10803fcc 	andi	r2,r2,255
   144e4:	10800058 	cmpnei	r2,r2,1
   144e8:	1000151e 	bne	r2,zero,14540 <OSTaskCreateExt+0x1b4>
                OS_Sched();
   144ec:	000fab00 	call	fab0 <OS_Sched>
   144f0:	00001306 	br	14540 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   144f4:	0005303a 	rdctl	r2,status
   144f8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   144fc:	e0fff817 	ldw	r3,-32(fp)
   14500:	00bfff84 	movi	r2,-2
   14504:	1884703a 	and	r2,r3,r2
   14508:	1001703a 	wrctl	status,r2
  
  return context;
   1450c:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   14510:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   14514:	e0fffd03 	ldbu	r3,-12(fp)
   14518:	008000b4 	movhi	r2,2
   1451c:	109cd004 	addi	r2,r2,29504
   14520:	18c7883a 	add	r3,r3,r3
   14524:	18c7883a 	add	r3,r3,r3
   14528:	10c5883a 	add	r2,r2,r3
   1452c:	10000015 	stw	zero,0(r2)
   14530:	e0bff117 	ldw	r2,-60(fp)
   14534:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14538:	e0bff417 	ldw	r2,-48(fp)
   1453c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   14540:	e0bff603 	ldbu	r2,-40(fp)
   14544:	00000506 	br	1455c <OSTaskCreateExt+0x1d0>
   14548:	e0bff117 	ldw	r2,-60(fp)
   1454c:	e0bff715 	stw	r2,-36(fp)
   14550:	e0bff717 	ldw	r2,-36(fp)
   14554:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   14558:	00800a04 	movi	r2,40
}
   1455c:	e037883a 	mov	sp,fp
   14560:	dfc00117 	ldw	ra,4(sp)
   14564:	df000017 	ldw	fp,0(sp)
   14568:	dec00204 	addi	sp,sp,8
   1456c:	f800283a 	ret

00014570 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   14570:	defff404 	addi	sp,sp,-48
   14574:	dfc00b15 	stw	ra,44(sp)
   14578:	df000a15 	stw	fp,40(sp)
   1457c:	df000a04 	addi	fp,sp,40
   14580:	2005883a 	mov	r2,r4
   14584:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   14588:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   1458c:	d0a7f703 	ldbu	r2,-24612(gp)
   14590:	10803fcc 	andi	r2,r2,255
   14594:	10000226 	beq	r2,zero,145a0 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
   14598:	00801004 	movi	r2,64
   1459c:	0000c006 	br	148a0 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   145a0:	e0bfff03 	ldbu	r2,-4(fp)
   145a4:	10800518 	cmpnei	r2,r2,20
   145a8:	1000021e 	bne	r2,zero,145b4 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
   145ac:	00800f84 	movi	r2,62
   145b0:	0000bb06 	br	148a0 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   145b4:	e0bfff03 	ldbu	r2,-4(fp)
   145b8:	10800530 	cmpltui	r2,r2,20
   145bc:	1000051e 	bne	r2,zero,145d4 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
   145c0:	e0bfff03 	ldbu	r2,-4(fp)
   145c4:	10803fe0 	cmpeqi	r2,r2,255
   145c8:	1000021e 	bne	r2,zero,145d4 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
   145cc:	00800a84 	movi	r2,42
   145d0:	0000b306 	br	148a0 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   145d4:	0005303a 	rdctl	r2,status
   145d8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   145dc:	e0fffe17 	ldw	r3,-8(fp)
   145e0:	00bfff84 	movi	r2,-2
   145e4:	1884703a 	and	r2,r3,r2
   145e8:	1001703a 	wrctl	status,r2
  
  return context;
   145ec:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   145f0:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   145f4:	e0bfff03 	ldbu	r2,-4(fp)
   145f8:	10803fd8 	cmpnei	r2,r2,255
   145fc:	1000031e 	bne	r2,zero,1460c <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   14600:	d0a7f817 	ldw	r2,-24608(gp)
   14604:	10800c83 	ldbu	r2,50(r2)
   14608:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1460c:	e0ffff03 	ldbu	r3,-4(fp)
   14610:	008000b4 	movhi	r2,2
   14614:	109cd004 	addi	r2,r2,29504
   14618:	18c7883a 	add	r3,r3,r3
   1461c:	18c7883a 	add	r3,r3,r3
   14620:	10c5883a 	add	r2,r2,r3
   14624:	10800017 	ldw	r2,0(r2)
   14628:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   1462c:	e0bff817 	ldw	r2,-32(fp)
   14630:	1000061e 	bne	r2,zero,1464c <OSTaskDel+0xdc>
   14634:	e0bff617 	ldw	r2,-40(fp)
   14638:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1463c:	e0bff717 	ldw	r2,-36(fp)
   14640:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   14644:	008010c4 	movi	r2,67
   14648:	00009506 	br	148a0 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   1464c:	e0bff817 	ldw	r2,-32(fp)
   14650:	10800058 	cmpnei	r2,r2,1
   14654:	1000061e 	bne	r2,zero,14670 <OSTaskDel+0x100>
   14658:	e0bff617 	ldw	r2,-40(fp)
   1465c:	e0bff915 	stw	r2,-28(fp)
   14660:	e0bff917 	ldw	r2,-28(fp)
   14664:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   14668:	00800f44 	movi	r2,61
   1466c:	00008c06 	br	148a0 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   14670:	e0bff817 	ldw	r2,-32(fp)
   14674:	10800d03 	ldbu	r2,52(r2)
   14678:	10c03fcc 	andi	r3,r2,255
   1467c:	e0bff817 	ldw	r2,-32(fp)
   14680:	10800d03 	ldbu	r2,52(r2)
   14684:	11003fcc 	andi	r4,r2,255
   14688:	d0a7f544 	addi	r2,gp,-24619
   1468c:	2085883a 	add	r2,r4,r2
   14690:	10800003 	ldbu	r2,0(r2)
   14694:	1009883a 	mov	r4,r2
   14698:	e0bff817 	ldw	r2,-32(fp)
   1469c:	10800d43 	ldbu	r2,53(r2)
   146a0:	0084303a 	nor	r2,zero,r2
   146a4:	2084703a 	and	r2,r4,r2
   146a8:	1009883a 	mov	r4,r2
   146ac:	d0a7f544 	addi	r2,gp,-24619
   146b0:	1885883a 	add	r2,r3,r2
   146b4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   146b8:	e0bff817 	ldw	r2,-32(fp)
   146bc:	10800d03 	ldbu	r2,52(r2)
   146c0:	10c03fcc 	andi	r3,r2,255
   146c4:	d0a7f544 	addi	r2,gp,-24619
   146c8:	1885883a 	add	r2,r3,r2
   146cc:	10800003 	ldbu	r2,0(r2)
   146d0:	10803fcc 	andi	r2,r2,255
   146d4:	1000071e 	bne	r2,zero,146f4 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   146d8:	e0bff817 	ldw	r2,-32(fp)
   146dc:	10800d83 	ldbu	r2,54(r2)
   146e0:	0084303a 	nor	r2,zero,r2
   146e4:	1007883a 	mov	r3,r2
   146e8:	d0a7f503 	ldbu	r2,-24620(gp)
   146ec:	1884703a 	and	r2,r3,r2
   146f0:	d0a7f505 	stb	r2,-24620(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   146f4:	e0bff817 	ldw	r2,-32(fp)
   146f8:	10800717 	ldw	r2,28(r2)
   146fc:	10000526 	beq	r2,zero,14714 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   14700:	e0bff817 	ldw	r2,-32(fp)
   14704:	10800717 	ldw	r2,28(r2)
   14708:	100b883a 	mov	r5,r2
   1470c:	e13ff817 	ldw	r4,-32(fp)
   14710:	000f45c0 	call	f45c <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   14714:	e0bff817 	ldw	r2,-32(fp)
   14718:	10800817 	ldw	r2,32(r2)
   1471c:	10000526 	beq	r2,zero,14734 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   14720:	e0bff817 	ldw	r2,-32(fp)
   14724:	10800817 	ldw	r2,32(r2)
   14728:	100b883a 	mov	r5,r2
   1472c:	e13ff817 	ldw	r4,-32(fp)
   14730:	000f5140 	call	f514 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   14734:	e0bff817 	ldw	r2,-32(fp)
   14738:	10800a17 	ldw	r2,40(r2)
   1473c:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   14740:	e0bffb17 	ldw	r2,-20(fp)
   14744:	10000226 	beq	r2,zero,14750 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   14748:	e13ffb17 	ldw	r4,-20(fp)
   1474c:	00119940 	call	11994 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   14750:	e0bff817 	ldw	r2,-32(fp)
   14754:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   14758:	e0bff817 	ldw	r2,-32(fp)
   1475c:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   14760:	e0bff817 	ldw	r2,-32(fp)
   14764:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   14768:	d0a7e903 	ldbu	r2,-24668(gp)
   1476c:	10803fcc 	andi	r2,r2,255
   14770:	10803fe0 	cmpeqi	r2,r2,255
   14774:	1000031e 	bne	r2,zero,14784 <OSTaskDel+0x214>
        OSLockNesting++;
   14778:	d0a7e903 	ldbu	r2,-24668(gp)
   1477c:	10800044 	addi	r2,r2,1
   14780:	d0a7e905 	stb	r2,-24668(gp)
   14784:	e0bff617 	ldw	r2,-40(fp)
   14788:	e0bffd15 	stw	r2,-12(fp)
   1478c:	e0bffd17 	ldw	r2,-12(fp)
   14790:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   14794:	000f0440 	call	f044 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14798:	0005303a 	rdctl	r2,status
   1479c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   147a0:	e0fffa17 	ldw	r3,-24(fp)
   147a4:	00bfff84 	movi	r2,-2
   147a8:	1884703a 	and	r2,r3,r2
   147ac:	1001703a 	wrctl	status,r2
  
  return context;
   147b0:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   147b4:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   147b8:	d0a7e903 	ldbu	r2,-24668(gp)
   147bc:	10803fcc 	andi	r2,r2,255
   147c0:	10000326 	beq	r2,zero,147d0 <OSTaskDel+0x260>
        OSLockNesting--;
   147c4:	d0a7e903 	ldbu	r2,-24668(gp)
   147c8:	10bfffc4 	addi	r2,r2,-1
   147cc:	d0a7e905 	stb	r2,-24668(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   147d0:	e13ff817 	ldw	r4,-32(fp)
   147d4:	00190d80 	call	190d8 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   147d8:	d0a7f143 	ldbu	r2,-24635(gp)
   147dc:	10bfffc4 	addi	r2,r2,-1
   147e0:	d0a7f145 	stb	r2,-24635(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   147e4:	e0ffff03 	ldbu	r3,-4(fp)
   147e8:	008000b4 	movhi	r2,2
   147ec:	109cd004 	addi	r2,r2,29504
   147f0:	18c7883a 	add	r3,r3,r3
   147f4:	18c7883a 	add	r3,r3,r3
   147f8:	10c5883a 	add	r2,r2,r3
   147fc:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   14800:	e0bff817 	ldw	r2,-32(fp)
   14804:	10800617 	ldw	r2,24(r2)
   14808:	1000071e 	bne	r2,zero,14828 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   1480c:	e0bff817 	ldw	r2,-32(fp)
   14810:	10800517 	ldw	r2,20(r2)
   14814:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   14818:	e0bff817 	ldw	r2,-32(fp)
   1481c:	10800517 	ldw	r2,20(r2)
   14820:	d0a7ec15 	stw	r2,-24656(gp)
   14824:	00000a06 	br	14850 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   14828:	e0bff817 	ldw	r2,-32(fp)
   1482c:	10800617 	ldw	r2,24(r2)
   14830:	e0fff817 	ldw	r3,-32(fp)
   14834:	18c00517 	ldw	r3,20(r3)
   14838:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   1483c:	e0bff817 	ldw	r2,-32(fp)
   14840:	10800517 	ldw	r2,20(r2)
   14844:	e0fff817 	ldw	r3,-32(fp)
   14848:	18c00617 	ldw	r3,24(r3)
   1484c:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   14850:	d0e7f017 	ldw	r3,-24640(gp)
   14854:	e0bff817 	ldw	r2,-32(fp)
   14858:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   1485c:	e0bff817 	ldw	r2,-32(fp)
   14860:	d0a7f015 	stw	r2,-24640(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   14864:	e0bff817 	ldw	r2,-32(fp)
   14868:	00c00fc4 	movi	r3,63
   1486c:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   14870:	e0bff817 	ldw	r2,-32(fp)
   14874:	10001345 	stb	zero,77(r2)
   14878:	e0bff617 	ldw	r2,-40(fp)
   1487c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14880:	e0bffc17 	ldw	r2,-16(fp)
   14884:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   14888:	d0a7e943 	ldbu	r2,-24667(gp)
   1488c:	10803fcc 	andi	r2,r2,255
   14890:	10800058 	cmpnei	r2,r2,1
   14894:	1000011e 	bne	r2,zero,1489c <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
   14898:	000fab00 	call	fab0 <OS_Sched>
    }
    return (OS_ERR_NONE);
   1489c:	0005883a 	mov	r2,zero
}
   148a0:	e037883a 	mov	sp,fp
   148a4:	dfc00117 	ldw	ra,4(sp)
   148a8:	df000017 	ldw	fp,0(sp)
   148ac:	dec00204 	addi	sp,sp,8
   148b0:	f800283a 	ret

000148b4 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   148b4:	defff504 	addi	sp,sp,-44
   148b8:	df000a15 	stw	fp,40(sp)
   148bc:	df000a04 	addi	fp,sp,40
   148c0:	2005883a 	mov	r2,r4
   148c4:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   148c8:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   148cc:	e0bfff03 	ldbu	r2,-4(fp)
   148d0:	10800518 	cmpnei	r2,r2,20
   148d4:	1000021e 	bne	r2,zero,148e0 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   148d8:	00800f84 	movi	r2,62
   148dc:	00004506 	br	149f4 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   148e0:	e0bfff03 	ldbu	r2,-4(fp)
   148e4:	10800530 	cmpltui	r2,r2,20
   148e8:	1000051e 	bne	r2,zero,14900 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   148ec:	e0bfff03 	ldbu	r2,-4(fp)
   148f0:	10803fe0 	cmpeqi	r2,r2,255
   148f4:	1000021e 	bne	r2,zero,14900 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   148f8:	00800a84 	movi	r2,42
   148fc:	00003d06 	br	149f4 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   14900:	e0bfff03 	ldbu	r2,-4(fp)
   14904:	10803fd8 	cmpnei	r2,r2,255
   14908:	1000111e 	bne	r2,zero,14950 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1490c:	0005303a 	rdctl	r2,status
   14910:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14914:	e0fff917 	ldw	r3,-28(fp)
   14918:	00bfff84 	movi	r2,-2
   1491c:	1884703a 	and	r2,r3,r2
   14920:	1001703a 	wrctl	status,r2
  
  return context;
   14924:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   14928:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   1492c:	d0a7f817 	ldw	r2,-24608(gp)
   14930:	10800dc3 	ldbu	r2,55(r2)
   14934:	e0bff805 	stb	r2,-32(fp)
   14938:	e0bff617 	ldw	r2,-40(fp)
   1493c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14940:	e0bffe17 	ldw	r2,-8(fp)
   14944:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   14948:	e0bff803 	ldbu	r2,-32(fp)
   1494c:	00002906 	br	149f4 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14950:	0005303a 	rdctl	r2,status
   14954:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14958:	e0fff717 	ldw	r3,-36(fp)
   1495c:	00bfff84 	movi	r2,-2
   14960:	1884703a 	and	r2,r3,r2
   14964:	1001703a 	wrctl	status,r2
  
  return context;
   14968:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   1496c:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   14970:	e0ffff03 	ldbu	r3,-4(fp)
   14974:	008000b4 	movhi	r2,2
   14978:	109cd004 	addi	r2,r2,29504
   1497c:	18c7883a 	add	r3,r3,r3
   14980:	18c7883a 	add	r3,r3,r3
   14984:	10c5883a 	add	r2,r2,r3
   14988:	10800017 	ldw	r2,0(r2)
   1498c:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   14990:	e0bffb17 	ldw	r2,-20(fp)
   14994:	1000061e 	bne	r2,zero,149b0 <OSTaskDelReq+0xfc>
   14998:	e0bff617 	ldw	r2,-40(fp)
   1499c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   149a0:	e0bffa17 	ldw	r2,-24(fp)
   149a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   149a8:	008010c4 	movi	r2,67
   149ac:	00001106 	br	149f4 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   149b0:	e0bffb17 	ldw	r2,-20(fp)
   149b4:	10800058 	cmpnei	r2,r2,1
   149b8:	1000061e 	bne	r2,zero,149d4 <OSTaskDelReq+0x120>
   149bc:	e0bff617 	ldw	r2,-40(fp)
   149c0:	e0bffc15 	stw	r2,-16(fp)
   149c4:	e0bffc17 	ldw	r2,-16(fp)
   149c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   149cc:	00800f44 	movi	r2,61
   149d0:	00000806 	br	149f4 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   149d4:	e0bffb17 	ldw	r2,-20(fp)
   149d8:	00c00fc4 	movi	r3,63
   149dc:	10c00dc5 	stb	r3,55(r2)
   149e0:	e0bff617 	ldw	r2,-40(fp)
   149e4:	e0bffd15 	stw	r2,-12(fp)
   149e8:	e0bffd17 	ldw	r2,-12(fp)
   149ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   149f0:	0005883a 	mov	r2,zero
}
   149f4:	e037883a 	mov	sp,fp
   149f8:	df000017 	ldw	fp,0(sp)
   149fc:	dec00104 	addi	sp,sp,4
   14a00:	f800283a 	ret

00014a04 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   14a04:	defff404 	addi	sp,sp,-48
   14a08:	dfc00b15 	stw	ra,44(sp)
   14a0c:	df000a15 	stw	fp,40(sp)
   14a10:	df000a04 	addi	fp,sp,40
   14a14:	2005883a 	mov	r2,r4
   14a18:	e17ffe15 	stw	r5,-8(fp)
   14a1c:	e1bfff15 	stw	r6,-4(fp)
   14a20:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   14a24:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   14a28:	e0bfff17 	ldw	r2,-4(fp)
   14a2c:	1000021e 	bne	r2,zero,14a38 <OSTaskNameGet+0x34>
        return (0);
   14a30:	0005883a 	mov	r2,zero
   14a34:	00005406 	br	14b88 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   14a38:	e0bffd03 	ldbu	r2,-12(fp)
   14a3c:	10800570 	cmpltui	r2,r2,21
   14a40:	1000081e 	bne	r2,zero,14a64 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   14a44:	e0bffd03 	ldbu	r2,-12(fp)
   14a48:	10803fe0 	cmpeqi	r2,r2,255
   14a4c:	1000051e 	bne	r2,zero,14a64 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   14a50:	e0bfff17 	ldw	r2,-4(fp)
   14a54:	00c00a84 	movi	r3,42
   14a58:	10c00005 	stb	r3,0(r2)
            return (0);
   14a5c:	0005883a 	mov	r2,zero
   14a60:	00004906 	br	14b88 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   14a64:	e0bffe17 	ldw	r2,-8(fp)
   14a68:	1000051e 	bne	r2,zero,14a80 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   14a6c:	e0bfff17 	ldw	r2,-4(fp)
   14a70:	00c00304 	movi	r3,12
   14a74:	10c00005 	stb	r3,0(r2)
        return (0);
   14a78:	0005883a 	mov	r2,zero
   14a7c:	00004206 	br	14b88 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   14a80:	d0a7f703 	ldbu	r2,-24612(gp)
   14a84:	10803fcc 	andi	r2,r2,255
   14a88:	10000526 	beq	r2,zero,14aa0 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
   14a8c:	e0bfff17 	ldw	r2,-4(fp)
   14a90:	00c00444 	movi	r3,17
   14a94:	10c00005 	stb	r3,0(r2)
        return (0);
   14a98:	0005883a 	mov	r2,zero
   14a9c:	00003a06 	br	14b88 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14aa0:	0005303a 	rdctl	r2,status
   14aa4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14aa8:	e0fffc17 	ldw	r3,-16(fp)
   14aac:	00bfff84 	movi	r2,-2
   14ab0:	1884703a 	and	r2,r3,r2
   14ab4:	1001703a 	wrctl	status,r2
  
  return context;
   14ab8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   14abc:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   14ac0:	e0bffd03 	ldbu	r2,-12(fp)
   14ac4:	10803fd8 	cmpnei	r2,r2,255
   14ac8:	1000031e 	bne	r2,zero,14ad8 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   14acc:	d0a7f817 	ldw	r2,-24608(gp)
   14ad0:	10800c83 	ldbu	r2,50(r2)
   14ad4:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   14ad8:	e0fffd03 	ldbu	r3,-12(fp)
   14adc:	008000b4 	movhi	r2,2
   14ae0:	109cd004 	addi	r2,r2,29504
   14ae4:	18c7883a 	add	r3,r3,r3
   14ae8:	18c7883a 	add	r3,r3,r3
   14aec:	10c5883a 	add	r2,r2,r3
   14af0:	10800017 	ldw	r2,0(r2)
   14af4:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   14af8:	e0bff817 	ldw	r2,-32(fp)
   14afc:	1000091e 	bne	r2,zero,14b24 <OSTaskNameGet+0x120>
   14b00:	e0bff617 	ldw	r2,-40(fp)
   14b04:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14b08:	e0bff717 	ldw	r2,-36(fp)
   14b0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   14b10:	e0bfff17 	ldw	r2,-4(fp)
   14b14:	00c010c4 	movi	r3,67
   14b18:	10c00005 	stb	r3,0(r2)
        return (0);
   14b1c:	0005883a 	mov	r2,zero
   14b20:	00001906 	br	14b88 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   14b24:	e0bff817 	ldw	r2,-32(fp)
   14b28:	10800058 	cmpnei	r2,r2,1
   14b2c:	1000091e 	bne	r2,zero,14b54 <OSTaskNameGet+0x150>
   14b30:	e0bff617 	ldw	r2,-40(fp)
   14b34:	e0bff915 	stw	r2,-28(fp)
   14b38:	e0bff917 	ldw	r2,-28(fp)
   14b3c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   14b40:	e0bfff17 	ldw	r2,-4(fp)
   14b44:	00c010c4 	movi	r3,67
   14b48:	10c00005 	stb	r3,0(r2)
        return (0);
   14b4c:	0005883a 	mov	r2,zero
   14b50:	00000d06 	br	14b88 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   14b54:	e0bff817 	ldw	r2,-32(fp)
   14b58:	10801304 	addi	r2,r2,76
   14b5c:	100b883a 	mov	r5,r2
   14b60:	e13ffe17 	ldw	r4,-8(fp)
   14b64:	000fbf40 	call	fbf4 <OS_StrCopy>
   14b68:	e0bffb05 	stb	r2,-20(fp)
   14b6c:	e0bff617 	ldw	r2,-40(fp)
   14b70:	e0bffa15 	stw	r2,-24(fp)
   14b74:	e0bffa17 	ldw	r2,-24(fp)
   14b78:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   14b7c:	e0bfff17 	ldw	r2,-4(fp)
   14b80:	10000005 	stb	zero,0(r2)
    return (len);
   14b84:	e0bffb03 	ldbu	r2,-20(fp)
}
   14b88:	e037883a 	mov	sp,fp
   14b8c:	dfc00117 	ldw	ra,4(sp)
   14b90:	df000017 	ldw	fp,0(sp)
   14b94:	dec00204 	addi	sp,sp,8
   14b98:	f800283a 	ret

00014b9c <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   14b9c:	defff304 	addi	sp,sp,-52
   14ba0:	dfc00c15 	stw	ra,48(sp)
   14ba4:	df000b15 	stw	fp,44(sp)
   14ba8:	df000b04 	addi	fp,sp,44
   14bac:	2005883a 	mov	r2,r4
   14bb0:	e17ffe15 	stw	r5,-8(fp)
   14bb4:	e1bfff15 	stw	r6,-4(fp)
   14bb8:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   14bbc:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   14bc0:	e0bfff17 	ldw	r2,-4(fp)
   14bc4:	10005c26 	beq	r2,zero,14d38 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   14bc8:	e0bffd03 	ldbu	r2,-12(fp)
   14bcc:	10800570 	cmpltui	r2,r2,21
   14bd0:	1000071e 	bne	r2,zero,14bf0 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
   14bd4:	e0bffd03 	ldbu	r2,-12(fp)
   14bd8:	10803fe0 	cmpeqi	r2,r2,255
   14bdc:	1000041e 	bne	r2,zero,14bf0 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   14be0:	e0bfff17 	ldw	r2,-4(fp)
   14be4:	00c00a84 	movi	r3,42
   14be8:	10c00005 	stb	r3,0(r2)
            return;
   14bec:	00005306 	br	14d3c <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   14bf0:	e0bffe17 	ldw	r2,-8(fp)
   14bf4:	1000041e 	bne	r2,zero,14c08 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   14bf8:	e0bfff17 	ldw	r2,-4(fp)
   14bfc:	00c00304 	movi	r3,12
   14c00:	10c00005 	stb	r3,0(r2)
        return;
   14c04:	00004d06 	br	14d3c <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   14c08:	d0a7f703 	ldbu	r2,-24612(gp)
   14c0c:	10803fcc 	andi	r2,r2,255
   14c10:	10000426 	beq	r2,zero,14c24 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
   14c14:	e0bfff17 	ldw	r2,-4(fp)
   14c18:	00c00484 	movi	r3,18
   14c1c:	10c00005 	stb	r3,0(r2)
        return;
   14c20:	00004606 	br	14d3c <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14c24:	0005303a 	rdctl	r2,status
   14c28:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14c2c:	e0fffc17 	ldw	r3,-16(fp)
   14c30:	00bfff84 	movi	r2,-2
   14c34:	1884703a 	and	r2,r3,r2
   14c38:	1001703a 	wrctl	status,r2
  
  return context;
   14c3c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   14c40:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   14c44:	e0bffd03 	ldbu	r2,-12(fp)
   14c48:	10803fd8 	cmpnei	r2,r2,255
   14c4c:	1000031e 	bne	r2,zero,14c5c <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
   14c50:	d0a7f817 	ldw	r2,-24608(gp)
   14c54:	10800c83 	ldbu	r2,50(r2)
   14c58:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   14c5c:	e0fffd03 	ldbu	r3,-12(fp)
   14c60:	008000b4 	movhi	r2,2
   14c64:	109cd004 	addi	r2,r2,29504
   14c68:	18c7883a 	add	r3,r3,r3
   14c6c:	18c7883a 	add	r3,r3,r3
   14c70:	10c5883a 	add	r2,r2,r3
   14c74:	10800017 	ldw	r2,0(r2)
   14c78:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   14c7c:	e0bff717 	ldw	r2,-36(fp)
   14c80:	1000081e 	bne	r2,zero,14ca4 <OSTaskNameSet+0x108>
   14c84:	e0bff517 	ldw	r2,-44(fp)
   14c88:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14c8c:	e0bff617 	ldw	r2,-40(fp)
   14c90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   14c94:	e0bfff17 	ldw	r2,-4(fp)
   14c98:	00c010c4 	movi	r3,67
   14c9c:	10c00005 	stb	r3,0(r2)
        return;
   14ca0:	00002606 	br	14d3c <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   14ca4:	e0bff717 	ldw	r2,-36(fp)
   14ca8:	10800058 	cmpnei	r2,r2,1
   14cac:	1000081e 	bne	r2,zero,14cd0 <OSTaskNameSet+0x134>
   14cb0:	e0bff517 	ldw	r2,-44(fp)
   14cb4:	e0bff815 	stw	r2,-32(fp)
   14cb8:	e0bff817 	ldw	r2,-32(fp)
   14cbc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   14cc0:	e0bfff17 	ldw	r2,-4(fp)
   14cc4:	00c010c4 	movi	r3,67
   14cc8:	10c00005 	stb	r3,0(r2)
        return;
   14ccc:	00001b06 	br	14d3c <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   14cd0:	e13ffe17 	ldw	r4,-8(fp)
   14cd4:	000fc680 	call	fc68 <OS_StrLen>
   14cd8:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   14cdc:	e0bffa03 	ldbu	r2,-24(fp)
   14ce0:	10800830 	cmpltui	r2,r2,32
   14ce4:	1000081e 	bne	r2,zero,14d08 <OSTaskNameSet+0x16c>
   14ce8:	e0bff517 	ldw	r2,-44(fp)
   14cec:	e0bff915 	stw	r2,-28(fp)
   14cf0:	e0bff917 	ldw	r2,-28(fp)
   14cf4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   14cf8:	e0bfff17 	ldw	r2,-4(fp)
   14cfc:	00c01044 	movi	r3,65
   14d00:	10c00005 	stb	r3,0(r2)
        return;
   14d04:	00000d06 	br	14d3c <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   14d08:	e0bff717 	ldw	r2,-36(fp)
   14d0c:	10801304 	addi	r2,r2,76
   14d10:	e17ffe17 	ldw	r5,-8(fp)
   14d14:	1009883a 	mov	r4,r2
   14d18:	000fbf40 	call	fbf4 <OS_StrCopy>
   14d1c:	e0bff517 	ldw	r2,-44(fp)
   14d20:	e0bffb15 	stw	r2,-20(fp)
   14d24:	e0bffb17 	ldw	r2,-20(fp)
   14d28:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   14d2c:	e0bfff17 	ldw	r2,-4(fp)
   14d30:	10000005 	stb	zero,0(r2)
   14d34:	00000106 	br	14d3c <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
   14d38:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   14d3c:	e037883a 	mov	sp,fp
   14d40:	dfc00117 	ldw	ra,4(sp)
   14d44:	df000017 	ldw	fp,0(sp)
   14d48:	dec00204 	addi	sp,sp,8
   14d4c:	f800283a 	ret

00014d50 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   14d50:	defff404 	addi	sp,sp,-48
   14d54:	dfc00b15 	stw	ra,44(sp)
   14d58:	df000a15 	stw	fp,40(sp)
   14d5c:	df000a04 	addi	fp,sp,40
   14d60:	2005883a 	mov	r2,r4
   14d64:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   14d68:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   14d6c:	e0bfff03 	ldbu	r2,-4(fp)
   14d70:	10800530 	cmpltui	r2,r2,20
   14d74:	1000021e 	bne	r2,zero,14d80 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   14d78:	00800a84 	movi	r2,42
   14d7c:	00006406 	br	14f10 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14d80:	0005303a 	rdctl	r2,status
   14d84:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14d88:	e0fffe17 	ldw	r3,-8(fp)
   14d8c:	00bfff84 	movi	r2,-2
   14d90:	1884703a 	and	r2,r3,r2
   14d94:	1001703a 	wrctl	status,r2
  
  return context;
   14d98:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14d9c:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   14da0:	e0ffff03 	ldbu	r3,-4(fp)
   14da4:	008000b4 	movhi	r2,2
   14da8:	109cd004 	addi	r2,r2,29504
   14dac:	18c7883a 	add	r3,r3,r3
   14db0:	18c7883a 	add	r3,r3,r3
   14db4:	10c5883a 	add	r2,r2,r3
   14db8:	10800017 	ldw	r2,0(r2)
   14dbc:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   14dc0:	e0bff817 	ldw	r2,-32(fp)
   14dc4:	1000061e 	bne	r2,zero,14de0 <OSTaskResume+0x90>
   14dc8:	e0bff617 	ldw	r2,-40(fp)
   14dcc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14dd0:	e0bff717 	ldw	r2,-36(fp)
   14dd4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   14dd8:	00801184 	movi	r2,70
   14ddc:	00004c06 	br	14f10 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   14de0:	e0bff817 	ldw	r2,-32(fp)
   14de4:	10800058 	cmpnei	r2,r2,1
   14de8:	1000061e 	bne	r2,zero,14e04 <OSTaskResume+0xb4>
   14dec:	e0bff617 	ldw	r2,-40(fp)
   14df0:	e0bff915 	stw	r2,-28(fp)
   14df4:	e0bff917 	ldw	r2,-28(fp)
   14df8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   14dfc:	008010c4 	movi	r2,67
   14e00:	00004306 	br	14f10 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   14e04:	e0bff817 	ldw	r2,-32(fp)
   14e08:	10800c03 	ldbu	r2,48(r2)
   14e0c:	10803fcc 	andi	r2,r2,255
   14e10:	1080020c 	andi	r2,r2,8
   14e14:	10003926 	beq	r2,zero,14efc <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   14e18:	e0bff817 	ldw	r2,-32(fp)
   14e1c:	10c00c03 	ldbu	r3,48(r2)
   14e20:	00bffdc4 	movi	r2,-9
   14e24:	1884703a 	and	r2,r3,r2
   14e28:	1007883a 	mov	r3,r2
   14e2c:	e0bff817 	ldw	r2,-32(fp)
   14e30:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   14e34:	e0bff817 	ldw	r2,-32(fp)
   14e38:	10800c03 	ldbu	r2,48(r2)
   14e3c:	10803fcc 	andi	r2,r2,255
   14e40:	1000281e 	bne	r2,zero,14ee4 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
   14e44:	e0bff817 	ldw	r2,-32(fp)
   14e48:	10800b8b 	ldhu	r2,46(r2)
   14e4c:	10bfffcc 	andi	r2,r2,65535
   14e50:	10001f1e 	bne	r2,zero,14ed0 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   14e54:	e0bff817 	ldw	r2,-32(fp)
   14e58:	10c00d83 	ldbu	r3,54(r2)
   14e5c:	d0a7f503 	ldbu	r2,-24620(gp)
   14e60:	1884b03a 	or	r2,r3,r2
   14e64:	d0a7f505 	stb	r2,-24620(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   14e68:	e0bff817 	ldw	r2,-32(fp)
   14e6c:	10800d03 	ldbu	r2,52(r2)
   14e70:	10c03fcc 	andi	r3,r2,255
   14e74:	e0bff817 	ldw	r2,-32(fp)
   14e78:	10800d03 	ldbu	r2,52(r2)
   14e7c:	11003fcc 	andi	r4,r2,255
   14e80:	d0a7f544 	addi	r2,gp,-24619
   14e84:	2085883a 	add	r2,r4,r2
   14e88:	11000003 	ldbu	r4,0(r2)
   14e8c:	e0bff817 	ldw	r2,-32(fp)
   14e90:	10800d43 	ldbu	r2,53(r2)
   14e94:	2084b03a 	or	r2,r4,r2
   14e98:	1009883a 	mov	r4,r2
   14e9c:	d0a7f544 	addi	r2,gp,-24619
   14ea0:	1885883a 	add	r2,r3,r2
   14ea4:	11000005 	stb	r4,0(r2)
   14ea8:	e0bff617 	ldw	r2,-40(fp)
   14eac:	e0bffa15 	stw	r2,-24(fp)
   14eb0:	e0bffa17 	ldw	r2,-24(fp)
   14eb4:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   14eb8:	d0a7e943 	ldbu	r2,-24667(gp)
   14ebc:	10803fcc 	andi	r2,r2,255
   14ec0:	10800058 	cmpnei	r2,r2,1
   14ec4:	10000b1e 	bne	r2,zero,14ef4 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
   14ec8:	000fab00 	call	fab0 <OS_Sched>
   14ecc:	00000906 	br	14ef4 <OSTaskResume+0x1a4>
   14ed0:	e0bff617 	ldw	r2,-40(fp)
   14ed4:	e0bffb15 	stw	r2,-20(fp)
   14ed8:	e0bffb17 	ldw	r2,-20(fp)
   14edc:	1001703a 	wrctl	status,r2
   14ee0:	00000406 	br	14ef4 <OSTaskResume+0x1a4>
   14ee4:	e0bff617 	ldw	r2,-40(fp)
   14ee8:	e0bffc15 	stw	r2,-16(fp)
   14eec:	e0bffc17 	ldw	r2,-16(fp)
   14ef0:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   14ef4:	0005883a 	mov	r2,zero
   14ef8:	00000506 	br	14f10 <OSTaskResume+0x1c0>
   14efc:	e0bff617 	ldw	r2,-40(fp)
   14f00:	e0bffd15 	stw	r2,-12(fp)
   14f04:	e0bffd17 	ldw	r2,-12(fp)
   14f08:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   14f0c:	00801104 	movi	r2,68
}
   14f10:	e037883a 	mov	sp,fp
   14f14:	dfc00117 	ldw	ra,4(sp)
   14f18:	df000017 	ldw	fp,0(sp)
   14f1c:	dec00204 	addi	sp,sp,8
   14f20:	f800283a 	ret

00014f24 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   14f24:	defff304 	addi	sp,sp,-52
   14f28:	df000c15 	stw	fp,48(sp)
   14f2c:	df000c04 	addi	fp,sp,48
   14f30:	2005883a 	mov	r2,r4
   14f34:	e17fff15 	stw	r5,-4(fp)
   14f38:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   14f3c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   14f40:	e0bffe03 	ldbu	r2,-8(fp)
   14f44:	10800570 	cmpltui	r2,r2,21
   14f48:	1000051e 	bne	r2,zero,14f60 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   14f4c:	e0bffe03 	ldbu	r2,-8(fp)
   14f50:	10803fe0 	cmpeqi	r2,r2,255
   14f54:	1000021e 	bne	r2,zero,14f60 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   14f58:	00800a84 	movi	r2,42
   14f5c:	00005d06 	br	150d4 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   14f60:	e0bfff17 	ldw	r2,-4(fp)
   14f64:	1000021e 	bne	r2,zero,14f70 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   14f68:	00800244 	movi	r2,9
   14f6c:	00005906 	br	150d4 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   14f70:	e0bfff17 	ldw	r2,-4(fp)
   14f74:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   14f78:	e0bfff17 	ldw	r2,-4(fp)
   14f7c:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14f80:	0005303a 	rdctl	r2,status
   14f84:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14f88:	e0fffd17 	ldw	r3,-12(fp)
   14f8c:	00bfff84 	movi	r2,-2
   14f90:	1884703a 	and	r2,r3,r2
   14f94:	1001703a 	wrctl	status,r2
  
  return context;
   14f98:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
   14f9c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   14fa0:	e0bffe03 	ldbu	r2,-8(fp)
   14fa4:	10803fd8 	cmpnei	r2,r2,255
   14fa8:	1000031e 	bne	r2,zero,14fb8 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
   14fac:	d0a7f817 	ldw	r2,-24608(gp)
   14fb0:	10800c83 	ldbu	r2,50(r2)
   14fb4:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   14fb8:	e0fffe03 	ldbu	r3,-8(fp)
   14fbc:	008000b4 	movhi	r2,2
   14fc0:	109cd004 	addi	r2,r2,29504
   14fc4:	18c7883a 	add	r3,r3,r3
   14fc8:	18c7883a 	add	r3,r3,r3
   14fcc:	10c5883a 	add	r2,r2,r3
   14fd0:	10800017 	ldw	r2,0(r2)
   14fd4:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   14fd8:	e0bff817 	ldw	r2,-32(fp)
   14fdc:	1000061e 	bne	r2,zero,14ff8 <OSTaskStkChk+0xd4>
   14fe0:	e0bff617 	ldw	r2,-40(fp)
   14fe4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14fe8:	e0bff717 	ldw	r2,-36(fp)
   14fec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   14ff0:	008010c4 	movi	r2,67
   14ff4:	00003706 	br	150d4 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   14ff8:	e0bff817 	ldw	r2,-32(fp)
   14ffc:	10800058 	cmpnei	r2,r2,1
   15000:	1000061e 	bne	r2,zero,1501c <OSTaskStkChk+0xf8>
   15004:	e0bff617 	ldw	r2,-40(fp)
   15008:	e0bff915 	stw	r2,-28(fp)
   1500c:	e0bff917 	ldw	r2,-28(fp)
   15010:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   15014:	008010c4 	movi	r2,67
   15018:	00002e06 	br	150d4 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   1501c:	e0bff817 	ldw	r2,-32(fp)
   15020:	1080040b 	ldhu	r2,16(r2)
   15024:	10bfffcc 	andi	r2,r2,65535
   15028:	1080004c 	andi	r2,r2,1
   1502c:	1000061e 	bne	r2,zero,15048 <OSTaskStkChk+0x124>
   15030:	e0bff617 	ldw	r2,-40(fp)
   15034:	e0bffa15 	stw	r2,-24(fp)
   15038:	e0bffa17 	ldw	r2,-24(fp)
   1503c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   15040:	00801144 	movi	r2,69
   15044:	00002306 	br	150d4 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
   15048:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   1504c:	e0bff817 	ldw	r2,-32(fp)
   15050:	10800317 	ldw	r2,12(r2)
   15054:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
   15058:	e0bff817 	ldw	r2,-32(fp)
   1505c:	10800217 	ldw	r2,8(r2)
   15060:	e0bff415 	stw	r2,-48(fp)
   15064:	e0bff617 	ldw	r2,-40(fp)
   15068:	e0bffb15 	stw	r2,-20(fp)
   1506c:	e0bffb17 	ldw	r2,-20(fp)
   15070:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   15074:	00000306 	br	15084 <OSTaskStkChk+0x160>
        nfree++;
   15078:	e0bff517 	ldw	r2,-44(fp)
   1507c:	10800044 	addi	r2,r2,1
   15080:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   15084:	e0bff417 	ldw	r2,-48(fp)
   15088:	10c00104 	addi	r3,r2,4
   1508c:	e0fff415 	stw	r3,-48(fp)
   15090:	10800017 	ldw	r2,0(r2)
   15094:	103ff826 	beq	r2,zero,15078 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015078>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   15098:	e0bff517 	ldw	r2,-44(fp)
   1509c:	1085883a 	add	r2,r2,r2
   150a0:	1085883a 	add	r2,r2,r2
   150a4:	1007883a 	mov	r3,r2
   150a8:	e0bfff17 	ldw	r2,-4(fp)
   150ac:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   150b0:	e0fffc17 	ldw	r3,-16(fp)
   150b4:	e0bff517 	ldw	r2,-44(fp)
   150b8:	1885c83a 	sub	r2,r3,r2
   150bc:	1085883a 	add	r2,r2,r2
   150c0:	1085883a 	add	r2,r2,r2
   150c4:	1007883a 	mov	r3,r2
   150c8:	e0bfff17 	ldw	r2,-4(fp)
   150cc:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   150d0:	0005883a 	mov	r2,zero
}
   150d4:	e037883a 	mov	sp,fp
   150d8:	df000017 	ldw	fp,0(sp)
   150dc:	dec00104 	addi	sp,sp,4
   150e0:	f800283a 	ret

000150e4 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   150e4:	defff504 	addi	sp,sp,-44
   150e8:	dfc00a15 	stw	ra,40(sp)
   150ec:	df000915 	stw	fp,36(sp)
   150f0:	df000904 	addi	fp,sp,36
   150f4:	2005883a 	mov	r2,r4
   150f8:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   150fc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   15100:	e0bfff03 	ldbu	r2,-4(fp)
   15104:	10800518 	cmpnei	r2,r2,20
   15108:	1000021e 	bne	r2,zero,15114 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   1510c:	008011c4 	movi	r2,71
   15110:	00006806 	br	152b4 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   15114:	e0bfff03 	ldbu	r2,-4(fp)
   15118:	10800530 	cmpltui	r2,r2,20
   1511c:	1000051e 	bne	r2,zero,15134 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   15120:	e0bfff03 	ldbu	r2,-4(fp)
   15124:	10803fe0 	cmpeqi	r2,r2,255
   15128:	1000021e 	bne	r2,zero,15134 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   1512c:	00800a84 	movi	r2,42
   15130:	00006006 	br	152b4 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15134:	0005303a 	rdctl	r2,status
   15138:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1513c:	e0fffe17 	ldw	r3,-8(fp)
   15140:	00bfff84 	movi	r2,-2
   15144:	1884703a 	and	r2,r3,r2
   15148:	1001703a 	wrctl	status,r2
  
  return context;
   1514c:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   15150:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   15154:	e0bfff03 	ldbu	r2,-4(fp)
   15158:	10803fd8 	cmpnei	r2,r2,255
   1515c:	1000061e 	bne	r2,zero,15178 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
   15160:	d0a7f817 	ldw	r2,-24608(gp)
   15164:	10800c83 	ldbu	r2,50(r2)
   15168:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   1516c:	00800044 	movi	r2,1
   15170:	e0bff705 	stb	r2,-36(fp)
   15174:	00000906 	br	1519c <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   15178:	d0a7f817 	ldw	r2,-24608(gp)
   1517c:	10800c83 	ldbu	r2,50(r2)
   15180:	10c03fcc 	andi	r3,r2,255
   15184:	e0bfff03 	ldbu	r2,-4(fp)
   15188:	1880031e 	bne	r3,r2,15198 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
   1518c:	00800044 	movi	r2,1
   15190:	e0bff705 	stb	r2,-36(fp)
   15194:	00000106 	br	1519c <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   15198:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1519c:	e0ffff03 	ldbu	r3,-4(fp)
   151a0:	008000b4 	movhi	r2,2
   151a4:	109cd004 	addi	r2,r2,29504
   151a8:	18c7883a 	add	r3,r3,r3
   151ac:	18c7883a 	add	r3,r3,r3
   151b0:	10c5883a 	add	r2,r2,r3
   151b4:	10800017 	ldw	r2,0(r2)
   151b8:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   151bc:	e0bffa17 	ldw	r2,-24(fp)
   151c0:	1000061e 	bne	r2,zero,151dc <OSTaskSuspend+0xf8>
   151c4:	e0bff817 	ldw	r2,-32(fp)
   151c8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   151cc:	e0bff917 	ldw	r2,-28(fp)
   151d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   151d4:	00801204 	movi	r2,72
   151d8:	00003606 	br	152b4 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   151dc:	e0bffa17 	ldw	r2,-24(fp)
   151e0:	10800058 	cmpnei	r2,r2,1
   151e4:	1000061e 	bne	r2,zero,15200 <OSTaskSuspend+0x11c>
   151e8:	e0bff817 	ldw	r2,-32(fp)
   151ec:	e0bffb15 	stw	r2,-20(fp)
   151f0:	e0bffb17 	ldw	r2,-20(fp)
   151f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   151f8:	008010c4 	movi	r2,67
   151fc:	00002d06 	br	152b4 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
   15200:	e0bffa17 	ldw	r2,-24(fp)
   15204:	10800d03 	ldbu	r2,52(r2)
   15208:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   1520c:	e0fffd03 	ldbu	r3,-12(fp)
   15210:	e13ffd03 	ldbu	r4,-12(fp)
   15214:	d0a7f544 	addi	r2,gp,-24619
   15218:	2085883a 	add	r2,r4,r2
   1521c:	10800003 	ldbu	r2,0(r2)
   15220:	1009883a 	mov	r4,r2
   15224:	e0bffa17 	ldw	r2,-24(fp)
   15228:	10800d43 	ldbu	r2,53(r2)
   1522c:	0084303a 	nor	r2,zero,r2
   15230:	2084703a 	and	r2,r4,r2
   15234:	1009883a 	mov	r4,r2
   15238:	d0a7f544 	addi	r2,gp,-24619
   1523c:	1885883a 	add	r2,r3,r2
   15240:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   15244:	e0fffd03 	ldbu	r3,-12(fp)
   15248:	d0a7f544 	addi	r2,gp,-24619
   1524c:	1885883a 	add	r2,r3,r2
   15250:	10800003 	ldbu	r2,0(r2)
   15254:	10803fcc 	andi	r2,r2,255
   15258:	1000071e 	bne	r2,zero,15278 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   1525c:	e0bffa17 	ldw	r2,-24(fp)
   15260:	10800d83 	ldbu	r2,54(r2)
   15264:	0084303a 	nor	r2,zero,r2
   15268:	1007883a 	mov	r3,r2
   1526c:	d0a7f503 	ldbu	r2,-24620(gp)
   15270:	1884703a 	and	r2,r3,r2
   15274:	d0a7f505 	stb	r2,-24620(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   15278:	e0bffa17 	ldw	r2,-24(fp)
   1527c:	10800c03 	ldbu	r2,48(r2)
   15280:	10800214 	ori	r2,r2,8
   15284:	1007883a 	mov	r3,r2
   15288:	e0bffa17 	ldw	r2,-24(fp)
   1528c:	10c00c05 	stb	r3,48(r2)
   15290:	e0bff817 	ldw	r2,-32(fp)
   15294:	e0bffc15 	stw	r2,-16(fp)
   15298:	e0bffc17 	ldw	r2,-16(fp)
   1529c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   152a0:	e0bff703 	ldbu	r2,-36(fp)
   152a4:	10800058 	cmpnei	r2,r2,1
   152a8:	1000011e 	bne	r2,zero,152b0 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
   152ac:	000fab00 	call	fab0 <OS_Sched>
    }
    return (OS_ERR_NONE);
   152b0:	0005883a 	mov	r2,zero
}
   152b4:	e037883a 	mov	sp,fp
   152b8:	dfc00117 	ldw	ra,4(sp)
   152bc:	df000017 	ldw	fp,0(sp)
   152c0:	dec00204 	addi	sp,sp,8
   152c4:	f800283a 	ret

000152c8 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   152c8:	defff604 	addi	sp,sp,-40
   152cc:	dfc00915 	stw	ra,36(sp)
   152d0:	df000815 	stw	fp,32(sp)
   152d4:	df000804 	addi	fp,sp,32
   152d8:	2005883a 	mov	r2,r4
   152dc:	e17fff15 	stw	r5,-4(fp)
   152e0:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   152e4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   152e8:	e0bffe03 	ldbu	r2,-8(fp)
   152ec:	10800570 	cmpltui	r2,r2,21
   152f0:	1000051e 	bne	r2,zero,15308 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   152f4:	e0bffe03 	ldbu	r2,-8(fp)
   152f8:	10803fe0 	cmpeqi	r2,r2,255
   152fc:	1000021e 	bne	r2,zero,15308 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   15300:	00800a84 	movi	r2,42
   15304:	00003406 	br	153d8 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   15308:	e0bfff17 	ldw	r2,-4(fp)
   1530c:	1000021e 	bne	r2,zero,15318 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   15310:	00800244 	movi	r2,9
   15314:	00003006 	br	153d8 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15318:	0005303a 	rdctl	r2,status
   1531c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15320:	e0fffd17 	ldw	r3,-12(fp)
   15324:	00bfff84 	movi	r2,-2
   15328:	1884703a 	and	r2,r3,r2
   1532c:	1001703a 	wrctl	status,r2
  
  return context;
   15330:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   15334:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   15338:	e0bffe03 	ldbu	r2,-8(fp)
   1533c:	10803fd8 	cmpnei	r2,r2,255
   15340:	1000031e 	bne	r2,zero,15350 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
   15344:	d0a7f817 	ldw	r2,-24608(gp)
   15348:	10800c83 	ldbu	r2,50(r2)
   1534c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   15350:	e0fffe03 	ldbu	r3,-8(fp)
   15354:	008000b4 	movhi	r2,2
   15358:	109cd004 	addi	r2,r2,29504
   1535c:	18c7883a 	add	r3,r3,r3
   15360:	18c7883a 	add	r3,r3,r3
   15364:	10c5883a 	add	r2,r2,r3
   15368:	10800017 	ldw	r2,0(r2)
   1536c:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   15370:	e0bffa17 	ldw	r2,-24(fp)
   15374:	1000061e 	bne	r2,zero,15390 <OSTaskQuery+0xc8>
   15378:	e0bff817 	ldw	r2,-32(fp)
   1537c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15380:	e0bff917 	ldw	r2,-28(fp)
   15384:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   15388:	00800a44 	movi	r2,41
   1538c:	00001206 	br	153d8 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   15390:	e0bffa17 	ldw	r2,-24(fp)
   15394:	10800058 	cmpnei	r2,r2,1
   15398:	1000061e 	bne	r2,zero,153b4 <OSTaskQuery+0xec>
   1539c:	e0bff817 	ldw	r2,-32(fp)
   153a0:	e0bffb15 	stw	r2,-20(fp)
   153a4:	e0bffb17 	ldw	r2,-20(fp)
   153a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   153ac:	008010c4 	movi	r2,67
   153b0:	00000906 	br	153d8 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   153b4:	01801b04 	movi	r6,108
   153b8:	e17ffa17 	ldw	r5,-24(fp)
   153bc:	e13fff17 	ldw	r4,-4(fp)
   153c0:	000fa480 	call	fa48 <OS_MemCopy>
   153c4:	e0bff817 	ldw	r2,-32(fp)
   153c8:	e0bffc15 	stw	r2,-16(fp)
   153cc:	e0bffc17 	ldw	r2,-16(fp)
   153d0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   153d4:	0005883a 	mov	r2,zero
}
   153d8:	e037883a 	mov	sp,fp
   153dc:	dfc00117 	ldw	ra,4(sp)
   153e0:	df000017 	ldw	fp,0(sp)
   153e4:	dec00204 	addi	sp,sp,8
   153e8:	f800283a 	ret

000153ec <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   153ec:	defffc04 	addi	sp,sp,-16
   153f0:	df000315 	stw	fp,12(sp)
   153f4:	df000304 	addi	fp,sp,12
   153f8:	e13ffd15 	stw	r4,-12(fp)
   153fc:	e17ffe15 	stw	r5,-8(fp)
   15400:	3005883a 	mov	r2,r6
   15404:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   15408:	e0bfff0b 	ldhu	r2,-4(fp)
   1540c:	1080004c 	andi	r2,r2,1
   15410:	10000d26 	beq	r2,zero,15448 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   15414:	e0bfff0b 	ldhu	r2,-4(fp)
   15418:	1080008c 	andi	r2,r2,2
   1541c:	10000a26 	beq	r2,zero,15448 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   15420:	00000706 	br	15440 <OS_TaskStkClr+0x54>
                size--;
   15424:	e0bffe17 	ldw	r2,-8(fp)
   15428:	10bfffc4 	addi	r2,r2,-1
   1542c:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   15430:	e0bffd17 	ldw	r2,-12(fp)
   15434:	10c00104 	addi	r3,r2,4
   15438:	e0fffd15 	stw	r3,-12(fp)
   1543c:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   15440:	e0bffe17 	ldw	r2,-8(fp)
   15444:	103ff71e 	bne	r2,zero,15424 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015424>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   15448:	0001883a 	nop
   1544c:	e037883a 	mov	sp,fp
   15450:	df000017 	ldw	fp,0(sp)
   15454:	dec00104 	addi	sp,sp,4
   15458:	f800283a 	ret

0001545c <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   1545c:	defff904 	addi	sp,sp,-28
   15460:	dfc00615 	stw	ra,24(sp)
   15464:	df000515 	stw	fp,20(sp)
   15468:	df000504 	addi	fp,sp,20
   1546c:	2005883a 	mov	r2,r4
   15470:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15474:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   15478:	d0a7f703 	ldbu	r2,-24612(gp)
   1547c:	10803fcc 	andi	r2,r2,255
   15480:	1000311e 	bne	r2,zero,15548 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   15484:	e0bfff0b 	ldhu	r2,-4(fp)
   15488:	10003026 	beq	r2,zero,1554c <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1548c:	0005303a 	rdctl	r2,status
   15490:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15494:	e0fffe17 	ldw	r3,-8(fp)
   15498:	00bfff84 	movi	r2,-2
   1549c:	1884703a 	and	r2,r3,r2
   154a0:	1001703a 	wrctl	status,r2
  
  return context;
   154a4:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   154a8:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   154ac:	d0a7f817 	ldw	r2,-24608(gp)
   154b0:	10800d03 	ldbu	r2,52(r2)
   154b4:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   154b8:	e0fffd03 	ldbu	r3,-12(fp)
   154bc:	e13ffd03 	ldbu	r4,-12(fp)
   154c0:	d0a7f544 	addi	r2,gp,-24619
   154c4:	2085883a 	add	r2,r4,r2
   154c8:	10800003 	ldbu	r2,0(r2)
   154cc:	1009883a 	mov	r4,r2
   154d0:	d0a7f817 	ldw	r2,-24608(gp)
   154d4:	10800d43 	ldbu	r2,53(r2)
   154d8:	0084303a 	nor	r2,zero,r2
   154dc:	2084703a 	and	r2,r4,r2
   154e0:	1009883a 	mov	r4,r2
   154e4:	d0a7f544 	addi	r2,gp,-24619
   154e8:	1885883a 	add	r2,r3,r2
   154ec:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   154f0:	e0fffd03 	ldbu	r3,-12(fp)
   154f4:	d0a7f544 	addi	r2,gp,-24619
   154f8:	1885883a 	add	r2,r3,r2
   154fc:	10800003 	ldbu	r2,0(r2)
   15500:	10803fcc 	andi	r2,r2,255
   15504:	1000071e 	bne	r2,zero,15524 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   15508:	d0a7f817 	ldw	r2,-24608(gp)
   1550c:	10800d83 	ldbu	r2,54(r2)
   15510:	0084303a 	nor	r2,zero,r2
   15514:	1007883a 	mov	r3,r2
   15518:	d0a7f503 	ldbu	r2,-24620(gp)
   1551c:	1884703a 	and	r2,r3,r2
   15520:	d0a7f505 	stb	r2,-24620(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   15524:	d0a7f817 	ldw	r2,-24608(gp)
   15528:	e0ffff0b 	ldhu	r3,-4(fp)
   1552c:	10c00b8d 	sth	r3,46(r2)
   15530:	e0bffb17 	ldw	r2,-20(fp)
   15534:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15538:	e0bffc17 	ldw	r2,-16(fp)
   1553c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   15540:	000fab00 	call	fab0 <OS_Sched>
   15544:	00000106 	br	1554c <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
   15548:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
   1554c:	e037883a 	mov	sp,fp
   15550:	dfc00117 	ldw	ra,4(sp)
   15554:	df000017 	ldw	fp,0(sp)
   15558:	dec00204 	addi	sp,sp,8
   1555c:	f800283a 	ret

00015560 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   15560:	defff804 	addi	sp,sp,-32
   15564:	dfc00715 	stw	ra,28(sp)
   15568:	df000615 	stw	fp,24(sp)
   1556c:	df000604 	addi	fp,sp,24
   15570:	2015883a 	mov	r10,r4
   15574:	2809883a 	mov	r4,r5
   15578:	3007883a 	mov	r3,r6
   1557c:	3805883a 	mov	r2,r7
   15580:	e2bffc05 	stb	r10,-16(fp)
   15584:	e13ffd05 	stb	r4,-12(fp)
   15588:	e0fffe05 	stb	r3,-8(fp)
   1558c:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   15590:	d0a7f703 	ldbu	r2,-24612(gp)
   15594:	10803fcc 	andi	r2,r2,255
   15598:	10000226 	beq	r2,zero,155a4 <OSTimeDlyHMSM+0x44>
        return (OS_ERR_TIME_DLY_ISR);
   1559c:	00801544 	movi	r2,85
   155a0:	00004206 	br	156ac <OSTimeDlyHMSM+0x14c>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   155a4:	e0bffc03 	ldbu	r2,-16(fp)
   155a8:	1000081e 	bne	r2,zero,155cc <OSTimeDlyHMSM+0x6c>
        if (minutes == 0) {
   155ac:	e0bffd03 	ldbu	r2,-12(fp)
   155b0:	1000061e 	bne	r2,zero,155cc <OSTimeDlyHMSM+0x6c>
            if (seconds == 0) {
   155b4:	e0bffe03 	ldbu	r2,-8(fp)
   155b8:	1000041e 	bne	r2,zero,155cc <OSTimeDlyHMSM+0x6c>
                if (ms == 0) {
   155bc:	e0bfff0b 	ldhu	r2,-4(fp)
   155c0:	1000021e 	bne	r2,zero,155cc <OSTimeDlyHMSM+0x6c>
                    return (OS_ERR_TIME_ZERO_DLY);
   155c4:	00801504 	movi	r2,84
   155c8:	00003806 	br	156ac <OSTimeDlyHMSM+0x14c>
                }
            }
        }
    }
    if (minutes > 59) {
   155cc:	e0bffd03 	ldbu	r2,-12(fp)
   155d0:	10800f30 	cmpltui	r2,r2,60
   155d4:	1000021e 	bne	r2,zero,155e0 <OSTimeDlyHMSM+0x80>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   155d8:	00801444 	movi	r2,81
   155dc:	00003306 	br	156ac <OSTimeDlyHMSM+0x14c>
    }
    if (seconds > 59) {
   155e0:	e0bffe03 	ldbu	r2,-8(fp)
   155e4:	10800f30 	cmpltui	r2,r2,60
   155e8:	1000021e 	bne	r2,zero,155f4 <OSTimeDlyHMSM+0x94>
        return (OS_ERR_TIME_INVALID_SECONDS);
   155ec:	00801484 	movi	r2,82
   155f0:	00002e06 	br	156ac <OSTimeDlyHMSM+0x14c>
    }
    if (ms > 999) {
   155f4:	e0bfff0b 	ldhu	r2,-4(fp)
   155f8:	1080fa30 	cmpltui	r2,r2,1000
   155fc:	1000021e 	bne	r2,zero,15608 <OSTimeDlyHMSM+0xa8>
        return (OS_ERR_TIME_INVALID_MS);
   15600:	008014c4 	movi	r2,83
   15604:	00002906 	br	156ac <OSTimeDlyHMSM+0x14c>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   15608:	e0bffc03 	ldbu	r2,-16(fp)
   1560c:	10c38424 	muli	r3,r2,3600
   15610:	e0bffd03 	ldbu	r2,-12(fp)
   15614:	10800f24 	muli	r2,r2,60
   15618:	1887883a 	add	r3,r3,r2
   1561c:	e0bffe03 	ldbu	r2,-8(fp)
   15620:	1885883a 	add	r2,r3,r2
   15624:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   15628:	e0bfff0b 	ldhu	r2,-4(fp)
   1562c:	10800f84 	addi	r2,r2,62
   15630:	100690fa 	slli	r3,r2,3
   15634:	008418b4 	movhi	r2,4194
   15638:	109374c4 	addi	r2,r2,19923
   1563c:	188a383a 	mulxuu	r5,r3,r2
   15640:	1885383a 	mul	r2,r3,r2
   15644:	1011883a 	mov	r8,r2
   15648:	2813883a 	mov	r9,r5
   1564c:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   15650:	2085883a 	add	r2,r4,r2
   15654:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   15658:	e0bffb17 	ldw	r2,-20(fp)
   1565c:	1004d43a 	srli	r2,r2,16
   15660:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   15664:	e0bffb17 	ldw	r2,-20(fp)
   15668:	10bfffcc 	andi	r2,r2,65535
   1566c:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
   15670:	e0bffb17 	ldw	r2,-20(fp)
   15674:	10bfffcc 	andi	r2,r2,65535
   15678:	1009883a 	mov	r4,r2
   1567c:	001545c0 	call	1545c <OSTimeDly>
    while (loops > 0) {
   15680:	00000706 	br	156a0 <OSTimeDlyHMSM+0x140>
        OSTimeDly((INT16U)32768u);
   15684:	01200014 	movui	r4,32768
   15688:	001545c0 	call	1545c <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   1568c:	01200014 	movui	r4,32768
   15690:	001545c0 	call	1545c <OSTimeDly>
        loops--;
   15694:	e0bffa0b 	ldhu	r2,-24(fp)
   15698:	10bfffc4 	addi	r2,r2,-1
   1569c:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   156a0:	e0bffa0b 	ldhu	r2,-24(fp)
   156a4:	103ff71e 	bne	r2,zero,15684 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015684>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   156a8:	0005883a 	mov	r2,zero
}
   156ac:	e037883a 	mov	sp,fp
   156b0:	dfc00117 	ldw	ra,4(sp)
   156b4:	df000017 	ldw	fp,0(sp)
   156b8:	dec00204 	addi	sp,sp,8
   156bc:	f800283a 	ret

000156c0 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   156c0:	defff504 	addi	sp,sp,-44
   156c4:	dfc00a15 	stw	ra,40(sp)
   156c8:	df000915 	stw	fp,36(sp)
   156cc:	df000904 	addi	fp,sp,36
   156d0:	2005883a 	mov	r2,r4
   156d4:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   156d8:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   156dc:	e0bfff03 	ldbu	r2,-4(fp)
   156e0:	10800530 	cmpltui	r2,r2,20
   156e4:	1000021e 	bne	r2,zero,156f0 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   156e8:	00800a84 	movi	r2,42
   156ec:	00006406 	br	15880 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   156f0:	0005303a 	rdctl	r2,status
   156f4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   156f8:	e0fffe17 	ldw	r3,-8(fp)
   156fc:	00bfff84 	movi	r2,-2
   15700:	1884703a 	and	r2,r3,r2
   15704:	1001703a 	wrctl	status,r2
  
  return context;
   15708:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   1570c:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   15710:	e0ffff03 	ldbu	r3,-4(fp)
   15714:	008000b4 	movhi	r2,2
   15718:	109cd004 	addi	r2,r2,29504
   1571c:	18c7883a 	add	r3,r3,r3
   15720:	18c7883a 	add	r3,r3,r3
   15724:	10c5883a 	add	r2,r2,r3
   15728:	10800017 	ldw	r2,0(r2)
   1572c:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
   15730:	e0bff917 	ldw	r2,-28(fp)
   15734:	1000061e 	bne	r2,zero,15750 <OSTimeDlyResume+0x90>
   15738:	e0bff717 	ldw	r2,-36(fp)
   1573c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15740:	e0bff817 	ldw	r2,-32(fp)
   15744:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   15748:	008010c4 	movi	r2,67
   1574c:	00004c06 	br	15880 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   15750:	e0bff917 	ldw	r2,-28(fp)
   15754:	10800058 	cmpnei	r2,r2,1
   15758:	1000061e 	bne	r2,zero,15774 <OSTimeDlyResume+0xb4>
   1575c:	e0bff717 	ldw	r2,-36(fp)
   15760:	e0bffa15 	stw	r2,-24(fp)
   15764:	e0bffa17 	ldw	r2,-24(fp)
   15768:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   1576c:	008010c4 	movi	r2,67
   15770:	00004306 	br	15880 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   15774:	e0bff917 	ldw	r2,-28(fp)
   15778:	10800b8b 	ldhu	r2,46(r2)
   1577c:	10bfffcc 	andi	r2,r2,65535
   15780:	1000061e 	bne	r2,zero,1579c <OSTimeDlyResume+0xdc>
   15784:	e0bff717 	ldw	r2,-36(fp)
   15788:	e0bffb15 	stw	r2,-20(fp)
   1578c:	e0bffb17 	ldw	r2,-20(fp)
   15790:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   15794:	00801404 	movi	r2,80
   15798:	00003906 	br	15880 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   1579c:	e0bff917 	ldw	r2,-28(fp)
   157a0:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   157a4:	e0bff917 	ldw	r2,-28(fp)
   157a8:	10800c03 	ldbu	r2,48(r2)
   157ac:	10803fcc 	andi	r2,r2,255
   157b0:	10800dcc 	andi	r2,r2,55
   157b4:	10000b26 	beq	r2,zero,157e4 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   157b8:	e0bff917 	ldw	r2,-28(fp)
   157bc:	10c00c03 	ldbu	r3,48(r2)
   157c0:	00bff204 	movi	r2,-56
   157c4:	1884703a 	and	r2,r3,r2
   157c8:	1007883a 	mov	r3,r2
   157cc:	e0bff917 	ldw	r2,-28(fp)
   157d0:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   157d4:	e0bff917 	ldw	r2,-28(fp)
   157d8:	00c00044 	movi	r3,1
   157dc:	10c00c45 	stb	r3,49(r2)
   157e0:	00000206 	br	157ec <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   157e4:	e0bff917 	ldw	r2,-28(fp)
   157e8:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   157ec:	e0bff917 	ldw	r2,-28(fp)
   157f0:	10800c03 	ldbu	r2,48(r2)
   157f4:	10803fcc 	andi	r2,r2,255
   157f8:	1080020c 	andi	r2,r2,8
   157fc:	10001b1e 	bne	r2,zero,1586c <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   15800:	e0bff917 	ldw	r2,-28(fp)
   15804:	10c00d83 	ldbu	r3,54(r2)
   15808:	d0a7f503 	ldbu	r2,-24620(gp)
   1580c:	1884b03a 	or	r2,r3,r2
   15810:	d0a7f505 	stb	r2,-24620(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   15814:	e0bff917 	ldw	r2,-28(fp)
   15818:	10800d03 	ldbu	r2,52(r2)
   1581c:	10c03fcc 	andi	r3,r2,255
   15820:	e0bff917 	ldw	r2,-28(fp)
   15824:	10800d03 	ldbu	r2,52(r2)
   15828:	11003fcc 	andi	r4,r2,255
   1582c:	d0a7f544 	addi	r2,gp,-24619
   15830:	2085883a 	add	r2,r4,r2
   15834:	11000003 	ldbu	r4,0(r2)
   15838:	e0bff917 	ldw	r2,-28(fp)
   1583c:	10800d43 	ldbu	r2,53(r2)
   15840:	2084b03a 	or	r2,r4,r2
   15844:	1009883a 	mov	r4,r2
   15848:	d0a7f544 	addi	r2,gp,-24619
   1584c:	1885883a 	add	r2,r3,r2
   15850:	11000005 	stb	r4,0(r2)
   15854:	e0bff717 	ldw	r2,-36(fp)
   15858:	e0bffc15 	stw	r2,-16(fp)
   1585c:	e0bffc17 	ldw	r2,-16(fp)
   15860:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   15864:	000fab00 	call	fab0 <OS_Sched>
   15868:	00000406 	br	1587c <OSTimeDlyResume+0x1bc>
   1586c:	e0bff717 	ldw	r2,-36(fp)
   15870:	e0bffd15 	stw	r2,-12(fp)
   15874:	e0bffd17 	ldw	r2,-12(fp)
   15878:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   1587c:	0005883a 	mov	r2,zero
}
   15880:	e037883a 	mov	sp,fp
   15884:	dfc00117 	ldw	ra,4(sp)
   15888:	df000017 	ldw	fp,0(sp)
   1588c:	dec00204 	addi	sp,sp,8
   15890:	f800283a 	ret

00015894 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   15894:	defffb04 	addi	sp,sp,-20
   15898:	df000415 	stw	fp,16(sp)
   1589c:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   158a0:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   158a4:	0005303a 	rdctl	r2,status
   158a8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   158ac:	e0fffe17 	ldw	r3,-8(fp)
   158b0:	00bfff84 	movi	r2,-2
   158b4:	1884703a 	and	r2,r3,r2
   158b8:	1001703a 	wrctl	status,r2
  
  return context;
   158bc:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   158c0:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   158c4:	d0a7f917 	ldw	r2,-24604(gp)
   158c8:	e0bffd15 	stw	r2,-12(fp)
   158cc:	e0bffc17 	ldw	r2,-16(fp)
   158d0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   158d4:	e0bfff17 	ldw	r2,-4(fp)
   158d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   158dc:	e0bffd17 	ldw	r2,-12(fp)
}
   158e0:	e037883a 	mov	sp,fp
   158e4:	df000017 	ldw	fp,0(sp)
   158e8:	dec00104 	addi	sp,sp,4
   158ec:	f800283a 	ret

000158f0 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   158f0:	defffb04 	addi	sp,sp,-20
   158f4:	df000415 	stw	fp,16(sp)
   158f8:	df000404 	addi	fp,sp,16
   158fc:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15900:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15904:	0005303a 	rdctl	r2,status
   15908:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1590c:	e0fffd17 	ldw	r3,-12(fp)
   15910:	00bfff84 	movi	r2,-2
   15914:	1884703a 	and	r2,r3,r2
   15918:	1001703a 	wrctl	status,r2
  
  return context;
   1591c:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   15920:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   15924:	e0bfff17 	ldw	r2,-4(fp)
   15928:	d0a7f915 	stw	r2,-24604(gp)
   1592c:	e0bffc17 	ldw	r2,-16(fp)
   15930:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15934:	e0bffe17 	ldw	r2,-8(fp)
   15938:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   1593c:	0001883a 	nop
   15940:	e037883a 	mov	sp,fp
   15944:	df000017 	ldw	fp,0(sp)
   15948:	dec00104 	addi	sp,sp,4
   1594c:	f800283a 	ret

00015950 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   15950:	defffd04 	addi	sp,sp,-12
   15954:	dfc00215 	stw	ra,8(sp)
   15958:	df000115 	stw	fp,4(sp)
   1595c:	df000104 	addi	fp,sp,4
   15960:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   15964:	d1600804 	addi	r5,gp,-32736
   15968:	e13fff17 	ldw	r4,-4(fp)
   1596c:	00185840 	call	18584 <alt_dev_llist_insert>
}
   15970:	e037883a 	mov	sp,fp
   15974:	dfc00117 	ldw	ra,4(sp)
   15978:	df000017 	ldw	fp,0(sp)
   1597c:	dec00204 	addi	sp,sp,8
   15980:	f800283a 	ret

00015984 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   15984:	defffd04 	addi	sp,sp,-12
   15988:	dfc00215 	stw	ra,8(sp)
   1598c:	df000115 	stw	fp,4(sp)
   15990:	df000104 	addi	fp,sp,4
   15994:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
   15998:	0018e640 	call	18e64 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1599c:	00800044 	movi	r2,1
   159a0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   159a4:	0001883a 	nop
   159a8:	e037883a 	mov	sp,fp
   159ac:	dfc00117 	ldw	ra,4(sp)
   159b0:	df000017 	ldw	fp,0(sp)
   159b4:	dec00204 	addi	sp,sp,8
   159b8:	f800283a 	ret

000159bc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   159bc:	defffb04 	addi	sp,sp,-20
   159c0:	dfc00415 	stw	ra,16(sp)
   159c4:	df000315 	stw	fp,12(sp)
   159c8:	df000304 	addi	fp,sp,12
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
   159cc:	01c00204 	movi	r7,8
   159d0:	000d883a 	mov	r6,zero
   159d4:	000b883a 	mov	r5,zero
   159d8:	013fc834 	movhi	r4,65312
   159dc:	21080004 	addi	r4,r4,8192
   159e0:	00170c80 	call	170c8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER_2, Interval_Timer_2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   159e4:	01800204 	movi	r6,8
   159e8:	000b883a 	mov	r5,zero
   159ec:	010000b4 	movhi	r4,2
   159f0:	212b7d04 	addi	r4,r4,-21004
   159f4:	001648c0 	call	1648c <altera_avalon_jtag_uart_init>
   159f8:	010000b4 	movhi	r4,2
   159fc:	212b7304 	addi	r4,r4,-21044
   15a00:	00159500 	call	15950 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
   15a04:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
   15a08:	010000b4 	movhi	r4,2
   15a0c:	212f8e04 	addi	r4,r4,-16840
   15a10:	00159500 	call	15950 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
   15a14:	010000b4 	movhi	r4,2
   15a18:	212f9a04 	addi	r4,r4,-16792
   15a1c:	00159500 	call	15950 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
   15a20:	010000b4 	movhi	r4,2
   15a24:	212fa604 	addi	r4,r4,-16744
   15a28:	00171f00 	call	171f0 <alt_up_character_lcd_init>
   15a2c:	010000b4 	movhi	r4,2
   15a30:	212fa604 	addi	r4,r4,-16744
   15a34:	00159500 	call	15950 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
   15a38:	010000b4 	movhi	r4,2
   15a3c:	212fb104 	addi	r4,r4,-16700
   15a40:	00159500 	call	15950 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
   15a44:	010000b4 	movhi	r4,2
   15a48:	212fbc04 	addi	r4,r4,-16656
   15a4c:	0017ae40 	call	17ae4 <alt_up_ps2_init>
   15a50:	010000b4 	movhi	r4,2
   15a54:	212fbc04 	addi	r4,r4,-16656
   15a58:	00159500 	call	15950 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
   15a5c:	010000b4 	movhi	r4,2
   15a60:	212fca04 	addi	r4,r4,-16600
   15a64:	0017ae40 	call	17ae4 <alt_up_ps2_init>
   15a68:	010000b4 	movhi	r4,2
   15a6c:	212fca04 	addi	r4,r4,-16600
   15a70:	00159500 	call	15950 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
   15a74:	010000b4 	movhi	r4,2
   15a78:	212fd804 	addi	r4,r4,-16544
   15a7c:	00159500 	call	15950 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
   15a80:	010000b4 	movhi	r4,2
   15a84:	212fe304 	addi	r4,r4,-16500
   15a88:	00159500 	call	15950 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_CHAR_BUF_SUBSYSTEM_CHAR_BUF_DMA, VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA);
   15a8c:	008000b4 	movhi	r2,2
   15a90:	10aff004 	addi	r2,r2,-16448
   15a94:	10800a17 	ldw	r2,40(r2)
   15a98:	10800017 	ldw	r2,0(r2)
   15a9c:	1007883a 	mov	r3,r2
   15aa0:	008000b4 	movhi	r2,2
   15aa4:	10aff004 	addi	r2,r2,-16448
   15aa8:	10c00b15 	stw	r3,44(r2)
   15aac:	008000b4 	movhi	r2,2
   15ab0:	10aff004 	addi	r2,r2,-16448
   15ab4:	10800a17 	ldw	r2,40(r2)
   15ab8:	10800104 	addi	r2,r2,4
   15abc:	10800017 	ldw	r2,0(r2)
   15ac0:	1007883a 	mov	r3,r2
   15ac4:	008000b4 	movhi	r2,2
   15ac8:	10aff004 	addi	r2,r2,-16448
   15acc:	10c00c15 	stw	r3,48(r2)
   15ad0:	008000b4 	movhi	r2,2
   15ad4:	10aff004 	addi	r2,r2,-16448
   15ad8:	10800a17 	ldw	r2,40(r2)
   15adc:	10800204 	addi	r2,r2,8
   15ae0:	10800017 	ldw	r2,0(r2)
   15ae4:	10ffffcc 	andi	r3,r2,65535
   15ae8:	008000b4 	movhi	r2,2
   15aec:	10aff004 	addi	r2,r2,-16448
   15af0:	10c01115 	stw	r3,68(r2)
   15af4:	008000b4 	movhi	r2,2
   15af8:	10aff004 	addi	r2,r2,-16448
   15afc:	10800a17 	ldw	r2,40(r2)
   15b00:	10800204 	addi	r2,r2,8
   15b04:	10800017 	ldw	r2,0(r2)
   15b08:	1006d43a 	srli	r3,r2,16
   15b0c:	008000b4 	movhi	r2,2
   15b10:	10aff004 	addi	r2,r2,-16448
   15b14:	10c01215 	stw	r3,72(r2)
   15b18:	008000b4 	movhi	r2,2
   15b1c:	10aff004 	addi	r2,r2,-16448
   15b20:	10800a17 	ldw	r2,40(r2)
   15b24:	10800304 	addi	r2,r2,12
   15b28:	10800017 	ldw	r2,0(r2)
   15b2c:	1005d07a 	srai	r2,r2,1
   15b30:	10c0004c 	andi	r3,r2,1
   15b34:	008000b4 	movhi	r2,2
   15b38:	10aff004 	addi	r2,r2,-16448
   15b3c:	10c00d15 	stw	r3,52(r2)
   15b40:	008000b4 	movhi	r2,2
   15b44:	10aff004 	addi	r2,r2,-16448
   15b48:	10800a17 	ldw	r2,40(r2)
   15b4c:	10800304 	addi	r2,r2,12
   15b50:	10800017 	ldw	r2,0(r2)
   15b54:	1005d23a 	srai	r2,r2,8
   15b58:	108003cc 	andi	r2,r2,15
   15b5c:	10800044 	addi	r2,r2,1
   15b60:	1007883a 	mov	r3,r2
   15b64:	008000b4 	movhi	r2,2
   15b68:	10aff004 	addi	r2,r2,-16448
   15b6c:	10c00e15 	stw	r3,56(r2)
   15b70:	008000b4 	movhi	r2,2
   15b74:	10aff004 	addi	r2,r2,-16448
   15b78:	10800a17 	ldw	r2,40(r2)
   15b7c:	10800304 	addi	r2,r2,12
   15b80:	10800017 	ldw	r2,0(r2)
   15b84:	1005d1ba 	srai	r2,r2,6
   15b88:	108000cc 	andi	r2,r2,3
   15b8c:	10800044 	addi	r2,r2,1
   15b90:	1007883a 	mov	r3,r2
   15b94:	008000b4 	movhi	r2,2
   15b98:	10aff004 	addi	r2,r2,-16448
   15b9c:	10c00f15 	stw	r3,60(r2)
   15ba0:	008000b4 	movhi	r2,2
   15ba4:	10aff004 	addi	r2,r2,-16448
   15ba8:	10800e17 	ldw	r2,56(r2)
   15bac:	1007883a 	mov	r3,r2
   15bb0:	008000b4 	movhi	r2,2
   15bb4:	10aff004 	addi	r2,r2,-16448
   15bb8:	10800f17 	ldw	r2,60(r2)
   15bbc:	1885383a 	mul	r2,r3,r2
   15bc0:	e0bffd05 	stb	r2,-12(fp)
   15bc4:	e0bffd03 	ldbu	r2,-12(fp)
   15bc8:	10800268 	cmpgeui	r2,r2,9
   15bcc:	1000051e 	bne	r2,zero,15be4 <alt_sys_init+0x228>
   15bd0:	008000b4 	movhi	r2,2
   15bd4:	10aff004 	addi	r2,r2,-16448
   15bd8:	00c00044 	movi	r3,1
   15bdc:	10c01015 	stw	r3,64(r2)
   15be0:	00000c06 	br	15c14 <alt_sys_init+0x258>
   15be4:	e0bffd03 	ldbu	r2,-12(fp)
   15be8:	10800468 	cmpgeui	r2,r2,17
   15bec:	1000051e 	bne	r2,zero,15c04 <alt_sys_init+0x248>
   15bf0:	008000b4 	movhi	r2,2
   15bf4:	10aff004 	addi	r2,r2,-16448
   15bf8:	00c00084 	movi	r3,2
   15bfc:	10c01015 	stw	r3,64(r2)
   15c00:	00000406 	br	15c14 <alt_sys_init+0x258>
   15c04:	008000b4 	movhi	r2,2
   15c08:	10aff004 	addi	r2,r2,-16448
   15c0c:	00c00104 	movi	r3,4
   15c10:	10c01015 	stw	r3,64(r2)
   15c14:	008000b4 	movhi	r2,2
   15c18:	10aff004 	addi	r2,r2,-16448
   15c1c:	10800a17 	ldw	r2,40(r2)
   15c20:	10800304 	addi	r2,r2,12
   15c24:	10800017 	ldw	r2,0(r2)
   15c28:	1005d43a 	srai	r2,r2,16
   15c2c:	e0bffd45 	stb	r2,-11(fp)
   15c30:	008000b4 	movhi	r2,2
   15c34:	10aff004 	addi	r2,r2,-16448
   15c38:	10800a17 	ldw	r2,40(r2)
   15c3c:	10800304 	addi	r2,r2,12
   15c40:	10800017 	ldw	r2,0(r2)
   15c44:	1004d63a 	srli	r2,r2,24
   15c48:	e0bffd85 	stb	r2,-10(fp)
   15c4c:	008000b4 	movhi	r2,2
   15c50:	10aff004 	addi	r2,r2,-16448
   15c54:	10801017 	ldw	r2,64(r2)
   15c58:	10800058 	cmpnei	r2,r2,1
   15c5c:	1000041e 	bne	r2,zero,15c70 <alt_sys_init+0x2b4>
   15c60:	008000b4 	movhi	r2,2
   15c64:	10aff004 	addi	r2,r2,-16448
   15c68:	10001315 	stw	zero,76(r2)
   15c6c:	00000e06 	br	15ca8 <alt_sys_init+0x2ec>
   15c70:	008000b4 	movhi	r2,2
   15c74:	10aff004 	addi	r2,r2,-16448
   15c78:	10801017 	ldw	r2,64(r2)
   15c7c:	10800098 	cmpnei	r2,r2,2
   15c80:	1000051e 	bne	r2,zero,15c98 <alt_sys_init+0x2dc>
   15c84:	008000b4 	movhi	r2,2
   15c88:	10aff004 	addi	r2,r2,-16448
   15c8c:	00c00044 	movi	r3,1
   15c90:	10c01315 	stw	r3,76(r2)
   15c94:	00000406 	br	15ca8 <alt_sys_init+0x2ec>
   15c98:	008000b4 	movhi	r2,2
   15c9c:	10aff004 	addi	r2,r2,-16448
   15ca0:	00c00084 	movi	r3,2
   15ca4:	10c01315 	stw	r3,76(r2)
   15ca8:	e0bffd43 	ldbu	r2,-11(fp)
   15cac:	00c00804 	movi	r3,32
   15cb0:	1885c83a 	sub	r2,r3,r2
   15cb4:	00ffffc4 	movi	r3,-1
   15cb8:	1886d83a 	srl	r3,r3,r2
   15cbc:	008000b4 	movhi	r2,2
   15cc0:	10aff004 	addi	r2,r2,-16448
   15cc4:	10c01415 	stw	r3,80(r2)
   15cc8:	e0fffd43 	ldbu	r3,-11(fp)
   15ccc:	008000b4 	movhi	r2,2
   15cd0:	10aff004 	addi	r2,r2,-16448
   15cd4:	10801317 	ldw	r2,76(r2)
   15cd8:	1887883a 	add	r3,r3,r2
   15cdc:	008000b4 	movhi	r2,2
   15ce0:	10aff004 	addi	r2,r2,-16448
   15ce4:	10c01515 	stw	r3,84(r2)
   15ce8:	e0bffd83 	ldbu	r2,-10(fp)
   15cec:	00c00804 	movi	r3,32
   15cf0:	1885c83a 	sub	r2,r3,r2
   15cf4:	00ffffc4 	movi	r3,-1
   15cf8:	1886d83a 	srl	r3,r3,r2
   15cfc:	008000b4 	movhi	r2,2
   15d00:	10aff004 	addi	r2,r2,-16448
   15d04:	10c01615 	stw	r3,88(r2)
   15d08:	010000b4 	movhi	r4,2
   15d0c:	212ff004 	addi	r4,r4,-16448
   15d10:	00159500 	call	15950 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
   15d14:	008000b4 	movhi	r2,2
   15d18:	10b00704 	addi	r2,r2,-16356
   15d1c:	10800a17 	ldw	r2,40(r2)
   15d20:	10800017 	ldw	r2,0(r2)
   15d24:	1007883a 	mov	r3,r2
   15d28:	008000b4 	movhi	r2,2
   15d2c:	10b00704 	addi	r2,r2,-16356
   15d30:	10c00b15 	stw	r3,44(r2)
   15d34:	008000b4 	movhi	r2,2
   15d38:	10b00704 	addi	r2,r2,-16356
   15d3c:	10800a17 	ldw	r2,40(r2)
   15d40:	10800104 	addi	r2,r2,4
   15d44:	10800017 	ldw	r2,0(r2)
   15d48:	1007883a 	mov	r3,r2
   15d4c:	008000b4 	movhi	r2,2
   15d50:	10b00704 	addi	r2,r2,-16356
   15d54:	10c00c15 	stw	r3,48(r2)
   15d58:	008000b4 	movhi	r2,2
   15d5c:	10b00704 	addi	r2,r2,-16356
   15d60:	10800a17 	ldw	r2,40(r2)
   15d64:	10800204 	addi	r2,r2,8
   15d68:	10800017 	ldw	r2,0(r2)
   15d6c:	10ffffcc 	andi	r3,r2,65535
   15d70:	008000b4 	movhi	r2,2
   15d74:	10b00704 	addi	r2,r2,-16356
   15d78:	10c01115 	stw	r3,68(r2)
   15d7c:	008000b4 	movhi	r2,2
   15d80:	10b00704 	addi	r2,r2,-16356
   15d84:	10800a17 	ldw	r2,40(r2)
   15d88:	10800204 	addi	r2,r2,8
   15d8c:	10800017 	ldw	r2,0(r2)
   15d90:	1006d43a 	srli	r3,r2,16
   15d94:	008000b4 	movhi	r2,2
   15d98:	10b00704 	addi	r2,r2,-16356
   15d9c:	10c01215 	stw	r3,72(r2)
   15da0:	008000b4 	movhi	r2,2
   15da4:	10b00704 	addi	r2,r2,-16356
   15da8:	10800a17 	ldw	r2,40(r2)
   15dac:	10800304 	addi	r2,r2,12
   15db0:	10800017 	ldw	r2,0(r2)
   15db4:	1005d07a 	srai	r2,r2,1
   15db8:	10c0004c 	andi	r3,r2,1
   15dbc:	008000b4 	movhi	r2,2
   15dc0:	10b00704 	addi	r2,r2,-16356
   15dc4:	10c00d15 	stw	r3,52(r2)
   15dc8:	008000b4 	movhi	r2,2
   15dcc:	10b00704 	addi	r2,r2,-16356
   15dd0:	10800a17 	ldw	r2,40(r2)
   15dd4:	10800304 	addi	r2,r2,12
   15dd8:	10800017 	ldw	r2,0(r2)
   15ddc:	1005d23a 	srai	r2,r2,8
   15de0:	108003cc 	andi	r2,r2,15
   15de4:	10800044 	addi	r2,r2,1
   15de8:	1007883a 	mov	r3,r2
   15dec:	008000b4 	movhi	r2,2
   15df0:	10b00704 	addi	r2,r2,-16356
   15df4:	10c00e15 	stw	r3,56(r2)
   15df8:	008000b4 	movhi	r2,2
   15dfc:	10b00704 	addi	r2,r2,-16356
   15e00:	10800a17 	ldw	r2,40(r2)
   15e04:	10800304 	addi	r2,r2,12
   15e08:	10800017 	ldw	r2,0(r2)
   15e0c:	1005d1ba 	srai	r2,r2,6
   15e10:	108000cc 	andi	r2,r2,3
   15e14:	10800044 	addi	r2,r2,1
   15e18:	1007883a 	mov	r3,r2
   15e1c:	008000b4 	movhi	r2,2
   15e20:	10b00704 	addi	r2,r2,-16356
   15e24:	10c00f15 	stw	r3,60(r2)
   15e28:	008000b4 	movhi	r2,2
   15e2c:	10b00704 	addi	r2,r2,-16356
   15e30:	10800e17 	ldw	r2,56(r2)
   15e34:	1007883a 	mov	r3,r2
   15e38:	008000b4 	movhi	r2,2
   15e3c:	10b00704 	addi	r2,r2,-16356
   15e40:	10800f17 	ldw	r2,60(r2)
   15e44:	1885383a 	mul	r2,r3,r2
   15e48:	e0bffdc5 	stb	r2,-9(fp)
   15e4c:	e0bffdc3 	ldbu	r2,-9(fp)
   15e50:	10800268 	cmpgeui	r2,r2,9
   15e54:	1000051e 	bne	r2,zero,15e6c <alt_sys_init+0x4b0>
   15e58:	008000b4 	movhi	r2,2
   15e5c:	10b00704 	addi	r2,r2,-16356
   15e60:	00c00044 	movi	r3,1
   15e64:	10c01015 	stw	r3,64(r2)
   15e68:	00000c06 	br	15e9c <alt_sys_init+0x4e0>
   15e6c:	e0bffdc3 	ldbu	r2,-9(fp)
   15e70:	10800468 	cmpgeui	r2,r2,17
   15e74:	1000051e 	bne	r2,zero,15e8c <alt_sys_init+0x4d0>
   15e78:	008000b4 	movhi	r2,2
   15e7c:	10b00704 	addi	r2,r2,-16356
   15e80:	00c00084 	movi	r3,2
   15e84:	10c01015 	stw	r3,64(r2)
   15e88:	00000406 	br	15e9c <alt_sys_init+0x4e0>
   15e8c:	008000b4 	movhi	r2,2
   15e90:	10b00704 	addi	r2,r2,-16356
   15e94:	00c00104 	movi	r3,4
   15e98:	10c01015 	stw	r3,64(r2)
   15e9c:	008000b4 	movhi	r2,2
   15ea0:	10b00704 	addi	r2,r2,-16356
   15ea4:	10800a17 	ldw	r2,40(r2)
   15ea8:	10800304 	addi	r2,r2,12
   15eac:	10800017 	ldw	r2,0(r2)
   15eb0:	1005d43a 	srai	r2,r2,16
   15eb4:	e0bffe05 	stb	r2,-8(fp)
   15eb8:	008000b4 	movhi	r2,2
   15ebc:	10b00704 	addi	r2,r2,-16356
   15ec0:	10800a17 	ldw	r2,40(r2)
   15ec4:	10800304 	addi	r2,r2,12
   15ec8:	10800017 	ldw	r2,0(r2)
   15ecc:	1004d63a 	srli	r2,r2,24
   15ed0:	e0bffe45 	stb	r2,-7(fp)
   15ed4:	008000b4 	movhi	r2,2
   15ed8:	10b00704 	addi	r2,r2,-16356
   15edc:	10801017 	ldw	r2,64(r2)
   15ee0:	10800058 	cmpnei	r2,r2,1
   15ee4:	1000041e 	bne	r2,zero,15ef8 <alt_sys_init+0x53c>
   15ee8:	008000b4 	movhi	r2,2
   15eec:	10b00704 	addi	r2,r2,-16356
   15ef0:	10001315 	stw	zero,76(r2)
   15ef4:	00000e06 	br	15f30 <alt_sys_init+0x574>
   15ef8:	008000b4 	movhi	r2,2
   15efc:	10b00704 	addi	r2,r2,-16356
   15f00:	10801017 	ldw	r2,64(r2)
   15f04:	10800098 	cmpnei	r2,r2,2
   15f08:	1000051e 	bne	r2,zero,15f20 <alt_sys_init+0x564>
   15f0c:	008000b4 	movhi	r2,2
   15f10:	10b00704 	addi	r2,r2,-16356
   15f14:	00c00044 	movi	r3,1
   15f18:	10c01315 	stw	r3,76(r2)
   15f1c:	00000406 	br	15f30 <alt_sys_init+0x574>
   15f20:	008000b4 	movhi	r2,2
   15f24:	10b00704 	addi	r2,r2,-16356
   15f28:	00c00084 	movi	r3,2
   15f2c:	10c01315 	stw	r3,76(r2)
   15f30:	e0bffe03 	ldbu	r2,-8(fp)
   15f34:	00c00804 	movi	r3,32
   15f38:	1885c83a 	sub	r2,r3,r2
   15f3c:	00ffffc4 	movi	r3,-1
   15f40:	1886d83a 	srl	r3,r3,r2
   15f44:	008000b4 	movhi	r2,2
   15f48:	10b00704 	addi	r2,r2,-16356
   15f4c:	10c01415 	stw	r3,80(r2)
   15f50:	e0fffe03 	ldbu	r3,-8(fp)
   15f54:	008000b4 	movhi	r2,2
   15f58:	10b00704 	addi	r2,r2,-16356
   15f5c:	10801317 	ldw	r2,76(r2)
   15f60:	1887883a 	add	r3,r3,r2
   15f64:	008000b4 	movhi	r2,2
   15f68:	10b00704 	addi	r2,r2,-16356
   15f6c:	10c01515 	stw	r3,84(r2)
   15f70:	e0bffe43 	ldbu	r2,-7(fp)
   15f74:	00c00804 	movi	r3,32
   15f78:	1885c83a 	sub	r2,r3,r2
   15f7c:	00ffffc4 	movi	r3,-1
   15f80:	1886d83a 	srl	r3,r3,r2
   15f84:	008000b4 	movhi	r2,2
   15f88:	10b00704 	addi	r2,r2,-16356
   15f8c:	10c01615 	stw	r3,88(r2)
   15f90:	010000b4 	movhi	r4,2
   15f94:	21300704 	addi	r4,r4,-16356
   15f98:	00159500 	call	15950 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VIDEO_IN_SUBSYSTEM_VIDEO_IN_DMA, Video_In_Subsystem_Video_In_DMA);
   15f9c:	008000b4 	movhi	r2,2
   15fa0:	10b01e04 	addi	r2,r2,-16264
   15fa4:	10800a17 	ldw	r2,40(r2)
   15fa8:	10800017 	ldw	r2,0(r2)
   15fac:	1007883a 	mov	r3,r2
   15fb0:	008000b4 	movhi	r2,2
   15fb4:	10b01e04 	addi	r2,r2,-16264
   15fb8:	10c00b15 	stw	r3,44(r2)
   15fbc:	008000b4 	movhi	r2,2
   15fc0:	10b01e04 	addi	r2,r2,-16264
   15fc4:	10800a17 	ldw	r2,40(r2)
   15fc8:	10800104 	addi	r2,r2,4
   15fcc:	10800017 	ldw	r2,0(r2)
   15fd0:	1007883a 	mov	r3,r2
   15fd4:	008000b4 	movhi	r2,2
   15fd8:	10b01e04 	addi	r2,r2,-16264
   15fdc:	10c00c15 	stw	r3,48(r2)
   15fe0:	008000b4 	movhi	r2,2
   15fe4:	10b01e04 	addi	r2,r2,-16264
   15fe8:	10800a17 	ldw	r2,40(r2)
   15fec:	10800204 	addi	r2,r2,8
   15ff0:	10800017 	ldw	r2,0(r2)
   15ff4:	10ffffcc 	andi	r3,r2,65535
   15ff8:	008000b4 	movhi	r2,2
   15ffc:	10b01e04 	addi	r2,r2,-16264
   16000:	10c01115 	stw	r3,68(r2)
   16004:	008000b4 	movhi	r2,2
   16008:	10b01e04 	addi	r2,r2,-16264
   1600c:	10800a17 	ldw	r2,40(r2)
   16010:	10800204 	addi	r2,r2,8
   16014:	10800017 	ldw	r2,0(r2)
   16018:	1006d43a 	srli	r3,r2,16
   1601c:	008000b4 	movhi	r2,2
   16020:	10b01e04 	addi	r2,r2,-16264
   16024:	10c01215 	stw	r3,72(r2)
   16028:	008000b4 	movhi	r2,2
   1602c:	10b01e04 	addi	r2,r2,-16264
   16030:	10800a17 	ldw	r2,40(r2)
   16034:	10800304 	addi	r2,r2,12
   16038:	10800017 	ldw	r2,0(r2)
   1603c:	1005d07a 	srai	r2,r2,1
   16040:	10c0004c 	andi	r3,r2,1
   16044:	008000b4 	movhi	r2,2
   16048:	10b01e04 	addi	r2,r2,-16264
   1604c:	10c00d15 	stw	r3,52(r2)
   16050:	008000b4 	movhi	r2,2
   16054:	10b01e04 	addi	r2,r2,-16264
   16058:	10800a17 	ldw	r2,40(r2)
   1605c:	10800304 	addi	r2,r2,12
   16060:	10800017 	ldw	r2,0(r2)
   16064:	1005d23a 	srai	r2,r2,8
   16068:	108003cc 	andi	r2,r2,15
   1606c:	10800044 	addi	r2,r2,1
   16070:	1007883a 	mov	r3,r2
   16074:	008000b4 	movhi	r2,2
   16078:	10b01e04 	addi	r2,r2,-16264
   1607c:	10c00e15 	stw	r3,56(r2)
   16080:	008000b4 	movhi	r2,2
   16084:	10b01e04 	addi	r2,r2,-16264
   16088:	10800a17 	ldw	r2,40(r2)
   1608c:	10800304 	addi	r2,r2,12
   16090:	10800017 	ldw	r2,0(r2)
   16094:	1005d1ba 	srai	r2,r2,6
   16098:	108000cc 	andi	r2,r2,3
   1609c:	10800044 	addi	r2,r2,1
   160a0:	1007883a 	mov	r3,r2
   160a4:	008000b4 	movhi	r2,2
   160a8:	10b01e04 	addi	r2,r2,-16264
   160ac:	10c00f15 	stw	r3,60(r2)
   160b0:	008000b4 	movhi	r2,2
   160b4:	10b01e04 	addi	r2,r2,-16264
   160b8:	10800e17 	ldw	r2,56(r2)
   160bc:	1007883a 	mov	r3,r2
   160c0:	008000b4 	movhi	r2,2
   160c4:	10b01e04 	addi	r2,r2,-16264
   160c8:	10800f17 	ldw	r2,60(r2)
   160cc:	1885383a 	mul	r2,r3,r2
   160d0:	e0bffe85 	stb	r2,-6(fp)
   160d4:	e0bffe83 	ldbu	r2,-6(fp)
   160d8:	10800268 	cmpgeui	r2,r2,9
   160dc:	1000051e 	bne	r2,zero,160f4 <alt_sys_init+0x738>
   160e0:	008000b4 	movhi	r2,2
   160e4:	10b01e04 	addi	r2,r2,-16264
   160e8:	00c00044 	movi	r3,1
   160ec:	10c01015 	stw	r3,64(r2)
   160f0:	00000c06 	br	16124 <alt_sys_init+0x768>
   160f4:	e0bffe83 	ldbu	r2,-6(fp)
   160f8:	10800468 	cmpgeui	r2,r2,17
   160fc:	1000051e 	bne	r2,zero,16114 <alt_sys_init+0x758>
   16100:	008000b4 	movhi	r2,2
   16104:	10b01e04 	addi	r2,r2,-16264
   16108:	00c00084 	movi	r3,2
   1610c:	10c01015 	stw	r3,64(r2)
   16110:	00000406 	br	16124 <alt_sys_init+0x768>
   16114:	008000b4 	movhi	r2,2
   16118:	10b01e04 	addi	r2,r2,-16264
   1611c:	00c00104 	movi	r3,4
   16120:	10c01015 	stw	r3,64(r2)
   16124:	008000b4 	movhi	r2,2
   16128:	10b01e04 	addi	r2,r2,-16264
   1612c:	10800a17 	ldw	r2,40(r2)
   16130:	10800304 	addi	r2,r2,12
   16134:	10800017 	ldw	r2,0(r2)
   16138:	1005d43a 	srai	r2,r2,16
   1613c:	e0bffec5 	stb	r2,-5(fp)
   16140:	008000b4 	movhi	r2,2
   16144:	10b01e04 	addi	r2,r2,-16264
   16148:	10800a17 	ldw	r2,40(r2)
   1614c:	10800304 	addi	r2,r2,12
   16150:	10800017 	ldw	r2,0(r2)
   16154:	1004d63a 	srli	r2,r2,24
   16158:	e0bfff05 	stb	r2,-4(fp)
   1615c:	008000b4 	movhi	r2,2
   16160:	10b01e04 	addi	r2,r2,-16264
   16164:	10801017 	ldw	r2,64(r2)
   16168:	10800058 	cmpnei	r2,r2,1
   1616c:	1000041e 	bne	r2,zero,16180 <alt_sys_init+0x7c4>
   16170:	008000b4 	movhi	r2,2
   16174:	10b01e04 	addi	r2,r2,-16264
   16178:	10001315 	stw	zero,76(r2)
   1617c:	00000e06 	br	161b8 <alt_sys_init+0x7fc>
   16180:	008000b4 	movhi	r2,2
   16184:	10b01e04 	addi	r2,r2,-16264
   16188:	10801017 	ldw	r2,64(r2)
   1618c:	10800098 	cmpnei	r2,r2,2
   16190:	1000051e 	bne	r2,zero,161a8 <alt_sys_init+0x7ec>
   16194:	008000b4 	movhi	r2,2
   16198:	10b01e04 	addi	r2,r2,-16264
   1619c:	00c00044 	movi	r3,1
   161a0:	10c01315 	stw	r3,76(r2)
   161a4:	00000406 	br	161b8 <alt_sys_init+0x7fc>
   161a8:	008000b4 	movhi	r2,2
   161ac:	10b01e04 	addi	r2,r2,-16264
   161b0:	00c00084 	movi	r3,2
   161b4:	10c01315 	stw	r3,76(r2)
   161b8:	e0bffec3 	ldbu	r2,-5(fp)
   161bc:	00c00804 	movi	r3,32
   161c0:	1885c83a 	sub	r2,r3,r2
   161c4:	00ffffc4 	movi	r3,-1
   161c8:	1886d83a 	srl	r3,r3,r2
   161cc:	008000b4 	movhi	r2,2
   161d0:	10b01e04 	addi	r2,r2,-16264
   161d4:	10c01415 	stw	r3,80(r2)
   161d8:	e0fffec3 	ldbu	r3,-5(fp)
   161dc:	008000b4 	movhi	r2,2
   161e0:	10b01e04 	addi	r2,r2,-16264
   161e4:	10801317 	ldw	r2,76(r2)
   161e8:	1887883a 	add	r3,r3,r2
   161ec:	008000b4 	movhi	r2,2
   161f0:	10b01e04 	addi	r2,r2,-16264
   161f4:	10c01515 	stw	r3,84(r2)
   161f8:	e0bfff03 	ldbu	r2,-4(fp)
   161fc:	00c00804 	movi	r3,32
   16200:	1885c83a 	sub	r2,r3,r2
   16204:	00ffffc4 	movi	r3,-1
   16208:	1886d83a 	srl	r3,r3,r2
   1620c:	008000b4 	movhi	r2,2
   16210:	10b01e04 	addi	r2,r2,-16264
   16214:	10c01615 	stw	r3,88(r2)
   16218:	010000b4 	movhi	r4,2
   1621c:	21301e04 	addi	r4,r4,-16264
   16220:	00159500 	call	15950 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_RGB_RESAMPLER, VGA_Subsystem_VGA_Pixel_RGB_Resampler);
   16224:	008000b4 	movhi	r2,2
   16228:	10b03504 	addi	r2,r2,-16172
   1622c:	10800a17 	ldw	r2,40(r2)
   16230:	10800017 	ldw	r2,0(r2)
   16234:	10c003cc 	andi	r3,r2,15
   16238:	008000b4 	movhi	r2,2
   1623c:	10b03504 	addi	r2,r2,-16172
   16240:	10c00b15 	stw	r3,44(r2)
   16244:	008000b4 	movhi	r2,2
   16248:	10b03504 	addi	r2,r2,-16172
   1624c:	10800a17 	ldw	r2,40(r2)
   16250:	10800017 	ldw	r2,0(r2)
   16254:	1005d13a 	srai	r2,r2,4
   16258:	10c0004c 	andi	r3,r2,1
   1625c:	008000b4 	movhi	r2,2
   16260:	10b03504 	addi	r2,r2,-16172
   16264:	10c00c15 	stw	r3,48(r2)
   16268:	008000b4 	movhi	r2,2
   1626c:	10b03504 	addi	r2,r2,-16172
   16270:	10800a17 	ldw	r2,40(r2)
   16274:	10800017 	ldw	r2,0(r2)
   16278:	1005d17a 	srai	r2,r2,5
   1627c:	10c0004c 	andi	r3,r2,1
   16280:	008000b4 	movhi	r2,2
   16284:	10b03504 	addi	r2,r2,-16172
   16288:	10c00d15 	stw	r3,52(r2)
   1628c:	008000b4 	movhi	r2,2
   16290:	10b03504 	addi	r2,r2,-16172
   16294:	10800a17 	ldw	r2,40(r2)
   16298:	10800017 	ldw	r2,0(r2)
   1629c:	1005d43a 	srai	r2,r2,16
   162a0:	10c003cc 	andi	r3,r2,15
   162a4:	008000b4 	movhi	r2,2
   162a8:	10b03504 	addi	r2,r2,-16172
   162ac:	10c00e15 	stw	r3,56(r2)
   162b0:	008000b4 	movhi	r2,2
   162b4:	10b03504 	addi	r2,r2,-16172
   162b8:	10800a17 	ldw	r2,40(r2)
   162bc:	10800017 	ldw	r2,0(r2)
   162c0:	1005d53a 	srai	r2,r2,20
   162c4:	10c0004c 	andi	r3,r2,1
   162c8:	008000b4 	movhi	r2,2
   162cc:	10b03504 	addi	r2,r2,-16172
   162d0:	10c00f15 	stw	r3,60(r2)
   162d4:	008000b4 	movhi	r2,2
   162d8:	10b03504 	addi	r2,r2,-16172
   162dc:	10800a17 	ldw	r2,40(r2)
   162e0:	10800017 	ldw	r2,0(r2)
   162e4:	1005d57a 	srai	r2,r2,21
   162e8:	10c0004c 	andi	r3,r2,1
   162ec:	008000b4 	movhi	r2,2
   162f0:	10b03504 	addi	r2,r2,-16172
   162f4:	10c01015 	stw	r3,64(r2)
   162f8:	010000b4 	movhi	r4,2
   162fc:	21303504 	addi	r4,r4,-16172
   16300:	00159500 	call	15950 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
   16304:	010000b4 	movhi	r4,2
   16308:	21304604 	addi	r4,r4,-16104
   1630c:	00159500 	call	15950 <alt_dev_reg>
}
   16310:	0001883a 	nop
   16314:	e037883a 	mov	sp,fp
   16318:	dfc00117 	ldw	ra,4(sp)
   1631c:	df000017 	ldw	fp,0(sp)
   16320:	dec00204 	addi	sp,sp,8
   16324:	f800283a 	ret

00016328 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   16328:	defffa04 	addi	sp,sp,-24
   1632c:	dfc00515 	stw	ra,20(sp)
   16330:	df000415 	stw	fp,16(sp)
   16334:	df000404 	addi	fp,sp,16
   16338:	e13ffd15 	stw	r4,-12(fp)
   1633c:	e17ffe15 	stw	r5,-8(fp)
   16340:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   16344:	e0bffd17 	ldw	r2,-12(fp)
   16348:	10800017 	ldw	r2,0(r2)
   1634c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   16350:	e0bffc17 	ldw	r2,-16(fp)
   16354:	10c00a04 	addi	r3,r2,40
   16358:	e0bffd17 	ldw	r2,-12(fp)
   1635c:	10800217 	ldw	r2,8(r2)
   16360:	100f883a 	mov	r7,r2
   16364:	e1bfff17 	ldw	r6,-4(fp)
   16368:	e17ffe17 	ldw	r5,-8(fp)
   1636c:	1809883a 	mov	r4,r3
   16370:	0016acc0 	call	16acc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   16374:	e037883a 	mov	sp,fp
   16378:	dfc00117 	ldw	ra,4(sp)
   1637c:	df000017 	ldw	fp,0(sp)
   16380:	dec00204 	addi	sp,sp,8
   16384:	f800283a 	ret

00016388 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   16388:	defffa04 	addi	sp,sp,-24
   1638c:	dfc00515 	stw	ra,20(sp)
   16390:	df000415 	stw	fp,16(sp)
   16394:	df000404 	addi	fp,sp,16
   16398:	e13ffd15 	stw	r4,-12(fp)
   1639c:	e17ffe15 	stw	r5,-8(fp)
   163a0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   163a4:	e0bffd17 	ldw	r2,-12(fp)
   163a8:	10800017 	ldw	r2,0(r2)
   163ac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   163b0:	e0bffc17 	ldw	r2,-16(fp)
   163b4:	10c00a04 	addi	r3,r2,40
   163b8:	e0bffd17 	ldw	r2,-12(fp)
   163bc:	10800217 	ldw	r2,8(r2)
   163c0:	100f883a 	mov	r7,r2
   163c4:	e1bfff17 	ldw	r6,-4(fp)
   163c8:	e17ffe17 	ldw	r5,-8(fp)
   163cc:	1809883a 	mov	r4,r3
   163d0:	0016d880 	call	16d88 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   163d4:	e037883a 	mov	sp,fp
   163d8:	dfc00117 	ldw	ra,4(sp)
   163dc:	df000017 	ldw	fp,0(sp)
   163e0:	dec00204 	addi	sp,sp,8
   163e4:	f800283a 	ret

000163e8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   163e8:	defffc04 	addi	sp,sp,-16
   163ec:	dfc00315 	stw	ra,12(sp)
   163f0:	df000215 	stw	fp,8(sp)
   163f4:	df000204 	addi	fp,sp,8
   163f8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   163fc:	e0bfff17 	ldw	r2,-4(fp)
   16400:	10800017 	ldw	r2,0(r2)
   16404:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   16408:	e0bffe17 	ldw	r2,-8(fp)
   1640c:	10c00a04 	addi	r3,r2,40
   16410:	e0bfff17 	ldw	r2,-4(fp)
   16414:	10800217 	ldw	r2,8(r2)
   16418:	100b883a 	mov	r5,r2
   1641c:	1809883a 	mov	r4,r3
   16420:	00169740 	call	16974 <altera_avalon_jtag_uart_close>
}
   16424:	e037883a 	mov	sp,fp
   16428:	dfc00117 	ldw	ra,4(sp)
   1642c:	df000017 	ldw	fp,0(sp)
   16430:	dec00204 	addi	sp,sp,8
   16434:	f800283a 	ret

00016438 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   16438:	defffa04 	addi	sp,sp,-24
   1643c:	dfc00515 	stw	ra,20(sp)
   16440:	df000415 	stw	fp,16(sp)
   16444:	df000404 	addi	fp,sp,16
   16448:	e13ffd15 	stw	r4,-12(fp)
   1644c:	e17ffe15 	stw	r5,-8(fp)
   16450:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   16454:	e0bffd17 	ldw	r2,-12(fp)
   16458:	10800017 	ldw	r2,0(r2)
   1645c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   16460:	e0bffc17 	ldw	r2,-16(fp)
   16464:	10800a04 	addi	r2,r2,40
   16468:	e1bfff17 	ldw	r6,-4(fp)
   1646c:	e17ffe17 	ldw	r5,-8(fp)
   16470:	1009883a 	mov	r4,r2
   16474:	00169dc0 	call	169dc <altera_avalon_jtag_uart_ioctl>
}
   16478:	e037883a 	mov	sp,fp
   1647c:	dfc00117 	ldw	ra,4(sp)
   16480:	df000017 	ldw	fp,0(sp)
   16484:	dec00204 	addi	sp,sp,8
   16488:	f800283a 	ret

0001648c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1648c:	defff204 	addi	sp,sp,-56
   16490:	dfc00d15 	stw	ra,52(sp)
   16494:	df000c15 	stw	fp,48(sp)
   16498:	df000c04 	addi	fp,sp,48
   1649c:	e13ff915 	stw	r4,-28(fp)
   164a0:	e17ffa15 	stw	r5,-24(fp)
   164a4:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   164a8:	e0bff917 	ldw	r2,-28(fp)
   164ac:	10800c04 	addi	r2,r2,48
   164b0:	e0bff415 	stw	r2,-48(fp)
   164b4:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   164b8:	e0bff80b 	ldhu	r2,-32(fp)
   164bc:	e0fff884 	addi	r3,fp,-30
   164c0:	180b883a 	mov	r5,r3
   164c4:	1009883a 	mov	r4,r2
   164c8:	001062c0 	call	1062c <OSFlagCreate>
   164cc:	1007883a 	mov	r3,r2
   164d0:	e0bff417 	ldw	r2,-48(fp)
   164d4:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   164d8:	e0bff917 	ldw	r2,-28(fp)
   164dc:	10800a04 	addi	r2,r2,40
   164e0:	e0bff515 	stw	r2,-44(fp)
   164e4:	00800044 	movi	r2,1
   164e8:	e0bff78d 	sth	r2,-34(fp)
   164ec:	e0bff78b 	ldhu	r2,-34(fp)
   164f0:	1009883a 	mov	r4,r2
   164f4:	00133400 	call	13340 <OSSemCreate>
   164f8:	1007883a 	mov	r3,r2
   164fc:	e0bff517 	ldw	r2,-44(fp)
   16500:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   16504:	e0bff917 	ldw	r2,-28(fp)
   16508:	10800b04 	addi	r2,r2,44
   1650c:	e0bff615 	stw	r2,-40(fp)
   16510:	00800044 	movi	r2,1
   16514:	e0bff70d 	sth	r2,-36(fp)
   16518:	e0bff70b 	ldhu	r2,-36(fp)
   1651c:	1009883a 	mov	r4,r2
   16520:	00133400 	call	13340 <OSSemCreate>
   16524:	1007883a 	mov	r3,r2
   16528:	e0bff617 	ldw	r2,-40(fp)
   1652c:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   16530:	e0bff917 	ldw	r2,-28(fp)
   16534:	00c00044 	movi	r3,1
   16538:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   1653c:	e0bff917 	ldw	r2,-28(fp)
   16540:	10800017 	ldw	r2,0(r2)
   16544:	10800104 	addi	r2,r2,4
   16548:	1007883a 	mov	r3,r2
   1654c:	e0bff917 	ldw	r2,-28(fp)
   16550:	10800817 	ldw	r2,32(r2)
   16554:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   16558:	e0bffb17 	ldw	r2,-20(fp)
   1655c:	01800074 	movhi	r6,1
   16560:	31997204 	addi	r6,r6,26056
   16564:	e17ff917 	ldw	r5,-28(fp)
   16568:	1009883a 	mov	r4,r2
   1656c:	00188ec0 	call	188ec <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   16570:	e0bff917 	ldw	r2,-28(fp)
   16574:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   16578:	e0bff917 	ldw	r2,-28(fp)
   1657c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   16580:	d0e7fe17 	ldw	r3,-24584(gp)
   16584:	e1fff917 	ldw	r7,-28(fp)
   16588:	01800074 	movhi	r6,1
   1658c:	319a1c04 	addi	r6,r6,26736
   16590:	180b883a 	mov	r5,r3
   16594:	1009883a 	mov	r4,r2
   16598:	00183fc0 	call	183fc <alt_alarm_start>
   1659c:	1000040e 	bge	r2,zero,165b0 <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   165a0:	e0fff917 	ldw	r3,-28(fp)
   165a4:	00a00034 	movhi	r2,32768
   165a8:	10bfffc4 	addi	r2,r2,-1
   165ac:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   165b0:	0001883a 	nop
   165b4:	e037883a 	mov	sp,fp
   165b8:	dfc00117 	ldw	ra,4(sp)
   165bc:	df000017 	ldw	fp,0(sp)
   165c0:	dec00204 	addi	sp,sp,8
   165c4:	f800283a 	ret

000165c8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   165c8:	defff104 	addi	sp,sp,-60
   165cc:	dfc00e15 	stw	ra,56(sp)
   165d0:	df000d15 	stw	fp,52(sp)
   165d4:	df000d04 	addi	fp,sp,52
   165d8:	e13ffe15 	stw	r4,-8(fp)
   165dc:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   165e0:	e0bffe17 	ldw	r2,-8(fp)
   165e4:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
   165e8:	e0bff517 	ldw	r2,-44(fp)
   165ec:	10800017 	ldw	r2,0(r2)
   165f0:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   165f4:	e0bff617 	ldw	r2,-40(fp)
   165f8:	10800104 	addi	r2,r2,4
   165fc:	10800037 	ldwio	r2,0(r2)
   16600:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   16604:	e0bff717 	ldw	r2,-36(fp)
   16608:	1080c00c 	andi	r2,r2,768
   1660c:	10009126 	beq	r2,zero,16854 <altera_avalon_jtag_uart_irq+0x28c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   16610:	e0bff717 	ldw	r2,-36(fp)
   16614:	1080400c 	andi	r2,r2,256
   16618:	10004726 	beq	r2,zero,16738 <altera_avalon_jtag_uart_irq+0x170>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1661c:	00800074 	movhi	r2,1
   16620:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   16624:	e0bff517 	ldw	r2,-44(fp)
   16628:	10800d17 	ldw	r2,52(r2)
   1662c:	10800044 	addi	r2,r2,1
   16630:	1081ffcc 	andi	r2,r2,2047
   16634:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
   16638:	e0bff517 	ldw	r2,-44(fp)
   1663c:	10c00e17 	ldw	r3,56(r2)
   16640:	e0bff817 	ldw	r2,-32(fp)
   16644:	18802726 	beq	r3,r2,166e4 <altera_avalon_jtag_uart_irq+0x11c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   16648:	e0bff617 	ldw	r2,-40(fp)
   1664c:	10800037 	ldwio	r2,0(r2)
   16650:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   16654:	e0bff317 	ldw	r2,-52(fp)
   16658:	10a0000c 	andi	r2,r2,32768
   1665c:	10002326 	beq	r2,zero,166ec <altera_avalon_jtag_uart_irq+0x124>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   16660:	e0bff517 	ldw	r2,-44(fp)
   16664:	10800d17 	ldw	r2,52(r2)
   16668:	e0fff317 	ldw	r3,-52(fp)
   1666c:	1809883a 	mov	r4,r3
   16670:	e0fff517 	ldw	r3,-44(fp)
   16674:	1885883a 	add	r2,r3,r2
   16678:	10801104 	addi	r2,r2,68
   1667c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   16680:	e0bff517 	ldw	r2,-44(fp)
   16684:	10800d17 	ldw	r2,52(r2)
   16688:	10800044 	addi	r2,r2,1
   1668c:	10c1ffcc 	andi	r3,r2,2047
   16690:	e0bff517 	ldw	r2,-44(fp)
   16694:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   16698:	e0bff517 	ldw	r2,-44(fp)
   1669c:	10800c17 	ldw	r2,48(r2)
   166a0:	e0bffa15 	stw	r2,-24(fp)
   166a4:	00800044 	movi	r2,1
   166a8:	e0bffb0d 	sth	r2,-20(fp)
   166ac:	00800044 	movi	r2,1
   166b0:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   166b4:	d0a7e943 	ldbu	r2,-24667(gp)
   166b8:	10803fcc 	andi	r2,r2,255
   166bc:	103fd926 	beq	r2,zero,16624 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016624>
  {
    OSFlagPost (group, flags, opt, &err);
   166c0:	e0bffb0b 	ldhu	r2,-20(fp)
   166c4:	e0fffb83 	ldbu	r3,-18(fp)
   166c8:	e13ffcc4 	addi	r4,fp,-13
   166cc:	200f883a 	mov	r7,r4
   166d0:	180d883a 	mov	r6,r3
   166d4:	100b883a 	mov	r5,r2
   166d8:	e13ffa17 	ldw	r4,-24(fp)
   166dc:	00112080 	call	11208 <OSFlagPost>
      }
   166e0:	003fd006 	br	16624 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016624>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   166e4:	0001883a 	nop
   166e8:	00000106 	br	166f0 <altera_avalon_jtag_uart_irq+0x128>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   166ec:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   166f0:	e0bff317 	ldw	r2,-52(fp)
   166f4:	10bfffec 	andhi	r2,r2,65535
   166f8:	10000f26 	beq	r2,zero,16738 <altera_avalon_jtag_uart_irq+0x170>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   166fc:	e0bff517 	ldw	r2,-44(fp)
   16700:	10c00817 	ldw	r3,32(r2)
   16704:	00bfff84 	movi	r2,-2
   16708:	1886703a 	and	r3,r3,r2
   1670c:	e0bff517 	ldw	r2,-44(fp)
   16710:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   16714:	e0bff617 	ldw	r2,-40(fp)
   16718:	10800104 	addi	r2,r2,4
   1671c:	1007883a 	mov	r3,r2
   16720:	e0bff517 	ldw	r2,-44(fp)
   16724:	10800817 	ldw	r2,32(r2)
   16728:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1672c:	e0bff617 	ldw	r2,-40(fp)
   16730:	10800104 	addi	r2,r2,4
   16734:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   16738:	e0bff717 	ldw	r2,-36(fp)
   1673c:	1080800c 	andi	r2,r2,512
   16740:	103fac26 	beq	r2,zero,165f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70165f4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   16744:	e0bff717 	ldw	r2,-36(fp)
   16748:	1004d43a 	srli	r2,r2,16
   1674c:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   16750:	00002606 	br	167ec <altera_avalon_jtag_uart_irq+0x224>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   16754:	e0bff617 	ldw	r2,-40(fp)
   16758:	e0fff517 	ldw	r3,-44(fp)
   1675c:	18c01017 	ldw	r3,64(r3)
   16760:	e13ff517 	ldw	r4,-44(fp)
   16764:	20c7883a 	add	r3,r4,r3
   16768:	18c21104 	addi	r3,r3,2116
   1676c:	18c00003 	ldbu	r3,0(r3)
   16770:	18c03fcc 	andi	r3,r3,255
   16774:	18c0201c 	xori	r3,r3,128
   16778:	18ffe004 	addi	r3,r3,-128
   1677c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   16780:	e0bff517 	ldw	r2,-44(fp)
   16784:	10801017 	ldw	r2,64(r2)
   16788:	10800044 	addi	r2,r2,1
   1678c:	10c1ffcc 	andi	r3,r2,2047
   16790:	e0bff517 	ldw	r2,-44(fp)
   16794:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   16798:	e0bff517 	ldw	r2,-44(fp)
   1679c:	10800c17 	ldw	r2,48(r2)
   167a0:	e0bff915 	stw	r2,-28(fp)
   167a4:	00800084 	movi	r2,2
   167a8:	e0bffc0d 	sth	r2,-16(fp)
   167ac:	00800044 	movi	r2,1
   167b0:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   167b4:	d0a7e943 	ldbu	r2,-24667(gp)
   167b8:	10803fcc 	andi	r2,r2,255
   167bc:	10000826 	beq	r2,zero,167e0 <altera_avalon_jtag_uart_irq+0x218>
  {
    OSFlagPost (group, flags, opt, &err);
   167c0:	e0bffc0b 	ldhu	r2,-16(fp)
   167c4:	e0fffc83 	ldbu	r3,-14(fp)
   167c8:	e13ffd04 	addi	r4,fp,-12
   167cc:	200f883a 	mov	r7,r4
   167d0:	180d883a 	mov	r6,r3
   167d4:	100b883a 	mov	r5,r2
   167d8:	e13ff917 	ldw	r4,-28(fp)
   167dc:	00112080 	call	11208 <OSFlagPost>

        space--;
   167e0:	e0bff417 	ldw	r2,-48(fp)
   167e4:	10bfffc4 	addi	r2,r2,-1
   167e8:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   167ec:	e0bff417 	ldw	r2,-48(fp)
   167f0:	10000526 	beq	r2,zero,16808 <altera_avalon_jtag_uart_irq+0x240>
   167f4:	e0bff517 	ldw	r2,-44(fp)
   167f8:	10c01017 	ldw	r3,64(r2)
   167fc:	e0bff517 	ldw	r2,-44(fp)
   16800:	10800f17 	ldw	r2,60(r2)
   16804:	18bfd31e 	bne	r3,r2,16754 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016754>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   16808:	e0bff417 	ldw	r2,-48(fp)
   1680c:	103f7926 	beq	r2,zero,165f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70165f4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   16810:	e0bff517 	ldw	r2,-44(fp)
   16814:	10c00817 	ldw	r3,32(r2)
   16818:	00bfff44 	movi	r2,-3
   1681c:	1886703a 	and	r3,r3,r2
   16820:	e0bff517 	ldw	r2,-44(fp)
   16824:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   16828:	e0bff517 	ldw	r2,-44(fp)
   1682c:	10800017 	ldw	r2,0(r2)
   16830:	10800104 	addi	r2,r2,4
   16834:	1007883a 	mov	r3,r2
   16838:	e0bff517 	ldw	r2,-44(fp)
   1683c:	10800817 	ldw	r2,32(r2)
   16840:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   16844:	e0bff617 	ldw	r2,-40(fp)
   16848:	10800104 	addi	r2,r2,4
   1684c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   16850:	003f6806 	br	165f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70165f4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   16854:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   16858:	0001883a 	nop
   1685c:	e037883a 	mov	sp,fp
   16860:	dfc00117 	ldw	ra,4(sp)
   16864:	df000017 	ldw	fp,0(sp)
   16868:	dec00204 	addi	sp,sp,8
   1686c:	f800283a 	ret

00016870 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   16870:	defff904 	addi	sp,sp,-28
   16874:	dfc00615 	stw	ra,24(sp)
   16878:	df000515 	stw	fp,20(sp)
   1687c:	df000504 	addi	fp,sp,20
   16880:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   16884:	e0bfff17 	ldw	r2,-4(fp)
   16888:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   1688c:	e0bffb17 	ldw	r2,-20(fp)
   16890:	10800017 	ldw	r2,0(r2)
   16894:	10800104 	addi	r2,r2,4
   16898:	10800037 	ldwio	r2,0(r2)
   1689c:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   168a0:	e0bffc17 	ldw	r2,-16(fp)
   168a4:	1081000c 	andi	r2,r2,1024
   168a8:	10000b26 	beq	r2,zero,168d8 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   168ac:	e0bffb17 	ldw	r2,-20(fp)
   168b0:	10800017 	ldw	r2,0(r2)
   168b4:	10800104 	addi	r2,r2,4
   168b8:	1007883a 	mov	r3,r2
   168bc:	e0bffb17 	ldw	r2,-20(fp)
   168c0:	10800817 	ldw	r2,32(r2)
   168c4:	10810014 	ori	r2,r2,1024
   168c8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   168cc:	e0bffb17 	ldw	r2,-20(fp)
   168d0:	10000915 	stw	zero,36(r2)
   168d4:	00002106 	br	1695c <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   168d8:	e0bffb17 	ldw	r2,-20(fp)
   168dc:	10c00917 	ldw	r3,36(r2)
   168e0:	00a00034 	movhi	r2,32768
   168e4:	10bfff04 	addi	r2,r2,-4
   168e8:	10c01c36 	bltu	r2,r3,1695c <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
   168ec:	e0bffb17 	ldw	r2,-20(fp)
   168f0:	10800917 	ldw	r2,36(r2)
   168f4:	10c00044 	addi	r3,r2,1
   168f8:	e0bffb17 	ldw	r2,-20(fp)
   168fc:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   16900:	e0bffb17 	ldw	r2,-20(fp)
   16904:	10c00917 	ldw	r3,36(r2)
   16908:	e0bffb17 	ldw	r2,-20(fp)
   1690c:	10800117 	ldw	r2,4(r2)
   16910:	18801236 	bltu	r3,r2,1695c <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   16914:	e0bffb17 	ldw	r2,-20(fp)
   16918:	10800c17 	ldw	r2,48(r2)
   1691c:	e0bffd15 	stw	r2,-12(fp)
   16920:	00800104 	movi	r2,4
   16924:	e0bffe0d 	sth	r2,-8(fp)
   16928:	00800044 	movi	r2,1
   1692c:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   16930:	d0a7e943 	ldbu	r2,-24667(gp)
   16934:	10803fcc 	andi	r2,r2,255
   16938:	10000826 	beq	r2,zero,1695c <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
   1693c:	e0bffe0b 	ldhu	r2,-8(fp)
   16940:	e0fffe83 	ldbu	r3,-6(fp)
   16944:	e13ffec4 	addi	r4,fp,-5
   16948:	200f883a 	mov	r7,r4
   1694c:	180d883a 	mov	r6,r3
   16950:	100b883a 	mov	r5,r2
   16954:	e13ffd17 	ldw	r4,-12(fp)
   16958:	00112080 	call	11208 <OSFlagPost>
   1695c:	d0a7fe17 	ldw	r2,-24584(gp)
    }
  }

  return alt_ticks_per_second();
}
   16960:	e037883a 	mov	sp,fp
   16964:	dfc00117 	ldw	ra,4(sp)
   16968:	df000017 	ldw	fp,0(sp)
   1696c:	dec00204 	addi	sp,sp,8
   16970:	f800283a 	ret

00016974 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   16974:	defffd04 	addi	sp,sp,-12
   16978:	df000215 	stw	fp,8(sp)
   1697c:	df000204 	addi	fp,sp,8
   16980:	e13ffe15 	stw	r4,-8(fp)
   16984:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   16988:	00000506 	br	169a0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   1698c:	e0bfff17 	ldw	r2,-4(fp)
   16990:	1090000c 	andi	r2,r2,16384
   16994:	10000226 	beq	r2,zero,169a0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   16998:	00bffd44 	movi	r2,-11
   1699c:	00000b06 	br	169cc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   169a0:	e0bffe17 	ldw	r2,-8(fp)
   169a4:	10c01017 	ldw	r3,64(r2)
   169a8:	e0bffe17 	ldw	r2,-8(fp)
   169ac:	10800f17 	ldw	r2,60(r2)
   169b0:	18800526 	beq	r3,r2,169c8 <altera_avalon_jtag_uart_close+0x54>
   169b4:	e0bffe17 	ldw	r2,-8(fp)
   169b8:	10c00917 	ldw	r3,36(r2)
   169bc:	e0bffe17 	ldw	r2,-8(fp)
   169c0:	10800117 	ldw	r2,4(r2)
   169c4:	18bff136 	bltu	r3,r2,1698c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701698c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   169c8:	0005883a 	mov	r2,zero
}
   169cc:	e037883a 	mov	sp,fp
   169d0:	df000017 	ldw	fp,0(sp)
   169d4:	dec00104 	addi	sp,sp,4
   169d8:	f800283a 	ret

000169dc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   169dc:	defffa04 	addi	sp,sp,-24
   169e0:	df000515 	stw	fp,20(sp)
   169e4:	df000504 	addi	fp,sp,20
   169e8:	e13ffd15 	stw	r4,-12(fp)
   169ec:	e17ffe15 	stw	r5,-8(fp)
   169f0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   169f4:	00bff9c4 	movi	r2,-25
   169f8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   169fc:	e0bffe17 	ldw	r2,-8(fp)
   16a00:	10da8060 	cmpeqi	r3,r2,27137
   16a04:	1800031e 	bne	r3,zero,16a14 <altera_avalon_jtag_uart_ioctl+0x38>
   16a08:	109a80a0 	cmpeqi	r2,r2,27138
   16a0c:	1000181e 	bne	r2,zero,16a70 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   16a10:	00002906 	br	16ab8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   16a14:	e0bffd17 	ldw	r2,-12(fp)
   16a18:	10c00117 	ldw	r3,4(r2)
   16a1c:	00a00034 	movhi	r2,32768
   16a20:	10bfffc4 	addi	r2,r2,-1
   16a24:	18802126 	beq	r3,r2,16aac <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   16a28:	e0bfff17 	ldw	r2,-4(fp)
   16a2c:	10800017 	ldw	r2,0(r2)
   16a30:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   16a34:	e0bffc17 	ldw	r2,-16(fp)
   16a38:	10800090 	cmplti	r2,r2,2
   16a3c:	1000061e 	bne	r2,zero,16a58 <altera_avalon_jtag_uart_ioctl+0x7c>
   16a40:	e0fffc17 	ldw	r3,-16(fp)
   16a44:	00a00034 	movhi	r2,32768
   16a48:	10bfffc4 	addi	r2,r2,-1
   16a4c:	18800226 	beq	r3,r2,16a58 <altera_avalon_jtag_uart_ioctl+0x7c>
   16a50:	e0bffc17 	ldw	r2,-16(fp)
   16a54:	00000206 	br	16a60 <altera_avalon_jtag_uart_ioctl+0x84>
   16a58:	00a00034 	movhi	r2,32768
   16a5c:	10bfff84 	addi	r2,r2,-2
   16a60:	e0fffd17 	ldw	r3,-12(fp)
   16a64:	18800115 	stw	r2,4(r3)
      rc = 0;
   16a68:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   16a6c:	00000f06 	br	16aac <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   16a70:	e0bffd17 	ldw	r2,-12(fp)
   16a74:	10c00117 	ldw	r3,4(r2)
   16a78:	00a00034 	movhi	r2,32768
   16a7c:	10bfffc4 	addi	r2,r2,-1
   16a80:	18800c26 	beq	r3,r2,16ab4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   16a84:	e0bffd17 	ldw	r2,-12(fp)
   16a88:	10c00917 	ldw	r3,36(r2)
   16a8c:	e0bffd17 	ldw	r2,-12(fp)
   16a90:	10800117 	ldw	r2,4(r2)
   16a94:	1885803a 	cmpltu	r2,r3,r2
   16a98:	10c03fcc 	andi	r3,r2,255
   16a9c:	e0bfff17 	ldw	r2,-4(fp)
   16aa0:	10c00015 	stw	r3,0(r2)
      rc = 0;
   16aa4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   16aa8:	00000206 	br	16ab4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   16aac:	0001883a 	nop
   16ab0:	00000106 	br	16ab8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   16ab4:	0001883a 	nop

  default:
    break;
  }

  return rc;
   16ab8:	e0bffb17 	ldw	r2,-20(fp)
}
   16abc:	e037883a 	mov	sp,fp
   16ac0:	df000017 	ldw	fp,0(sp)
   16ac4:	dec00104 	addi	sp,sp,4
   16ac8:	f800283a 	ret

00016acc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   16acc:	deffed04 	addi	sp,sp,-76
   16ad0:	dfc01215 	stw	ra,72(sp)
   16ad4:	df001115 	stw	fp,68(sp)
   16ad8:	df001104 	addi	fp,sp,68
   16adc:	e13ffc15 	stw	r4,-16(fp)
   16ae0:	e17ffd15 	stw	r5,-12(fp)
   16ae4:	e1bffe15 	stw	r6,-8(fp)
   16ae8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   16aec:	e0bffd17 	ldw	r2,-12(fp)
   16af0:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   16af4:	e0bffc17 	ldw	r2,-16(fp)
   16af8:	10800a17 	ldw	r2,40(r2)
   16afc:	e0bff815 	stw	r2,-32(fp)
   16b00:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   16b04:	e0bff90b 	ldhu	r2,-28(fp)
   16b08:	e0fffb04 	addi	r3,fp,-20
   16b0c:	180d883a 	mov	r6,r3
   16b10:	100b883a 	mov	r5,r2
   16b14:	e13ff817 	ldw	r4,-32(fp)
   16b18:	00136580 	call	13658 <OSSemPend>

  while (space > 0)
   16b1c:	00006106 	br	16ca4 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   16b20:	e0bffc17 	ldw	r2,-16(fp)
   16b24:	10800d17 	ldw	r2,52(r2)
   16b28:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
   16b2c:	e0bffc17 	ldw	r2,-16(fp)
   16b30:	10800e17 	ldw	r2,56(r2)
   16b34:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
   16b38:	e0fff317 	ldw	r3,-52(fp)
   16b3c:	e0bff417 	ldw	r2,-48(fp)
   16b40:	18800536 	bltu	r3,r2,16b58 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   16b44:	e0fff317 	ldw	r3,-52(fp)
   16b48:	e0bff417 	ldw	r2,-48(fp)
   16b4c:	1885c83a 	sub	r2,r3,r2
   16b50:	e0bff115 	stw	r2,-60(fp)
   16b54:	00000406 	br	16b68 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   16b58:	00c20004 	movi	r3,2048
   16b5c:	e0bff417 	ldw	r2,-48(fp)
   16b60:	1885c83a 	sub	r2,r3,r2
   16b64:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   16b68:	e0bff117 	ldw	r2,-60(fp)
   16b6c:	10001e26 	beq	r2,zero,16be8 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
   16b70:	e0fffe17 	ldw	r3,-8(fp)
   16b74:	e0bff117 	ldw	r2,-60(fp)
   16b78:	1880022e 	bgeu	r3,r2,16b84 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
   16b7c:	e0bffe17 	ldw	r2,-8(fp)
   16b80:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   16b84:	e0bffc17 	ldw	r2,-16(fp)
   16b88:	10c01104 	addi	r3,r2,68
   16b8c:	e0bff417 	ldw	r2,-48(fp)
   16b90:	1885883a 	add	r2,r3,r2
   16b94:	e1bff117 	ldw	r6,-60(fp)
   16b98:	100b883a 	mov	r5,r2
   16b9c:	e13ff017 	ldw	r4,-64(fp)
   16ba0:	00066d00 	call	66d0 <memcpy>
      ptr   += n;
   16ba4:	e0fff017 	ldw	r3,-64(fp)
   16ba8:	e0bff117 	ldw	r2,-60(fp)
   16bac:	1885883a 	add	r2,r3,r2
   16bb0:	e0bff015 	stw	r2,-64(fp)
      space -= n;
   16bb4:	e0fffe17 	ldw	r3,-8(fp)
   16bb8:	e0bff117 	ldw	r2,-60(fp)
   16bbc:	1885c83a 	sub	r2,r3,r2
   16bc0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   16bc4:	e0fff417 	ldw	r3,-48(fp)
   16bc8:	e0bff117 	ldw	r2,-60(fp)
   16bcc:	1885883a 	add	r2,r3,r2
   16bd0:	10c1ffcc 	andi	r3,r2,2047
   16bd4:	e0bffc17 	ldw	r2,-16(fp)
   16bd8:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   16bdc:	e0bffe17 	ldw	r2,-8(fp)
   16be0:	00bfcf16 	blt	zero,r2,16b20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016b20>
   16be4:	00000106 	br	16bec <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   16be8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   16bec:	e0fff017 	ldw	r3,-64(fp)
   16bf0:	e0bffd17 	ldw	r2,-12(fp)
   16bf4:	18802e1e 	bne	r3,r2,16cb0 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   16bf8:	e0bfff17 	ldw	r2,-4(fp)
   16bfc:	1090000c 	andi	r2,r2,16384
   16c00:	10002d1e 	bne	r2,zero,16cb8 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   16c04:	d0a7e943 	ldbu	r2,-24667(gp)
   16c08:	10803fcc 	andi	r2,r2,255
   16c0c:	10800058 	cmpnei	r2,r2,1
   16c10:	1000161e 	bne	r2,zero,16c6c <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   16c14:	e0bffc17 	ldw	r2,-16(fp)
   16c18:	10800c17 	ldw	r2,48(r2)
   16c1c:	e0bff215 	stw	r2,-56(fp)
   16c20:	00800144 	movi	r2,5
   16c24:	e0bff98d 	sth	r2,-26(fp)
   16c28:	00bfe0c4 	movi	r2,-125
   16c2c:	e0bffa05 	stb	r2,-24(fp)
   16c30:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   16c34:	d0a7e943 	ldbu	r2,-24667(gp)
   16c38:	10803fcc 	andi	r2,r2,255
   16c3c:	10001526 	beq	r2,zero,16c94 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   16c40:	e0fff98b 	ldhu	r3,-26(fp)
   16c44:	e13ffa03 	ldbu	r4,-24(fp)
   16c48:	e17ffa8b 	ldhu	r5,-22(fp)
   16c4c:	e0bffb44 	addi	r2,fp,-19
   16c50:	d8800015 	stw	r2,0(sp)
   16c54:	280f883a 	mov	r7,r5
   16c58:	200d883a 	mov	r6,r4
   16c5c:	180b883a 	mov	r5,r3
   16c60:	e13ff217 	ldw	r4,-56(fp)
   16c64:	0010bf00 	call	10bf0 <OSFlagPend>
   16c68:	00000a06 	br	16c94 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   16c6c:	0001883a 	nop
   16c70:	e0bffc17 	ldw	r2,-16(fp)
   16c74:	10c00d17 	ldw	r3,52(r2)
   16c78:	e0bff317 	ldw	r2,-52(fp)
   16c7c:	1880051e 	bne	r3,r2,16c94 <altera_avalon_jtag_uart_read+0x1c8>
   16c80:	e0bffc17 	ldw	r2,-16(fp)
   16c84:	10c00917 	ldw	r3,36(r2)
   16c88:	e0bffc17 	ldw	r2,-16(fp)
   16c8c:	10800117 	ldw	r2,4(r2)
   16c90:	18bff736 	bltu	r3,r2,16c70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016c70>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   16c94:	e0bffc17 	ldw	r2,-16(fp)
   16c98:	10c00d17 	ldw	r3,52(r2)
   16c9c:	e0bff317 	ldw	r2,-52(fp)
   16ca0:	18800726 	beq	r3,r2,16cc0 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   16ca4:	e0bffe17 	ldw	r2,-8(fp)
   16ca8:	00bf9d16 	blt	zero,r2,16b20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016b20>
   16cac:	00000506 	br	16cc4 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   16cb0:	0001883a 	nop
   16cb4:	00000306 	br	16cc4 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   16cb8:	0001883a 	nop
   16cbc:	00000106 	br	16cc4 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   16cc0:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   16cc4:	e0bffc17 	ldw	r2,-16(fp)
   16cc8:	10800a17 	ldw	r2,40(r2)
   16ccc:	1009883a 	mov	r4,r2
   16cd0:	00139d00 	call	139d0 <OSSemPost>

  if (ptr != buffer)
   16cd4:	e0fff017 	ldw	r3,-64(fp)
   16cd8:	e0bffd17 	ldw	r2,-12(fp)
   16cdc:	18801826 	beq	r3,r2,16d40 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16ce0:	0005303a 	rdctl	r2,status
   16ce4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16ce8:	e0fff717 	ldw	r3,-36(fp)
   16cec:	00bfff84 	movi	r2,-2
   16cf0:	1884703a 	and	r2,r3,r2
   16cf4:	1001703a 	wrctl	status,r2
  
  return context;
   16cf8:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   16cfc:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   16d00:	e0bffc17 	ldw	r2,-16(fp)
   16d04:	10800817 	ldw	r2,32(r2)
   16d08:	10c00054 	ori	r3,r2,1
   16d0c:	e0bffc17 	ldw	r2,-16(fp)
   16d10:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   16d14:	e0bffc17 	ldw	r2,-16(fp)
   16d18:	10800017 	ldw	r2,0(r2)
   16d1c:	10800104 	addi	r2,r2,4
   16d20:	1007883a 	mov	r3,r2
   16d24:	e0bffc17 	ldw	r2,-16(fp)
   16d28:	10800817 	ldw	r2,32(r2)
   16d2c:	18800035 	stwio	r2,0(r3)
   16d30:	e0bff617 	ldw	r2,-40(fp)
   16d34:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16d38:	e0bff517 	ldw	r2,-44(fp)
   16d3c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   16d40:	e0fff017 	ldw	r3,-64(fp)
   16d44:	e0bffd17 	ldw	r2,-12(fp)
   16d48:	18800426 	beq	r3,r2,16d5c <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
   16d4c:	e0fff017 	ldw	r3,-64(fp)
   16d50:	e0bffd17 	ldw	r2,-12(fp)
   16d54:	1885c83a 	sub	r2,r3,r2
   16d58:	00000606 	br	16d74 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
   16d5c:	e0bfff17 	ldw	r2,-4(fp)
   16d60:	1090000c 	andi	r2,r2,16384
   16d64:	10000226 	beq	r2,zero,16d70 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
   16d68:	00bffd44 	movi	r2,-11
   16d6c:	00000106 	br	16d74 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
   16d70:	00bffec4 	movi	r2,-5
}
   16d74:	e037883a 	mov	sp,fp
   16d78:	dfc00117 	ldw	ra,4(sp)
   16d7c:	df000017 	ldw	fp,0(sp)
   16d80:	dec00204 	addi	sp,sp,8
   16d84:	f800283a 	ret

00016d88 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   16d88:	deffed04 	addi	sp,sp,-76
   16d8c:	dfc01215 	stw	ra,72(sp)
   16d90:	df001115 	stw	fp,68(sp)
   16d94:	df001104 	addi	fp,sp,68
   16d98:	e13ffc15 	stw	r4,-16(fp)
   16d9c:	e17ffd15 	stw	r5,-12(fp)
   16da0:	e1bffe15 	stw	r6,-8(fp)
   16da4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   16da8:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   16dac:	e0bffd17 	ldw	r2,-12(fp)
   16db0:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   16db4:	e0bffc17 	ldw	r2,-16(fp)
   16db8:	10800b17 	ldw	r2,44(r2)
   16dbc:	e0bff815 	stw	r2,-32(fp)
   16dc0:	e03ff90d 	sth	zero,-28(fp)
   16dc4:	e0bff90b 	ldhu	r2,-28(fp)
   16dc8:	e0fffb44 	addi	r3,fp,-19
   16dcc:	180d883a 	mov	r6,r3
   16dd0:	100b883a 	mov	r5,r2
   16dd4:	e13ff817 	ldw	r4,-32(fp)
   16dd8:	00136580 	call	13658 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   16ddc:	00003706 	br	16ebc <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   16de0:	e0bffc17 	ldw	r2,-16(fp)
   16de4:	10800f17 	ldw	r2,60(r2)
   16de8:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
   16dec:	e0bffc17 	ldw	r2,-16(fp)
   16df0:	10801017 	ldw	r2,64(r2)
   16df4:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   16df8:	e0fff417 	ldw	r3,-48(fp)
   16dfc:	e0bff017 	ldw	r2,-64(fp)
   16e00:	1880062e 	bgeu	r3,r2,16e1c <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   16e04:	e0fff017 	ldw	r3,-64(fp)
   16e08:	e0bff417 	ldw	r2,-48(fp)
   16e0c:	1885c83a 	sub	r2,r3,r2
   16e10:	10bfffc4 	addi	r2,r2,-1
   16e14:	e0bff115 	stw	r2,-60(fp)
   16e18:	00000b06 	br	16e48 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   16e1c:	e0bff017 	ldw	r2,-64(fp)
   16e20:	10000526 	beq	r2,zero,16e38 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   16e24:	00c20004 	movi	r3,2048
   16e28:	e0bff417 	ldw	r2,-48(fp)
   16e2c:	1885c83a 	sub	r2,r3,r2
   16e30:	e0bff115 	stw	r2,-60(fp)
   16e34:	00000406 	br	16e48 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   16e38:	00c1ffc4 	movi	r3,2047
   16e3c:	e0bff417 	ldw	r2,-48(fp)
   16e40:	1885c83a 	sub	r2,r3,r2
   16e44:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   16e48:	e0bff117 	ldw	r2,-60(fp)
   16e4c:	10001e26 	beq	r2,zero,16ec8 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
   16e50:	e0fffe17 	ldw	r3,-8(fp)
   16e54:	e0bff117 	ldw	r2,-60(fp)
   16e58:	1880022e 	bgeu	r3,r2,16e64 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
   16e5c:	e0bffe17 	ldw	r2,-8(fp)
   16e60:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   16e64:	e0bffc17 	ldw	r2,-16(fp)
   16e68:	10c21104 	addi	r3,r2,2116
   16e6c:	e0bff417 	ldw	r2,-48(fp)
   16e70:	1885883a 	add	r2,r3,r2
   16e74:	e1bff117 	ldw	r6,-60(fp)
   16e78:	e17ffd17 	ldw	r5,-12(fp)
   16e7c:	1009883a 	mov	r4,r2
   16e80:	00066d00 	call	66d0 <memcpy>
      ptr   += n;
   16e84:	e0fffd17 	ldw	r3,-12(fp)
   16e88:	e0bff117 	ldw	r2,-60(fp)
   16e8c:	1885883a 	add	r2,r3,r2
   16e90:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   16e94:	e0fffe17 	ldw	r3,-8(fp)
   16e98:	e0bff117 	ldw	r2,-60(fp)
   16e9c:	1885c83a 	sub	r2,r3,r2
   16ea0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   16ea4:	e0fff417 	ldw	r3,-48(fp)
   16ea8:	e0bff117 	ldw	r2,-60(fp)
   16eac:	1885883a 	add	r2,r3,r2
   16eb0:	10c1ffcc 	andi	r3,r2,2047
   16eb4:	e0bffc17 	ldw	r2,-16(fp)
   16eb8:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   16ebc:	e0bffe17 	ldw	r2,-8(fp)
   16ec0:	00bfc716 	blt	zero,r2,16de0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016de0>
   16ec4:	00000106 	br	16ecc <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   16ec8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16ecc:	0005303a 	rdctl	r2,status
   16ed0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16ed4:	e0fff717 	ldw	r3,-36(fp)
   16ed8:	00bfff84 	movi	r2,-2
   16edc:	1884703a 	and	r2,r3,r2
   16ee0:	1001703a 	wrctl	status,r2
  
  return context;
   16ee4:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   16ee8:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   16eec:	e0bffc17 	ldw	r2,-16(fp)
   16ef0:	10800817 	ldw	r2,32(r2)
   16ef4:	10c00094 	ori	r3,r2,2
   16ef8:	e0bffc17 	ldw	r2,-16(fp)
   16efc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   16f00:	e0bffc17 	ldw	r2,-16(fp)
   16f04:	10800017 	ldw	r2,0(r2)
   16f08:	10800104 	addi	r2,r2,4
   16f0c:	1007883a 	mov	r3,r2
   16f10:	e0bffc17 	ldw	r2,-16(fp)
   16f14:	10800817 	ldw	r2,32(r2)
   16f18:	18800035 	stwio	r2,0(r3)
   16f1c:	e0bff617 	ldw	r2,-40(fp)
   16f20:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16f24:	e0bff317 	ldw	r2,-52(fp)
   16f28:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   16f2c:	e0bffe17 	ldw	r2,-8(fp)
   16f30:	00802a0e 	bge	zero,r2,16fdc <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
   16f34:	e0bfff17 	ldw	r2,-4(fp)
   16f38:	1090000c 	andi	r2,r2,16384
   16f3c:	10002a1e 	bne	r2,zero,16fe8 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   16f40:	d0a7e943 	ldbu	r2,-24667(gp)
   16f44:	10803fcc 	andi	r2,r2,255
   16f48:	10800058 	cmpnei	r2,r2,1
   16f4c:	1000161e 	bne	r2,zero,16fa8 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   16f50:	e0bffc17 	ldw	r2,-16(fp)
   16f54:	10800c17 	ldw	r2,48(r2)
   16f58:	e0bff515 	stw	r2,-44(fp)
   16f5c:	00800184 	movi	r2,6
   16f60:	e0bff98d 	sth	r2,-26(fp)
   16f64:	00bfe0c4 	movi	r2,-125
   16f68:	e0bffa05 	stb	r2,-24(fp)
   16f6c:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   16f70:	d0a7e943 	ldbu	r2,-24667(gp)
   16f74:	10803fcc 	andi	r2,r2,255
   16f78:	10001526 	beq	r2,zero,16fd0 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   16f7c:	e0fff98b 	ldhu	r3,-26(fp)
   16f80:	e13ffa03 	ldbu	r4,-24(fp)
   16f84:	e17ffa8b 	ldhu	r5,-22(fp)
   16f88:	e0bffb04 	addi	r2,fp,-20
   16f8c:	d8800015 	stw	r2,0(sp)
   16f90:	280f883a 	mov	r7,r5
   16f94:	200d883a 	mov	r6,r4
   16f98:	180b883a 	mov	r5,r3
   16f9c:	e13ff517 	ldw	r4,-44(fp)
   16fa0:	0010bf00 	call	10bf0 <OSFlagPend>
   16fa4:	00000a06 	br	16fd0 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   16fa8:	0001883a 	nop
   16fac:	e0bffc17 	ldw	r2,-16(fp)
   16fb0:	10c01017 	ldw	r3,64(r2)
   16fb4:	e0bff017 	ldw	r2,-64(fp)
   16fb8:	1880051e 	bne	r3,r2,16fd0 <altera_avalon_jtag_uart_write+0x248>
   16fbc:	e0bffc17 	ldw	r2,-16(fp)
   16fc0:	10c00917 	ldw	r3,36(r2)
   16fc4:	e0bffc17 	ldw	r2,-16(fp)
   16fc8:	10800117 	ldw	r2,4(r2)
   16fcc:	18bff736 	bltu	r3,r2,16fac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016fac>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   16fd0:	e0bffc17 	ldw	r2,-16(fp)
   16fd4:	10800917 	ldw	r2,36(r2)
   16fd8:	1000051e 	bne	r2,zero,16ff0 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
   16fdc:	e0bffe17 	ldw	r2,-8(fp)
   16fe0:	00bfb616 	blt	zero,r2,16ebc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016ebc>
   16fe4:	00000306 	br	16ff4 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   16fe8:	0001883a 	nop
   16fec:	00000106 	br	16ff4 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   16ff0:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   16ff4:	e0bffc17 	ldw	r2,-16(fp)
   16ff8:	10800b17 	ldw	r2,44(r2)
   16ffc:	1009883a 	mov	r4,r2
   17000:	00139d00 	call	139d0 <OSSemPost>

  if (ptr != start)
   17004:	e0fffd17 	ldw	r3,-12(fp)
   17008:	e0bff217 	ldw	r2,-56(fp)
   1700c:	18800426 	beq	r3,r2,17020 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
   17010:	e0fffd17 	ldw	r3,-12(fp)
   17014:	e0bff217 	ldw	r2,-56(fp)
   17018:	1885c83a 	sub	r2,r3,r2
   1701c:	00000606 	br	17038 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
   17020:	e0bfff17 	ldw	r2,-4(fp)
   17024:	1090000c 	andi	r2,r2,16384
   17028:	10000226 	beq	r2,zero,17034 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
   1702c:	00bffd44 	movi	r2,-11
   17030:	00000106 	br	17038 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   17034:	00bffec4 	movi	r2,-5
}
   17038:	e037883a 	mov	sp,fp
   1703c:	dfc00117 	ldw	ra,4(sp)
   17040:	df000017 	ldw	fp,0(sp)
   17044:	dec00204 	addi	sp,sp,8
   17048:	f800283a 	ret

0001704c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   1704c:	defff904 	addi	sp,sp,-28
   17050:	dfc00615 	stw	ra,24(sp)
   17054:	df000515 	stw	fp,20(sp)
   17058:	df000504 	addi	fp,sp,20
   1705c:	e13ffe15 	stw	r4,-8(fp)
   17060:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   17064:	0007883a 	mov	r3,zero
   17068:	e0bffe17 	ldw	r2,-8(fp)
   1706c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   17070:	e0bffe17 	ldw	r2,-8(fp)
   17074:	10800104 	addi	r2,r2,4
   17078:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1707c:	0005303a 	rdctl	r2,status
   17080:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17084:	e0fffc17 	ldw	r3,-16(fp)
   17088:	00bfff84 	movi	r2,-2
   1708c:	1884703a 	and	r2,r3,r2
   17090:	1001703a 	wrctl	status,r2
  
  return context;
   17094:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   17098:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   1709c:	0018d5c0 	call	18d5c <alt_tick>
   170a0:	e0bffb17 	ldw	r2,-20(fp)
   170a4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   170a8:	e0bffd17 	ldw	r2,-12(fp)
   170ac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   170b0:	0001883a 	nop
   170b4:	e037883a 	mov	sp,fp
   170b8:	dfc00117 	ldw	ra,4(sp)
   170bc:	df000017 	ldw	fp,0(sp)
   170c0:	dec00204 	addi	sp,sp,8
   170c4:	f800283a 	ret

000170c8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   170c8:	defff904 	addi	sp,sp,-28
   170cc:	dfc00615 	stw	ra,24(sp)
   170d0:	df000515 	stw	fp,20(sp)
   170d4:	df000504 	addi	fp,sp,20
   170d8:	e13ffc15 	stw	r4,-16(fp)
   170dc:	e17ffd15 	stw	r5,-12(fp)
   170e0:	e1bffe15 	stw	r6,-8(fp)
   170e4:	e1ffff15 	stw	r7,-4(fp)
   170e8:	e0bfff17 	ldw	r2,-4(fp)
   170ec:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   170f0:	d0a7fe17 	ldw	r2,-24584(gp)
   170f4:	1000021e 	bne	r2,zero,17100 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   170f8:	e0bffb17 	ldw	r2,-20(fp)
   170fc:	d0a7fe15 	stw	r2,-24584(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   17100:	e0bffc17 	ldw	r2,-16(fp)
   17104:	10800104 	addi	r2,r2,4
   17108:	00c001c4 	movi	r3,7
   1710c:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   17110:	01800074 	movhi	r6,1
   17114:	319c1304 	addi	r6,r6,28748
   17118:	e17ffc17 	ldw	r5,-16(fp)
   1711c:	e13ffe17 	ldw	r4,-8(fp)
   17120:	00188ec0 	call	188ec <alt_irq_register>
#endif  
}
   17124:	0001883a 	nop
   17128:	e037883a 	mov	sp,fp
   1712c:	dfc00117 	ldw	ra,4(sp)
   17130:	df000017 	ldw	fp,0(sp)
   17134:	dec00204 	addi	sp,sp,8
   17138:	f800283a 	ret

0001713c <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   1713c:	defffc04 	addi	sp,sp,-16
   17140:	df000315 	stw	fp,12(sp)
   17144:	df000304 	addi	fp,sp,12
   17148:	e13ffe15 	stw	r4,-8(fp)
   1714c:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   17150:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
   17154:	e0bfff17 	ldw	r2,-4(fp)
   17158:	1000061e 	bne	r2,zero,17174 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   1715c:	e0bffe17 	ldw	r2,-8(fp)
   17160:	1007883a 	mov	r3,r2
   17164:	e0bffd03 	ldbu	r2,-12(fp)
   17168:	1884b03a 	or	r2,r3,r2
   1716c:	e0bffd05 	stb	r2,-12(fp)
   17170:	00000806 	br	17194 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   17174:	e0bffe17 	ldw	r2,-8(fp)
   17178:	1007883a 	mov	r3,r2
   1717c:	e0bffd03 	ldbu	r2,-12(fp)
   17180:	1884b03a 	or	r2,r3,r2
   17184:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
   17188:	e0bffd03 	ldbu	r2,-12(fp)
   1718c:	10801014 	ori	r2,r2,64
   17190:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   17194:	e0fffd03 	ldbu	r3,-12(fp)
   17198:	00bfe004 	movi	r2,-128
   1719c:	1884b03a 	or	r2,r3,r2
}
   171a0:	e037883a 	mov	sp,fp
   171a4:	df000017 	ldw	fp,0(sp)
   171a8:	dec00104 	addi	sp,sp,4
   171ac:	f800283a 	ret

000171b0 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   171b0:	defffd04 	addi	sp,sp,-12
   171b4:	df000215 	stw	fp,8(sp)
   171b8:	df000204 	addi	fp,sp,8
   171bc:	e13ffe15 	stw	r4,-8(fp)
   171c0:	2805883a 	mov	r2,r5
   171c4:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   171c8:	e0bffe17 	ldw	r2,-8(fp)
   171cc:	10800a17 	ldw	r2,40(r2)
   171d0:	1007883a 	mov	r3,r2
   171d4:	e0bfff03 	ldbu	r2,-4(fp)
   171d8:	18800025 	stbio	r2,0(r3)
}
   171dc:	0001883a 	nop
   171e0:	e037883a 	mov	sp,fp
   171e4:	df000017 	ldw	fp,0(sp)
   171e8:	dec00104 	addi	sp,sp,4
   171ec:	f800283a 	ret

000171f0 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   171f0:	defffe04 	addi	sp,sp,-8
   171f4:	df000115 	stw	fp,4(sp)
   171f8:	df000104 	addi	fp,sp,4
   171fc:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   17200:	e0bfff17 	ldw	r2,-4(fp)
   17204:	10800a17 	ldw	r2,40(r2)
   17208:	1007883a 	mov	r3,r2
   1720c:	00800044 	movi	r2,1
   17210:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   17214:	0001883a 	nop
   17218:	e037883a 	mov	sp,fp
   1721c:	df000017 	ldw	fp,0(sp)
   17220:	dec00104 	addi	sp,sp,4
   17224:	f800283a 	ret

00017228 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   17228:	defffc04 	addi	sp,sp,-16
   1722c:	dfc00315 	stw	ra,12(sp)
   17230:	df000215 	stw	fp,8(sp)
   17234:	df000204 	addi	fp,sp,8
   17238:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   1723c:	d1600804 	addi	r5,gp,-32736
   17240:	e13fff17 	ldw	r4,-4(fp)
   17244:	00186e80 	call	186e8 <alt_find_dev>
   17248:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1724c:	e0bffe17 	ldw	r2,-8(fp)
}
   17250:	e037883a 	mov	sp,fp
   17254:	dfc00117 	ldw	ra,4(sp)
   17258:	df000017 	ldw	fp,0(sp)
   1725c:	dec00204 	addi	sp,sp,8
   17260:	f800283a 	ret

00017264 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   17264:	defffb04 	addi	sp,sp,-20
   17268:	df000415 	stw	fp,16(sp)
   1726c:	df000404 	addi	fp,sp,16
   17270:	e13ffd15 	stw	r4,-12(fp)
   17274:	e17ffe15 	stw	r5,-8(fp)
   17278:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   1727c:	e03ffc15 	stw	zero,-16(fp)
   17280:	00000f06 	br	172c0 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   17284:	e0bffd17 	ldw	r2,-12(fp)
   17288:	10800a17 	ldw	r2,40(r2)
   1728c:	10800044 	addi	r2,r2,1
   17290:	1009883a 	mov	r4,r2
   17294:	e0fffe17 	ldw	r3,-8(fp)
   17298:	e0bffc17 	ldw	r2,-16(fp)
   1729c:	1885883a 	add	r2,r3,r2
   172a0:	10800003 	ldbu	r2,0(r2)
   172a4:	10803fcc 	andi	r2,r2,255
   172a8:	1080201c 	xori	r2,r2,128
   172ac:	10bfe004 	addi	r2,r2,-128
   172b0:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
   172b4:	e0bffc17 	ldw	r2,-16(fp)
   172b8:	10800044 	addi	r2,r2,1
   172bc:	e0bffc15 	stw	r2,-16(fp)
   172c0:	e0fffc17 	ldw	r3,-16(fp)
   172c4:	e0bfff17 	ldw	r2,-4(fp)
   172c8:	18bfee36 	bltu	r3,r2,17284 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017284>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
   172cc:	0001883a 	nop
   172d0:	e037883a 	mov	sp,fp
   172d4:	df000017 	ldw	fp,0(sp)
   172d8:	dec00104 	addi	sp,sp,4
   172dc:	f800283a 	ret

000172e0 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   172e0:	defffd04 	addi	sp,sp,-12
   172e4:	df000215 	stw	fp,8(sp)
   172e8:	df000204 	addi	fp,sp,8
   172ec:	e13ffe15 	stw	r4,-8(fp)
   172f0:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
   172f4:	00000d06 	br	1732c <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   172f8:	e0bffe17 	ldw	r2,-8(fp)
   172fc:	10800a17 	ldw	r2,40(r2)
   17300:	10800044 	addi	r2,r2,1
   17304:	1007883a 	mov	r3,r2
   17308:	e0bfff17 	ldw	r2,-4(fp)
   1730c:	10800003 	ldbu	r2,0(r2)
   17310:	10803fcc 	andi	r2,r2,255
   17314:	1080201c 	xori	r2,r2,128
   17318:	10bfe004 	addi	r2,r2,-128
   1731c:	18800025 	stbio	r2,0(r3)
		++ptr;
   17320:	e0bfff17 	ldw	r2,-4(fp)
   17324:	10800044 	addi	r2,r2,1
   17328:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
   1732c:	e0bfff17 	ldw	r2,-4(fp)
   17330:	10800003 	ldbu	r2,0(r2)
   17334:	10803fcc 	andi	r2,r2,255
   17338:	1080201c 	xori	r2,r2,128
   1733c:	10bfe004 	addi	r2,r2,-128
   17340:	103fed1e 	bne	r2,zero,172f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70172f8>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
   17344:	0001883a 	nop
   17348:	e037883a 	mov	sp,fp
   1734c:	df000017 	ldw	fp,0(sp)
   17350:	dec00104 	addi	sp,sp,4
   17354:	f800283a 	ret

00017358 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   17358:	defffb04 	addi	sp,sp,-20
   1735c:	dfc00415 	stw	ra,16(sp)
   17360:	df000315 	stw	fp,12(sp)
   17364:	df000304 	addi	fp,sp,12
   17368:	e13ffd15 	stw	r4,-12(fp)
   1736c:	e17ffe15 	stw	r5,-8(fp)
   17370:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   17374:	e0bffd17 	ldw	r2,-12(fp)
   17378:	10800017 	ldw	r2,0(r2)
   1737c:	e0ffff17 	ldw	r3,-4(fp)
   17380:	180d883a 	mov	r6,r3
   17384:	e17ffe17 	ldw	r5,-8(fp)
   17388:	1009883a 	mov	r4,r2
   1738c:	00172640 	call	17264 <alt_up_character_lcd_write>
	return 0;
   17390:	0005883a 	mov	r2,zero
}
   17394:	e037883a 	mov	sp,fp
   17398:	dfc00117 	ldw	ra,4(sp)
   1739c:	df000017 	ldw	fp,0(sp)
   173a0:	dec00204 	addi	sp,sp,8
   173a4:	f800283a 	ret

000173a8 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   173a8:	defffa04 	addi	sp,sp,-24
   173ac:	dfc00515 	stw	ra,20(sp)
   173b0:	df000415 	stw	fp,16(sp)
   173b4:	df000404 	addi	fp,sp,16
   173b8:	e13ffd15 	stw	r4,-12(fp)
   173bc:	e17ffe15 	stw	r5,-8(fp)
   173c0:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   173c4:	e0bffe17 	ldw	r2,-8(fp)
   173c8:	10800a28 	cmpgeui	r2,r2,40
   173cc:	1000031e 	bne	r2,zero,173dc <alt_up_character_lcd_set_cursor_pos+0x34>
   173d0:	e0bfff17 	ldw	r2,-4(fp)
   173d4:	108000b0 	cmpltui	r2,r2,2
   173d8:	1000021e 	bne	r2,zero,173e4 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   173dc:	00bfffc4 	movi	r2,-1
   173e0:	00000906 	br	17408 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   173e4:	e17fff17 	ldw	r5,-4(fp)
   173e8:	e13ffe17 	ldw	r4,-8(fp)
   173ec:	001713c0 	call	1713c <get_DDRAM_addr>
   173f0:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   173f4:	e0bffc03 	ldbu	r2,-16(fp)
   173f8:	100b883a 	mov	r5,r2
   173fc:	e13ffd17 	ldw	r4,-12(fp)
   17400:	00171b00 	call	171b0 <alt_up_character_lcd_send_cmd>
	return 0;
   17404:	0005883a 	mov	r2,zero
}
   17408:	e037883a 	mov	sp,fp
   1740c:	dfc00117 	ldw	ra,4(sp)
   17410:	df000017 	ldw	fp,0(sp)
   17414:	dec00204 	addi	sp,sp,8
   17418:	f800283a 	ret

0001741c <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   1741c:	defffb04 	addi	sp,sp,-20
   17420:	dfc00415 	stw	ra,16(sp)
   17424:	df000315 	stw	fp,12(sp)
   17428:	df000304 	addi	fp,sp,12
   1742c:	e13ffe15 	stw	r4,-8(fp)
   17430:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   17434:	e0bfff17 	ldw	r2,-4(fp)
   17438:	10001526 	beq	r2,zero,17490 <alt_up_character_lcd_shift_cursor+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   1743c:	e0bfff17 	ldw	r2,-4(fp)
   17440:	0080020e 	bge	zero,r2,1744c <alt_up_character_lcd_shift_cursor+0x30>
   17444:	00800504 	movi	r2,20
   17448:	00000106 	br	17450 <alt_up_character_lcd_shift_cursor+0x34>
   1744c:	00800404 	movi	r2,16
   17450:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   17454:	e0bfff17 	ldw	r2,-4(fp)
   17458:	1000010e 	bge	r2,zero,17460 <alt_up_character_lcd_shift_cursor+0x44>
   1745c:	0085c83a 	sub	r2,zero,r2
   17460:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   17464:	00000406 	br	17478 <alt_up_character_lcd_shift_cursor+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   17468:	e0bffd43 	ldbu	r2,-11(fp)
   1746c:	100b883a 	mov	r5,r2
   17470:	e13ffe17 	ldw	r4,-8(fp)
   17474:	00171b00 	call	171b0 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   17478:	e0bffd03 	ldbu	r2,-12(fp)
   1747c:	10ffffc4 	addi	r3,r2,-1
   17480:	e0fffd05 	stb	r3,-12(fp)
   17484:	10803fcc 	andi	r2,r2,255
   17488:	103ff71e 	bne	r2,zero,17468 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017468>
   1748c:	00000106 	br	17494 <alt_up_character_lcd_shift_cursor+0x78>

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
   17490:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   17494:	e037883a 	mov	sp,fp
   17498:	dfc00117 	ldw	ra,4(sp)
   1749c:	df000017 	ldw	fp,0(sp)
   174a0:	dec00204 	addi	sp,sp,8
   174a4:	f800283a 	ret

000174a8 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   174a8:	defffb04 	addi	sp,sp,-20
   174ac:	dfc00415 	stw	ra,16(sp)
   174b0:	df000315 	stw	fp,12(sp)
   174b4:	df000304 	addi	fp,sp,12
   174b8:	e13ffe15 	stw	r4,-8(fp)
   174bc:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   174c0:	e0bfff17 	ldw	r2,-4(fp)
   174c4:	10001526 	beq	r2,zero,1751c <alt_up_character_lcd_shift_display+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   174c8:	e0bfff17 	ldw	r2,-4(fp)
   174cc:	0080020e 	bge	zero,r2,174d8 <alt_up_character_lcd_shift_display+0x30>
   174d0:	00800704 	movi	r2,28
   174d4:	00000106 	br	174dc <alt_up_character_lcd_shift_display+0x34>
   174d8:	00800604 	movi	r2,24
   174dc:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   174e0:	e0bfff17 	ldw	r2,-4(fp)
   174e4:	1000010e 	bge	r2,zero,174ec <alt_up_character_lcd_shift_display+0x44>
   174e8:	0085c83a 	sub	r2,zero,r2
   174ec:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   174f0:	00000406 	br	17504 <alt_up_character_lcd_shift_display+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   174f4:	e0bffd43 	ldbu	r2,-11(fp)
   174f8:	100b883a 	mov	r5,r2
   174fc:	e13ffe17 	ldw	r4,-8(fp)
   17500:	00171b00 	call	171b0 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   17504:	e0bffd03 	ldbu	r2,-12(fp)
   17508:	10ffffc4 	addi	r3,r2,-1
   1750c:	e0fffd05 	stb	r3,-12(fp)
   17510:	10803fcc 	andi	r2,r2,255
   17514:	103ff71e 	bne	r2,zero,174f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70174f4>
   17518:	00000106 	br	17520 <alt_up_character_lcd_shift_display+0x78>

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
   1751c:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   17520:	e037883a 	mov	sp,fp
   17524:	dfc00117 	ldw	ra,4(sp)
   17528:	df000017 	ldw	fp,0(sp)
   1752c:	dec00204 	addi	sp,sp,8
   17530:	f800283a 	ret

00017534 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   17534:	defffa04 	addi	sp,sp,-24
   17538:	dfc00515 	stw	ra,20(sp)
   1753c:	df000415 	stw	fp,16(sp)
   17540:	df000404 	addi	fp,sp,16
   17544:	e13ffd15 	stw	r4,-12(fp)
   17548:	e17ffe15 	stw	r5,-8(fp)
   1754c:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   17550:	e0bffe17 	ldw	r2,-8(fp)
   17554:	10800a28 	cmpgeui	r2,r2,40
   17558:	1000031e 	bne	r2,zero,17568 <alt_up_character_lcd_erase_pos+0x34>
   1755c:	e0bfff17 	ldw	r2,-4(fp)
   17560:	108000b0 	cmpltui	r2,r2,2
   17564:	1000021e 	bne	r2,zero,17570 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   17568:	00bfffc4 	movi	r2,-1
   1756c:	00000f06 	br	175ac <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   17570:	e17fff17 	ldw	r5,-4(fp)
   17574:	e13ffe17 	ldw	r4,-8(fp)
   17578:	001713c0 	call	1713c <get_DDRAM_addr>
   1757c:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   17580:	e0bffc03 	ldbu	r2,-16(fp)
   17584:	100b883a 	mov	r5,r2
   17588:	e13ffd17 	ldw	r4,-12(fp)
   1758c:	00171b00 	call	171b0 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   17590:	e0bffd17 	ldw	r2,-12(fp)
   17594:	10800a17 	ldw	r2,40(r2)
   17598:	10800044 	addi	r2,r2,1
   1759c:	1007883a 	mov	r3,r2
   175a0:	00800084 	movi	r2,2
   175a4:	18800025 	stbio	r2,0(r3)
	return 0;
   175a8:	0005883a 	mov	r2,zero
}
   175ac:	e037883a 	mov	sp,fp
   175b0:	dfc00117 	ldw	ra,4(sp)
   175b4:	df000017 	ldw	fp,0(sp)
   175b8:	dec00204 	addi	sp,sp,8
   175bc:	f800283a 	ret

000175c0 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   175c0:	defffd04 	addi	sp,sp,-12
   175c4:	dfc00215 	stw	ra,8(sp)
   175c8:	df000115 	stw	fp,4(sp)
   175cc:	df000104 	addi	fp,sp,4
   175d0:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   175d4:	01400304 	movi	r5,12
   175d8:	e13fff17 	ldw	r4,-4(fp)
   175dc:	00171b00 	call	171b0 <alt_up_character_lcd_send_cmd>
}
   175e0:	0001883a 	nop
   175e4:	e037883a 	mov	sp,fp
   175e8:	dfc00117 	ldw	ra,4(sp)
   175ec:	df000017 	ldw	fp,0(sp)
   175f0:	dec00204 	addi	sp,sp,8
   175f4:	f800283a 	ret

000175f8 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   175f8:	defffd04 	addi	sp,sp,-12
   175fc:	dfc00215 	stw	ra,8(sp)
   17600:	df000115 	stw	fp,4(sp)
   17604:	df000104 	addi	fp,sp,4
   17608:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   1760c:	014003c4 	movi	r5,15
   17610:	e13fff17 	ldw	r4,-4(fp)
   17614:	00171b00 	call	171b0 <alt_up_character_lcd_send_cmd>
}
   17618:	0001883a 	nop
   1761c:	e037883a 	mov	sp,fp
   17620:	dfc00117 	ldw	ra,4(sp)
   17624:	df000017 	ldw	fp,0(sp)
   17628:	dec00204 	addi	sp,sp,8
   1762c:	f800283a 	ret

00017630 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
   17630:	defffd04 	addi	sp,sp,-12
   17634:	df000215 	stw	fp,8(sp)
   17638:	df000204 	addi	fp,sp,8
   1763c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   17640:	e0bfff17 	ldw	r2,-4(fp)
   17644:	10800a17 	ldw	r2,40(r2)
   17648:	10800104 	addi	r2,r2,4
   1764c:	10800037 	ldwio	r2,0(r2)
   17650:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
   17654:	e0bffe17 	ldw	r2,-8(fp)
   17658:	10800054 	ori	r2,r2,1
   1765c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   17660:	e0bfff17 	ldw	r2,-4(fp)
   17664:	10800a17 	ldw	r2,40(r2)
   17668:	10800104 	addi	r2,r2,4
   1766c:	1007883a 	mov	r3,r2
   17670:	e0bffe17 	ldw	r2,-8(fp)
   17674:	18800035 	stwio	r2,0(r3)
}
   17678:	0001883a 	nop
   1767c:	e037883a 	mov	sp,fp
   17680:	df000017 	ldw	fp,0(sp)
   17684:	dec00104 	addi	sp,sp,4
   17688:	f800283a 	ret

0001768c <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
   1768c:	defffd04 	addi	sp,sp,-12
   17690:	df000215 	stw	fp,8(sp)
   17694:	df000204 	addi	fp,sp,8
   17698:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1769c:	e0bfff17 	ldw	r2,-4(fp)
   176a0:	10800a17 	ldw	r2,40(r2)
   176a4:	10800104 	addi	r2,r2,4
   176a8:	10800037 	ldwio	r2,0(r2)
   176ac:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
   176b0:	e0fffe17 	ldw	r3,-8(fp)
   176b4:	00bfff84 	movi	r2,-2
   176b8:	1884703a 	and	r2,r3,r2
   176bc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   176c0:	e0bfff17 	ldw	r2,-4(fp)
   176c4:	10800a17 	ldw	r2,40(r2)
   176c8:	10800104 	addi	r2,r2,4
   176cc:	1007883a 	mov	r3,r2
   176d0:	e0bffe17 	ldw	r2,-8(fp)
   176d4:	18800035 	stwio	r2,0(r3)
}
   176d8:	0001883a 	nop
   176dc:	e037883a 	mov	sp,fp
   176e0:	df000017 	ldw	fp,0(sp)
   176e4:	dec00104 	addi	sp,sp,4
   176e8:	f800283a 	ret

000176ec <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
   176ec:	defffd04 	addi	sp,sp,-12
   176f0:	df000215 	stw	fp,8(sp)
   176f4:	df000204 	addi	fp,sp,8
   176f8:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   176fc:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
   17700:	e0bfff17 	ldw	r2,-4(fp)
   17704:	10800a17 	ldw	r2,40(r2)
   17708:	10800084 	addi	r2,r2,2
   1770c:	1080002b 	ldhuio	r2,0(r2)
   17710:	10bfffcc 	andi	r2,r2,65535
   17714:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
   17718:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1771c:	e037883a 	mov	sp,fp
   17720:	df000017 	ldw	fp,0(sp)
   17724:	dec00104 	addi	sp,sp,4
   17728:	f800283a 	ret

0001772c <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
   1772c:	defffd04 	addi	sp,sp,-12
   17730:	df000215 	stw	fp,8(sp)
   17734:	df000204 	addi	fp,sp,8
   17738:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1773c:	e0bfff17 	ldw	r2,-4(fp)
   17740:	10800a17 	ldw	r2,40(r2)
   17744:	10800104 	addi	r2,r2,4
   17748:	10800037 	ldwio	r2,0(r2)
   1774c:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
   17750:	e0bffe17 	ldw	r2,-8(fp)
   17754:	1004d43a 	srli	r2,r2,16
}
   17758:	e037883a 	mov	sp,fp
   1775c:	df000017 	ldw	fp,0(sp)
   17760:	dec00104 	addi	sp,sp,4
   17764:	f800283a 	ret

00017768 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
   17768:	defffd04 	addi	sp,sp,-12
   1776c:	df000215 	stw	fp,8(sp)
   17770:	df000204 	addi	fp,sp,8
   17774:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
   17778:	e0bfff17 	ldw	r2,-4(fp)
   1777c:	1080800c 	andi	r2,r2,512
   17780:	1004d27a 	srli	r2,r2,9
   17784:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   17788:	e0bffe17 	ldw	r2,-8(fp)
   1778c:	10000226 	beq	r2,zero,17798 <alt_up_irda_check_parity+0x30>
   17790:	00bfffc4 	movi	r2,-1
   17794:	00000106 	br	1779c <alt_up_irda_check_parity+0x34>
   17798:	0005883a 	mov	r2,zero
}
   1779c:	e037883a 	mov	sp,fp
   177a0:	df000017 	ldw	fp,0(sp)
   177a4:	dec00104 	addi	sp,sp,4
   177a8:	f800283a 	ret

000177ac <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
   177ac:	defffd04 	addi	sp,sp,-12
   177b0:	df000215 	stw	fp,8(sp)
   177b4:	df000204 	addi	fp,sp,8
   177b8:	e13ffe15 	stw	r4,-8(fp)
   177bc:	2805883a 	mov	r2,r5
   177c0:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
   177c4:	e0bffe17 	ldw	r2,-8(fp)
   177c8:	10800a17 	ldw	r2,40(r2)
   177cc:	1007883a 	mov	r3,r2
   177d0:	e0bfff03 	ldbu	r2,-4(fp)
   177d4:	18800035 	stwio	r2,0(r3)
	return 0;
   177d8:	0005883a 	mov	r2,zero
}
   177dc:	e037883a 	mov	sp,fp
   177e0:	df000017 	ldw	fp,0(sp)
   177e4:	dec00104 	addi	sp,sp,4
   177e8:	f800283a 	ret

000177ec <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
   177ec:	defffa04 	addi	sp,sp,-24
   177f0:	dfc00515 	stw	ra,20(sp)
   177f4:	df000415 	stw	fp,16(sp)
   177f8:	df000404 	addi	fp,sp,16
   177fc:	e13ffd15 	stw	r4,-12(fp)
   17800:	e17ffe15 	stw	r5,-8(fp)
   17804:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
   17808:	e0bffd17 	ldw	r2,-12(fp)
   1780c:	10800a17 	ldw	r2,40(r2)
   17810:	10800037 	ldwio	r2,0(r2)
   17814:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
   17818:	e0bffc17 	ldw	r2,-16(fp)
   1781c:	1007883a 	mov	r3,r2
   17820:	e0bffe17 	ldw	r2,-8(fp)
   17824:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
   17828:	e13ffc17 	ldw	r4,-16(fp)
   1782c:	00177680 	call	17768 <alt_up_irda_check_parity>
   17830:	1007883a 	mov	r3,r2
   17834:	e0bfff17 	ldw	r2,-4(fp)
   17838:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
   1783c:	e0bffc17 	ldw	r2,-16(fp)
   17840:	10a0000c 	andi	r2,r2,32768
   17844:	1004d3fa 	srli	r2,r2,15
   17848:	10bfffc4 	addi	r2,r2,-1
}
   1784c:	e037883a 	mov	sp,fp
   17850:	dfc00117 	ldw	ra,4(sp)
   17854:	df000017 	ldw	fp,0(sp)
   17858:	dec00204 	addi	sp,sp,8
   1785c:	f800283a 	ret

00017860 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
   17860:	defff804 	addi	sp,sp,-32
   17864:	dfc00715 	stw	ra,28(sp)
   17868:	df000615 	stw	fp,24(sp)
   1786c:	df000604 	addi	fp,sp,24
   17870:	e13ffd15 	stw	r4,-12(fp)
   17874:	e17ffe15 	stw	r5,-8(fp)
   17878:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   1787c:	e0bffd17 	ldw	r2,-12(fp)
   17880:	10800017 	ldw	r2,0(r2)
   17884:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   17888:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   1788c:	00000c06 	br	178c0 <alt_up_irda_read_fd+0x60>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
   17890:	e0bffe17 	ldw	r2,-8(fp)
   17894:	10c00044 	addi	r3,r2,1
   17898:	e0fffe15 	stw	r3,-8(fp)
   1789c:	e0fffc04 	addi	r3,fp,-16
   178a0:	180d883a 	mov	r6,r3
   178a4:	100b883a 	mov	r5,r2
   178a8:	e13ffb17 	ldw	r4,-20(fp)
   178ac:	00177ec0 	call	177ec <alt_up_irda_read_data>
   178b0:	1000081e 	bne	r2,zero,178d4 <alt_up_irda_read_fd+0x74>
			count++;
   178b4:	e0bffa17 	ldw	r2,-24(fp)
   178b8:	10800044 	addi	r2,r2,1
   178bc:	e0bffa15 	stw	r2,-24(fp)
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   178c0:	e0bfff17 	ldw	r2,-4(fp)
   178c4:	10ffffc4 	addi	r3,r2,-1
   178c8:	e0ffff15 	stw	r3,-4(fp)
   178cc:	103ff01e 	bne	r2,zero,17890 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017890>
   178d0:	00000106 	br	178d8 <alt_up_irda_read_fd+0x78>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
   178d4:	0001883a 	nop
	}
	return count;
   178d8:	e0bffa17 	ldw	r2,-24(fp)
}
   178dc:	e037883a 	mov	sp,fp
   178e0:	dfc00117 	ldw	ra,4(sp)
   178e4:	df000017 	ldw	fp,0(sp)
   178e8:	dec00204 	addi	sp,sp,8
   178ec:	f800283a 	ret

000178f0 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
   178f0:	defff904 	addi	sp,sp,-28
   178f4:	dfc00615 	stw	ra,24(sp)
   178f8:	df000515 	stw	fp,20(sp)
   178fc:	df000504 	addi	fp,sp,20
   17900:	e13ffd15 	stw	r4,-12(fp)
   17904:	e17ffe15 	stw	r5,-8(fp)
   17908:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   1790c:	e0bffd17 	ldw	r2,-12(fp)
   17910:	10800017 	ldw	r2,0(r2)
   17914:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   17918:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   1791c:	00000c06 	br	17950 <alt_up_irda_write_fd+0x60>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
   17920:	e0bffe17 	ldw	r2,-8(fp)
   17924:	10c00044 	addi	r3,r2,1
   17928:	e0fffe15 	stw	r3,-8(fp)
   1792c:	10800003 	ldbu	r2,0(r2)
   17930:	10803fcc 	andi	r2,r2,255
   17934:	100b883a 	mov	r5,r2
   17938:	e13ffc17 	ldw	r4,-16(fp)
   1793c:	00177ac0 	call	177ac <alt_up_irda_write_data>
   17940:	1000081e 	bne	r2,zero,17964 <alt_up_irda_write_fd+0x74>
			count++;
   17944:	e0bffb17 	ldw	r2,-20(fp)
   17948:	10800044 	addi	r2,r2,1
   1794c:	e0bffb15 	stw	r2,-20(fp)

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
   17950:	e0bfff17 	ldw	r2,-4(fp)
   17954:	10ffffc4 	addi	r3,r2,-1
   17958:	e0ffff15 	stw	r3,-4(fp)
   1795c:	103ff01e 	bne	r2,zero,17920 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017920>
   17960:	00000106 	br	17968 <alt_up_irda_write_fd+0x78>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
   17964:	0001883a 	nop
	}
	return count;
   17968:	e0bffb17 	ldw	r2,-20(fp)
}
   1796c:	e037883a 	mov	sp,fp
   17970:	dfc00117 	ldw	ra,4(sp)
   17974:	df000017 	ldw	fp,0(sp)
   17978:	dec00204 	addi	sp,sp,8
   1797c:	f800283a 	ret

00017980 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
   17980:	defffc04 	addi	sp,sp,-16
   17984:	dfc00315 	stw	ra,12(sp)
   17988:	df000215 	stw	fp,8(sp)
   1798c:	df000204 	addi	fp,sp,8
   17990:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
   17994:	d1600804 	addi	r5,gp,-32736
   17998:	e13fff17 	ldw	r4,-4(fp)
   1799c:	00186e80 	call	186e8 <alt_find_dev>
   179a0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   179a4:	e0bffe17 	ldw	r2,-8(fp)
}
   179a8:	e037883a 	mov	sp,fp
   179ac:	dfc00117 	ldw	ra,4(sp)
   179b0:	df000017 	ldw	fp,0(sp)
   179b4:	dec00204 	addi	sp,sp,8
   179b8:	f800283a 	ret

000179bc <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   179bc:	defffd04 	addi	sp,sp,-12
   179c0:	df000215 	stw	fp,8(sp)
   179c4:	df000204 	addi	fp,sp,8
   179c8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
   179cc:	e0bfff17 	ldw	r2,-4(fp)
   179d0:	1080400c 	andi	r2,r2,256
   179d4:	1004d23a 	srli	r2,r2,8
   179d8:	e0bffe05 	stb	r2,-8(fp)
	return ri;
   179dc:	e0bffe03 	ldbu	r2,-8(fp)
}
   179e0:	e037883a 	mov	sp,fp
   179e4:	df000017 	ldw	fp,0(sp)
   179e8:	dec00104 	addi	sp,sp,4
   179ec:	f800283a 	ret

000179f0 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   179f0:	defffd04 	addi	sp,sp,-12
   179f4:	df000215 	stw	fp,8(sp)
   179f8:	df000204 	addi	fp,sp,8
   179fc:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
   17a00:	e0bfff17 	ldw	r2,-4(fp)
   17a04:	1080004c 	andi	r2,r2,1
   17a08:	e0bffe05 	stb	r2,-8(fp)
	return re;
   17a0c:	e0bffe03 	ldbu	r2,-8(fp)
}
   17a10:	e037883a 	mov	sp,fp
   17a14:	df000017 	ldw	fp,0(sp)
   17a18:	dec00104 	addi	sp,sp,4
   17a1c:	f800283a 	ret

00017a20 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   17a20:	defffd04 	addi	sp,sp,-12
   17a24:	df000215 	stw	fp,8(sp)
   17a28:	df000204 	addi	fp,sp,8
   17a2c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
   17a30:	e0bfff17 	ldw	r2,-4(fp)
   17a34:	1081000c 	andi	r2,r2,1024
   17a38:	1004d2ba 	srli	r2,r2,10
   17a3c:	e0bffe05 	stb	r2,-8(fp)
	return re;
   17a40:	e0bffe03 	ldbu	r2,-8(fp)
}
   17a44:	e037883a 	mov	sp,fp
   17a48:	df000017 	ldw	fp,0(sp)
   17a4c:	dec00104 	addi	sp,sp,4
   17a50:	f800283a 	ret

00017a54 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   17a54:	defffd04 	addi	sp,sp,-12
   17a58:	df000215 	stw	fp,8(sp)
   17a5c:	df000204 	addi	fp,sp,8
   17a60:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   17a64:	e0bfff17 	ldw	r2,-4(fp)
   17a68:	1004d43a 	srli	r2,r2,16
   17a6c:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
   17a70:	e0bffe0b 	ldhu	r2,-8(fp)
}
   17a74:	e037883a 	mov	sp,fp
   17a78:	df000017 	ldw	fp,0(sp)
   17a7c:	dec00104 	addi	sp,sp,4
   17a80:	f800283a 	ret

00017a84 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
   17a84:	defffd04 	addi	sp,sp,-12
   17a88:	df000215 	stw	fp,8(sp)
   17a8c:	df000204 	addi	fp,sp,8
   17a90:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
   17a94:	e0bfff17 	ldw	r2,-4(fp)
   17a98:	10a0000c 	andi	r2,r2,32768
   17a9c:	1004d3fa 	srli	r2,r2,15
   17aa0:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
   17aa4:	e0bffe03 	ldbu	r2,-8(fp)
}
   17aa8:	e037883a 	mov	sp,fp
   17aac:	df000017 	ldw	fp,0(sp)
   17ab0:	dec00104 	addi	sp,sp,4
   17ab4:	f800283a 	ret

00017ab8 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   17ab8:	defffd04 	addi	sp,sp,-12
   17abc:	df000215 	stw	fp,8(sp)
   17ac0:	df000204 	addi	fp,sp,8
   17ac4:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   17ac8:	e0bfff17 	ldw	r2,-4(fp)
   17acc:	e0bffe05 	stb	r2,-8(fp)
	return data;
   17ad0:	e0bffe03 	ldbu	r2,-8(fp)
}
   17ad4:	e037883a 	mov	sp,fp
   17ad8:	df000017 	ldw	fp,0(sp)
   17adc:	dec00104 	addi	sp,sp,4
   17ae0:	f800283a 	ret

00017ae4 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
   17ae4:	defffb04 	addi	sp,sp,-20
   17ae8:	dfc00415 	stw	ra,16(sp)
   17aec:	df000315 	stw	fp,12(sp)
   17af0:	df000304 	addi	fp,sp,12
   17af4:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   17af8:	01403fc4 	movi	r5,255
   17afc:	e13fff17 	ldw	r4,-4(fp)
   17b00:	0017d440 	call	17d44 <alt_up_ps2_write_data_byte_with_ack>
   17b04:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
   17b08:	e0bffd17 	ldw	r2,-12(fp)
   17b0c:	1000211e 	bne	r2,zero,17b94 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   17b10:	e0bffe04 	addi	r2,fp,-8
   17b14:	100b883a 	mov	r5,r2
   17b18:	e13fff17 	ldw	r4,-4(fp)
   17b1c:	0017da80 	call	17da8 <alt_up_ps2_read_data_byte_timeout>
   17b20:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   17b24:	e0bffd17 	ldw	r2,-12(fp)
   17b28:	10001a1e 	bne	r2,zero,17b94 <alt_up_ps2_init+0xb0>
   17b2c:	e0bffe03 	ldbu	r2,-8(fp)
   17b30:	10803fcc 	andi	r2,r2,255
   17b34:	10802a98 	cmpnei	r2,r2,170
   17b38:	1000161e 	bne	r2,zero,17b94 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   17b3c:	e0bffe04 	addi	r2,fp,-8
   17b40:	100b883a 	mov	r5,r2
   17b44:	e13fff17 	ldw	r4,-4(fp)
   17b48:	0017da80 	call	17da8 <alt_up_ps2_read_data_byte_timeout>
   17b4c:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
   17b50:	e0bffd17 	ldw	r2,-12(fp)
   17b54:	10bfe318 	cmpnei	r2,r2,-116
   17b58:	1000041e 	bne	r2,zero,17b6c <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
   17b5c:	e0bfff17 	ldw	r2,-4(fp)
   17b60:	00c00044 	movi	r3,1
   17b64:	10c00d15 	stw	r3,52(r2)
				ps2->device_type = PS2_MOUSE;
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
			}
		}
	}
}
   17b68:	00000a06 	br	17b94 <alt_up_ps2_init+0xb0>
			if (status == -ETIMEDOUT)
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
			}
			else if (status == 0 && byte == 0x00)
   17b6c:	e0bffd17 	ldw	r2,-12(fp)
   17b70:	1000081e 	bne	r2,zero,17b94 <alt_up_ps2_init+0xb0>
   17b74:	e0bffe03 	ldbu	r2,-8(fp)
   17b78:	10803fcc 	andi	r2,r2,255
   17b7c:	1000051e 	bne	r2,zero,17b94 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
   17b80:	e0bfff17 	ldw	r2,-4(fp)
   17b84:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
   17b88:	01403d04 	movi	r5,244
   17b8c:	e13fff17 	ldw	r4,-4(fp)
   17b90:	0017c680 	call	17c68 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
   17b94:	0001883a 	nop
   17b98:	e037883a 	mov	sp,fp
   17b9c:	dfc00117 	ldw	ra,4(sp)
   17ba0:	df000017 	ldw	fp,0(sp)
   17ba4:	dec00204 	addi	sp,sp,8
   17ba8:	f800283a 	ret

00017bac <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
   17bac:	defffd04 	addi	sp,sp,-12
   17bb0:	df000215 	stw	fp,8(sp)
   17bb4:	df000204 	addi	fp,sp,8
   17bb8:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   17bbc:	e0bfff17 	ldw	r2,-4(fp)
   17bc0:	10800a17 	ldw	r2,40(r2)
   17bc4:	10800104 	addi	r2,r2,4
   17bc8:	10800037 	ldwio	r2,0(r2)
   17bcc:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   17bd0:	e0bffe17 	ldw	r2,-8(fp)
   17bd4:	10800054 	ori	r2,r2,1
   17bd8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   17bdc:	e0bfff17 	ldw	r2,-4(fp)
   17be0:	10800a17 	ldw	r2,40(r2)
   17be4:	10800104 	addi	r2,r2,4
   17be8:	1007883a 	mov	r3,r2
   17bec:	e0bffe17 	ldw	r2,-8(fp)
   17bf0:	18800035 	stwio	r2,0(r3)
}
   17bf4:	0001883a 	nop
   17bf8:	e037883a 	mov	sp,fp
   17bfc:	df000017 	ldw	fp,0(sp)
   17c00:	dec00104 	addi	sp,sp,4
   17c04:	f800283a 	ret

00017c08 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
   17c08:	defffd04 	addi	sp,sp,-12
   17c0c:	df000215 	stw	fp,8(sp)
   17c10:	df000204 	addi	fp,sp,8
   17c14:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   17c18:	e0bfff17 	ldw	r2,-4(fp)
   17c1c:	10800a17 	ldw	r2,40(r2)
   17c20:	10800104 	addi	r2,r2,4
   17c24:	10800037 	ldwio	r2,0(r2)
   17c28:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   17c2c:	e0fffe17 	ldw	r3,-8(fp)
   17c30:	00bfff84 	movi	r2,-2
   17c34:	1884703a 	and	r2,r3,r2
   17c38:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   17c3c:	e0bfff17 	ldw	r2,-4(fp)
   17c40:	10800a17 	ldw	r2,40(r2)
   17c44:	10800104 	addi	r2,r2,4
   17c48:	1007883a 	mov	r3,r2
   17c4c:	e0bffe17 	ldw	r2,-8(fp)
   17c50:	18800035 	stwio	r2,0(r3)
}
   17c54:	0001883a 	nop
   17c58:	e037883a 	mov	sp,fp
   17c5c:	df000017 	ldw	fp,0(sp)
   17c60:	dec00104 	addi	sp,sp,4
   17c64:	f800283a 	ret

00017c68 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
   17c68:	defffb04 	addi	sp,sp,-20
   17c6c:	dfc00415 	stw	ra,16(sp)
   17c70:	df000315 	stw	fp,12(sp)
   17c74:	df000304 	addi	fp,sp,12
   17c78:	e13ffe15 	stw	r4,-8(fp)
   17c7c:	2805883a 	mov	r2,r5
   17c80:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
   17c84:	e0bffe17 	ldw	r2,-8(fp)
   17c88:	10800a17 	ldw	r2,40(r2)
   17c8c:	1007883a 	mov	r3,r2
   17c90:	e0bfff03 	ldbu	r2,-4(fp)
   17c94:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
   17c98:	e0bffe17 	ldw	r2,-8(fp)
   17c9c:	10800a17 	ldw	r2,40(r2)
   17ca0:	10800104 	addi	r2,r2,4
   17ca4:	10800037 	ldwio	r2,0(r2)
   17ca8:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
   17cac:	e13ffd17 	ldw	r4,-12(fp)
   17cb0:	0017a200 	call	17a20 <read_CE_bit>
   17cb4:	10803fcc 	andi	r2,r2,255
   17cb8:	10000226 	beq	r2,zero,17cc4 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
   17cbc:	00bffec4 	movi	r2,-5
   17cc0:	00000106 	br	17cc8 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
   17cc4:	0005883a 	mov	r2,zero
}
   17cc8:	e037883a 	mov	sp,fp
   17ccc:	dfc00117 	ldw	ra,4(sp)
   17cd0:	df000017 	ldw	fp,0(sp)
   17cd4:	dec00204 	addi	sp,sp,8
   17cd8:	f800283a 	ret

00017cdc <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
   17cdc:	defffc04 	addi	sp,sp,-16
   17ce0:	dfc00315 	stw	ra,12(sp)
   17ce4:	df000215 	stw	fp,8(sp)
   17ce8:	df000204 	addi	fp,sp,8
   17cec:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
   17cf0:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
   17cf4:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
   17cf8:	e0bffe44 	addi	r2,fp,-7
   17cfc:	100b883a 	mov	r5,r2
   17d00:	e13fff17 	ldw	r4,-4(fp)
   17d04:	0017da80 	call	17da8 <alt_up_ps2_read_data_byte_timeout>
   17d08:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
   17d0c:	e0bffe03 	ldbu	r2,-8(fp)
   17d10:	1000061e 	bne	r2,zero,17d2c <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
   17d14:	e0bffe43 	ldbu	r2,-7(fp)
   17d18:	10803fcc 	andi	r2,r2,255
   17d1c:	10803e98 	cmpnei	r2,r2,250
   17d20:	103ff51e 	bne	r2,zero,17cf8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017cf8>
				return 0;
   17d24:	0005883a 	mov	r2,zero
   17d28:	00000106 	br	17d30 <alt_up_ps2_wait_for_ack+0x54>
		}
		else 
		{
			return status;
   17d2c:	e0bffe03 	ldbu	r2,-8(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
   17d30:	e037883a 	mov	sp,fp
   17d34:	dfc00117 	ldw	ra,4(sp)
   17d38:	df000017 	ldw	fp,0(sp)
   17d3c:	dec00204 	addi	sp,sp,8
   17d40:	f800283a 	ret

00017d44 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
   17d44:	defffa04 	addi	sp,sp,-24
   17d48:	dfc00515 	stw	ra,20(sp)
   17d4c:	df000415 	stw	fp,16(sp)
   17d50:	df000404 	addi	fp,sp,16
   17d54:	e13ffe15 	stw	r4,-8(fp)
   17d58:	2805883a 	mov	r2,r5
   17d5c:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
   17d60:	e0bfff03 	ldbu	r2,-4(fp)
   17d64:	100b883a 	mov	r5,r2
   17d68:	e13ffe17 	ldw	r4,-8(fp)
   17d6c:	0017c680 	call	17c68 <alt_up_ps2_write_data_byte>
   17d70:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
   17d74:	e0bffc17 	ldw	r2,-16(fp)
   17d78:	10000226 	beq	r2,zero,17d84 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
   17d7c:	e0bffc17 	ldw	r2,-16(fp)
   17d80:	00000406 	br	17d94 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
   17d84:	e13ffe17 	ldw	r4,-8(fp)
   17d88:	0017cdc0 	call	17cdc <alt_up_ps2_wait_for_ack>
   17d8c:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
   17d90:	e0bffd17 	ldw	r2,-12(fp)
}
   17d94:	e037883a 	mov	sp,fp
   17d98:	dfc00117 	ldw	ra,4(sp)
   17d9c:	df000017 	ldw	fp,0(sp)
   17da0:	dec00204 	addi	sp,sp,8
   17da4:	f800283a 	ret

00017da8 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   17da8:	defffa04 	addi	sp,sp,-24
   17dac:	dfc00515 	stw	ra,20(sp)
   17db0:	df000415 	stw	fp,16(sp)
   17db4:	df000404 	addi	fp,sp,16
   17db8:	e13ffe15 	stw	r4,-8(fp)
   17dbc:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   17dc0:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
   17dc4:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
   17dc8:	e0bffc17 	ldw	r2,-16(fp)
   17dcc:	10800044 	addi	r2,r2,1
   17dd0:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   17dd4:	e0bffe17 	ldw	r2,-8(fp)
   17dd8:	10800a17 	ldw	r2,40(r2)
   17ddc:	10800037 	ldwio	r2,0(r2)
   17de0:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
   17de4:	e13ffd17 	ldw	r4,-12(fp)
   17de8:	0017a840 	call	17a84 <read_data_valid>
   17dec:	10803fcc 	andi	r2,r2,255
   17df0:	10000726 	beq	r2,zero,17e10 <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
   17df4:	e13ffd17 	ldw	r4,-12(fp)
   17df8:	0017ab80 	call	17ab8 <read_data_byte>
   17dfc:	1007883a 	mov	r3,r2
   17e00:	e0bfff17 	ldw	r2,-4(fp)
   17e04:	10c00005 	stb	r3,0(r2)
			return 0;
   17e08:	0005883a 	mov	r2,zero
   17e0c:	00000806 	br	17e30 <alt_up_ps2_read_data_byte_timeout+0x88>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
   17e10:	e0bffe17 	ldw	r2,-8(fp)
   17e14:	10800c17 	ldw	r2,48(r2)
   17e18:	103feb26 	beq	r2,zero,17dc8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017dc8>
   17e1c:	e0bffe17 	ldw	r2,-8(fp)
   17e20:	10c00c17 	ldw	r3,48(r2)
   17e24:	e0bffc17 	ldw	r2,-16(fp)
   17e28:	18bfe72e 	bgeu	r3,r2,17dc8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017dc8>
		{
			return -ETIMEDOUT;
   17e2c:	00bfe304 	movi	r2,-116
		}
	} while (1);
}
   17e30:	e037883a 	mov	sp,fp
   17e34:	dfc00117 	ldw	ra,4(sp)
   17e38:	df000017 	ldw	fp,0(sp)
   17e3c:	dec00204 	addi	sp,sp,8
   17e40:	f800283a 	ret

00017e44 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   17e44:	defffb04 	addi	sp,sp,-20
   17e48:	dfc00415 	stw	ra,16(sp)
   17e4c:	df000315 	stw	fp,12(sp)
   17e50:	df000304 	addi	fp,sp,12
   17e54:	e13ffe15 	stw	r4,-8(fp)
   17e58:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   17e5c:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   17e60:	e0bffe17 	ldw	r2,-8(fp)
   17e64:	10800a17 	ldw	r2,40(r2)
   17e68:	10800037 	ldwio	r2,0(r2)
   17e6c:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
   17e70:	e13ffd17 	ldw	r4,-12(fp)
   17e74:	0017a840 	call	17a84 <read_data_valid>
   17e78:	10803fcc 	andi	r2,r2,255
   17e7c:	10000726 	beq	r2,zero,17e9c <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
   17e80:	e13ffd17 	ldw	r4,-12(fp)
   17e84:	0017ab80 	call	17ab8 <read_data_byte>
   17e88:	1007883a 	mov	r3,r2
   17e8c:	e0bfff17 	ldw	r2,-4(fp)
   17e90:	10c00005 	stb	r3,0(r2)
		return 0;
   17e94:	0005883a 	mov	r2,zero
   17e98:	00000106 	br	17ea0 <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
   17e9c:	00bfffc4 	movi	r2,-1
}
   17ea0:	e037883a 	mov	sp,fp
   17ea4:	dfc00117 	ldw	ra,4(sp)
   17ea8:	df000017 	ldw	fp,0(sp)
   17eac:	dec00204 	addi	sp,sp,8
   17eb0:	f800283a 	ret

00017eb4 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
   17eb4:	defffb04 	addi	sp,sp,-20
   17eb8:	dfc00415 	stw	ra,16(sp)
   17ebc:	df000315 	stw	fp,12(sp)
   17ec0:	df000304 	addi	fp,sp,12
   17ec4:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
   17ec8:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
   17ecc:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   17ed0:	e0bfff17 	ldw	r2,-4(fp)
   17ed4:	10800a17 	ldw	r2,40(r2)
   17ed8:	10800037 	ldwio	r2,0(r2)
   17edc:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
   17ee0:	e13ffe17 	ldw	r4,-8(fp)
   17ee4:	0017a540 	call	17a54 <read_num_bytes_available>
   17ee8:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
   17eec:	e0bffd0b 	ldhu	r2,-12(fp)
   17ef0:	103ff71e 	bne	r2,zero,17ed0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017ed0>
}
   17ef4:	0001883a 	nop
   17ef8:	e037883a 	mov	sp,fp
   17efc:	dfc00117 	ldw	ra,4(sp)
   17f00:	df000017 	ldw	fp,0(sp)
   17f04:	dec00204 	addi	sp,sp,8
   17f08:	f800283a 	ret

00017f0c <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
   17f0c:	defff804 	addi	sp,sp,-32
   17f10:	dfc00715 	stw	ra,28(sp)
   17f14:	df000615 	stw	fp,24(sp)
   17f18:	df000604 	addi	fp,sp,24
   17f1c:	e13ffd15 	stw	r4,-12(fp)
   17f20:	e17ffe15 	stw	r5,-8(fp)
   17f24:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   17f28:	e0bffd17 	ldw	r2,-12(fp)
   17f2c:	10800017 	ldw	r2,0(r2)
   17f30:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
   17f34:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
   17f38:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
   17f3c:	e0fffc17 	ldw	r3,-16(fp)
   17f40:	e0bfff17 	ldw	r2,-4(fp)
   17f44:	18bffd16 	blt	r3,r2,17f3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017f3c>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
   17f48:	e0bffe17 	ldw	r2,-8(fp)
   17f4c:	10c00044 	addi	r3,r2,1
   17f50:	e0fffe15 	stw	r3,-8(fp)
   17f54:	100b883a 	mov	r5,r2
   17f58:	e13ffa17 	ldw	r4,-24(fp)
   17f5c:	0017da80 	call	17da8 <alt_up_ps2_read_data_byte_timeout>
   17f60:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
   17f64:	e0bffb17 	ldw	r2,-20(fp)
   17f68:	10000226 	beq	r2,zero,17f74 <alt_up_ps2_read_fd+0x68>
			return count;
   17f6c:	e0bffc17 	ldw	r2,-16(fp)
   17f70:	00000406 	br	17f84 <alt_up_ps2_read_fd+0x78>
		count++;
   17f74:	e0bffc17 	ldw	r2,-16(fp)
   17f78:	10800044 	addi	r2,r2,1
   17f7c:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
   17f80:	e0bffc17 	ldw	r2,-16(fp)
}
   17f84:	e037883a 	mov	sp,fp
   17f88:	dfc00117 	ldw	ra,4(sp)
   17f8c:	df000017 	ldw	fp,0(sp)
   17f90:	dec00204 	addi	sp,sp,8
   17f94:	f800283a 	ret

00017f98 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   17f98:	defff804 	addi	sp,sp,-32
   17f9c:	dfc00715 	stw	ra,28(sp)
   17fa0:	df000615 	stw	fp,24(sp)
   17fa4:	df000604 	addi	fp,sp,24
   17fa8:	e13ffd15 	stw	r4,-12(fp)
   17fac:	e17ffe15 	stw	r5,-8(fp)
   17fb0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   17fb4:	e0bffd17 	ldw	r2,-12(fp)
   17fb8:	10800017 	ldw	r2,0(r2)
   17fbc:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   17fc0:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
   17fc4:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
   17fc8:	00001006 	br	1800c <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   17fcc:	e0bffe17 	ldw	r2,-8(fp)
   17fd0:	10c00044 	addi	r3,r2,1
   17fd4:	e0fffe15 	stw	r3,-8(fp)
   17fd8:	10800003 	ldbu	r2,0(r2)
   17fdc:	10803fcc 	andi	r2,r2,255
   17fe0:	100b883a 	mov	r5,r2
   17fe4:	e13ffb17 	ldw	r4,-20(fp)
   17fe8:	0017c680 	call	17c68 <alt_up_ps2_write_data_byte>
   17fec:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
   17ff0:	e0bffc17 	ldw	r2,-16(fp)
   17ff4:	10000226 	beq	r2,zero,18000 <alt_up_ps2_write_fd+0x68>
			return count;
   17ff8:	e0bffa17 	ldw	r2,-24(fp)
   17ffc:	00000706 	br	1801c <alt_up_ps2_write_fd+0x84>
		count++;
   18000:	e0bffa17 	ldw	r2,-24(fp)
   18004:	10800044 	addi	r2,r2,1
   18008:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
   1800c:	e0fffa17 	ldw	r3,-24(fp)
   18010:	e0bfff17 	ldw	r2,-4(fp)
   18014:	18bfed16 	blt	r3,r2,17fcc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017fcc>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
   18018:	e0bffa17 	ldw	r2,-24(fp)
}
   1801c:	e037883a 	mov	sp,fp
   18020:	dfc00117 	ldw	ra,4(sp)
   18024:	df000017 	ldw	fp,0(sp)
   18028:	dec00204 	addi	sp,sp,8
   1802c:	f800283a 	ret

00018030 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   18030:	defffc04 	addi	sp,sp,-16
   18034:	dfc00315 	stw	ra,12(sp)
   18038:	df000215 	stw	fp,8(sp)
   1803c:	df000204 	addi	fp,sp,8
   18040:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   18044:	d1600804 	addi	r5,gp,-32736
   18048:	e13fff17 	ldw	r4,-4(fp)
   1804c:	00186e80 	call	186e8 <alt_find_dev>
   18050:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   18054:	e0bffe17 	ldw	r2,-8(fp)
}
   18058:	e037883a 	mov	sp,fp
   1805c:	dfc00117 	ldw	ra,4(sp)
   18060:	df000017 	ldw	fp,0(sp)
   18064:	dec00204 	addi	sp,sp,8
   18068:	f800283a 	ret

0001806c <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1806c:	defffd04 	addi	sp,sp,-12
   18070:	df000215 	stw	fp,8(sp)
   18074:	df000204 	addi	fp,sp,8
   18078:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1807c:	e0bfff17 	ldw	r2,-4(fp)
   18080:	10800a17 	ldw	r2,40(r2)
   18084:	10800104 	addi	r2,r2,4
   18088:	10800037 	ldwio	r2,0(r2)
   1808c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   18090:	e0bffe17 	ldw	r2,-8(fp)
   18094:	10800054 	ori	r2,r2,1
   18098:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   1809c:	e0bfff17 	ldw	r2,-4(fp)
   180a0:	10800a17 	ldw	r2,40(r2)
   180a4:	10800104 	addi	r2,r2,4
   180a8:	1007883a 	mov	r3,r2
   180ac:	e0bffe17 	ldw	r2,-8(fp)
   180b0:	18800035 	stwio	r2,0(r3)
}
   180b4:	0001883a 	nop
   180b8:	e037883a 	mov	sp,fp
   180bc:	df000017 	ldw	fp,0(sp)
   180c0:	dec00104 	addi	sp,sp,4
   180c4:	f800283a 	ret

000180c8 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   180c8:	defffd04 	addi	sp,sp,-12
   180cc:	df000215 	stw	fp,8(sp)
   180d0:	df000204 	addi	fp,sp,8
   180d4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   180d8:	e0bfff17 	ldw	r2,-4(fp)
   180dc:	10800a17 	ldw	r2,40(r2)
   180e0:	10800104 	addi	r2,r2,4
   180e4:	10800037 	ldwio	r2,0(r2)
   180e8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   180ec:	e0fffe17 	ldw	r3,-8(fp)
   180f0:	00bfff84 	movi	r2,-2
   180f4:	1884703a 	and	r2,r3,r2
   180f8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   180fc:	e0bfff17 	ldw	r2,-4(fp)
   18100:	10800a17 	ldw	r2,40(r2)
   18104:	10800104 	addi	r2,r2,4
   18108:	1007883a 	mov	r3,r2
   1810c:	e0bffe17 	ldw	r2,-8(fp)
   18110:	18800035 	stwio	r2,0(r3)
}
   18114:	0001883a 	nop
   18118:	e037883a 	mov	sp,fp
   1811c:	df000017 	ldw	fp,0(sp)
   18120:	dec00104 	addi	sp,sp,4
   18124:	f800283a 	ret

00018128 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   18128:	defffd04 	addi	sp,sp,-12
   1812c:	df000215 	stw	fp,8(sp)
   18130:	df000204 	addi	fp,sp,8
   18134:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   18138:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   1813c:	e0bfff17 	ldw	r2,-4(fp)
   18140:	10800a17 	ldw	r2,40(r2)
   18144:	10800084 	addi	r2,r2,2
   18148:	1080002b 	ldhuio	r2,0(r2)
   1814c:	10bfffcc 	andi	r2,r2,65535
   18150:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   18154:	e0bffe0b 	ldhu	r2,-8(fp)
}
   18158:	e037883a 	mov	sp,fp
   1815c:	df000017 	ldw	fp,0(sp)
   18160:	dec00104 	addi	sp,sp,4
   18164:	f800283a 	ret

00018168 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   18168:	defffd04 	addi	sp,sp,-12
   1816c:	df000215 	stw	fp,8(sp)
   18170:	df000204 	addi	fp,sp,8
   18174:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   18178:	e0bfff17 	ldw	r2,-4(fp)
   1817c:	10800a17 	ldw	r2,40(r2)
   18180:	10800104 	addi	r2,r2,4
   18184:	10800037 	ldwio	r2,0(r2)
   18188:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   1818c:	e0bffe17 	ldw	r2,-8(fp)
   18190:	1004d43a 	srli	r2,r2,16
}
   18194:	e037883a 	mov	sp,fp
   18198:	df000017 	ldw	fp,0(sp)
   1819c:	dec00104 	addi	sp,sp,4
   181a0:	f800283a 	ret

000181a4 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   181a4:	defffd04 	addi	sp,sp,-12
   181a8:	df000215 	stw	fp,8(sp)
   181ac:	df000204 	addi	fp,sp,8
   181b0:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   181b4:	e0bfff17 	ldw	r2,-4(fp)
   181b8:	1080800c 	andi	r2,r2,512
   181bc:	1004d27a 	srli	r2,r2,9
   181c0:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   181c4:	e0bffe17 	ldw	r2,-8(fp)
   181c8:	10000226 	beq	r2,zero,181d4 <alt_up_rs232_check_parity+0x30>
   181cc:	00bfffc4 	movi	r2,-1
   181d0:	00000106 	br	181d8 <alt_up_rs232_check_parity+0x34>
   181d4:	0005883a 	mov	r2,zero
}
   181d8:	e037883a 	mov	sp,fp
   181dc:	df000017 	ldw	fp,0(sp)
   181e0:	dec00104 	addi	sp,sp,4
   181e4:	f800283a 	ret

000181e8 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   181e8:	defffd04 	addi	sp,sp,-12
   181ec:	df000215 	stw	fp,8(sp)
   181f0:	df000204 	addi	fp,sp,8
   181f4:	e13ffe15 	stw	r4,-8(fp)
   181f8:	2805883a 	mov	r2,r5
   181fc:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   18200:	e0bffe17 	ldw	r2,-8(fp)
   18204:	10800a17 	ldw	r2,40(r2)
   18208:	1007883a 	mov	r3,r2
   1820c:	e0bfff03 	ldbu	r2,-4(fp)
   18210:	18800035 	stwio	r2,0(r3)
	return 0;
   18214:	0005883a 	mov	r2,zero
}
   18218:	e037883a 	mov	sp,fp
   1821c:	df000017 	ldw	fp,0(sp)
   18220:	dec00104 	addi	sp,sp,4
   18224:	f800283a 	ret

00018228 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   18228:	defffa04 	addi	sp,sp,-24
   1822c:	dfc00515 	stw	ra,20(sp)
   18230:	df000415 	stw	fp,16(sp)
   18234:	df000404 	addi	fp,sp,16
   18238:	e13ffd15 	stw	r4,-12(fp)
   1823c:	e17ffe15 	stw	r5,-8(fp)
   18240:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   18244:	e0bffd17 	ldw	r2,-12(fp)
   18248:	10800a17 	ldw	r2,40(r2)
   1824c:	10800037 	ldwio	r2,0(r2)
   18250:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   18254:	e0bffc17 	ldw	r2,-16(fp)
   18258:	1007883a 	mov	r3,r2
   1825c:	e0bffe17 	ldw	r2,-8(fp)
   18260:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   18264:	e13ffc17 	ldw	r4,-16(fp)
   18268:	00181a40 	call	181a4 <alt_up_rs232_check_parity>
   1826c:	1007883a 	mov	r3,r2
   18270:	e0bfff17 	ldw	r2,-4(fp)
   18274:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   18278:	e0bffc17 	ldw	r2,-16(fp)
   1827c:	10a0000c 	andi	r2,r2,32768
   18280:	1004d3fa 	srli	r2,r2,15
   18284:	10bfffc4 	addi	r2,r2,-1
}
   18288:	e037883a 	mov	sp,fp
   1828c:	dfc00117 	ldw	ra,4(sp)
   18290:	df000017 	ldw	fp,0(sp)
   18294:	dec00204 	addi	sp,sp,8
   18298:	f800283a 	ret

0001829c <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   1829c:	defff804 	addi	sp,sp,-32
   182a0:	dfc00715 	stw	ra,28(sp)
   182a4:	df000615 	stw	fp,24(sp)
   182a8:	df000604 	addi	fp,sp,24
   182ac:	e13ffd15 	stw	r4,-12(fp)
   182b0:	e17ffe15 	stw	r5,-8(fp)
   182b4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   182b8:	e0bffd17 	ldw	r2,-12(fp)
   182bc:	10800017 	ldw	r2,0(r2)
   182c0:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   182c4:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   182c8:	00000c06 	br	182fc <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   182cc:	e0bffe17 	ldw	r2,-8(fp)
   182d0:	10c00044 	addi	r3,r2,1
   182d4:	e0fffe15 	stw	r3,-8(fp)
   182d8:	e0fffc04 	addi	r3,fp,-16
   182dc:	180d883a 	mov	r6,r3
   182e0:	100b883a 	mov	r5,r2
   182e4:	e13ffb17 	ldw	r4,-20(fp)
   182e8:	00182280 	call	18228 <alt_up_rs232_read_data>
   182ec:	1000081e 	bne	r2,zero,18310 <alt_up_rs232_read_fd+0x74>
			count++;
   182f0:	e0bffa17 	ldw	r2,-24(fp)
   182f4:	10800044 	addi	r2,r2,1
   182f8:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   182fc:	e0bfff17 	ldw	r2,-4(fp)
   18300:	10ffffc4 	addi	r3,r2,-1
   18304:	e0ffff15 	stw	r3,-4(fp)
   18308:	103ff01e 	bne	r2,zero,182cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70182cc>
   1830c:	00000106 	br	18314 <alt_up_rs232_read_fd+0x78>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
   18310:	0001883a 	nop
	}
	return count;
   18314:	e0bffa17 	ldw	r2,-24(fp)
}
   18318:	e037883a 	mov	sp,fp
   1831c:	dfc00117 	ldw	ra,4(sp)
   18320:	df000017 	ldw	fp,0(sp)
   18324:	dec00204 	addi	sp,sp,8
   18328:	f800283a 	ret

0001832c <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1832c:	defff904 	addi	sp,sp,-28
   18330:	dfc00615 	stw	ra,24(sp)
   18334:	df000515 	stw	fp,20(sp)
   18338:	df000504 	addi	fp,sp,20
   1833c:	e13ffd15 	stw	r4,-12(fp)
   18340:	e17ffe15 	stw	r5,-8(fp)
   18344:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   18348:	e0bffd17 	ldw	r2,-12(fp)
   1834c:	10800017 	ldw	r2,0(r2)
   18350:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   18354:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   18358:	00000d06 	br	18390 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   1835c:	e0bffe17 	ldw	r2,-8(fp)
   18360:	10800003 	ldbu	r2,0(r2)
   18364:	10803fcc 	andi	r2,r2,255
   18368:	100b883a 	mov	r5,r2
   1836c:	e13ffc17 	ldw	r4,-16(fp)
   18370:	00181e80 	call	181e8 <alt_up_rs232_write_data>
   18374:	10000b1e 	bne	r2,zero,183a4 <alt_up_rs232_write_fd+0x78>
		{
			count++;
   18378:	e0bffb17 	ldw	r2,-20(fp)
   1837c:	10800044 	addi	r2,r2,1
   18380:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   18384:	e0bffe17 	ldw	r2,-8(fp)
   18388:	10800044 	addi	r2,r2,1
   1838c:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   18390:	e0bfff17 	ldw	r2,-4(fp)
   18394:	10ffffc4 	addi	r3,r2,-1
   18398:	e0ffff15 	stw	r3,-4(fp)
   1839c:	103fef1e 	bne	r2,zero,1835c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701835c>
   183a0:	00000106 	br	183a8 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
			ptr++;
		}
		else
			break;
   183a4:	0001883a 	nop
	}
	return count;
   183a8:	e0bffb17 	ldw	r2,-20(fp)
}
   183ac:	e037883a 	mov	sp,fp
   183b0:	dfc00117 	ldw	ra,4(sp)
   183b4:	df000017 	ldw	fp,0(sp)
   183b8:	dec00204 	addi	sp,sp,8
   183bc:	f800283a 	ret

000183c0 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   183c0:	defffc04 	addi	sp,sp,-16
   183c4:	dfc00315 	stw	ra,12(sp)
   183c8:	df000215 	stw	fp,8(sp)
   183cc:	df000204 	addi	fp,sp,8
   183d0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   183d4:	d1600804 	addi	r5,gp,-32736
   183d8:	e13fff17 	ldw	r4,-4(fp)
   183dc:	00186e80 	call	186e8 <alt_find_dev>
   183e0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   183e4:	e0bffe17 	ldw	r2,-8(fp)
}
   183e8:	e037883a 	mov	sp,fp
   183ec:	dfc00117 	ldw	ra,4(sp)
   183f0:	df000017 	ldw	fp,0(sp)
   183f4:	dec00204 	addi	sp,sp,8
   183f8:	f800283a 	ret

000183fc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   183fc:	defff504 	addi	sp,sp,-44
   18400:	df000a15 	stw	fp,40(sp)
   18404:	df000a04 	addi	fp,sp,40
   18408:	e13ffc15 	stw	r4,-16(fp)
   1840c:	e17ffd15 	stw	r5,-12(fp)
   18410:	e1bffe15 	stw	r6,-8(fp)
   18414:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   18418:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1841c:	d0a7fe17 	ldw	r2,-24584(gp)
  
  if (alt_ticks_per_second ())
   18420:	10003c26 	beq	r2,zero,18514 <alt_alarm_start+0x118>
  {
    if (alarm)
   18424:	e0bffc17 	ldw	r2,-16(fp)
   18428:	10003826 	beq	r2,zero,1850c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   1842c:	e0bffc17 	ldw	r2,-16(fp)
   18430:	e0fffe17 	ldw	r3,-8(fp)
   18434:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   18438:	e0bffc17 	ldw	r2,-16(fp)
   1843c:	e0ffff17 	ldw	r3,-4(fp)
   18440:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18444:	0005303a 	rdctl	r2,status
   18448:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1844c:	e0fff917 	ldw	r3,-28(fp)
   18450:	00bfff84 	movi	r2,-2
   18454:	1884703a 	and	r2,r3,r2
   18458:	1001703a 	wrctl	status,r2
  
  return context;
   1845c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   18460:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   18464:	d0a7ff17 	ldw	r2,-24580(gp)
      
      current_nticks = alt_nticks();
   18468:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1846c:	e0fffd17 	ldw	r3,-12(fp)
   18470:	e0bff617 	ldw	r2,-40(fp)
   18474:	1885883a 	add	r2,r3,r2
   18478:	10c00044 	addi	r3,r2,1
   1847c:	e0bffc17 	ldw	r2,-16(fp)
   18480:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   18484:	e0bffc17 	ldw	r2,-16(fp)
   18488:	10c00217 	ldw	r3,8(r2)
   1848c:	e0bff617 	ldw	r2,-40(fp)
   18490:	1880042e 	bgeu	r3,r2,184a4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   18494:	e0bffc17 	ldw	r2,-16(fp)
   18498:	00c00044 	movi	r3,1
   1849c:	10c00405 	stb	r3,16(r2)
   184a0:	00000206 	br	184ac <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   184a4:	e0bffc17 	ldw	r2,-16(fp)
   184a8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   184ac:	e0bffc17 	ldw	r2,-16(fp)
   184b0:	d0e02d04 	addi	r3,gp,-32588
   184b4:	e0fffa15 	stw	r3,-24(fp)
   184b8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   184bc:	e0bffb17 	ldw	r2,-20(fp)
   184c0:	e0fffa17 	ldw	r3,-24(fp)
   184c4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   184c8:	e0bffa17 	ldw	r2,-24(fp)
   184cc:	10c00017 	ldw	r3,0(r2)
   184d0:	e0bffb17 	ldw	r2,-20(fp)
   184d4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   184d8:	e0bffa17 	ldw	r2,-24(fp)
   184dc:	10800017 	ldw	r2,0(r2)
   184e0:	e0fffb17 	ldw	r3,-20(fp)
   184e4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   184e8:	e0bffa17 	ldw	r2,-24(fp)
   184ec:	e0fffb17 	ldw	r3,-20(fp)
   184f0:	10c00015 	stw	r3,0(r2)
   184f4:	e0bff817 	ldw	r2,-32(fp)
   184f8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   184fc:	e0bff717 	ldw	r2,-36(fp)
   18500:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   18504:	0005883a 	mov	r2,zero
   18508:	00000306 	br	18518 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   1850c:	00bffa84 	movi	r2,-22
   18510:	00000106 	br	18518 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   18514:	00bfde84 	movi	r2,-134
  }
}
   18518:	e037883a 	mov	sp,fp
   1851c:	df000017 	ldw	fp,0(sp)
   18520:	dec00104 	addi	sp,sp,4
   18524:	f800283a 	ret

00018528 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   18528:	deffff04 	addi	sp,sp,-4
   1852c:	df000015 	stw	fp,0(sp)
   18530:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   18534:	0001883a 	nop
   18538:	e037883a 	mov	sp,fp
   1853c:	df000017 	ldw	fp,0(sp)
   18540:	dec00104 	addi	sp,sp,4
   18544:	f800283a 	ret

00018548 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   18548:	defffe04 	addi	sp,sp,-8
   1854c:	dfc00115 	stw	ra,4(sp)
   18550:	df000015 	stw	fp,0(sp)
   18554:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   18558:	d0a00b17 	ldw	r2,-32724(gp)
   1855c:	10000326 	beq	r2,zero,1856c <alt_get_errno+0x24>
   18560:	d0a00b17 	ldw	r2,-32724(gp)
   18564:	103ee83a 	callr	r2
   18568:	00000106 	br	18570 <alt_get_errno+0x28>
   1856c:	d0a7e004 	addi	r2,gp,-24704
}
   18570:	e037883a 	mov	sp,fp
   18574:	dfc00117 	ldw	ra,4(sp)
   18578:	df000017 	ldw	fp,0(sp)
   1857c:	dec00204 	addi	sp,sp,8
   18580:	f800283a 	ret

00018584 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   18584:	defffa04 	addi	sp,sp,-24
   18588:	dfc00515 	stw	ra,20(sp)
   1858c:	df000415 	stw	fp,16(sp)
   18590:	df000404 	addi	fp,sp,16
   18594:	e13ffe15 	stw	r4,-8(fp)
   18598:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1859c:	e0bffe17 	ldw	r2,-8(fp)
   185a0:	10000326 	beq	r2,zero,185b0 <alt_dev_llist_insert+0x2c>
   185a4:	e0bffe17 	ldw	r2,-8(fp)
   185a8:	10800217 	ldw	r2,8(r2)
   185ac:	1000061e 	bne	r2,zero,185c8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   185b0:	00185480 	call	18548 <alt_get_errno>
   185b4:	1007883a 	mov	r3,r2
   185b8:	00800584 	movi	r2,22
   185bc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   185c0:	00bffa84 	movi	r2,-22
   185c4:	00001306 	br	18614 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   185c8:	e0bffe17 	ldw	r2,-8(fp)
   185cc:	e0ffff17 	ldw	r3,-4(fp)
   185d0:	e0fffc15 	stw	r3,-16(fp)
   185d4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   185d8:	e0bffd17 	ldw	r2,-12(fp)
   185dc:	e0fffc17 	ldw	r3,-16(fp)
   185e0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   185e4:	e0bffc17 	ldw	r2,-16(fp)
   185e8:	10c00017 	ldw	r3,0(r2)
   185ec:	e0bffd17 	ldw	r2,-12(fp)
   185f0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   185f4:	e0bffc17 	ldw	r2,-16(fp)
   185f8:	10800017 	ldw	r2,0(r2)
   185fc:	e0fffd17 	ldw	r3,-12(fp)
   18600:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   18604:	e0bffc17 	ldw	r2,-16(fp)
   18608:	e0fffd17 	ldw	r3,-12(fp)
   1860c:	10c00015 	stw	r3,0(r2)

  return 0;  
   18610:	0005883a 	mov	r2,zero
}
   18614:	e037883a 	mov	sp,fp
   18618:	dfc00117 	ldw	ra,4(sp)
   1861c:	df000017 	ldw	fp,0(sp)
   18620:	dec00204 	addi	sp,sp,8
   18624:	f800283a 	ret

00018628 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   18628:	defffd04 	addi	sp,sp,-12
   1862c:	dfc00215 	stw	ra,8(sp)
   18630:	df000115 	stw	fp,4(sp)
   18634:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   18638:	008000b4 	movhi	r2,2
   1863c:	10a62004 	addi	r2,r2,-26496
   18640:	e0bfff15 	stw	r2,-4(fp)
   18644:	00000606 	br	18660 <_do_ctors+0x38>
        (*ctor) (); 
   18648:	e0bfff17 	ldw	r2,-4(fp)
   1864c:	10800017 	ldw	r2,0(r2)
   18650:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   18654:	e0bfff17 	ldw	r2,-4(fp)
   18658:	10bfff04 	addi	r2,r2,-4
   1865c:	e0bfff15 	stw	r2,-4(fp)
   18660:	e0ffff17 	ldw	r3,-4(fp)
   18664:	008000b4 	movhi	r2,2
   18668:	10a62104 	addi	r2,r2,-26492
   1866c:	18bff62e 	bgeu	r3,r2,18648 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018648>
        (*ctor) (); 
}
   18670:	0001883a 	nop
   18674:	e037883a 	mov	sp,fp
   18678:	dfc00117 	ldw	ra,4(sp)
   1867c:	df000017 	ldw	fp,0(sp)
   18680:	dec00204 	addi	sp,sp,8
   18684:	f800283a 	ret

00018688 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   18688:	defffd04 	addi	sp,sp,-12
   1868c:	dfc00215 	stw	ra,8(sp)
   18690:	df000115 	stw	fp,4(sp)
   18694:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   18698:	008000b4 	movhi	r2,2
   1869c:	10a62004 	addi	r2,r2,-26496
   186a0:	e0bfff15 	stw	r2,-4(fp)
   186a4:	00000606 	br	186c0 <_do_dtors+0x38>
        (*dtor) (); 
   186a8:	e0bfff17 	ldw	r2,-4(fp)
   186ac:	10800017 	ldw	r2,0(r2)
   186b0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   186b4:	e0bfff17 	ldw	r2,-4(fp)
   186b8:	10bfff04 	addi	r2,r2,-4
   186bc:	e0bfff15 	stw	r2,-4(fp)
   186c0:	e0ffff17 	ldw	r3,-4(fp)
   186c4:	008000b4 	movhi	r2,2
   186c8:	10a62104 	addi	r2,r2,-26492
   186cc:	18bff62e 	bgeu	r3,r2,186a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70186a8>
        (*dtor) (); 
}
   186d0:	0001883a 	nop
   186d4:	e037883a 	mov	sp,fp
   186d8:	dfc00117 	ldw	ra,4(sp)
   186dc:	df000017 	ldw	fp,0(sp)
   186e0:	dec00204 	addi	sp,sp,8
   186e4:	f800283a 	ret

000186e8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   186e8:	defffa04 	addi	sp,sp,-24
   186ec:	dfc00515 	stw	ra,20(sp)
   186f0:	df000415 	stw	fp,16(sp)
   186f4:	df000404 	addi	fp,sp,16
   186f8:	e13ffe15 	stw	r4,-8(fp)
   186fc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   18700:	e0bfff17 	ldw	r2,-4(fp)
   18704:	10800017 	ldw	r2,0(r2)
   18708:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1870c:	e13ffe17 	ldw	r4,-8(fp)
   18710:	0000d440 	call	d44 <strlen>
   18714:	10800044 	addi	r2,r2,1
   18718:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1871c:	00000d06 	br	18754 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   18720:	e0bffc17 	ldw	r2,-16(fp)
   18724:	10800217 	ldw	r2,8(r2)
   18728:	e0fffd17 	ldw	r3,-12(fp)
   1872c:	180d883a 	mov	r6,r3
   18730:	e17ffe17 	ldw	r5,-8(fp)
   18734:	1009883a 	mov	r4,r2
   18738:	001953c0 	call	1953c <memcmp>
   1873c:	1000021e 	bne	r2,zero,18748 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   18740:	e0bffc17 	ldw	r2,-16(fp)
   18744:	00000706 	br	18764 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   18748:	e0bffc17 	ldw	r2,-16(fp)
   1874c:	10800017 	ldw	r2,0(r2)
   18750:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   18754:	e0fffc17 	ldw	r3,-16(fp)
   18758:	e0bfff17 	ldw	r2,-4(fp)
   1875c:	18bff01e 	bne	r3,r2,18720 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018720>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   18760:	0005883a 	mov	r2,zero
}
   18764:	e037883a 	mov	sp,fp
   18768:	dfc00117 	ldw	ra,4(sp)
   1876c:	df000017 	ldw	fp,0(sp)
   18770:	dec00204 	addi	sp,sp,8
   18774:	f800283a 	ret

00018778 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   18778:	defffe04 	addi	sp,sp,-8
   1877c:	dfc00115 	stw	ra,4(sp)
   18780:	df000015 	stw	fp,0(sp)
   18784:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   18788:	01440004 	movi	r5,4096
   1878c:	0009883a 	mov	r4,zero
   18790:	00193c40 	call	193c4 <alt_icache_flush>
#endif
}
   18794:	0001883a 	nop
   18798:	e037883a 	mov	sp,fp
   1879c:	dfc00117 	ldw	ra,4(sp)
   187a0:	df000017 	ldw	fp,0(sp)
   187a4:	dec00204 	addi	sp,sp,8
   187a8:	f800283a 	ret

000187ac <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   187ac:	defff904 	addi	sp,sp,-28
   187b0:	dfc00615 	stw	ra,24(sp)
   187b4:	df000515 	stw	fp,20(sp)
   187b8:	df000504 	addi	fp,sp,20
   187bc:	e13ffc15 	stw	r4,-16(fp)
   187c0:	e17ffd15 	stw	r5,-12(fp)
   187c4:	e1bffe15 	stw	r6,-8(fp)
   187c8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   187cc:	e1bfff17 	ldw	r6,-4(fp)
   187d0:	e17ffe17 	ldw	r5,-8(fp)
   187d4:	e13ffd17 	ldw	r4,-12(fp)
   187d8:	0018b6c0 	call	18b6c <open>
   187dc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   187e0:	e0bffb17 	ldw	r2,-20(fp)
   187e4:	10001c16 	blt	r2,zero,18858 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   187e8:	008000b4 	movhi	r2,2
   187ec:	10ab1304 	addi	r2,r2,-21428
   187f0:	e0fffb17 	ldw	r3,-20(fp)
   187f4:	18c00324 	muli	r3,r3,12
   187f8:	10c5883a 	add	r2,r2,r3
   187fc:	10c00017 	ldw	r3,0(r2)
   18800:	e0bffc17 	ldw	r2,-16(fp)
   18804:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   18808:	008000b4 	movhi	r2,2
   1880c:	10ab1304 	addi	r2,r2,-21428
   18810:	e0fffb17 	ldw	r3,-20(fp)
   18814:	18c00324 	muli	r3,r3,12
   18818:	10c5883a 	add	r2,r2,r3
   1881c:	10800104 	addi	r2,r2,4
   18820:	10c00017 	ldw	r3,0(r2)
   18824:	e0bffc17 	ldw	r2,-16(fp)
   18828:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1882c:	008000b4 	movhi	r2,2
   18830:	10ab1304 	addi	r2,r2,-21428
   18834:	e0fffb17 	ldw	r3,-20(fp)
   18838:	18c00324 	muli	r3,r3,12
   1883c:	10c5883a 	add	r2,r2,r3
   18840:	10800204 	addi	r2,r2,8
   18844:	10c00017 	ldw	r3,0(r2)
   18848:	e0bffc17 	ldw	r2,-16(fp)
   1884c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   18850:	e13ffb17 	ldw	r4,-20(fp)
   18854:	000dc180 	call	dc18 <alt_release_fd>
  }
} 
   18858:	0001883a 	nop
   1885c:	e037883a 	mov	sp,fp
   18860:	dfc00117 	ldw	ra,4(sp)
   18864:	df000017 	ldw	fp,0(sp)
   18868:	dec00204 	addi	sp,sp,8
   1886c:	f800283a 	ret

00018870 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   18870:	defffb04 	addi	sp,sp,-20
   18874:	dfc00415 	stw	ra,16(sp)
   18878:	df000315 	stw	fp,12(sp)
   1887c:	df000304 	addi	fp,sp,12
   18880:	e13ffd15 	stw	r4,-12(fp)
   18884:	e17ffe15 	stw	r5,-8(fp)
   18888:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1888c:	01c07fc4 	movi	r7,511
   18890:	01800044 	movi	r6,1
   18894:	e17ffd17 	ldw	r5,-12(fp)
   18898:	010000b4 	movhi	r4,2
   1889c:	212b1604 	addi	r4,r4,-21416
   188a0:	00187ac0 	call	187ac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   188a4:	01c07fc4 	movi	r7,511
   188a8:	000d883a 	mov	r6,zero
   188ac:	e17ffe17 	ldw	r5,-8(fp)
   188b0:	010000b4 	movhi	r4,2
   188b4:	212b1304 	addi	r4,r4,-21428
   188b8:	00187ac0 	call	187ac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   188bc:	01c07fc4 	movi	r7,511
   188c0:	01800044 	movi	r6,1
   188c4:	e17fff17 	ldw	r5,-4(fp)
   188c8:	010000b4 	movhi	r4,2
   188cc:	212b1904 	addi	r4,r4,-21404
   188d0:	00187ac0 	call	187ac <alt_open_fd>
}  
   188d4:	0001883a 	nop
   188d8:	e037883a 	mov	sp,fp
   188dc:	dfc00117 	ldw	ra,4(sp)
   188e0:	df000017 	ldw	fp,0(sp)
   188e4:	dec00204 	addi	sp,sp,8
   188e8:	f800283a 	ret

000188ec <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   188ec:	defff004 	addi	sp,sp,-64
   188f0:	df000f15 	stw	fp,60(sp)
   188f4:	df000f04 	addi	fp,sp,60
   188f8:	e13ffd15 	stw	r4,-12(fp)
   188fc:	e17ffe15 	stw	r5,-8(fp)
   18900:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   18904:	00bffa84 	movi	r2,-22
   18908:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1890c:	e0bffd17 	ldw	r2,-12(fp)
   18910:	10800828 	cmpgeui	r2,r2,32
   18914:	1000501e 	bne	r2,zero,18a58 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18918:	0005303a 	rdctl	r2,status
   1891c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18920:	e0fff617 	ldw	r3,-40(fp)
   18924:	00bfff84 	movi	r2,-2
   18928:	1884703a 	and	r2,r3,r2
   1892c:	1001703a 	wrctl	status,r2
  
  return context;
   18930:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   18934:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   18938:	008000b4 	movhi	r2,2
   1893c:	109ce504 	addi	r2,r2,29588
   18940:	e0fffd17 	ldw	r3,-12(fp)
   18944:	180690fa 	slli	r3,r3,3
   18948:	10c5883a 	add	r2,r2,r3
   1894c:	e0ffff17 	ldw	r3,-4(fp)
   18950:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   18954:	008000b4 	movhi	r2,2
   18958:	109ce504 	addi	r2,r2,29588
   1895c:	e0fffd17 	ldw	r3,-12(fp)
   18960:	180690fa 	slli	r3,r3,3
   18964:	10c5883a 	add	r2,r2,r3
   18968:	10800104 	addi	r2,r2,4
   1896c:	e0fffe17 	ldw	r3,-8(fp)
   18970:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   18974:	e0bfff17 	ldw	r2,-4(fp)
   18978:	10001926 	beq	r2,zero,189e0 <alt_irq_register+0xf4>
   1897c:	e0bffd17 	ldw	r2,-12(fp)
   18980:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18984:	0005303a 	rdctl	r2,status
   18988:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1898c:	e0fff717 	ldw	r3,-36(fp)
   18990:	00bfff84 	movi	r2,-2
   18994:	1884703a 	and	r2,r3,r2
   18998:	1001703a 	wrctl	status,r2
  
  return context;
   1899c:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   189a0:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   189a4:	00c00044 	movi	r3,1
   189a8:	e0bff217 	ldw	r2,-56(fp)
   189ac:	1884983a 	sll	r2,r3,r2
   189b0:	1007883a 	mov	r3,r2
   189b4:	d0a7fd17 	ldw	r2,-24588(gp)
   189b8:	1884b03a 	or	r2,r3,r2
   189bc:	d0a7fd15 	stw	r2,-24588(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   189c0:	d0a7fd17 	ldw	r2,-24588(gp)
   189c4:	100170fa 	wrctl	ienable,r2
   189c8:	e0bff817 	ldw	r2,-32(fp)
   189cc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   189d0:	e0bff917 	ldw	r2,-28(fp)
   189d4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   189d8:	0005883a 	mov	r2,zero
   189dc:	00001906 	br	18a44 <alt_irq_register+0x158>
   189e0:	e0bffd17 	ldw	r2,-12(fp)
   189e4:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   189e8:	0005303a 	rdctl	r2,status
   189ec:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   189f0:	e0fffa17 	ldw	r3,-24(fp)
   189f4:	00bfff84 	movi	r2,-2
   189f8:	1884703a 	and	r2,r3,r2
   189fc:	1001703a 	wrctl	status,r2
  
  return context;
   18a00:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   18a04:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   18a08:	00c00044 	movi	r3,1
   18a0c:	e0bff417 	ldw	r2,-48(fp)
   18a10:	1884983a 	sll	r2,r3,r2
   18a14:	0084303a 	nor	r2,zero,r2
   18a18:	1007883a 	mov	r3,r2
   18a1c:	d0a7fd17 	ldw	r2,-24588(gp)
   18a20:	1884703a 	and	r2,r3,r2
   18a24:	d0a7fd15 	stw	r2,-24588(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   18a28:	d0a7fd17 	ldw	r2,-24588(gp)
   18a2c:	100170fa 	wrctl	ienable,r2
   18a30:	e0bffb17 	ldw	r2,-20(fp)
   18a34:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18a38:	e0bffc17 	ldw	r2,-16(fp)
   18a3c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   18a40:	0005883a 	mov	r2,zero
   18a44:	e0bff115 	stw	r2,-60(fp)
   18a48:	e0bff317 	ldw	r2,-52(fp)
   18a4c:	e0bff515 	stw	r2,-44(fp)
   18a50:	e0bff517 	ldw	r2,-44(fp)
   18a54:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   18a58:	e0bff117 	ldw	r2,-60(fp)
}
   18a5c:	e037883a 	mov	sp,fp
   18a60:	df000017 	ldw	fp,0(sp)
   18a64:	dec00104 	addi	sp,sp,4
   18a68:	f800283a 	ret

00018a6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   18a6c:	defffe04 	addi	sp,sp,-8
   18a70:	dfc00115 	stw	ra,4(sp)
   18a74:	df000015 	stw	fp,0(sp)
   18a78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   18a7c:	d0a00b17 	ldw	r2,-32724(gp)
   18a80:	10000326 	beq	r2,zero,18a90 <alt_get_errno+0x24>
   18a84:	d0a00b17 	ldw	r2,-32724(gp)
   18a88:	103ee83a 	callr	r2
   18a8c:	00000106 	br	18a94 <alt_get_errno+0x28>
   18a90:	d0a7e004 	addi	r2,gp,-24704
}
   18a94:	e037883a 	mov	sp,fp
   18a98:	dfc00117 	ldw	ra,4(sp)
   18a9c:	df000017 	ldw	fp,0(sp)
   18aa0:	dec00204 	addi	sp,sp,8
   18aa4:	f800283a 	ret

00018aa8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   18aa8:	defffd04 	addi	sp,sp,-12
   18aac:	df000215 	stw	fp,8(sp)
   18ab0:	df000204 	addi	fp,sp,8
   18ab4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   18ab8:	e0bfff17 	ldw	r2,-4(fp)
   18abc:	10800217 	ldw	r2,8(r2)
   18ac0:	10d00034 	orhi	r3,r2,16384
   18ac4:	e0bfff17 	ldw	r2,-4(fp)
   18ac8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   18acc:	e03ffe15 	stw	zero,-8(fp)
   18ad0:	00001d06 	br	18b48 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   18ad4:	008000b4 	movhi	r2,2
   18ad8:	10ab1304 	addi	r2,r2,-21428
   18adc:	e0fffe17 	ldw	r3,-8(fp)
   18ae0:	18c00324 	muli	r3,r3,12
   18ae4:	10c5883a 	add	r2,r2,r3
   18ae8:	10c00017 	ldw	r3,0(r2)
   18aec:	e0bfff17 	ldw	r2,-4(fp)
   18af0:	10800017 	ldw	r2,0(r2)
   18af4:	1880111e 	bne	r3,r2,18b3c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   18af8:	008000b4 	movhi	r2,2
   18afc:	10ab1304 	addi	r2,r2,-21428
   18b00:	e0fffe17 	ldw	r3,-8(fp)
   18b04:	18c00324 	muli	r3,r3,12
   18b08:	10c5883a 	add	r2,r2,r3
   18b0c:	10800204 	addi	r2,r2,8
   18b10:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   18b14:	1000090e 	bge	r2,zero,18b3c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   18b18:	e0bffe17 	ldw	r2,-8(fp)
   18b1c:	10c00324 	muli	r3,r2,12
   18b20:	008000b4 	movhi	r2,2
   18b24:	10ab1304 	addi	r2,r2,-21428
   18b28:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   18b2c:	e0bfff17 	ldw	r2,-4(fp)
   18b30:	18800226 	beq	r3,r2,18b3c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   18b34:	00bffcc4 	movi	r2,-13
   18b38:	00000806 	br	18b5c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   18b3c:	e0bffe17 	ldw	r2,-8(fp)
   18b40:	10800044 	addi	r2,r2,1
   18b44:	e0bffe15 	stw	r2,-8(fp)
   18b48:	d0a00a17 	ldw	r2,-32728(gp)
   18b4c:	1007883a 	mov	r3,r2
   18b50:	e0bffe17 	ldw	r2,-8(fp)
   18b54:	18bfdf2e 	bgeu	r3,r2,18ad4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018ad4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   18b58:	0005883a 	mov	r2,zero
}
   18b5c:	e037883a 	mov	sp,fp
   18b60:	df000017 	ldw	fp,0(sp)
   18b64:	dec00104 	addi	sp,sp,4
   18b68:	f800283a 	ret

00018b6c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   18b6c:	defff604 	addi	sp,sp,-40
   18b70:	dfc00915 	stw	ra,36(sp)
   18b74:	df000815 	stw	fp,32(sp)
   18b78:	df000804 	addi	fp,sp,32
   18b7c:	e13ffd15 	stw	r4,-12(fp)
   18b80:	e17ffe15 	stw	r5,-8(fp)
   18b84:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   18b88:	00bfffc4 	movi	r2,-1
   18b8c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   18b90:	00bffb44 	movi	r2,-19
   18b94:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   18b98:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   18b9c:	d1600804 	addi	r5,gp,-32736
   18ba0:	e13ffd17 	ldw	r4,-12(fp)
   18ba4:	00186e80 	call	186e8 <alt_find_dev>
   18ba8:	e0bff815 	stw	r2,-32(fp)
   18bac:	e0bff817 	ldw	r2,-32(fp)
   18bb0:	1000051e 	bne	r2,zero,18bc8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   18bb4:	e13ffd17 	ldw	r4,-12(fp)
   18bb8:	00191e00 	call	191e0 <alt_find_file>
   18bbc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   18bc0:	00800044 	movi	r2,1
   18bc4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   18bc8:	e0bff817 	ldw	r2,-32(fp)
   18bcc:	10002926 	beq	r2,zero,18c74 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   18bd0:	e13ff817 	ldw	r4,-32(fp)
   18bd4:	00192e80 	call	192e8 <alt_get_fd>
   18bd8:	e0bff915 	stw	r2,-28(fp)
   18bdc:	e0bff917 	ldw	r2,-28(fp)
   18be0:	1000030e 	bge	r2,zero,18bf0 <open+0x84>
    {
      status = index;
   18be4:	e0bff917 	ldw	r2,-28(fp)
   18be8:	e0bffa15 	stw	r2,-24(fp)
   18bec:	00002306 	br	18c7c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   18bf0:	e0bff917 	ldw	r2,-28(fp)
   18bf4:	10c00324 	muli	r3,r2,12
   18bf8:	008000b4 	movhi	r2,2
   18bfc:	10ab1304 	addi	r2,r2,-21428
   18c00:	1885883a 	add	r2,r3,r2
   18c04:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   18c08:	e0fffe17 	ldw	r3,-8(fp)
   18c0c:	00900034 	movhi	r2,16384
   18c10:	10bfffc4 	addi	r2,r2,-1
   18c14:	1886703a 	and	r3,r3,r2
   18c18:	e0bffc17 	ldw	r2,-16(fp)
   18c1c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   18c20:	e0bffb17 	ldw	r2,-20(fp)
   18c24:	1000051e 	bne	r2,zero,18c3c <open+0xd0>
   18c28:	e13ffc17 	ldw	r4,-16(fp)
   18c2c:	0018aa80 	call	18aa8 <alt_file_locked>
   18c30:	e0bffa15 	stw	r2,-24(fp)
   18c34:	e0bffa17 	ldw	r2,-24(fp)
   18c38:	10001016 	blt	r2,zero,18c7c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   18c3c:	e0bff817 	ldw	r2,-32(fp)
   18c40:	10800317 	ldw	r2,12(r2)
   18c44:	10000826 	beq	r2,zero,18c68 <open+0xfc>
   18c48:	e0bff817 	ldw	r2,-32(fp)
   18c4c:	10800317 	ldw	r2,12(r2)
   18c50:	e1ffff17 	ldw	r7,-4(fp)
   18c54:	e1bffe17 	ldw	r6,-8(fp)
   18c58:	e17ffd17 	ldw	r5,-12(fp)
   18c5c:	e13ffc17 	ldw	r4,-16(fp)
   18c60:	103ee83a 	callr	r2
   18c64:	00000106 	br	18c6c <open+0x100>
   18c68:	0005883a 	mov	r2,zero
   18c6c:	e0bffa15 	stw	r2,-24(fp)
   18c70:	00000206 	br	18c7c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   18c74:	00bffb44 	movi	r2,-19
   18c78:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   18c7c:	e0bffa17 	ldw	r2,-24(fp)
   18c80:	1000090e 	bge	r2,zero,18ca8 <open+0x13c>
  {
    alt_release_fd (index);  
   18c84:	e13ff917 	ldw	r4,-28(fp)
   18c88:	000dc180 	call	dc18 <alt_release_fd>
    ALT_ERRNO = -status;
   18c8c:	0018a6c0 	call	18a6c <alt_get_errno>
   18c90:	1007883a 	mov	r3,r2
   18c94:	e0bffa17 	ldw	r2,-24(fp)
   18c98:	0085c83a 	sub	r2,zero,r2
   18c9c:	18800015 	stw	r2,0(r3)
    return -1;
   18ca0:	00bfffc4 	movi	r2,-1
   18ca4:	00000106 	br	18cac <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   18ca8:	e0bff917 	ldw	r2,-28(fp)
}
   18cac:	e037883a 	mov	sp,fp
   18cb0:	dfc00117 	ldw	ra,4(sp)
   18cb4:	df000017 	ldw	fp,0(sp)
   18cb8:	dec00204 	addi	sp,sp,8
   18cbc:	f800283a 	ret

00018cc0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   18cc0:	defffa04 	addi	sp,sp,-24
   18cc4:	df000515 	stw	fp,20(sp)
   18cc8:	df000504 	addi	fp,sp,20
   18ccc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18cd0:	0005303a 	rdctl	r2,status
   18cd4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18cd8:	e0fffc17 	ldw	r3,-16(fp)
   18cdc:	00bfff84 	movi	r2,-2
   18ce0:	1884703a 	and	r2,r3,r2
   18ce4:	1001703a 	wrctl	status,r2
  
  return context;
   18ce8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   18cec:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   18cf0:	e0bfff17 	ldw	r2,-4(fp)
   18cf4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   18cf8:	e0bffd17 	ldw	r2,-12(fp)
   18cfc:	10800017 	ldw	r2,0(r2)
   18d00:	e0fffd17 	ldw	r3,-12(fp)
   18d04:	18c00117 	ldw	r3,4(r3)
   18d08:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   18d0c:	e0bffd17 	ldw	r2,-12(fp)
   18d10:	10800117 	ldw	r2,4(r2)
   18d14:	e0fffd17 	ldw	r3,-12(fp)
   18d18:	18c00017 	ldw	r3,0(r3)
   18d1c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   18d20:	e0bffd17 	ldw	r2,-12(fp)
   18d24:	e0fffd17 	ldw	r3,-12(fp)
   18d28:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   18d2c:	e0bffd17 	ldw	r2,-12(fp)
   18d30:	e0fffd17 	ldw	r3,-12(fp)
   18d34:	10c00015 	stw	r3,0(r2)
   18d38:	e0bffb17 	ldw	r2,-20(fp)
   18d3c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18d40:	e0bffe17 	ldw	r2,-8(fp)
   18d44:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   18d48:	0001883a 	nop
   18d4c:	e037883a 	mov	sp,fp
   18d50:	df000017 	ldw	fp,0(sp)
   18d54:	dec00104 	addi	sp,sp,4
   18d58:	f800283a 	ret

00018d5c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   18d5c:	defffb04 	addi	sp,sp,-20
   18d60:	dfc00415 	stw	ra,16(sp)
   18d64:	df000315 	stw	fp,12(sp)
   18d68:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   18d6c:	d0a02d17 	ldw	r2,-32588(gp)
   18d70:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   18d74:	d0a7ff17 	ldw	r2,-24580(gp)
   18d78:	10800044 	addi	r2,r2,1
   18d7c:	d0a7ff15 	stw	r2,-24580(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   18d80:	00002e06 	br	18e3c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   18d84:	e0bffd17 	ldw	r2,-12(fp)
   18d88:	10800017 	ldw	r2,0(r2)
   18d8c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   18d90:	e0bffd17 	ldw	r2,-12(fp)
   18d94:	10800403 	ldbu	r2,16(r2)
   18d98:	10803fcc 	andi	r2,r2,255
   18d9c:	10000426 	beq	r2,zero,18db0 <alt_tick+0x54>
   18da0:	d0a7ff17 	ldw	r2,-24580(gp)
   18da4:	1000021e 	bne	r2,zero,18db0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   18da8:	e0bffd17 	ldw	r2,-12(fp)
   18dac:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   18db0:	e0bffd17 	ldw	r2,-12(fp)
   18db4:	10800217 	ldw	r2,8(r2)
   18db8:	d0e7ff17 	ldw	r3,-24580(gp)
   18dbc:	18801d36 	bltu	r3,r2,18e34 <alt_tick+0xd8>
   18dc0:	e0bffd17 	ldw	r2,-12(fp)
   18dc4:	10800403 	ldbu	r2,16(r2)
   18dc8:	10803fcc 	andi	r2,r2,255
   18dcc:	1000191e 	bne	r2,zero,18e34 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   18dd0:	e0bffd17 	ldw	r2,-12(fp)
   18dd4:	10800317 	ldw	r2,12(r2)
   18dd8:	e0fffd17 	ldw	r3,-12(fp)
   18ddc:	18c00517 	ldw	r3,20(r3)
   18de0:	1809883a 	mov	r4,r3
   18de4:	103ee83a 	callr	r2
   18de8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   18dec:	e0bfff17 	ldw	r2,-4(fp)
   18df0:	1000031e 	bne	r2,zero,18e00 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   18df4:	e13ffd17 	ldw	r4,-12(fp)
   18df8:	0018cc00 	call	18cc0 <alt_alarm_stop>
   18dfc:	00000d06 	br	18e34 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   18e00:	e0bffd17 	ldw	r2,-12(fp)
   18e04:	10c00217 	ldw	r3,8(r2)
   18e08:	e0bfff17 	ldw	r2,-4(fp)
   18e0c:	1887883a 	add	r3,r3,r2
   18e10:	e0bffd17 	ldw	r2,-12(fp)
   18e14:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   18e18:	e0bffd17 	ldw	r2,-12(fp)
   18e1c:	10c00217 	ldw	r3,8(r2)
   18e20:	d0a7ff17 	ldw	r2,-24580(gp)
   18e24:	1880032e 	bgeu	r3,r2,18e34 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   18e28:	e0bffd17 	ldw	r2,-12(fp)
   18e2c:	00c00044 	movi	r3,1
   18e30:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   18e34:	e0bffe17 	ldw	r2,-8(fp)
   18e38:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   18e3c:	e0fffd17 	ldw	r3,-12(fp)
   18e40:	d0a02d04 	addi	r2,gp,-32588
   18e44:	18bfcf1e 	bne	r3,r2,18d84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018d84>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   18e48:	000ee040 	call	ee04 <OSTimeTick>
}
   18e4c:	0001883a 	nop
   18e50:	e037883a 	mov	sp,fp
   18e54:	dfc00117 	ldw	ra,4(sp)
   18e58:	df000017 	ldw	fp,0(sp)
   18e5c:	dec00204 	addi	sp,sp,8
   18e60:	f800283a 	ret

00018e64 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   18e64:	deffff04 	addi	sp,sp,-4
   18e68:	df000015 	stw	fp,0(sp)
   18e6c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   18e70:	000170fa 	wrctl	ienable,zero
}
   18e74:	0001883a 	nop
   18e78:	e037883a 	mov	sp,fp
   18e7c:	df000017 	ldw	fp,0(sp)
   18e80:	dec00104 	addi	sp,sp,4
   18e84:	f800283a 	ret

00018e88 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   18e88:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   18e8c:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   18e90:	d127f817 	ldw	r4,-24608(gp)

      stw ra,  0(sp)
   18e94:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   18e98:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   18e9c:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   18ea0:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   18ea4:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   18ea8:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   18eac:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   18eb0:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   18eb4:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   18eb8:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   18ebc:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   18ec0:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   18ec4:	00190fc0 	call	190fc <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   18ec8:	d127f317 	ldw	r4,-24628(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   18ecc:	d167eb07 	ldb	r5,-24660(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   18ed0:	d127f815 	stw	r4,-24608(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   18ed4:	d167eb45 	stb	r5,-24659(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   18ed8:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   18edc:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   18ee0:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   18ee4:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   18ee8:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   18eec:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   18ef0:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   18ef4:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   18ef8:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   18efc:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   18f00:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   18f04:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   18f08:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   18f0c:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   18f10:	f800283a 	ret

00018f14 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   18f14:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   18f18:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   18f1c:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   18f20:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   18f24:	00190fc0 	call	190fc <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   18f28:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   18f2c:	d4a7e945 	stb	r18,-24667(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   18f30:	003fe506 	br	18ec8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018ec8>

00018f34 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   18f34:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   18f38:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   18f3c:	10800054 	ori	r2,r2,1
      wrctl status, r2
   18f40:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   18f44:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   18f48:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   18f4c:	dec00204 	addi	sp,sp,8

      callr r2
   18f50:	103ee83a 	callr	r2

      nop
   18f54:	0001883a 	nop

00018f58 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   18f58:	defff704 	addi	sp,sp,-36
   18f5c:	dfc00815 	stw	ra,32(sp)
   18f60:	df000715 	stw	fp,28(sp)
   18f64:	df000704 	addi	fp,sp,28
   18f68:	e13ffc15 	stw	r4,-16(fp)
   18f6c:	e17ffd15 	stw	r5,-12(fp)
   18f70:	e1bffe15 	stw	r6,-8(fp)
   18f74:	3805883a 	mov	r2,r7
   18f78:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   18f7c:	e0fffe17 	ldw	r3,-8(fp)
   18f80:	00bfff04 	movi	r2,-4
   18f84:	1884703a 	and	r2,r3,r2
   18f88:	10bef704 	addi	r2,r2,-1060
   18f8c:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   18f90:	01810904 	movi	r6,1060
   18f94:	000b883a 	mov	r5,zero
   18f98:	e13ff917 	ldw	r4,-28(fp)
   18f9c:	00069740 	call	6974 <memset>
   18fa0:	e0bff917 	ldw	r2,-28(fp)
   18fa4:	10c0bb04 	addi	r3,r2,748
   18fa8:	e0bff917 	ldw	r2,-28(fp)
   18fac:	10c00115 	stw	r3,4(r2)
   18fb0:	e0bff917 	ldw	r2,-28(fp)
   18fb4:	10c0d504 	addi	r3,r2,852
   18fb8:	e0bff917 	ldw	r2,-28(fp)
   18fbc:	10c00215 	stw	r3,8(r2)
   18fc0:	e0bff917 	ldw	r2,-28(fp)
   18fc4:	10c0ef04 	addi	r3,r2,956
   18fc8:	e0bff917 	ldw	r2,-28(fp)
   18fcc:	10c00315 	stw	r3,12(r2)
   18fd0:	e0fff917 	ldw	r3,-28(fp)
   18fd4:	008000b4 	movhi	r2,2
   18fd8:	10a8df04 	addi	r2,r2,-23684
   18fdc:	18800d15 	stw	r2,52(r3)
   18fe0:	e0bff917 	ldw	r2,-28(fp)
   18fe4:	00c00044 	movi	r3,1
   18fe8:	10c02915 	stw	r3,164(r2)
   18fec:	10002a15 	stw	zero,168(r2)
   18ff0:	e0bff917 	ldw	r2,-28(fp)
   18ff4:	00ccc384 	movi	r3,13070
   18ff8:	10c02b0d 	sth	r3,172(r2)
   18ffc:	e0bff917 	ldw	r2,-28(fp)
   19000:	00eaf344 	movi	r3,-21555
   19004:	10c02b8d 	sth	r3,174(r2)
   19008:	e0bff917 	ldw	r2,-28(fp)
   1900c:	00c48d04 	movi	r3,4660
   19010:	10c02c0d 	sth	r3,176(r2)
   19014:	e0bff917 	ldw	r2,-28(fp)
   19018:	00f99b44 	movi	r3,-6547
   1901c:	10c02c8d 	sth	r3,178(r2)
   19020:	e0bff917 	ldw	r2,-28(fp)
   19024:	00f7bb04 	movi	r3,-8468
   19028:	10c02d0d 	sth	r3,180(r2)
   1902c:	e0bff917 	ldw	r2,-28(fp)
   19030:	00c00144 	movi	r3,5
   19034:	10c02d8d 	sth	r3,182(r2)
   19038:	e0bff917 	ldw	r2,-28(fp)
   1903c:	00c002c4 	movi	r3,11
   19040:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   19044:	e0bff917 	ldw	r2,-28(fp)
   19048:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   1904c:	e0bffa17 	ldw	r2,-24(fp)
   19050:	10bff304 	addi	r2,r2,-52
   19054:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   19058:	e0bffb17 	ldw	r2,-20(fp)
   1905c:	10800c04 	addi	r2,r2,48
   19060:	e0fffc17 	ldw	r3,-16(fp)
   19064:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   19068:	e0bffb17 	ldw	r2,-20(fp)
   1906c:	10800b04 	addi	r2,r2,44
   19070:	e0fffd17 	ldw	r3,-12(fp)
   19074:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   19078:	e0bffb17 	ldw	r2,-20(fp)
   1907c:	10800a04 	addi	r2,r2,40
   19080:	e0fff917 	ldw	r3,-28(fp)
   19084:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   19088:	008000b4 	movhi	r2,2
   1908c:	10a3cd04 	addi	r2,r2,-28876
   19090:	10c00104 	addi	r3,r2,4
   19094:	e0bffb17 	ldw	r2,-20(fp)
   19098:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   1909c:	e0bffb17 	ldw	r2,-20(fp)
}
   190a0:	e037883a 	mov	sp,fp
   190a4:	dfc00117 	ldw	ra,4(sp)
   190a8:	df000017 	ldw	fp,0(sp)
   190ac:	dec00204 	addi	sp,sp,8
   190b0:	f800283a 	ret

000190b4 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   190b4:	defffe04 	addi	sp,sp,-8
   190b8:	df000115 	stw	fp,4(sp)
   190bc:	df000104 	addi	fp,sp,4
   190c0:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   190c4:	0001883a 	nop
   190c8:	e037883a 	mov	sp,fp
   190cc:	df000017 	ldw	fp,0(sp)
   190d0:	dec00104 	addi	sp,sp,4
   190d4:	f800283a 	ret

000190d8 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   190d8:	defffe04 	addi	sp,sp,-8
   190dc:	df000115 	stw	fp,4(sp)
   190e0:	df000104 	addi	fp,sp,4
   190e4:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   190e8:	0001883a 	nop
   190ec:	e037883a 	mov	sp,fp
   190f0:	df000017 	ldw	fp,0(sp)
   190f4:	dec00104 	addi	sp,sp,4
   190f8:	f800283a 	ret

000190fc <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   190fc:	deffff04 	addi	sp,sp,-4
   19100:	df000015 	stw	fp,0(sp)
   19104:	d839883a 	mov	fp,sp
}
   19108:	0001883a 	nop
   1910c:	e037883a 	mov	sp,fp
   19110:	df000017 	ldw	fp,0(sp)
   19114:	dec00104 	addi	sp,sp,4
   19118:	f800283a 	ret

0001911c <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   1911c:	deffff04 	addi	sp,sp,-4
   19120:	df000015 	stw	fp,0(sp)
   19124:	d839883a 	mov	fp,sp
}
   19128:	0001883a 	nop
   1912c:	e037883a 	mov	sp,fp
   19130:	df000017 	ldw	fp,0(sp)
   19134:	dec00104 	addi	sp,sp,4
   19138:	f800283a 	ret

0001913c <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   1913c:	deffff04 	addi	sp,sp,-4
   19140:	df000015 	stw	fp,0(sp)
   19144:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   19148:	0001883a 	nop
   1914c:	e037883a 	mov	sp,fp
   19150:	df000017 	ldw	fp,0(sp)
   19154:	dec00104 	addi	sp,sp,4
   19158:	f800283a 	ret

0001915c <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   1915c:	deffff04 	addi	sp,sp,-4
   19160:	df000015 	stw	fp,0(sp)
   19164:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   19168:	0001883a 	nop
   1916c:	e037883a 	mov	sp,fp
   19170:	df000017 	ldw	fp,0(sp)
   19174:	dec00104 	addi	sp,sp,4
   19178:	f800283a 	ret

0001917c <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   1917c:	deffff04 	addi	sp,sp,-4
   19180:	df000015 	stw	fp,0(sp)
   19184:	d839883a 	mov	fp,sp
}
   19188:	0001883a 	nop
   1918c:	e037883a 	mov	sp,fp
   19190:	df000017 	ldw	fp,0(sp)
   19194:	dec00104 	addi	sp,sp,4
   19198:	f800283a 	ret

0001919c <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   1919c:	deffff04 	addi	sp,sp,-4
   191a0:	df000015 	stw	fp,0(sp)
   191a4:	d839883a 	mov	fp,sp
}
   191a8:	0001883a 	nop
   191ac:	e037883a 	mov	sp,fp
   191b0:	df000017 	ldw	fp,0(sp)
   191b4:	dec00104 	addi	sp,sp,4
   191b8:	f800283a 	ret

000191bc <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   191bc:	defffe04 	addi	sp,sp,-8
   191c0:	df000115 	stw	fp,4(sp)
   191c4:	df000104 	addi	fp,sp,4
   191c8:	e13fff15 	stw	r4,-4(fp)
}
   191cc:	0001883a 	nop
   191d0:	e037883a 	mov	sp,fp
   191d4:	df000017 	ldw	fp,0(sp)
   191d8:	dec00104 	addi	sp,sp,4
   191dc:	f800283a 	ret

000191e0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   191e0:	defffb04 	addi	sp,sp,-20
   191e4:	dfc00415 	stw	ra,16(sp)
   191e8:	df000315 	stw	fp,12(sp)
   191ec:	df000304 	addi	fp,sp,12
   191f0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   191f4:	d0a00617 	ldw	r2,-32744(gp)
   191f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   191fc:	00003106 	br	192c4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   19200:	e0bffd17 	ldw	r2,-12(fp)
   19204:	10800217 	ldw	r2,8(r2)
   19208:	1009883a 	mov	r4,r2
   1920c:	0000d440 	call	d44 <strlen>
   19210:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   19214:	e0bffd17 	ldw	r2,-12(fp)
   19218:	10c00217 	ldw	r3,8(r2)
   1921c:	e0bffe17 	ldw	r2,-8(fp)
   19220:	10bfffc4 	addi	r2,r2,-1
   19224:	1885883a 	add	r2,r3,r2
   19228:	10800003 	ldbu	r2,0(r2)
   1922c:	10803fcc 	andi	r2,r2,255
   19230:	1080201c 	xori	r2,r2,128
   19234:	10bfe004 	addi	r2,r2,-128
   19238:	10800bd8 	cmpnei	r2,r2,47
   1923c:	1000031e 	bne	r2,zero,1924c <alt_find_file+0x6c>
    {
      len -= 1;
   19240:	e0bffe17 	ldw	r2,-8(fp)
   19244:	10bfffc4 	addi	r2,r2,-1
   19248:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1924c:	e0bffe17 	ldw	r2,-8(fp)
   19250:	e0ffff17 	ldw	r3,-4(fp)
   19254:	1885883a 	add	r2,r3,r2
   19258:	10800003 	ldbu	r2,0(r2)
   1925c:	10803fcc 	andi	r2,r2,255
   19260:	1080201c 	xori	r2,r2,128
   19264:	10bfe004 	addi	r2,r2,-128
   19268:	10800be0 	cmpeqi	r2,r2,47
   1926c:	1000081e 	bne	r2,zero,19290 <alt_find_file+0xb0>
   19270:	e0bffe17 	ldw	r2,-8(fp)
   19274:	e0ffff17 	ldw	r3,-4(fp)
   19278:	1885883a 	add	r2,r3,r2
   1927c:	10800003 	ldbu	r2,0(r2)
   19280:	10803fcc 	andi	r2,r2,255
   19284:	1080201c 	xori	r2,r2,128
   19288:	10bfe004 	addi	r2,r2,-128
   1928c:	10000a1e 	bne	r2,zero,192b8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   19290:	e0bffd17 	ldw	r2,-12(fp)
   19294:	10800217 	ldw	r2,8(r2)
   19298:	e0fffe17 	ldw	r3,-8(fp)
   1929c:	180d883a 	mov	r6,r3
   192a0:	e17fff17 	ldw	r5,-4(fp)
   192a4:	1009883a 	mov	r4,r2
   192a8:	001953c0 	call	1953c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   192ac:	1000021e 	bne	r2,zero,192b8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   192b0:	e0bffd17 	ldw	r2,-12(fp)
   192b4:	00000706 	br	192d4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   192b8:	e0bffd17 	ldw	r2,-12(fp)
   192bc:	10800017 	ldw	r2,0(r2)
   192c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   192c4:	e0fffd17 	ldw	r3,-12(fp)
   192c8:	d0a00604 	addi	r2,gp,-32744
   192cc:	18bfcc1e 	bne	r3,r2,19200 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019200>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   192d0:	0005883a 	mov	r2,zero
}
   192d4:	e037883a 	mov	sp,fp
   192d8:	dfc00117 	ldw	ra,4(sp)
   192dc:	df000017 	ldw	fp,0(sp)
   192e0:	dec00204 	addi	sp,sp,8
   192e4:	f800283a 	ret

000192e8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   192e8:	defff904 	addi	sp,sp,-28
   192ec:	dfc00615 	stw	ra,24(sp)
   192f0:	df000515 	stw	fp,20(sp)
   192f4:	df000504 	addi	fp,sp,20
   192f8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   192fc:	00bffa04 	movi	r2,-24
   19300:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   19304:	d0a7e117 	ldw	r2,-24700(gp)
   19308:	e0bffd15 	stw	r2,-12(fp)
   1930c:	e03ffe0d 	sth	zero,-8(fp)
   19310:	e0bffe0b 	ldhu	r2,-8(fp)
   19314:	e0fffe84 	addi	r3,fp,-6
   19318:	180d883a 	mov	r6,r3
   1931c:	100b883a 	mov	r5,r2
   19320:	e13ffd17 	ldw	r4,-12(fp)
   19324:	00136580 	call	13658 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   19328:	e03ffb15 	stw	zero,-20(fp)
   1932c:	00001906 	br	19394 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   19330:	008000b4 	movhi	r2,2
   19334:	10ab1304 	addi	r2,r2,-21428
   19338:	e0fffb17 	ldw	r3,-20(fp)
   1933c:	18c00324 	muli	r3,r3,12
   19340:	10c5883a 	add	r2,r2,r3
   19344:	10800017 	ldw	r2,0(r2)
   19348:	10000f1e 	bne	r2,zero,19388 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   1934c:	008000b4 	movhi	r2,2
   19350:	10ab1304 	addi	r2,r2,-21428
   19354:	e0fffb17 	ldw	r3,-20(fp)
   19358:	18c00324 	muli	r3,r3,12
   1935c:	10c5883a 	add	r2,r2,r3
   19360:	e0ffff17 	ldw	r3,-4(fp)
   19364:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   19368:	d0e00a17 	ldw	r3,-32728(gp)
   1936c:	e0bffb17 	ldw	r2,-20(fp)
   19370:	1880020e 	bge	r3,r2,1937c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   19374:	e0bffb17 	ldw	r2,-20(fp)
   19378:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   1937c:	e0bffb17 	ldw	r2,-20(fp)
   19380:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   19384:	00000606 	br	193a0 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   19388:	e0bffb17 	ldw	r2,-20(fp)
   1938c:	10800044 	addi	r2,r2,1
   19390:	e0bffb15 	stw	r2,-20(fp)
   19394:	e0bffb17 	ldw	r2,-20(fp)
   19398:	10800810 	cmplti	r2,r2,32
   1939c:	103fe41e 	bne	r2,zero,19330 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019330>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   193a0:	d0a7e117 	ldw	r2,-24700(gp)
   193a4:	1009883a 	mov	r4,r2
   193a8:	00139d00 	call	139d0 <OSSemPost>

  return rc;
   193ac:	e0bffc17 	ldw	r2,-16(fp)
}
   193b0:	e037883a 	mov	sp,fp
   193b4:	dfc00117 	ldw	ra,4(sp)
   193b8:	df000017 	ldw	fp,0(sp)
   193bc:	dec00204 	addi	sp,sp,8
   193c0:	f800283a 	ret

000193c4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   193c4:	defffb04 	addi	sp,sp,-20
   193c8:	df000415 	stw	fp,16(sp)
   193cc:	df000404 	addi	fp,sp,16
   193d0:	e13ffe15 	stw	r4,-8(fp)
   193d4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   193d8:	e0bfff17 	ldw	r2,-4(fp)
   193dc:	10840070 	cmpltui	r2,r2,4097
   193e0:	1000021e 	bne	r2,zero,193ec <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   193e4:	00840004 	movi	r2,4096
   193e8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   193ec:	e0fffe17 	ldw	r3,-8(fp)
   193f0:	e0bfff17 	ldw	r2,-4(fp)
   193f4:	1885883a 	add	r2,r3,r2
   193f8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   193fc:	e0bffe17 	ldw	r2,-8(fp)
   19400:	e0bffc15 	stw	r2,-16(fp)
   19404:	00000506 	br	1941c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   19408:	e0bffc17 	ldw	r2,-16(fp)
   1940c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   19410:	e0bffc17 	ldw	r2,-16(fp)
   19414:	10800804 	addi	r2,r2,32
   19418:	e0bffc15 	stw	r2,-16(fp)
   1941c:	e0fffc17 	ldw	r3,-16(fp)
   19420:	e0bffd17 	ldw	r2,-12(fp)
   19424:	18bff836 	bltu	r3,r2,19408 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019408>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   19428:	e0bffe17 	ldw	r2,-8(fp)
   1942c:	108007cc 	andi	r2,r2,31
   19430:	10000226 	beq	r2,zero,1943c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   19434:	e0bffc17 	ldw	r2,-16(fp)
   19438:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   1943c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   19440:	0001883a 	nop
   19444:	e037883a 	mov	sp,fp
   19448:	df000017 	ldw	fp,0(sp)
   1944c:	dec00104 	addi	sp,sp,4
   19450:	f800283a 	ret

00019454 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   19454:	defffe04 	addi	sp,sp,-8
   19458:	df000115 	stw	fp,4(sp)
   1945c:	df000104 	addi	fp,sp,4
   19460:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   19464:	e0bfff17 	ldw	r2,-4(fp)
   19468:	10bffe84 	addi	r2,r2,-6
   1946c:	10c00428 	cmpgeui	r3,r2,16
   19470:	18001a1e 	bne	r3,zero,194dc <alt_exception_cause_generated_bad_addr+0x88>
   19474:	100690ba 	slli	r3,r2,2
   19478:	008000b4 	movhi	r2,2
   1947c:	10a52304 	addi	r2,r2,-27508
   19480:	1885883a 	add	r2,r3,r2
   19484:	10800017 	ldw	r2,0(r2)
   19488:	1000683a 	jmp	r2
   1948c:	000194cc 	andi	zero,zero,1619
   19490:	000194cc 	andi	zero,zero,1619
   19494:	000194dc 	xori	zero,zero,1619
   19498:	000194dc 	xori	zero,zero,1619
   1949c:	000194dc 	xori	zero,zero,1619
   194a0:	000194cc 	andi	zero,zero,1619
   194a4:	000194d4 	movui	zero,1619
   194a8:	000194dc 	xori	zero,zero,1619
   194ac:	000194cc 	andi	zero,zero,1619
   194b0:	000194cc 	andi	zero,zero,1619
   194b4:	000194dc 	xori	zero,zero,1619
   194b8:	000194cc 	andi	zero,zero,1619
   194bc:	000194d4 	movui	zero,1619
   194c0:	000194dc 	xori	zero,zero,1619
   194c4:	000194dc 	xori	zero,zero,1619
   194c8:	000194cc 	andi	zero,zero,1619
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   194cc:	00800044 	movi	r2,1
   194d0:	00000306 	br	194e0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   194d4:	0005883a 	mov	r2,zero
   194d8:	00000106 	br	194e0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   194dc:	0005883a 	mov	r2,zero
  }
}
   194e0:	e037883a 	mov	sp,fp
   194e4:	df000017 	ldw	fp,0(sp)
   194e8:	dec00104 	addi	sp,sp,4
   194ec:	f800283a 	ret

000194f0 <atexit>:
   194f0:	200b883a 	mov	r5,r4
   194f4:	000f883a 	mov	r7,zero
   194f8:	000d883a 	mov	r6,zero
   194fc:	0009883a 	mov	r4,zero
   19500:	00195b81 	jmpi	195b8 <__register_exitproc>

00019504 <exit>:
   19504:	defffe04 	addi	sp,sp,-8
   19508:	000b883a 	mov	r5,zero
   1950c:	dc000015 	stw	r16,0(sp)
   19510:	dfc00115 	stw	ra,4(sp)
   19514:	2021883a 	mov	r16,r4
   19518:	00196d00 	call	196d0 <__call_exitprocs>
   1951c:	008000b4 	movhi	r2,2
   19520:	10b05104 	addi	r2,r2,-16060
   19524:	11000017 	ldw	r4,0(r2)
   19528:	20800f17 	ldw	r2,60(r4)
   1952c:	10000126 	beq	r2,zero,19534 <exit+0x30>
   19530:	103ee83a 	callr	r2
   19534:	8009883a 	mov	r4,r16
   19538:	00198500 	call	19850 <_exit>

0001953c <memcmp>:
   1953c:	01c000c4 	movi	r7,3
   19540:	3980192e 	bgeu	r7,r6,195a8 <memcmp+0x6c>
   19544:	2144b03a 	or	r2,r4,r5
   19548:	11c4703a 	and	r2,r2,r7
   1954c:	10000f26 	beq	r2,zero,1958c <memcmp+0x50>
   19550:	20800003 	ldbu	r2,0(r4)
   19554:	28c00003 	ldbu	r3,0(r5)
   19558:	10c0151e 	bne	r2,r3,195b0 <memcmp+0x74>
   1955c:	31bfff84 	addi	r6,r6,-2
   19560:	01ffffc4 	movi	r7,-1
   19564:	00000406 	br	19578 <memcmp+0x3c>
   19568:	20800003 	ldbu	r2,0(r4)
   1956c:	28c00003 	ldbu	r3,0(r5)
   19570:	31bfffc4 	addi	r6,r6,-1
   19574:	10c00e1e 	bne	r2,r3,195b0 <memcmp+0x74>
   19578:	21000044 	addi	r4,r4,1
   1957c:	29400044 	addi	r5,r5,1
   19580:	31fff91e 	bne	r6,r7,19568 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019568>
   19584:	0005883a 	mov	r2,zero
   19588:	f800283a 	ret
   1958c:	20c00017 	ldw	r3,0(r4)
   19590:	28800017 	ldw	r2,0(r5)
   19594:	18bfee1e 	bne	r3,r2,19550 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019550>
   19598:	31bfff04 	addi	r6,r6,-4
   1959c:	21000104 	addi	r4,r4,4
   195a0:	29400104 	addi	r5,r5,4
   195a4:	39bff936 	bltu	r7,r6,1958c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701958c>
   195a8:	303fe91e 	bne	r6,zero,19550 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019550>
   195ac:	003ff506 	br	19584 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019584>
   195b0:	10c5c83a 	sub	r2,r2,r3
   195b4:	f800283a 	ret

000195b8 <__register_exitproc>:
   195b8:	defffa04 	addi	sp,sp,-24
   195bc:	dc000315 	stw	r16,12(sp)
   195c0:	040000b4 	movhi	r16,2
   195c4:	84305104 	addi	r16,r16,-16060
   195c8:	80c00017 	ldw	r3,0(r16)
   195cc:	dc400415 	stw	r17,16(sp)
   195d0:	dfc00515 	stw	ra,20(sp)
   195d4:	18805217 	ldw	r2,328(r3)
   195d8:	2023883a 	mov	r17,r4
   195dc:	10003726 	beq	r2,zero,196bc <__register_exitproc+0x104>
   195e0:	10c00117 	ldw	r3,4(r2)
   195e4:	010007c4 	movi	r4,31
   195e8:	20c00e16 	blt	r4,r3,19624 <__register_exitproc+0x6c>
   195ec:	1a000044 	addi	r8,r3,1
   195f0:	8800221e 	bne	r17,zero,1967c <__register_exitproc+0xc4>
   195f4:	18c00084 	addi	r3,r3,2
   195f8:	18c7883a 	add	r3,r3,r3
   195fc:	18c7883a 	add	r3,r3,r3
   19600:	12000115 	stw	r8,4(r2)
   19604:	10c7883a 	add	r3,r2,r3
   19608:	19400015 	stw	r5,0(r3)
   1960c:	0005883a 	mov	r2,zero
   19610:	dfc00517 	ldw	ra,20(sp)
   19614:	dc400417 	ldw	r17,16(sp)
   19618:	dc000317 	ldw	r16,12(sp)
   1961c:	dec00604 	addi	sp,sp,24
   19620:	f800283a 	ret
   19624:	00800034 	movhi	r2,0
   19628:	10800004 	addi	r2,r2,0
   1962c:	10002626 	beq	r2,zero,196c8 <__register_exitproc+0x110>
   19630:	01006404 	movi	r4,400
   19634:	d9400015 	stw	r5,0(sp)
   19638:	d9800115 	stw	r6,4(sp)
   1963c:	d9c00215 	stw	r7,8(sp)
   19640:	00000000 	call	0 <__alt_mem_SDRAM>
   19644:	d9400017 	ldw	r5,0(sp)
   19648:	d9800117 	ldw	r6,4(sp)
   1964c:	d9c00217 	ldw	r7,8(sp)
   19650:	10001d26 	beq	r2,zero,196c8 <__register_exitproc+0x110>
   19654:	81000017 	ldw	r4,0(r16)
   19658:	10000115 	stw	zero,4(r2)
   1965c:	02000044 	movi	r8,1
   19660:	22405217 	ldw	r9,328(r4)
   19664:	0007883a 	mov	r3,zero
   19668:	12400015 	stw	r9,0(r2)
   1966c:	20805215 	stw	r2,328(r4)
   19670:	10006215 	stw	zero,392(r2)
   19674:	10006315 	stw	zero,396(r2)
   19678:	883fde26 	beq	r17,zero,195f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70195f4>
   1967c:	18c9883a 	add	r4,r3,r3
   19680:	2109883a 	add	r4,r4,r4
   19684:	1109883a 	add	r4,r2,r4
   19688:	21802215 	stw	r6,136(r4)
   1968c:	01800044 	movi	r6,1
   19690:	12406217 	ldw	r9,392(r2)
   19694:	30cc983a 	sll	r6,r6,r3
   19698:	4992b03a 	or	r9,r9,r6
   1969c:	12406215 	stw	r9,392(r2)
   196a0:	21c04215 	stw	r7,264(r4)
   196a4:	01000084 	movi	r4,2
   196a8:	893fd21e 	bne	r17,r4,195f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70195f4>
   196ac:	11006317 	ldw	r4,396(r2)
   196b0:	218cb03a 	or	r6,r4,r6
   196b4:	11806315 	stw	r6,396(r2)
   196b8:	003fce06 	br	195f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70195f4>
   196bc:	18805304 	addi	r2,r3,332
   196c0:	18805215 	stw	r2,328(r3)
   196c4:	003fc606 	br	195e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70195e0>
   196c8:	00bfffc4 	movi	r2,-1
   196cc:	003fd006 	br	19610 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019610>

000196d0 <__call_exitprocs>:
   196d0:	defff504 	addi	sp,sp,-44
   196d4:	df000915 	stw	fp,36(sp)
   196d8:	dd400615 	stw	r21,24(sp)
   196dc:	dc800315 	stw	r18,12(sp)
   196e0:	dfc00a15 	stw	ra,40(sp)
   196e4:	ddc00815 	stw	r23,32(sp)
   196e8:	dd800715 	stw	r22,28(sp)
   196ec:	dd000515 	stw	r20,20(sp)
   196f0:	dcc00415 	stw	r19,16(sp)
   196f4:	dc400215 	stw	r17,8(sp)
   196f8:	dc000115 	stw	r16,4(sp)
   196fc:	d9000015 	stw	r4,0(sp)
   19700:	2839883a 	mov	fp,r5
   19704:	04800044 	movi	r18,1
   19708:	057fffc4 	movi	r21,-1
   1970c:	008000b4 	movhi	r2,2
   19710:	10b05104 	addi	r2,r2,-16060
   19714:	12000017 	ldw	r8,0(r2)
   19718:	45005217 	ldw	r20,328(r8)
   1971c:	44c05204 	addi	r19,r8,328
   19720:	a0001c26 	beq	r20,zero,19794 <__call_exitprocs+0xc4>
   19724:	a0800117 	ldw	r2,4(r20)
   19728:	15ffffc4 	addi	r23,r2,-1
   1972c:	b8000d16 	blt	r23,zero,19764 <__call_exitprocs+0x94>
   19730:	14000044 	addi	r16,r2,1
   19734:	8421883a 	add	r16,r16,r16
   19738:	8421883a 	add	r16,r16,r16
   1973c:	84402004 	addi	r17,r16,128
   19740:	a463883a 	add	r17,r20,r17
   19744:	a421883a 	add	r16,r20,r16
   19748:	e0001e26 	beq	fp,zero,197c4 <__call_exitprocs+0xf4>
   1974c:	80804017 	ldw	r2,256(r16)
   19750:	e0801c26 	beq	fp,r2,197c4 <__call_exitprocs+0xf4>
   19754:	bdffffc4 	addi	r23,r23,-1
   19758:	843fff04 	addi	r16,r16,-4
   1975c:	8c7fff04 	addi	r17,r17,-4
   19760:	bd7ff91e 	bne	r23,r21,19748 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019748>
   19764:	00800034 	movhi	r2,0
   19768:	10800004 	addi	r2,r2,0
   1976c:	10000926 	beq	r2,zero,19794 <__call_exitprocs+0xc4>
   19770:	a0800117 	ldw	r2,4(r20)
   19774:	1000301e 	bne	r2,zero,19838 <__call_exitprocs+0x168>
   19778:	a0800017 	ldw	r2,0(r20)
   1977c:	10003226 	beq	r2,zero,19848 <__call_exitprocs+0x178>
   19780:	a009883a 	mov	r4,r20
   19784:	98800015 	stw	r2,0(r19)
   19788:	00000000 	call	0 <__alt_mem_SDRAM>
   1978c:	9d000017 	ldw	r20,0(r19)
   19790:	a03fe41e 	bne	r20,zero,19724 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019724>
   19794:	dfc00a17 	ldw	ra,40(sp)
   19798:	df000917 	ldw	fp,36(sp)
   1979c:	ddc00817 	ldw	r23,32(sp)
   197a0:	dd800717 	ldw	r22,28(sp)
   197a4:	dd400617 	ldw	r21,24(sp)
   197a8:	dd000517 	ldw	r20,20(sp)
   197ac:	dcc00417 	ldw	r19,16(sp)
   197b0:	dc800317 	ldw	r18,12(sp)
   197b4:	dc400217 	ldw	r17,8(sp)
   197b8:	dc000117 	ldw	r16,4(sp)
   197bc:	dec00b04 	addi	sp,sp,44
   197c0:	f800283a 	ret
   197c4:	a0800117 	ldw	r2,4(r20)
   197c8:	80c00017 	ldw	r3,0(r16)
   197cc:	10bfffc4 	addi	r2,r2,-1
   197d0:	15c01426 	beq	r2,r23,19824 <__call_exitprocs+0x154>
   197d4:	80000015 	stw	zero,0(r16)
   197d8:	183fde26 	beq	r3,zero,19754 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019754>
   197dc:	95c8983a 	sll	r4,r18,r23
   197e0:	a0806217 	ldw	r2,392(r20)
   197e4:	a5800117 	ldw	r22,4(r20)
   197e8:	2084703a 	and	r2,r4,r2
   197ec:	10000b26 	beq	r2,zero,1981c <__call_exitprocs+0x14c>
   197f0:	a0806317 	ldw	r2,396(r20)
   197f4:	2088703a 	and	r4,r4,r2
   197f8:	20000c1e 	bne	r4,zero,1982c <__call_exitprocs+0x15c>
   197fc:	89400017 	ldw	r5,0(r17)
   19800:	d9000017 	ldw	r4,0(sp)
   19804:	183ee83a 	callr	r3
   19808:	a0800117 	ldw	r2,4(r20)
   1980c:	15bfbf1e 	bne	r2,r22,1970c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701970c>
   19810:	98800017 	ldw	r2,0(r19)
   19814:	153fcf26 	beq	r2,r20,19754 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019754>
   19818:	003fbc06 	br	1970c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701970c>
   1981c:	183ee83a 	callr	r3
   19820:	003ff906 	br	19808 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019808>
   19824:	a5c00115 	stw	r23,4(r20)
   19828:	003feb06 	br	197d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70197d8>
   1982c:	89000017 	ldw	r4,0(r17)
   19830:	183ee83a 	callr	r3
   19834:	003ff406 	br	19808 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019808>
   19838:	a0800017 	ldw	r2,0(r20)
   1983c:	a027883a 	mov	r19,r20
   19840:	1029883a 	mov	r20,r2
   19844:	003fb606 	br	19720 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019720>
   19848:	0005883a 	mov	r2,zero
   1984c:	003ffb06 	br	1983c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701983c>

00019850 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   19850:	defffd04 	addi	sp,sp,-12
   19854:	df000215 	stw	fp,8(sp)
   19858:	df000204 	addi	fp,sp,8
   1985c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   19860:	d027e945 	stb	zero,-24667(gp)
   19864:	e0bfff17 	ldw	r2,-4(fp)
   19868:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   1986c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   19870:	10000226 	beq	r2,zero,1987c <_exit+0x2c>
    ALT_SIM_FAIL();
   19874:	002af070 	cmpltui	zero,zero,43969
   19878:	00000106 	br	19880 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   1987c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   19880:	003fff06 	br	19880 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019880>
